diff --git a/deflate.c b/deflate.c
index fb2d5f1..dbee6d5 100644
--- a/deflate.c
+++ b/deflate.c
@@ -554,7 +554,7 @@ int ZEXPORT deflateTune(z_streamp strm, int good_length, int max_lazy,
  * upper bound of about 14% expansion does not seem onerous for output buffer
  * allocation.
  */
-uint64_t ZEXPORT deflateBound(z_streamp strm, uint64_t sourceLen)
+uLong ZEXPORT deflateBound(z_streamp strm, uLong sourceLen)
 {
     deflate_state *s;
     uint64_t complen, wraplen;
diff --git a/test/example.c b/test/example.c
index 35221d4..f9d46c7 100644
--- a/test/example.c
+++ b/test/example.c
@@ -345,7 +345,7 @@ void test_large_inflate(Byte *compr, uLong comprLen, Byte *uncompr,
     CHECK_ERR(err, "inflateEnd");
 
     if (d_stream.total_out != 2*uncomprLen + comprLen/2) {
-        fprintf(stderr, "bad large inflate: %lld\n", d_stream.total_out);
+        fprintf(stderr, "bad large inflate: %ld\n", d_stream.total_out);
         exit(1);
     } else {
         printf("large_inflate(): OK\n");
@@ -528,7 +528,7 @@ int main(int argc, char *argv[]) {
                 zlibVersion());
     }
 
-    printf("zlib version %s = 0x%04x, compile flags = 0x%llx\n",
+    printf("zlib version %s = 0x%04x, compile flags = 0x%lx\n",
             ZLIB_VERSION, ZLIB_VERNUM, zlibCompileFlags());
 
     compr    = (Byte*)calloc((uInt)comprLen, 1);
diff --git a/zconf.h b/zconf.h
index 741f748..01c8463 100644
--- a/zconf.h
+++ b/zconf.h
@@ -365,10 +365,10 @@
 #endif
 
 #if !defined(__MACTYPES__)
-typedef uint8_t    Byte;  /* 8 bits */
+typedef unsigned char  Byte;  /* 8 bits */
 #endif
-typedef uint32_t   uInt;  /* 32 bits */
-typedef uint64_t   uLong; /* 64 bits */
+typedef unsigned int   uInt;  /* 16 bits or more */
+typedef unsigned long  uLong; /* 32 bits or more */
 
 #ifdef SMALL_MEDIUM
    /* Borland C/C++ and some old MSC versions ignore FAR inside typedef */
diff --git a/zconf.h.cmakein b/zconf.h.cmakein
index 741f748..6b04b59 100644
--- a/zconf.h.cmakein
+++ b/zconf.h.cmakein
@@ -365,10 +365,10 @@
 #endif
 
 #if !defined(__MACTYPES__)
-typedef uint8_t    Byte;  /* 8 bits */
+typedef unsigned char    Byte;  /* 8 bits */
 #endif
-typedef uint32_t   uInt;  /* 32 bits */
-typedef uint64_t   uLong; /* 64 bits */
+typedef unsigned int   uInt;  /* 32 bits */
+typedef unsigned long   uLong; /* 64 bits */
 
 #ifdef SMALL_MEDIUM
    /* Borland C/C++ and some old MSC versions ignore FAR inside typedef */
diff --git a/zconf.h.in b/zconf.h.in
index 741f748..01c8463 100644
--- a/zconf.h.in
+++ b/zconf.h.in
@@ -365,10 +365,10 @@
 #endif
 
 #if !defined(__MACTYPES__)
-typedef uint8_t    Byte;  /* 8 bits */
+typedef unsigned char  Byte;  /* 8 bits */
 #endif
-typedef uint32_t   uInt;  /* 32 bits */
-typedef uint64_t   uLong; /* 64 bits */
+typedef unsigned int   uInt;  /* 16 bits or more */
+typedef unsigned long  uLong; /* 32 bits or more */
 
 #ifdef SMALL_MEDIUM
    /* Borland C/C++ and some old MSC versions ignore FAR inside typedef */
diff --git a/zlib.h b/zlib.h
index 81a55bb..fd66831 100644
--- a/zlib.h
+++ b/zlib.h
@@ -741,8 +741,8 @@ ZEXTERN int ZEXPORT deflateTune(z_streamp strm,
    returns Z_OK on success, or Z_STREAM_ERROR for an invalid deflate stream.
  */
 
-ZEXTERN uint64_t ZEXPORT deflateBound(z_streamp strm,
-                                       uint64_t sourceLen);
+ZEXTERN uLong ZEXPORT deflateBound(z_streamp strm,
+                                       uLong sourceLen);
 /*
      deflateBound() returns an upper bound on the compressed size after
    deflation of sourceLen bytes.  It must be called after deflateInit() or
