# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               xcodeversion 1.0
PortGroup               LTO 1.0

name                    zlib
version                 1.2.11
categories              archivers
maintainers             ryandesign openmaintainer
license                 zlib
homepage                http://www.zlib.net/
platforms               darwin freebsd

description             zlib lossless data-compression library

long_description        zlib is designed to be a free, general-purpose, \
                        legally unencumbered, lossless data-compression \
                        library for use on virtually any computer hardware \
                        and operating system.

master_sites            ${homepage}
use_xz                  yes

checksums               rmd160  3f3ecd35efa6d41ba7b90e5f6e872e2ee8e42044 \
                        sha256  4ff941449631ace0d4d203e3483be9dbc9da454084111f97ea0a2114e19bf066

minimum_xcodeversions   {8 2.4.1 9 3.1}

configure.universal_args

use_parallel_build      yes

test.run                yes

if {![variant_isset ng] && ![variant_isset cloudflare]} {
    # don't muck with this setting for the +ng variant (or it will destroot directly into ${prefix})
    destroot.destdir    prefix=${destroot}${prefix}
}

post-destroot {
    platform darwin {
        foreach {neededfile} "${prefix}/lib/libz.dylib" {
            if {![file exists ${destroot}${neededfile}]} {
                ui_error "${neededfile} is not in the destroot. Please clean ${name} and try again."
                return -code error "missing ${neededfile} in destroot"
            }
        }
    }

    set docdir ${prefix}/share/doc/${name}
    xinstall -d ${destroot}${docdir}
    if {[variant_isset ng]} {
        xinstall -m 0644 -W ${worksrcpath} README.md ${destroot}${docdir}
    } else {
        xinstall -m 0644 -W ${worksrcpath} ChangeLog FAQ README zlib.3.pdf ${destroot}${docdir}
        set examplesdir ${prefix}/share/examples/${name}
        xinstall -d ${destroot}${examplesdir}
        xinstall -m 0644 {*}[glob ${worksrcpath}/example{.c,s/*}] ${destroot}${examplesdir}
    }
}

variant ng conflicts cloudflare description {provides the "Next Generation" zlib-ng project} {}
if {[variant_isset ng]} {
    PortGroup           github 1.0
    PortGroup           cmake 1.1
    PortGroup           muniversal 1.0
    long_description-append This variant provides the \"Next Generation\" zlib-ng library\; \
                        zlib version v1.2.11 with \"NG\" additions v2.0.2 . Built in \"COMPAT\" \
                        mode in order to provide a drop-in replacement.
    #git.branch          75e76eebeb08dccea44a1d9933699f7f9a0a97ea
    github.setup        Dead2 zlib-ng 62b269b4a5f4502d6dc03d73bb5b552e80066885
    fetch.type          git
    name                zlib
    version             2.0.2.26
    supported_archs     i386 x86_64 arm64
    distname            zlib-ng
    worksrcdir          ${distname}
    depends_build-append \
                        port:cpuid
    patch.pre_args      -Np1

    cmake.save_configure_cmd "install log"
    configure.args-append \
                        -DZLIB_COMPAT:BOOL=ON \
                        -DWITH_GZFILEOP:BOOL=ON \
                        -DZLIB_DUAL_LINK=OFF \
                        -DINSTALL_UTILS=ON \
                        -DWITH_FUZZERS=ON
    pre-configure {
        if {[catch {system "${prefix}/bin/cpuid | fgrep -i sse4.2 > /dev/null"} has_sse4]} {
            ui_warn "Your CPU doesn't have the SSE4.2 instruction set: ${has_sse4}"
#            configure.optflags-append \
#                        -mno-sse4
        }
        if {[catch {system "${prefix}/bin/cpuid | fgrep -i pclmul"} has_pclmul]} {
            ui_warn "Your CPU or build architecture doesn't support the PCLMUL code"
#            configure.optflags-append \
#                        -mno-pclmul
        }
    }
}

global cloudflare-commit
variant cloudflare conflicts ng description {Applies CloudFlare's patches to use SSE for accelerated compression. \
                            Note it is not 100% certain the zlib license continues to apply to this variant!} {}
if {[variant_isset cloudflare]} {
    PortGroup               github 1.0
    PortGroup               muniversal 1.0
    PortGroup               cmake 1.1
    long_description-append This variant has the CloudFlare patches for SSE accelerated compression
    # This version contains a GPL'ed assembly file which may be incorporated. Just add GPL2+ to the license info.
    license-append          GPL-2+
    global cloudflare-commit
    # set cloudflare-commit   c9479d13ee1327b0c0ba6a2bd173619f08da5c91
    set cloudflare-commit   7aa510344e06fecd6fe09195ac22e9a424ceb660
    github.setup            cloudflare zlib ${cloudflare-commit}
    fetch.type              git
    version                 1.2.8.170
    supported_archs         i386 x86_64 arm64
    distname                zlib-cloudflare
    worksrcdir              ${distname}
    depends_build           port:cpuid
    if {[catch {system "${prefix}/bin/cpuid | fgrep -i sse4.2 > /dev/null"} has_sse4]} {
        set has_sse4 no
    } else {
        set has_sse4 yes
#         configure.optflags-append \
#                             -msse4
    }
# SSE4.2 is no longer a requirement (with the CMake build system??)
#     pre-fetch {
#         if {!${has_sse4}} {
#             ui_error "Error checking for the SSE4.2 instruction set: ${has_sse4}"
#             return -code error "Your CPU doesn't seem to have the SSE4.2 instruction set: please install the regular zlib port"
#         }
#     }
    patch.pre_args          -Np1
    patchfiles              cloudflare/patch-restore-uLong-API.diff \
                            cloudflare/patch-build-staticlib-too.diff

    cmake.save_configure_cmd "install log"
    configure.args-append   -DBUILD_SHARED_LIBS=ON \
                            -DBUILD_EXAMPLES=ON

    if {${build_arch} eq "i386" || [catch {system "${prefix}/bin/cpuid | fgrep -i pclmul"} has_pclmul]} {
        set has_pclmul no
    } else {
        set has_pclmul yes
    }
#     if {!${has_pclmul}} {
#         ui_warn "Your CPU or build architecture doesn't support the PCLMUL code"
#         configure.cflags-append             "-no-pclmul -UHAS_PCLMUL -DHAS_SSE42"
#     }
#     if {[variant_isset universal]} {
#         if {${has_pclmul}} {
#             # only on 64bit!
#             set merger_configure_cflags(i386)   "-mno-pclmul -UHAS_PCLMUL -DHAS_SSE42"
#             set merger_configure_cflags(x86_64) "-mpclmul"
#         }
#         set merger_configure_args(i386)     "--target=i386"
#         set merger_configure_args(x86_64)   "--target=x86_64"
#     }

    post-destroot {
        set docdir ${prefix}/share/doc/${name}
        xinstall -d ${destroot}${docdir}
        xinstall -m 0644 -W ${filespath} cloudflare/CloudFlare.txt ${destroot}${docdir}
        reinplace "s|@@HOST@@|[exec hostname]|g" ${destroot}${docdir}/CloudFlare.txt
        reinplace "s|@@COMMIT@@|${cloudflare-commit}|g" ${destroot}${docdir}/CloudFlare.txt
    }
}

livecheck.type          regex
livecheck.url           ${homepage}
livecheck.regex         ${name}-(\[0-9.\]+)\\.tar

# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;
