diff --git a/afsctool.c b/afsctool.c
index 86ac338..b695c80 100644
--- a/afsctool.c
+++ b/afsctool.c
@@ -834,7 +834,7 @@ void decompressFile(const char *inFile, struct stat *inFileInfo)
 	
 	if (fwrite(outBuf, filesize, 1, in) != 1)
 	{
-        fprintf(stderr, "%s: Error writing to file (%lld bytes; %s)\n", inFile, strerror(errno));
+        fprintf(stderr, "%s: Error writing to file (%lld bytes; %s)\n", inFile, filesize, strerror(errno));
 		fclose(in);
 		if (chflags(inFile, UF_COMPRESSED | inFileInfo->st_flags) < 0)
 		{
@@ -1566,13 +1566,13 @@ void process_folder(FTS *currfolder, struct folder_info *folderinfo)
 void printUsage()
 {
 	printf("afsctool 1.6.4 (build 34)\n"
-		   "Report if file is HFS+ compressed:                        afsctool [-v] file\n"
-		   "Report if folder contains HFS+ compressed files:          afsctool [-fvvi] [-t <ContentType/Extension>] folder\n"
+		   "Report if file is HFS+ compressed:                        afsctool [-v] file[s]\n"
+		   "Report if folder contains HFS+ compressed files:          afsctool [-fvvi] [-t <ContentType/Extension>] folder[s]\n"
 		   "List HFS+ compressed files in folder:                     afsctool -l[fvv] folder\n"
-		   "Decompress HFS+ compressed file or folder:                afsctool -d[i] [-t <ContentType>] file/folder\n"
-		   "Create archive file with compressed data in data fork:    afsctool -a[d] src dst\n"
-		   "Extract HFS+ compression archive to file:                 afsctool -x[d] src dst\n"
-		   "Apply HFS+ compression to file or folder:                 afsctool -c[nlfvvi] [-<level>] [-m <size>] [-s <percentage>] [-t <ContentType>] file/folder\n\n"
+		   "Decompress HFS+ compressed file or folder:                afsctool -d[i] [-t <ContentType>] file[s]/folder[s]\n"
+		   "Create archive file with compressed data in data fork:    afsctool -a[d] src dst [... srcN dstN]\n"
+		   "Extract HFS+ compression archive to file:                 afsctool -x[d] src dst [... srcN dstN]\n"
+		   "Apply HFS+ compression to file or folder:                 afsctool -c[nlfvvi] [-<level>] [-m <size>] [-s <percentage>] [-t <ContentType>] file[s]/folder[s]\n\n"
 		   "Options:\n"
 		   "-v Increase verbosity level\n"
 		   "-f Detect hard links\n"
@@ -1781,523 +1781,541 @@ int main (int argc, const char * argv[])
 		printUsage();
 		exit(EINVAL);
 	}
-	else if (createfile || extractfile)
-	{
-		if (argv[i+1][0] != '/')
-		{
-			cwd = getcwd(NULL, 0);
-			if (cwd == NULL)
-			{
-				fprintf(stderr, "Unable to get PWD, exiting...\n");
-				exit(EACCES);
-			}
-			free_dst = TRUE;
-			fullpathdst = (char *) malloc(strlen(cwd) + strlen(argv[i+1]) + 2);
-			sprintf(fullpathdst, "%s/%s", cwd, argv[i+1]);
-			free(cwd);
-		}
-		else
-			fullpathdst = (char *) argv[i+1];
-	}
-	
-	if (argv[i][0] != '/')
-	{
-		cwd = getcwd(NULL, 0);
-		if (cwd == NULL)
-		{
-			fprintf(stderr, "Unable to get PWD, exiting...\n");
-			exit(EACCES);
-		}
-		free_src = TRUE;
-		fullpath = (char *) malloc(strlen(cwd) + strlen(argv[i]) + 2);
-		sprintf(fullpath, "%s/%s", cwd, argv[i]);
-		free(cwd);
-	}
-	else
-		fullpath = (char *) argv[i];
-	
-	if (lstat(fullpath, &fileinfo) < 0)
-	{
-		fprintf(stderr, "%s: %s\n", fullpath, strerror(errno));
-		return -1;
-	}
-	
-	argIsFile = ((fileinfo.st_mode & S_IFDIR) == 0);
-	
-	if (!argIsFile)
-	{
-		folderarray[0] = fullpath;
-		folderarray[1] = NULL;
-	}
-	
-	if ((createfile || extractfile) && lstat(fullpathdst, &dstfileinfo) >= 0)
-	{
-		dstIsFile = ((dstfileinfo.st_mode & S_IFDIR) == 0);
-		fprintf(stderr, "%s: %s already exists at this path\n", fullpath, dstIsFile ? "File" : "Folder");
-		return -1;
-	}
-	
-	if (applycomp && argIsFile)
-	{
-		compressFile(fullpath, &fileinfo, maxSize, compressionlevel, allowLargeBlocks, minSavings, fileCheck);
-		lstat(fullpath, &fileinfo);
-	}
-	
-	if (createfile)
-	{
-		if (!argIsFile)
-		{
-			fprintf(stderr, "%s: File required, this is a folder\n", fullpath);
-			return -1;
-		}
-		else if ((fileinfo.st_flags & UF_COMPRESSED) == 0)
-		{
-			fprintf(stderr, "%s: HFS+ compressed file required, this file is not HFS+ compressed\n", fullpath);
-			return -1;
-		}
-		
-		afscFile = fopen(fullpathdst, "w");
-		if (afscFile == NULL)
-		{
-			fprintf(stderr, "%s: %s\n", fullpathdst, strerror(errno));
-			return -1;
-		}
-		else
-		{
-			fprintf(afscFile, "afsc");
-			big16 = EndianU16_NtoB(fileinfo.st_mode);
-			if (fwrite(&big16, sizeof(mode_t), 1, afscFile) != 1)
-			{
-				fprintf(stderr, "%s: Error writing file\n", fullpathdst);
-				return -1;
-			}
-			xattrnamesize = listxattr(fullpath, NULL, 0, XATTR_SHOWCOMPRESSION | XATTR_NOFOLLOW);
-			
-			if (xattrnamesize > 0)
-			{
-				xattrnames = (char *) malloc(xattrnamesize);
-				if (xattrnames == NULL)
-				{
-					fprintf(stderr, "malloc error, unable to get file information\n");
-					return -1;
-				}
-				if ((xattrnamesize = listxattr(fullpath, xattrnames, xattrnamesize, XATTR_SHOWCOMPRESSION | XATTR_NOFOLLOW)) <= 0)
-				{
-					fprintf(stderr, "listxattr: %s\n", strerror(errno));
-					free(xattrnames);
-					return -1;
-				}
-				for (curr_attr = xattrnames; curr_attr < xattrnames + xattrnamesize; curr_attr += strlen(curr_attr) + 1)
-				{
-					xattrsize = getxattr(fullpath, curr_attr, NULL, 0, 0, XATTR_SHOWCOMPRESSION | XATTR_NOFOLLOW);
-					if (xattrsize < 0)
-					{
-						fprintf(stderr, "getxattr: %s\n", strerror(errno));
-						free(xattrnames);
-						return -1;
-					}
-					if (((strcmp(curr_attr, "com.apple.ResourceFork") == 0 && strlen(curr_attr) == 22) ||
-						(strcmp(curr_attr, "com.apple.decmpfs") == 0 && strlen(curr_attr) == 17)) &&
-						xattrsize != 0)
-					{
-						attr_buf = malloc(xattrsize);
-						if (attr_buf == NULL)
-						{
-							fprintf(stderr, "malloc error, unable to get file information\n");
-							return -1;
-						}
-						xattrPos = 0;
-						do
-						{
-							getxattrret = getxattr(fullpath, curr_attr, attr_buf + xattrPos, xattrsize - xattrPos, xattrPos, XATTR_SHOWCOMPRESSION | XATTR_NOFOLLOW);
-							if (getxattrret < 0)
-							{
-								fprintf(stderr, "getxattr: %s\n", strerror(errno));
-								free(xattrnames);
-								return -1;
-							}
-							xattrPos += getxattrret;
-						} while (xattrPos < xattrsize && getxattrret > 0);
-						fprintf(afscFile, "%s", curr_attr);
-						putc('\0', afscFile);
-						big64 = EndianU64_NtoB(xattrsize);
-						if (fwrite(&big64, sizeof(ssize_t), 1, afscFile) != 1 ||
-							fwrite(attr_buf, xattrsize, 1, afscFile) != 1)
-						{
-							fprintf(stderr, "%s: Error writing file\n", fullpathdst);
-							return -1;
-						}
-						free(attr_buf);
-					}
-				}
-				free(xattrnames);
-			}
-			fclose(afscFile);
-			if (decomp)
-				decompressFile(fullpath, &fileinfo);
-		}
-	}
-	else if (extractfile)
-	{
-		if (!argIsFile)
-		{
-			fprintf(stderr, "%s: File required, this is a folder\n", fullpath);
-			return -1;
-		}
-		afscFile = fopen(fullpath, "r");
-		if (afscFile == NULL)
-		{
-			fprintf(stderr, "%s: %s\n", fullpathdst, strerror(errno));
-			return -1;
-		}
-		else
-		{
-			if (fread(header, 4, 1, afscFile) != 1)
-			{
-				fprintf(stderr, "%s: Error reading file\n", fullpath);
-				return -1;
-			}
-			if (header[0] != 'a' ||
-				header[1] != 'f' ||
-				header[2] != 's' ||
-				header[3] != 'c')
-			{
-				fprintf(stderr, "%s: Invalid header\n", fullpath);
-				return -1;
-			}
-			outFile = fopen(fullpathdst, "w");
-			if (outFile == NULL)
-			{
-				fprintf(stderr, "%s: %s\n", fullpathdst, strerror(errno));
-				return -1;
-			}
-			else
-			{
-				fclose(outFile);
-				if (fread(&outFileMode, sizeof(mode_t), 1, afscFile) != 1)
-				{
-					fprintf(stderr, "%s: Error reading file\n", fullpath);
-					return -1;
-				}
-				outFileMode = EndianU16_BtoN(outFileMode);
-				xattrnames = (char *) malloc(23);
-				while (1)
-				{
-					for (j = 0; j < 23; j++)
-					{
-						xattrnames[j] = getc(afscFile);
-						if (xattrnames[j] == '\0') break;
-						if (xattrnames[j] == EOF) goto decomp_check;
-					}
-					if (j == 23 ||
-						fread(&xattrsize, sizeof(ssize_t), 1, afscFile) != 1)
-					{
-						fprintf(stderr, "%s: Error reading file\n", fullpath);
-						return -1;
-					}
-					xattrsize = EndianU64_BtoN(xattrsize);
-					attr_buf = malloc(xattrsize);
-					if (attr_buf == NULL)
-					{
-						fprintf(stderr, "malloc error, unable to set file information\n");
-						return -1;
-					}
-					if (fread(attr_buf, xattrsize, 1, afscFile) != 1)
-					{
-						fprintf(stderr, "%s: Error reading file\n", fullpath);
-						return -1;
-					}
-					if (setxattr(fullpathdst, xattrnames, attr_buf, xattrsize, 0, XATTR_NOFOLLOW | XATTR_CREATE) < 0)
-					{
-						fprintf(stderr, "setxattr: %s\n", strerror(errno));
-						return -1;
-					}
-					free(attr_buf);
-				}
-				fprintf(stderr, "%s: Error reading file\n", fullpath);
-				return -1;
-			decomp_check:
-				if (chflags(fullpathdst, UF_COMPRESSED) < 0)
-				{
-					fprintf(stderr, "chflags: %s\n", strerror(errno));
-					return -1;
-				}
-				if (chmod(fullpathdst, outFileMode) < 0)
-				{
-					fprintf(stderr, "chmod: %s\n", strerror(errno));
-					return -1;
-				}
-				if (decomp)
-				{
-					if (lstat(fullpathdst, &dstfileinfo) < 0)
-					{
-						fprintf(stderr, "%s: %s\n", fullpathdst, strerror(errno));
-						return -1;
-					}
-					decompressFile(fullpathdst, &dstfileinfo);
-				}
-			}
-		}
-	}
-	else if (decomp && argIsFile)
-	{
-		decompressFile(fullpath, &fileinfo);
-	}
-	else if (decomp)
-	{
-		if ((currfolder = fts_open(folderarray, FTS_PHYSICAL, NULL)) == NULL)
-		{
-			fprintf(stderr, "%s: %s\n", fullpath, strerror(errno));
-			exit(EACCES);
-		}
-		while ((currfile = fts_read(currfolder)) != NULL)
-		{
-			filetype_found = FALSE;
-			if (folderinfo.filetypeslist != NULL)
-			{
-				filetype = getFileType(currfile->fts_path);
-				if (filetype == NULL)
-				{
-					filetype = (char *) malloc(10);
-					strcpy(filetype, "UNDEFINED");
-				}
-			}
-			if (filetype != NULL)
-			{
-				fileextension = NULL;
-				for (i = strlen(currfile->fts_path) - 1; i > 0; i--)
-					if (currfile->fts_path[i] == '.')
-						break;
-				if (i != 0 && i != strlen(currfile->fts_path) - 1 && currfile->fts_path[i] != '/' && currfile->fts_path[i-1] != '/')
-					fileextension = &currfile->fts_path[i+1];
-				for (i = 0; i < folderinfo.filetypeslistlen; i++)
-					if (strcmp(folderinfo.filetypeslist[i], filetype) == 0 ||
-						strcmp("ALL", folderinfo.filetypeslist[i]) == 0 ||
-						(fileextension != NULL && strcasecmp(fileextension, folderinfo.filetypeslist[i]) == 0))
-						filetype_found = TRUE;
-				if (invert_filetypelist)
-				{
-					if (filetype_found)
-						filetype_found = FALSE;
-					else
-						filetype_found = TRUE;
-				}
-			}
-			if ((currfile->fts_statp->st_mode & S_IFDIR) == 0 && (folderinfo.filetypeslist == NULL || filetype_found))
-				decompressFile(currfile->fts_path, currfile->fts_statp);
-			if (filetype != NULL) free(filetype);
-		}
-		fts_close(currfolder);
-	}
-	else if (argIsFile && printVerbose == 0)
-	{
-		if (applycomp)
-		{
-			if ((fileinfo.st_flags & UF_COMPRESSED) == 0)
-				printf("Unable to compress file.\n");
-		}
-		else
-		{
-			if ((fileinfo.st_flags & UF_COMPRESSED) != 0)
-				printf("File is HFS+ compressed.\n");
-			else
-				printf("File is not HFS+ compressed.\n");
-		}
-	}
-	else if (argIsFile && printVerbose > 0)
-	{
-		printFileInfo(fullpath, &fileinfo, applycomp);
-	}
-	else if (!argIsFile)
-	{
-		if ((currfolder = fts_open(folderarray, FTS_PHYSICAL, NULL)) == NULL)
-		{
-			fprintf(stderr, "%s: %s\n", fullpath, strerror(errno));
-			exit(EACCES);
-		}
-		folderinfo.uncompressed_size = 0;
-		folderinfo.uncompressed_size_rounded = 0;
-		folderinfo.compressed_size = 0;
-		folderinfo.compressed_size_rounded = 0;
-		folderinfo.compattr_size = 0;
-		folderinfo.total_size = 0;
-		folderinfo.num_compressed = 0;
-		folderinfo.num_files = 0;
-		folderinfo.num_hard_link_files = 0;
-		folderinfo.num_folders = 0;
-		folderinfo.num_hard_link_folders = 0;
-		folderinfo.print_info = printVerbose;
-		folderinfo.print_files = printDir;
-		folderinfo.compress_files = applycomp;
-		folderinfo.check_files = fileCheck;
-		folderinfo.allowLargeBlocks = allowLargeBlocks;
-		folderinfo.compressionlevel = compressionlevel;
-		folderinfo.minSavings = minSavings;
-		folderinfo.maxSize = maxSize;
-		folderinfo.check_hard_links = hardLinkCheck;
-		folderinfo.filetypes = NULL;
-		folderinfo.numfiletypes = 0;
-		folderinfo.filetypessize = 0;
-		folderinfo.invert_filetypelist = invert_filetypelist;
-		process_folder(currfolder, &folderinfo);
-		folderinfo.num_folders--;
-		if (printVerbose > 0 || !printDir)
-		{
-			if (printDir) printf("\n");
-			printf("%s:\n", fullpath);
-			if (folderinfo.filetypes != NULL)
-			{
-				alltypesinfo.filetype = NULL;
-				alltypesinfo.uncompressed_size = 0;
-				alltypesinfo.uncompressed_size_rounded = 0;
-				alltypesinfo.compressed_size = 0;
-				alltypesinfo.compressed_size_rounded = 0;
-				alltypesinfo.compattr_size = 0;
-				alltypesinfo.total_size = 0;
-				alltypesinfo.num_compressed = 0;
-				alltypesinfo.num_files = 0;
-				alltypesinfo.num_hard_link_files = 0;
-				for (i = 0; i < folderinfo.numfiletypes; i++)
-				{
-					alltypesinfo.uncompressed_size += folderinfo.filetypes[i].uncompressed_size;
-					alltypesinfo.uncompressed_size_rounded += folderinfo.filetypes[i].uncompressed_size_rounded;
-					alltypesinfo.compressed_size += folderinfo.filetypes[i].compressed_size;
-					alltypesinfo.compressed_size_rounded += folderinfo.filetypes[i].compressed_size_rounded;
-					alltypesinfo.compattr_size += folderinfo.filetypes[i].compattr_size;
-					alltypesinfo.total_size += folderinfo.filetypes[i].total_size;
-					alltypesinfo.num_compressed += folderinfo.filetypes[i].num_compressed;
-					alltypesinfo.num_files += folderinfo.filetypes[i].num_files;
-					alltypesinfo.num_hard_link_files += folderinfo.filetypes[i].num_hard_link_files;
-					
-					if (!folderinfo.invert_filetypelist)
-						printf("\nFile content type: %s\n", folderinfo.filetypes[i].filetype);
-					if (folderinfo.filetypes[i].numextensions > 0)
-					{
-						if (!folderinfo.invert_filetypelist)
-							printf ("File extension(s): %s", folderinfo.filetypes[i].extensions[0]);
-						free(folderinfo.filetypes[i].extensions[0]);
-						for (j = 1; j < folderinfo.filetypes[i].numextensions; j++)
-						{
-							if (!folderinfo.invert_filetypelist)
-								printf (", %s", folderinfo.filetypes[i].extensions[j]);
-							free(folderinfo.filetypes[i].extensions[j]);
-						}
-						free(folderinfo.filetypes[i].extensions);
-						if (!folderinfo.invert_filetypelist)
-							printf("\n");
-					}
-					if (!folderinfo.invert_filetypelist)
-						printf("Number of HFS+ compressed files: %lld\n", folderinfo.filetypes[i].num_compressed);
-					if (printVerbose > 0 && (!folderinfo.invert_filetypelist))
-					{
-						printf("Total number of files: %lld\n", folderinfo.filetypes[i].num_files);
-						if (hardLinkCheck)
-							printf("Total number of file hard links: %lld\n", folderinfo.filetypes[i].num_hard_link_files);
-						filesize = folderinfo.filetypes[i].uncompressed_size;
-						filesize_rounded = folderinfo.filetypes[i].uncompressed_size_rounded;
-						if (folderinfo.filetypes[i].num_hard_link_files == 0 || !hardLinkCheck)
-							printf("File(s) size (uncompressed; reported size by Mac OS 10.6+ Finder): %s\n", getSizeStr(filesize, filesize_rounded));
-						else
-							printf("File(s) size (uncompressed): %s\n", getSizeStr(filesize, filesize_rounded));
-						filesize = folderinfo.filetypes[i].compressed_size;
-						filesize_rounded = folderinfo.filetypes[i].compressed_size_rounded;
-						if (folderinfo.filetypes[i].num_hard_link_files == 0 || !hardLinkCheck)
-							printf("File(s) size (compressed - decmpfs xattr; reported size by Mac OS 10.0-10.5 Finder): %s\n", getSizeStr(filesize, filesize_rounded));
-						else
-							printf("File(s) size (compressed - decmpfs xattr): %s\n", getSizeStr(filesize, filesize_rounded));
-						filesize = folderinfo.filetypes[i].compressed_size + folderinfo.filetypes[i].compattr_size;
-						filesize_rounded = folderinfo.filetypes[i].compressed_size_rounded + folderinfo.filetypes[i].compattr_size;
-						printf("File(s) size (compressed): %s\n", getSizeStr(filesize, filesize_rounded));
-						printf("Compression savings: %0.1f%%\n", (1.0 - ((float) (folderinfo.filetypes[i].compressed_size + folderinfo.filetypes[i].compattr_size) / folderinfo.filetypes[i].uncompressed_size)) * 100.0);
-						filesize = folderinfo.filetypes[i].total_size;
-						printf("Approximate total file(s) size (files + file overhead): %s\n", getSizeStr(filesize, filesize));
-					}
-					free(folderinfo.filetypes[i].filetype);
-				}
-				if (folderinfo.invert_filetypelist)
-				{
-					alltypesinfo.uncompressed_size = folderinfo.uncompressed_size - alltypesinfo.uncompressed_size;
-					alltypesinfo.uncompressed_size_rounded = folderinfo.uncompressed_size_rounded - alltypesinfo.uncompressed_size_rounded;
-					alltypesinfo.compressed_size = folderinfo.compressed_size - alltypesinfo.compressed_size;
-					alltypesinfo.compressed_size_rounded = folderinfo.compressed_size_rounded - alltypesinfo.compressed_size_rounded;
-					alltypesinfo.compattr_size = folderinfo.compattr_size - alltypesinfo.compattr_size;
-					alltypesinfo.total_size = folderinfo.total_size - alltypesinfo.total_size;
-					alltypesinfo.num_compressed = folderinfo.num_compressed - alltypesinfo.num_compressed;
-					alltypesinfo.num_files = folderinfo.num_files - alltypesinfo.num_files;
-					alltypesinfo.num_hard_link_files = folderinfo.num_hard_link_files - alltypesinfo.num_hard_link_files;
-				}
-				if (folderinfo.numfiletypes > 1 || folderinfo.invert_filetypelist)
-				{
-					printf("\nTotals of file content types\n");
-					printf("Number of HFS+ compressed files: %lld\n", alltypesinfo.num_compressed);
-					if (printVerbose > 0)
-					{
-						printf("Total number of files: %lld\n", alltypesinfo.num_files);
-						if (hardLinkCheck)
-							printf("Total number of file hard links: %lld\n", alltypesinfo.num_hard_link_files);
-						filesize = alltypesinfo.uncompressed_size;
-						filesize_rounded = alltypesinfo.uncompressed_size_rounded;
-						if (alltypesinfo.num_hard_link_files == 0 || !hardLinkCheck)
-							printf("File(s) size (uncompressed; reported size by Mac OS 10.6+ Finder): %s\n", getSizeStr(filesize, filesize_rounded));
-						else
-							printf("File(s) size (uncompressed): %s\n", getSizeStr(filesize, filesize_rounded));
-						filesize = alltypesinfo.compressed_size;
-						filesize_rounded = alltypesinfo.compressed_size_rounded;
-						if (alltypesinfo.num_hard_link_files == 0 || !hardLinkCheck)
-							printf("File(s) size (compressed - decmpfs xattr; reported size by Mac OS 10.0-10.5 Finder): %s\n", getSizeStr(filesize, filesize_rounded));
-						else
-							printf("File(s) size (compressed - decmpfs xattr): %s\n", getSizeStr(filesize, filesize_rounded));
-						filesize = alltypesinfo.compressed_size + alltypesinfo.compattr_size;
-						filesize_rounded = alltypesinfo.compressed_size_rounded + alltypesinfo.compattr_size;
-						printf("File(s) size (compressed): %s\n", getSizeStr(filesize, filesize_rounded));
-						printf("Compression savings: %0.1f%%\n", (1.0 - ((float) (alltypesinfo.compressed_size + alltypesinfo.compattr_size) / alltypesinfo.uncompressed_size)) * 100.0);
-						filesize = alltypesinfo.total_size;
-						printf("Approximate total file(s) size (files + file overhead): %s\n", getSizeStr(filesize, filesize));
-					}
-				}
-				printf("\n");
-			}
-			if (folderinfo.num_compressed == 0 && !applycomp)
-				printf("Folder contains no compressed files\n");
-			else if (folderinfo.num_compressed == 0 && applycomp)
-				printf("No compressable files in folder\n");
-			else
-				printf("Number of HFS+ compressed files: %lld\n", folderinfo.num_compressed);
-			if (printVerbose > 0)
-			{
-				printf("Total number of files: %lld\n", folderinfo.num_files);
-				if (hardLinkCheck)
-					printf("Total number of file hard links: %lld\n", folderinfo.num_hard_link_files);
-				printf("Total number of folders: %lld\n", folderinfo.num_folders);
-				if (hardLinkCheck)
-					printf("Total number of folder hard links: %lld\n", folderinfo.num_hard_link_folders);
-				printf("Total number of items (number of files + number of folders): %lld\n", folderinfo.num_files + folderinfo.num_folders);
-				foldersize = folderinfo.uncompressed_size;
-				foldersize_rounded = folderinfo.uncompressed_size_rounded;
-				if ((folderinfo.num_hard_link_files == 0 && folderinfo.num_hard_link_folders == 0) || !hardLinkCheck)
-					printf("Folder size (uncompressed; reported size by Mac OS 10.6+ Finder): %s\n", getSizeStr(foldersize, foldersize_rounded));
-				else
-					printf("Folder size (uncompressed): %s\n", getSizeStr(foldersize, foldersize_rounded));
-				foldersize = folderinfo.compressed_size;
-				foldersize_rounded = folderinfo.compressed_size_rounded;
-				if ((folderinfo.num_hard_link_files == 0 && folderinfo.num_hard_link_folders == 0) || !hardLinkCheck)
-					printf("Folder size (compressed - decmpfs xattr; reported size by Mac OS 10.0-10.5 Finder): %s\n", getSizeStr(foldersize, foldersize_rounded));
-				else
-					printf("Folder size (compressed - decmpfs xattr): %s\n", getSizeStr(foldersize, foldersize_rounded));
-				foldersize = folderinfo.compressed_size + folderinfo.compattr_size;
-				foldersize_rounded = folderinfo.compressed_size_rounded + folderinfo.compattr_size;
-				printf("Folder size (compressed): %s\n", getSizeStr(foldersize, foldersize_rounded));
-				printf("Compression savings: %0.1f%%\n", (1.0 - ((float) (folderinfo.compressed_size + folderinfo.compattr_size) / folderinfo.uncompressed_size)) * 100.0);
-				foldersize = folderinfo.total_size;
-				printf("Approximate total folder size (files + file overhead + folder overhead): %s\n", getSizeStr(foldersize, foldersize));
-			}
-		}
-	}
-	
-	if (free_src)
-		free(fullpath);
-	if (free_dst)
-		free(fullpathdst);
+	int N, step, n;
+    if (createfile || extractfile)
+    {
+        N = argc - 1;
+        step = 2;
+    }
+    else
+    {
+        N = argc;
+        step = 1;
+    }
+    for ( n = 0 ; i < N ; i += step, ++n )
+    {
+        if (n && printVerbose > 0)
+        {
+            printf("\n");
+        }
+        if (createfile || extractfile)
+        {
+            if (argv[i+1][0] != '/')
+            {
+                cwd = getcwd(NULL, 0);
+                if (cwd == NULL)
+                {
+                    fprintf(stderr, "Unable to get PWD, exiting...\n");
+                    exit(EACCES);
+                }
+                free_dst = TRUE;
+                fullpathdst = (char *) malloc(strlen(cwd) + strlen(argv[i+1]) + 2);
+                sprintf(fullpathdst, "%s/%s", cwd, argv[i+1]);
+                free(cwd);
+            }
+            else
+                fullpathdst = (char *) argv[i+1];
+        }
+        
+        if (argv[i][0] != '/')
+        {
+            cwd = getcwd(NULL, 0);
+            if (cwd == NULL)
+            {
+                fprintf(stderr, "Unable to get PWD, exiting...\n");
+                exit(EACCES);
+            }
+            free_src = TRUE;
+            fullpath = (char *) malloc(strlen(cwd) + strlen(argv[i]) + 2);
+            sprintf(fullpath, "%s/%s", cwd, argv[i]);
+            free(cwd);
+        }
+        else
+            fullpath = (char *) argv[i];
+        
+        if (lstat(fullpath, &fileinfo) < 0)
+        {
+            fprintf(stderr, "%s: %s\n", fullpath, strerror(errno));
+            return -1;
+        }
+        
+        argIsFile = ((fileinfo.st_mode & S_IFDIR) == 0);
+        
+        if (!argIsFile)
+        {
+            folderarray[0] = fullpath;
+            folderarray[1] = NULL;
+        }
+        
+        if ((createfile || extractfile) && lstat(fullpathdst, &dstfileinfo) >= 0)
+        {
+            dstIsFile = ((dstfileinfo.st_mode & S_IFDIR) == 0);
+            fprintf(stderr, "%s: %s already exists at this path\n", fullpath, dstIsFile ? "File" : "Folder");
+            return -1;
+        }
+        
+        if (applycomp && argIsFile)
+        {
+            compressFile(fullpath, &fileinfo, maxSize, compressionlevel, allowLargeBlocks, minSavings, fileCheck);
+            lstat(fullpath, &fileinfo);
+        }
+        
+        if (createfile)
+        {
+            if (!argIsFile)
+            {
+                fprintf(stderr, "%s: File required, this is a folder\n", fullpath);
+                return -1;
+            }
+            else if ((fileinfo.st_flags & UF_COMPRESSED) == 0)
+            {
+                fprintf(stderr, "%s: HFS+ compressed file required, this file is not HFS+ compressed\n", fullpath);
+                return -1;
+            }
+            
+            afscFile = fopen(fullpathdst, "w");
+            if (afscFile == NULL)
+            {
+                fprintf(stderr, "%s: %s\n", fullpathdst, strerror(errno));
+                return -1;
+            }
+            else
+            {
+                fprintf(afscFile, "afsc");
+                big16 = EndianU16_NtoB(fileinfo.st_mode);
+                if (fwrite(&big16, sizeof(mode_t), 1, afscFile) != 1)
+                {
+                    fprintf(stderr, "%s: Error writing file\n", fullpathdst);
+                    return -1;
+                }
+                xattrnamesize = listxattr(fullpath, NULL, 0, XATTR_SHOWCOMPRESSION | XATTR_NOFOLLOW);
+                
+                if (xattrnamesize > 0)
+                {
+                    xattrnames = (char *) malloc(xattrnamesize);
+                    if (xattrnames == NULL)
+                    {
+                        fprintf(stderr, "malloc error, unable to get file information\n");
+                        return -1;
+                    }
+                    if ((xattrnamesize = listxattr(fullpath, xattrnames, xattrnamesize, XATTR_SHOWCOMPRESSION | XATTR_NOFOLLOW)) <= 0)
+                    {
+                        fprintf(stderr, "listxattr: %s\n", strerror(errno));
+                        free(xattrnames);
+                        return -1;
+                    }
+                    for (curr_attr = xattrnames; curr_attr < xattrnames + xattrnamesize; curr_attr += strlen(curr_attr) + 1)
+                    {
+                        xattrsize = getxattr(fullpath, curr_attr, NULL, 0, 0, XATTR_SHOWCOMPRESSION | XATTR_NOFOLLOW);
+                        if (xattrsize < 0)
+                        {
+                            fprintf(stderr, "getxattr: %s\n", strerror(errno));
+                            free(xattrnames);
+                            return -1;
+                        }
+                        if (((strcmp(curr_attr, "com.apple.ResourceFork") == 0 && strlen(curr_attr) == 22) ||
+                            (strcmp(curr_attr, "com.apple.decmpfs") == 0 && strlen(curr_attr) == 17)) &&
+                            xattrsize != 0)
+                        {
+                            attr_buf = malloc(xattrsize);
+                            if (attr_buf == NULL)
+                            {
+                                fprintf(stderr, "malloc error, unable to get file information\n");
+                                return -1;
+                            }
+                            xattrPos = 0;
+                            do
+                            {
+                                getxattrret = getxattr(fullpath, curr_attr, attr_buf + xattrPos, xattrsize - xattrPos, xattrPos, XATTR_SHOWCOMPRESSION | XATTR_NOFOLLOW);
+                                if (getxattrret < 0)
+                                {
+                                    fprintf(stderr, "getxattr: %s\n", strerror(errno));
+                                    free(xattrnames);
+                                    return -1;
+                                }
+                                xattrPos += getxattrret;
+                            } while (xattrPos < xattrsize && getxattrret > 0);
+                            fprintf(afscFile, "%s", curr_attr);
+                            putc('\0', afscFile);
+                            big64 = EndianU64_NtoB(xattrsize);
+                            if (fwrite(&big64, sizeof(ssize_t), 1, afscFile) != 1 ||
+                                fwrite(attr_buf, xattrsize, 1, afscFile) != 1)
+                            {
+                                fprintf(stderr, "%s: Error writing file\n", fullpathdst);
+                                return -1;
+                            }
+                            free(attr_buf);
+                        }
+                    }
+                    free(xattrnames);
+                }
+                fclose(afscFile);
+                if (decomp)
+                    decompressFile(fullpath, &fileinfo);
+            }
+        }
+        else if (extractfile)
+        {
+            if (!argIsFile)
+            {
+                fprintf(stderr, "%s: File required, this is a folder\n", fullpath);
+                return -1;
+            }
+            afscFile = fopen(fullpath, "r");
+            if (afscFile == NULL)
+            {
+                fprintf(stderr, "%s: %s\n", fullpathdst, strerror(errno));
+                return -1;
+            }
+            else
+            {
+                if (fread(header, 4, 1, afscFile) != 1)
+                {
+                    fprintf(stderr, "%s: Error reading file\n", fullpath);
+                    return -1;
+                }
+                if (header[0] != 'a' ||
+                    header[1] != 'f' ||
+                    header[2] != 's' ||
+                    header[3] != 'c')
+                {
+                    fprintf(stderr, "%s: Invalid header\n", fullpath);
+                    return -1;
+                }
+                outFile = fopen(fullpathdst, "w");
+                if (outFile == NULL)
+                {
+                    fprintf(stderr, "%s: %s\n", fullpathdst, strerror(errno));
+                    return -1;
+                }
+                else
+                {
+                    fclose(outFile);
+                    if (fread(&outFileMode, sizeof(mode_t), 1, afscFile) != 1)
+                    {
+                        fprintf(stderr, "%s: Error reading file\n", fullpath);
+                        return -1;
+                    }
+                    outFileMode = EndianU16_BtoN(outFileMode);
+                    xattrnames = (char *) malloc(23);
+                    while (1)
+                    {
+                        for (j = 0; j < 23; j++)
+                        {
+                            xattrnames[j] = getc(afscFile);
+                            if (xattrnames[j] == '\0') break;
+                            if (xattrnames[j] == EOF) goto decomp_check;
+                        }
+                        if (j == 23 ||
+                            fread(&xattrsize, sizeof(ssize_t), 1, afscFile) != 1)
+                        {
+                            fprintf(stderr, "%s: Error reading file\n", fullpath);
+                            return -1;
+                        }
+                        xattrsize = EndianU64_BtoN(xattrsize);
+                        attr_buf = malloc(xattrsize);
+                        if (attr_buf == NULL)
+                        {
+                            fprintf(stderr, "malloc error, unable to set file information\n");
+                            return -1;
+                        }
+                        if (fread(attr_buf, xattrsize, 1, afscFile) != 1)
+                        {
+                            fprintf(stderr, "%s: Error reading file\n", fullpath);
+                            return -1;
+                        }
+                        if (setxattr(fullpathdst, xattrnames, attr_buf, xattrsize, 0, XATTR_NOFOLLOW | XATTR_CREATE) < 0)
+                        {
+                            fprintf(stderr, "setxattr: %s\n", strerror(errno));
+                            return -1;
+                        }
+                        free(attr_buf);
+                    }
+                    fprintf(stderr, "%s: Error reading file\n", fullpath);
+                    return -1;
+                decomp_check:
+                    if (chflags(fullpathdst, UF_COMPRESSED) < 0)
+                    {
+                        fprintf(stderr, "chflags: %s\n", strerror(errno));
+                        return -1;
+                    }
+                    if (chmod(fullpathdst, outFileMode) < 0)
+                    {
+                        fprintf(stderr, "chmod: %s\n", strerror(errno));
+                        return -1;
+                    }
+                    if (decomp)
+                    {
+                        if (lstat(fullpathdst, &dstfileinfo) < 0)
+                        {
+                            fprintf(stderr, "%s: %s\n", fullpathdst, strerror(errno));
+                            return -1;
+                        }
+                        decompressFile(fullpathdst, &dstfileinfo);
+                    }
+                }
+            }
+        }
+        else if (decomp && argIsFile)
+        {
+            decompressFile(fullpath, &fileinfo);
+        }
+        else if (decomp)
+        {
+            if ((currfolder = fts_open(folderarray, FTS_PHYSICAL, NULL)) == NULL)
+            {
+                fprintf(stderr, "%s: %s\n", fullpath, strerror(errno));
+                exit(EACCES);
+            }
+            while ((currfile = fts_read(currfolder)) != NULL)
+            {
+                filetype_found = FALSE;
+                if (folderinfo.filetypeslist != NULL)
+                {
+                    filetype = getFileType(currfile->fts_path);
+                    if (filetype == NULL)
+                    {
+                        filetype = (char *) malloc(10);
+                        strcpy(filetype, "UNDEFINED");
+                    }
+                }
+                if (filetype != NULL)
+                {
+                    fileextension = NULL;
+                    for (i = strlen(currfile->fts_path) - 1; i > 0; i--)
+                        if (currfile->fts_path[i] == '.')
+                            break;
+                    if (i != 0 && i != strlen(currfile->fts_path) - 1 && currfile->fts_path[i] != '/' && currfile->fts_path[i-1] != '/')
+                        fileextension = &currfile->fts_path[i+1];
+                    for (i = 0; i < folderinfo.filetypeslistlen; i++)
+                        if (strcmp(folderinfo.filetypeslist[i], filetype) == 0 ||
+                            strcmp("ALL", folderinfo.filetypeslist[i]) == 0 ||
+                            (fileextension != NULL && strcasecmp(fileextension, folderinfo.filetypeslist[i]) == 0))
+                            filetype_found = TRUE;
+                    if (invert_filetypelist)
+                    {
+                        if (filetype_found)
+                            filetype_found = FALSE;
+                        else
+                            filetype_found = TRUE;
+                    }
+                }
+                if ((currfile->fts_statp->st_mode & S_IFDIR) == 0 && (folderinfo.filetypeslist == NULL || filetype_found))
+                    decompressFile(currfile->fts_path, currfile->fts_statp);
+                if (filetype != NULL) free(filetype);
+            }
+            fts_close(currfolder);
+        }
+        else if (argIsFile && printVerbose == 0)
+        {
+            if (applycomp)
+            {
+                if ((fileinfo.st_flags & UF_COMPRESSED) == 0)
+                    printf("Unable to compress file.\n");
+            }
+            else
+            {
+                if ((fileinfo.st_flags & UF_COMPRESSED) != 0)
+                    printf("File is HFS+ compressed.\n");
+                else
+                    printf("File is not HFS+ compressed.\n");
+            }
+        }
+        else if (argIsFile && printVerbose > 0)
+        {
+            printFileInfo(fullpath, &fileinfo, applycomp);
+        }
+        else if (!argIsFile)
+        {
+            if ((currfolder = fts_open(folderarray, FTS_PHYSICAL, NULL)) == NULL)
+            {
+                fprintf(stderr, "%s: %s\n", fullpath, strerror(errno));
+                exit(EACCES);
+            }
+            folderinfo.uncompressed_size = 0;
+            folderinfo.uncompressed_size_rounded = 0;
+            folderinfo.compressed_size = 0;
+            folderinfo.compressed_size_rounded = 0;
+            folderinfo.compattr_size = 0;
+            folderinfo.total_size = 0;
+            folderinfo.num_compressed = 0;
+            folderinfo.num_files = 0;
+            folderinfo.num_hard_link_files = 0;
+            folderinfo.num_folders = 0;
+            folderinfo.num_hard_link_folders = 0;
+            folderinfo.print_info = printVerbose;
+            folderinfo.print_files = printDir;
+            folderinfo.compress_files = applycomp;
+            folderinfo.check_files = fileCheck;
+            folderinfo.allowLargeBlocks = allowLargeBlocks;
+            folderinfo.compressionlevel = compressionlevel;
+            folderinfo.minSavings = minSavings;
+            folderinfo.maxSize = maxSize;
+            folderinfo.check_hard_links = hardLinkCheck;
+            folderinfo.filetypes = NULL;
+            folderinfo.numfiletypes = 0;
+            folderinfo.filetypessize = 0;
+            folderinfo.invert_filetypelist = invert_filetypelist;
+            process_folder(currfolder, &folderinfo);
+            folderinfo.num_folders--;
+            if (printVerbose > 0 || !printDir)
+            {
+                if (printDir) printf("\n");
+                printf("%s:\n", fullpath);
+                if (folderinfo.filetypes != NULL)
+                {
+                    alltypesinfo.filetype = NULL;
+                    alltypesinfo.uncompressed_size = 0;
+                    alltypesinfo.uncompressed_size_rounded = 0;
+                    alltypesinfo.compressed_size = 0;
+                    alltypesinfo.compressed_size_rounded = 0;
+                    alltypesinfo.compattr_size = 0;
+                    alltypesinfo.total_size = 0;
+                    alltypesinfo.num_compressed = 0;
+                    alltypesinfo.num_files = 0;
+                    alltypesinfo.num_hard_link_files = 0;
+                    for (i = 0; i < folderinfo.numfiletypes; i++)
+                    {
+                        alltypesinfo.uncompressed_size += folderinfo.filetypes[i].uncompressed_size;
+                        alltypesinfo.uncompressed_size_rounded += folderinfo.filetypes[i].uncompressed_size_rounded;
+                        alltypesinfo.compressed_size += folderinfo.filetypes[i].compressed_size;
+                        alltypesinfo.compressed_size_rounded += folderinfo.filetypes[i].compressed_size_rounded;
+                        alltypesinfo.compattr_size += folderinfo.filetypes[i].compattr_size;
+                        alltypesinfo.total_size += folderinfo.filetypes[i].total_size;
+                        alltypesinfo.num_compressed += folderinfo.filetypes[i].num_compressed;
+                        alltypesinfo.num_files += folderinfo.filetypes[i].num_files;
+                        alltypesinfo.num_hard_link_files += folderinfo.filetypes[i].num_hard_link_files;
+                        
+                        if (!folderinfo.invert_filetypelist)
+                            printf("\nFile content type: %s\n", folderinfo.filetypes[i].filetype);
+                        if (folderinfo.filetypes[i].numextensions > 0)
+                        {
+                            if (!folderinfo.invert_filetypelist)
+                                printf ("File extension(s): %s", folderinfo.filetypes[i].extensions[0]);
+                            free(folderinfo.filetypes[i].extensions[0]);
+                            for (j = 1; j < folderinfo.filetypes[i].numextensions; j++)
+                            {
+                                if (!folderinfo.invert_filetypelist)
+                                    printf (", %s", folderinfo.filetypes[i].extensions[j]);
+                                free(folderinfo.filetypes[i].extensions[j]);
+                            }
+                            free(folderinfo.filetypes[i].extensions);
+                            if (!folderinfo.invert_filetypelist)
+                                printf("\n");
+                        }
+                        if (!folderinfo.invert_filetypelist)
+                            printf("Number of HFS+ compressed files: %lld\n", folderinfo.filetypes[i].num_compressed);
+                        if (printVerbose > 0 && (!folderinfo.invert_filetypelist))
+                        {
+                            printf("Total number of files: %lld\n", folderinfo.filetypes[i].num_files);
+                            if (hardLinkCheck)
+                                printf("Total number of file hard links: %lld\n", folderinfo.filetypes[i].num_hard_link_files);
+                            filesize = folderinfo.filetypes[i].uncompressed_size;
+                            filesize_rounded = folderinfo.filetypes[i].uncompressed_size_rounded;
+                            if (folderinfo.filetypes[i].num_hard_link_files == 0 || !hardLinkCheck)
+                                printf("File(s) size (uncompressed; reported size by Mac OS 10.6+ Finder): %s\n", getSizeStr(filesize, filesize_rounded));
+                            else
+                                printf("File(s) size (uncompressed): %s\n", getSizeStr(filesize, filesize_rounded));
+                            filesize = folderinfo.filetypes[i].compressed_size;
+                            filesize_rounded = folderinfo.filetypes[i].compressed_size_rounded;
+                            if (folderinfo.filetypes[i].num_hard_link_files == 0 || !hardLinkCheck)
+                                printf("File(s) size (compressed - decmpfs xattr; reported size by Mac OS 10.0-10.5 Finder): %s\n", getSizeStr(filesize, filesize_rounded));
+                            else
+                                printf("File(s) size (compressed - decmpfs xattr): %s\n", getSizeStr(filesize, filesize_rounded));
+                            filesize = folderinfo.filetypes[i].compressed_size + folderinfo.filetypes[i].compattr_size;
+                            filesize_rounded = folderinfo.filetypes[i].compressed_size_rounded + folderinfo.filetypes[i].compattr_size;
+                            printf("File(s) size (compressed): %s\n", getSizeStr(filesize, filesize_rounded));
+                            printf("Compression savings: %0.1f%%\n", (1.0 - ((float) (folderinfo.filetypes[i].compressed_size + folderinfo.filetypes[i].compattr_size) / folderinfo.filetypes[i].uncompressed_size)) * 100.0);
+                            filesize = folderinfo.filetypes[i].total_size;
+                            printf("Approximate total file(s) size (files + file overhead): %s\n", getSizeStr(filesize, filesize));
+                        }
+                        free(folderinfo.filetypes[i].filetype);
+                    }
+                    if (folderinfo.invert_filetypelist)
+                    {
+                        alltypesinfo.uncompressed_size = folderinfo.uncompressed_size - alltypesinfo.uncompressed_size;
+                        alltypesinfo.uncompressed_size_rounded = folderinfo.uncompressed_size_rounded - alltypesinfo.uncompressed_size_rounded;
+                        alltypesinfo.compressed_size = folderinfo.compressed_size - alltypesinfo.compressed_size;
+                        alltypesinfo.compressed_size_rounded = folderinfo.compressed_size_rounded - alltypesinfo.compressed_size_rounded;
+                        alltypesinfo.compattr_size = folderinfo.compattr_size - alltypesinfo.compattr_size;
+                        alltypesinfo.total_size = folderinfo.total_size - alltypesinfo.total_size;
+                        alltypesinfo.num_compressed = folderinfo.num_compressed - alltypesinfo.num_compressed;
+                        alltypesinfo.num_files = folderinfo.num_files - alltypesinfo.num_files;
+                        alltypesinfo.num_hard_link_files = folderinfo.num_hard_link_files - alltypesinfo.num_hard_link_files;
+                    }
+                    if (folderinfo.numfiletypes > 1 || folderinfo.invert_filetypelist)
+                    {
+                        printf("\nTotals of file content types\n");
+                        printf("Number of HFS+ compressed files: %lld\n", alltypesinfo.num_compressed);
+                        if (printVerbose > 0)
+                        {
+                            printf("Total number of files: %lld\n", alltypesinfo.num_files);
+                            if (hardLinkCheck)
+                                printf("Total number of file hard links: %lld\n", alltypesinfo.num_hard_link_files);
+                            filesize = alltypesinfo.uncompressed_size;
+                            filesize_rounded = alltypesinfo.uncompressed_size_rounded;
+                            if (alltypesinfo.num_hard_link_files == 0 || !hardLinkCheck)
+                                printf("File(s) size (uncompressed; reported size by Mac OS 10.6+ Finder): %s\n", getSizeStr(filesize, filesize_rounded));
+                            else
+                                printf("File(s) size (uncompressed): %s\n", getSizeStr(filesize, filesize_rounded));
+                            filesize = alltypesinfo.compressed_size;
+                            filesize_rounded = alltypesinfo.compressed_size_rounded;
+                            if (alltypesinfo.num_hard_link_files == 0 || !hardLinkCheck)
+                                printf("File(s) size (compressed - decmpfs xattr; reported size by Mac OS 10.0-10.5 Finder): %s\n", getSizeStr(filesize, filesize_rounded));
+                            else
+                                printf("File(s) size (compressed - decmpfs xattr): %s\n", getSizeStr(filesize, filesize_rounded));
+                            filesize = alltypesinfo.compressed_size + alltypesinfo.compattr_size;
+                            filesize_rounded = alltypesinfo.compressed_size_rounded + alltypesinfo.compattr_size;
+                            printf("File(s) size (compressed): %s\n", getSizeStr(filesize, filesize_rounded));
+                            printf("Compression savings: %0.1f%%\n", (1.0 - ((float) (alltypesinfo.compressed_size + alltypesinfo.compattr_size) / alltypesinfo.uncompressed_size)) * 100.0);
+                            filesize = alltypesinfo.total_size;
+                            printf("Approximate total file(s) size (files + file overhead): %s\n", getSizeStr(filesize, filesize));
+                        }
+                    }
+                    printf("\n");
+                }
+                if (folderinfo.num_compressed == 0 && !applycomp)
+                    printf("Folder contains no compressed files\n");
+                else if (folderinfo.num_compressed == 0 && applycomp)
+                    printf("No compressable files in folder\n");
+                else
+                    printf("Number of HFS+ compressed files: %lld\n", folderinfo.num_compressed);
+                if (printVerbose > 0)
+                {
+                    printf("Total number of files: %lld\n", folderinfo.num_files);
+                    if (hardLinkCheck)
+                        printf("Total number of file hard links: %lld\n", folderinfo.num_hard_link_files);
+                    printf("Total number of folders: %lld\n", folderinfo.num_folders);
+                    if (hardLinkCheck)
+                        printf("Total number of folder hard links: %lld\n", folderinfo.num_hard_link_folders);
+                    printf("Total number of items (number of files + number of folders): %lld\n", folderinfo.num_files + folderinfo.num_folders);
+                    foldersize = folderinfo.uncompressed_size;
+                    foldersize_rounded = folderinfo.uncompressed_size_rounded;
+                    if ((folderinfo.num_hard_link_files == 0 && folderinfo.num_hard_link_folders == 0) || !hardLinkCheck)
+                        printf("Folder size (uncompressed; reported size by Mac OS 10.6+ Finder): %s\n", getSizeStr(foldersize, foldersize_rounded));
+                    else
+                        printf("Folder size (uncompressed): %s\n", getSizeStr(foldersize, foldersize_rounded));
+                    foldersize = folderinfo.compressed_size;
+                    foldersize_rounded = folderinfo.compressed_size_rounded;
+                    if ((folderinfo.num_hard_link_files == 0 && folderinfo.num_hard_link_folders == 0) || !hardLinkCheck)
+                        printf("Folder size (compressed - decmpfs xattr; reported size by Mac OS 10.0-10.5 Finder): %s\n", getSizeStr(foldersize, foldersize_rounded));
+                    else
+                        printf("Folder size (compressed - decmpfs xattr): %s\n", getSizeStr(foldersize, foldersize_rounded));
+                    foldersize = folderinfo.compressed_size + folderinfo.compattr_size;
+                    foldersize_rounded = folderinfo.compressed_size_rounded + folderinfo.compattr_size;
+                    printf("Folder size (compressed): %s\n", getSizeStr(foldersize, foldersize_rounded));
+                    printf("Compression savings: %0.1f%%\n", (1.0 - ((float) (folderinfo.compressed_size + folderinfo.compattr_size) / folderinfo.uncompressed_size)) * 100.0);
+                    foldersize = folderinfo.total_size;
+                    printf("Approximate total folder size (files + file overhead + folder overhead): %s\n", getSizeStr(foldersize, foldersize));
+                }
+            }
+        }
+        
+        if (free_src)
+            free(fullpath);
+        if (free_dst)
+            free(fullpathdst);
+    }
 	if (folderinfo.filetypeslist != NULL)
 		free(folderinfo.filetypeslist);
 	
