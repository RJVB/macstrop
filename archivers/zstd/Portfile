# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim: fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           clang_dependency 1.0
if {[file exists ${prefix}/bin/cmake]} {
    PortGroup       cmake 1.1
    PortGroup       LTO 1.0
} else {
    PortGroup       makefile 1.0
}
PortGroup           muniversal 1.0

github.setup        facebook zstd 1.5.4 v

checksums           rmd160  8903b14d757e2fa8375421402920a89b50cdf03f \
                    sha256  0f470992aedad543126d06efab344dc5f3e171893810455787d38347343a4424 \
                    size    2161536

categories          archivers devel
platforms           darwin
license             {BSD GPL-2}

maintainers         nomaintainer

description         Zstandard - Fast real-time compression algorithm
long_description    Zstd, short for Zstandard, is a fast lossless compression \
                    algorithm, targeting real-time compression scenarios at \
                    zlib-level and better compression ratios.

github.tarball_from releases

depends_lib-append  port:lz4 \
                    port:xz \
                    port:zlib

# libzstd.dylib links to libSystem.B.dylib only. Dependencies like lz4 are
# linked by CLI tools in ${prefix}/bin only.
license_noconflict  lz4 xz zlib

patchfiles          patch-zstd-tiger-no-backtrace.diff \
                    flags.patch

platform darwin 8 {
    depends_build-append port:gmake
    build.cmd       ${prefix}/bin/gmake
}

if {[info exists cmake.build_type]} {
    cmake.source_dir \
                    ${worksrcpath}/build/cmake
    configure.args-append \
                    -DZSTD_LEGACY_SUPPORT=ON \
                    -DZSTD_MULTITHREAD_SUPPORT=ON \
                    -DZSTD_LZ4_SUPPORT=ON \
                    -DZSTD_LZMA_SUPPORT=ON \
                    -DZSTD_ZLIB_SUPPORT=ON \
                    -DZSTD_BUILD_CONTRIB=ON
    cmake.save_configure_cmd "log too"
} else {
# Fix upgrade from previous version because -I flags are in the wrong order.
configure.cppflags-replace -I${prefix}/include -isystem${prefix}/include

build.target        allmost
build.args          V=1

test.run            yes
test.args           {*}${build.args}
}
