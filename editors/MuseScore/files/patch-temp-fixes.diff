diff --git a/mscore/pianoroll/pianoview.cpp b/mscore/pianoroll/pianoview.cpp
index e358c5c0b8c7b5822a0859a214e289b7c62a58bf..1d37b80bfee613b83b839f81389f40bbd4a92909 100644
--- a/mscore/pianoroll/pianoview.cpp
+++ b/mscore/pianoroll/pianoview.cpp
@@ -1658,7 +1660,7 @@ void PianoView::updateNotes()
       scene()->clear();
       clearNoteData();
 
-      int staffIdx = _staff->idx();
+      int staffIdx = _staff ? _staff->idx() : -1;
       if (staffIdx == -1)
             return;
 
diff --git a/libmscore/line.cpp b/libmscore/line.cpp
index 86427924..9f6319bb 100644
--- a/libmscore/line.cpp
+++ b/libmscore/line.cpp
@@ -407,7 +407,10 @@ Segment* LineSegment::findSegmentForGrip(Grip grip, QPointF pos) const
             sys = foundSystems[0];
 
       // Restrict searching segment to the correct staff
-      pos.setY(sys->staffCanvasYpage(oldStaffIndex));
+	 if (sys->staff(oldStaffIndex))
+            pos.setY(sys->staffCanvasYpage(oldStaffIndex));
+      else
+            qWarning() << Q_FUNC_INFO << "System" << sys << "has no staff for oldStaffIndex=" << oldStaffIndex;
 
       Segment* seg = nullptr; // don't prefer any segment while searching line position
       int staffIndex = oldStaffIndex;
diff --git a/libmscore/textbase.cpp b/libmscore/textbase.cpp
index 31daa832..e6c9191f 100644
--- a/libmscore/textbase.cpp
+++ b/libmscore/textbase.cpp
@@ -240,7 +240,7 @@ TextBlock& TextCursor::curLine() const
 
 void TextCursor::changeSelectionFormat(FormatId id, QVariant val)
       {
-      if (!hasSelection())
+      if (!hasSelection() || !_text)
             return;
       int r1 = selectLine();
       int r2 = row();
diff --git a/mscore/dragelement.cpp b/mscore/dragelement.cpp
index a9b71742..00ac351b 100644
--- a/mscore/dragelement.cpp
+++ b/mscore/dragelement.cpp
@@ -134,7 +134,7 @@ void ScoreView::endDrag()
       setDropTarget(0); // this also resets dropAnchor
       _score->endCmd();
       updateGrips();
-      if (editData.element->normalModeEditBehavior() == Element::EditBehavior::Edit && _score->selection().element() == editData.element)
+      if (editData.element && editData.element->normalModeEditBehavior() == Element::EditBehavior::Edit && _score->selection().element() == editData.element)
             startEdit(/* editMode */ false);
       }
 }
diff --git a/mscore/seq.cpp b/mscore/seq.cpp
index 437245e2..66e85483 100644
--- a/mscore/seq.cpp
+++ b/mscore/seq.cpp
@@ -1349,11 +1349,11 @@ void Seq::stopNotes(int channel, bool realTime)
             };
       // Stop notes in all channels
       if (channel == -1) {
-            for(unsigned ch = 0; ch < cs->midiMapping().size(); ch++) {
+            for(unsigned ch = 0; cs && ch < cs->midiMapping().size(); ch++) {
                   send(NPlayEvent(ME_CONTROLLER, ch, CTRL_SUSTAIN, 0));
                   turnAllNotesOff(ch);
                   send(NPlayEvent(ME_CONTROLLER, ch, CTRL_ALL_NOTES_OFF, 0));
-                  if (cs->midiChannel(ch) != 9)
+                  if (cs && cs->midiChannel(ch) != 9)
                         send(NPlayEvent(ME_PITCHBEND,  ch, 0, 64));
                   }
             }
@@ -1361,7 +1361,7 @@ void Seq::stopNotes(int channel, bool realTime)
             send(NPlayEvent(ME_CONTROLLER, channel, CTRL_SUSTAIN, 0));
             turnAllNotesOff(channel);
             send(NPlayEvent(ME_CONTROLLER, channel, CTRL_ALL_NOTES_OFF, 0));
-            if (cs->midiChannel(channel) != 9)
+            if (cs && cs->midiChannel(channel) != 9)
                   send(NPlayEvent(ME_PITCHBEND,  channel, 0, 64));
             }
       if (cachedPrefs.useAlsaAudio || cachedPrefs.useJackAudio || cachedPrefs.usePulseAudio || cachedPrefs.usePortAudio) {

diff --git a/libmscore/beam.cpp b/libmscore/beam.cpp
index e820e784..831c1a77 100644
--- a/libmscore/beam.cpp
+++ b/libmscore/beam.cpp
@@ -127,7 +127,7 @@ Beam::~Beam()
 QPointF Beam::pagePos() const
       {
       System* s = system();
-      if (s == 0)
+      if (s == 0 || s->staves()->isEmpty())
             return pos();
       qreal yp = y() + s->staff(staffIdx())->y() + s->y();
       return QPointF(pageX(), yp);

diff --git a/libmscore/edit.cpp b/libmscore/edit.cpp
index 145e0545..2d5e9dbb 100644
--- a/libmscore/edit.cpp
+++ b/libmscore/edit.cpp
@@ -4118,10 +4118,10 @@ static Element* findLinkedVoiceElement(Element* e, Staff* nstaff)
 
       Score* score     = nstaff->score();
       Segment* segment = toSegment(e->parent());
-      Measure* measure = segment->measure();
-      Measure* m       = score->tick2measure(measure->tick());
-      Segment* s       = m->findSegment(segment->segmentType(), segment->tick());
-      return s->element(dtrack);
+      Measure* measure = segment ? segment->measure() : nullptr;
+      Measure* m       = measure ? score->tick2measure(measure->tick()) : nullptr;
+      Segment* s       = m ? m->findSegment(segment->segmentType(), segment->tick()) : nullptr;
+      return s ? s->element(dtrack) : nullptr;
       }
 
 //---------------------------------------------------------
@@ -4158,10 +4158,12 @@ static Chord* findLinkedChord(Chord* c, Staff* nstaff)
             }
 
       Segment* s  = c->segment();
+      if (!s)
+            return 0;
       Measure* nm = nstaff->score()->tick2measure(s->tick());
-      Segment* ns = nm->findSegment(s->segmentType(), s->tick());
-      Element* ne = ns->element(dtrack);
-      if (!ne->isChord())
+      Segment* ns = nm ? nm->findSegment(s->segmentType(), s->tick()) : nullptr;
+      Element* ne = ns ? ns->element(dtrack) : nullptr;
+      if (!ne || !ne->isChord())
             return 0;
       Chord* nc = toChord(ne);
       if (c->isGrace()) {
@@ -4914,15 +4916,17 @@ void Score::undoAddElement(Element* element)
                               sm = cr2->staffIdx() - cr1->staffIdx();
                         Chord* c1 = findLinkedChord(cr1, score->staff(staffIdx));
                         Chord* c2 = findLinkedChord(cr2, score->staff(staffIdx + sm));
-                        Note* nn1 = c1->findNote(n1->pitch(), n1->unisonIndex());
+                        Note* nn1 = c1 ? c1->findNote(n1->pitch(), n1->unisonIndex()) : 0;
                         Note* nn2 = c2 ? c2->findNote(n2->pitch(), n2->unisonIndex()) : 0;
 
                         // create tie
                         Tie* ntie = toTie(ne);
                         ntie->eraseSpannerSegments();
-                        ntie->setTrack(c1->track());
-                        ntie->setStartNote(nn1);
-                        ntie->setEndNote(nn2);
+				    if (c1 && nn1 && nn2) {
+					    ntie->setTrack(c1->track());
+					    ntie->setStartNote(nn1);
+					    ntie->setEndNote(nn2);
+				    }
                         undo(new AddElement(ntie));
                         }
                   else if (element->isInstrumentChange()) {
