diff --git a/fluid/fluid.cpp b/fluid/fluid.cpp
index 11e8368db7be672940462481c65a5fd8396ead6b..c2a135e1ba3e10b73f9e8458c6f216ab1a52e36c 100644
--- a/fluid/fluid.cpp
+++ b/fluid/fluid.cpp
@@ -918,6 +918,7 @@ QFileInfoList Fluid::sfFiles()
 
       QStringList pl = preferences.getString(PREF_APP_PATHS_MYSOUNDFONTS).split(";");
       pl.prepend(QFileInfo(QString("%1%2").arg(mscoreGlobalShare).arg("sound")).absoluteFilePath());
+      pl.prepend(QStringLiteral("@PREFIX@/share/sounds/sf2"));
 
       // append extensions directory
       QStringList extensionsDir = Ms::Extension::getDirectoriesByType(Ms::Extension::soundfontsDir);
diff --git a/mscore/mixertrackchannel.cpp b/mscore/mixertrackchannel.cpp
index b418bab41..2eceece6b 100644
--- a/mscore/mixertrackchannel.cpp
+++ b/mscore/mixertrackchannel.cpp
@@ -126,14 +126,16 @@ void MixerTrackChannel::applyStyle()
       QString style;
       switch (preferences.globalStyle()){
             case MuseScoreStyleType::DARK_FUSION:
+            case MuseScoreStyleType::SYSTEM_STYLE_IS_DARK:
                   style = _selected ? selStyleDark : unselStyleDark;
+                  setStyleSheet(style);
                   break;
             case MuseScoreStyleType::LIGHT_FUSION:
                   style = _selected ? selStyleLight : unselStyleLight;
+                  setStyleSheet(style);
                   break;
             }
 
-      setStyleSheet(style);
       }
 
 //---------------------------------------------------------
diff --git a/mscore/mixertrackpart.cpp b/mscore/mixertrackpart.cpp
index 4dbc2341f..3e353c275 100644
--- a/mscore/mixertrackpart.cpp
+++ b/mscore/mixertrackpart.cpp
@@ -141,14 +141,16 @@ void MixerTrackPart::applyStyle()
       QString style;
       switch (preferences.globalStyle()){
             case MuseScoreStyleType::DARK_FUSION:
+            case MuseScoreStyleType::SYSTEM_STYLE_IS_DARK:
                   style = _selected ? selStyleDark : unselStyleDark;
+                  setStyleSheet(style);
                   break;
             case MuseScoreStyleType::LIGHT_FUSION:
                   style = _selected ? selStyleLight : unselStyleLight;
+                  setStyleSheet(style);
                   break;
             }
 
-      setStyleSheet(style);
       }
 
 //---------------------------------------------------------
diff --git a/mscore/musescore.cpp b/mscore/musescore.cpp
index 4f8d9f5a4a70e271a9b5a47a5a2e5d6c32c039e1..e7577c52bc72f41c322dc552574bf29d398fc99b 100644
--- a/mscore/musescore.cpp
+++ b/mscore/musescore.cpp
@@ -1493,9 +1493,9 @@ MuseScore::MuseScore()
       a = getAction("fullscreen");
       a->setCheckable(true);
       a->setChecked(false);
-#ifndef Q_OS_MAC
+// #ifndef Q_OS_MAC
       menuView->addAction(a);
-#endif
+// #endif
 
       //---------------------
       //    Menu Add
@@ -1781,7 +1781,7 @@ MuseScore::MuseScore()
       menuHelp->addAction(aboutMusicXMLAction);
       Workspace::addActionAndString(aboutMusicXMLAction, "about-musicxml");
 
-#if defined(Q_OS_MAC) || defined(Q_OS_WIN)
+#if /*defined(Q_OS_MAC) ||*/ defined(Q_OS_WIN)
 #if !defined(FOR_WINSTORE)
       checkForUpdateAction = new QAction("", 0);
       connect(checkForUpdateAction, SIGNAL(triggered()), this, SLOT(checkForUpdatesUI()));
@@ -6983,46 +6983,57 @@ bool MuseScore::saveMp3(Score* score, QIODevice* device, bool& wasCanceled)
 
 void MuseScore::updateUiStyleAndTheme()
       {
-      // set UI Theme
-      QApplication::setStyle(QStyleFactory::create("Fusion"));
-
+      const auto globalStyle = preferences.globalStyle();
       QString wd      = QString("%1/%2").arg(QStandardPaths::writableLocation(QStandardPaths::DocumentsLocation)).arg(QCoreApplication::applicationName());
-      // set UI Color Palette
-      QPalette p(QApplication::palette());
-      QString jsonPaletteFilename = preferences.isThemeDark() ? "palette_dark_fusion.json" : "palette_light_fusion.json";;
-      QFile jsonPalette(QString(":/themes/%1").arg(jsonPaletteFilename));
-      // read from Documents TODO: remove this
-      if (QFile::exists(QString("%1/%2").arg(wd, "ms_palette.json")))
-            jsonPalette.setFileName(QString("%1/%2").arg(wd, "ms_palette.json"));
-      if (jsonPalette.open(QFile::ReadOnly | QFile::Text)) {
-            QJsonDocument d = QJsonDocument::fromJson(jsonPalette.readAll());
-            QJsonObject o = d.object();
-            QMetaEnum metaEnum = QMetaEnum::fromType<QPalette::ColorRole>();
-            for (int i = 0; i < metaEnum.keyCount(); ++i) {
-                  QJsonValue v = o.value(metaEnum.valueToKey(i));
-                  if (!v.isUndefined())
-                        p.setColor(static_cast<QPalette::ColorRole>(metaEnum.value(i)), QColor(v.toString()));
-                  }
-            }
-      QApplication::setPalette(p);
-
-      // set UI Style
-      QString css;
-      QString styleFilename = preferences.isThemeDark() ? "style_dark_fusion.css" : "style_light_fusion.css";
-      QFile fstyle(QString(":/themes/%1").arg(styleFilename));
-      // read from Documents TODO: remove this
-      if (QFile::exists(QString("%1/%2").arg(wd, "ms_style.css")))
-            fstyle.setFileName(QString("%1/%2").arg(wd, "ms_style.css"));
-      if (fstyle.open(QFile::ReadOnly | QFile::Text)) {
-            QTextStream in(&fstyle);
-            css = in.readAll();
-            }
-
-      css.replace("$voice1-bgcolor", MScore::selectColor[0].name(QColor::HexRgb));
-      css.replace("$voice2-bgcolor", MScore::selectColor[1].name(QColor::HexRgb));
-      css.replace("$voice3-bgcolor", MScore::selectColor[2].name(QColor::HexRgb));
-      css.replace("$voice4-bgcolor", MScore::selectColor[3].name(QColor::HexRgb));
-      qApp->setStyleSheet(css);
+      static auto systemStyle = QApplication::style()->objectName();
+      static auto systemPalette = QApplication::palette();
+
+      if (globalStyle == MuseScoreStyleType::DARK_FUSION || globalStyle == MuseScoreStyleType::LIGHT_FUSION) {
+          // set UI Theme
+          if (QApplication::style()->objectName() != QStringLiteral("Fusion")) {
+              QApplication::setStyle(QStyleFactory::create("Fusion"));
+          }
+
+          // set UI Color Palette
+          QPalette p(systemPalette);
+          QString jsonPaletteFilename = preferences.isThemeDark() ? "palette_dark_fusion.json" : "palette_light_fusion.json";;
+          QFile jsonPalette(QString(":/themes/%1").arg(jsonPaletteFilename));
+          // read from Documents TODO: remove this
+          if (QFile::exists(QString("%1/%2").arg(wd, "ms_palette.json")))
+                jsonPalette.setFileName(QString("%1/%2").arg(wd, "ms_palette.json"));
+          if (jsonPalette.open(QFile::ReadOnly | QFile::Text)) {
+                QJsonDocument d = QJsonDocument::fromJson(jsonPalette.readAll());
+                QJsonObject o = d.object();
+                QMetaEnum metaEnum = QMetaEnum::fromType<QPalette::ColorRole>();
+                for (int i = 0; i < metaEnum.keyCount(); ++i) {
+                      QJsonValue v = o.value(metaEnum.valueToKey(i));
+                      if (!v.isUndefined())
+                            p.setColor(static_cast<QPalette::ColorRole>(metaEnum.value(i)), QColor(v.toString()));
+                      }
+                }
+          QApplication::setPalette(p);
+
+          // set UI Style
+          QString css;
+          QString styleFilename = preferences.isThemeDark() ? "style_dark_fusion.css" : "style_light_fusion.css";
+          QFile fstyle(QString(":/themes/%1").arg(styleFilename));
+          // read from Documents TODO: remove this
+          if (QFile::exists(QString("%1/%2").arg(wd, "ms_style.css")))
+                fstyle.setFileName(QString("%1/%2").arg(wd, "ms_style.css"));
+          if (fstyle.open(QFile::ReadOnly | QFile::Text)) {
+                QTextStream in(&fstyle);
+                css = in.readAll();
+                }
+
+          css.replace("$voice1-bgcolor", MScore::selectColor[0].name(QColor::HexRgb));
+          css.replace("$voice2-bgcolor", MScore::selectColor[1].name(QColor::HexRgb));
+          css.replace("$voice3-bgcolor", MScore::selectColor[2].name(QColor::HexRgb));
+          css.replace("$voice4-bgcolor", MScore::selectColor[3].name(QColor::HexRgb));
+          qApp->setStyleSheet(css);
+      } else if (QApplication::style()->objectName() != systemStyle) {
+          QApplication::setStyle(QStyleFactory::create(systemStyle));
+          QApplication::setPalette(systemPalette);
+      }
 
       QString style = QString("*, QSpinBox { font: %1pt \"%2\" } ")
                   .arg(QString::number(preferences.getInt(PREF_UI_THEME_FONTSIZE)), preferences.getString(PREF_UI_THEME_FONTFAMILY))
diff --git a/mscore/pianolevels.cpp b/mscore/pianolevels.cpp
index 3dfce826b..e483cb940 100644
--- a/mscore/pianolevels.cpp
+++ b/mscore/pianolevels.cpp
@@ -125,6 +125,7 @@ void PianoLevels::paintEvent(QPaintEvent* e)
 
       switch (preferences.globalStyle()) {
             case MuseScoreStyleType::DARK_FUSION:
+            case MuseScoreStyleType::SYSTEM_STYLE_IS_DARK:
                   colPianoBg = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_BG_BASE_COLOR));
                   noteDeselected = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_NOTE_UNSEL_COLOR));
                   noteSelected = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_NOTE_SEL_COLOR));
diff --git a/mscore/pianoview.cpp b/mscore/pianoview.cpp
index 3f61bcbb2..e2a50d997 100644
--- a/mscore/pianoview.cpp
+++ b/mscore/pianoview.cpp
@@ -198,6 +198,7 @@ void PianoItem::paintNoteBlock(QPainter* painter, NoteEvent* evt)
 
       switch (preferences.globalStyle()) {
             case MuseScoreStyleType::DARK_FUSION:
+            case MuseScoreStyleType::SYSTEM_STYLE_IS_DARK:
                   noteDeselected = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_NOTE_UNSEL_COLOR));
                   noteSelected = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_NOTE_SEL_COLOR));
                   break;
@@ -321,6 +322,7 @@ void PianoView::drawBackground(QPainter* p, const QRectF& r)
 
       switch (preferences.globalStyle()) {
             case MuseScoreStyleType::DARK_FUSION:
+            case MuseScoreStyleType::SYSTEM_STYLE_IS_DARK:
                   colSelectionBox = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_SELECTION_BOX_COLOR));
 
                   colWhiteKeyBg = QColor(preferences.getColor(PREF_UI_PIANOROLL_DARK_BG_KEY_WHITE_COLOR));
diff --git a/mscore/preferences.cpp b/mscore/preferences.cpp
index e51575e2f740782bb52bc58ffb755819247f4679..c17626bb0790328ff1b9877f62501b95483c40b7 100644
--- a/mscore/preferences.cpp
+++ b/mscore/preferences.cpp
@@ -36,7 +36,7 @@ void Preferences::init(bool storeInMemoryOnly)
 
       _storeInMemoryOnly = storeInMemoryOnly;
 
-#if defined(Q_OS_MAC) || (defined(Q_OS_WIN) && !defined(FOR_WINSTORE))
+#if /*defined(Q_OS_MAC) ||*/ (defined(Q_OS_WIN) && !defined(FOR_WINSTORE))
       bool checkUpdateStartup = true;
       bool checkExtensionsUpdateStartup = true;
 #else
@@ -44,13 +44,13 @@ void Preferences::init(bool storeInMemoryOnly)
       bool checkExtensionsUpdateStartup = false;
 #endif
 
-#if defined(Q_OS_MAC) || defined(Q_OS_WIN)
-      // use system native file dialogs
+// #if defined(Q_OS_MAC) || defined(Q_OS_WIN)
+      // use system native file dialogs; under KDE this will give the convenient plasma file dialogs.
       // Qt file dialog is very slow on Windows and Mac
       bool nativeDialogs           = true;
-#else
-      bool nativeDialogs           = false;    // don't use system native file dialogs
-#endif
+// #else
+//       bool nativeDialogs           = false;    // don't use system native file dialogs
+// #endif
       bool defaultUsePortAudio = false;
       bool defaultUsePulseAudio = false;
       bool defaultUseJackAudio = false;
@@ -380,7 +380,8 @@ MuseScoreStyleType Preferences::globalStyle() const
 
 bool Preferences::isThemeDark() const
       {
-      return globalStyle() == MuseScoreStyleType::DARK_FUSION;
+      const auto style = globalStyle();
+      return style == MuseScoreStyleType::DARK_FUSION || style == MuseScoreStyleType::SYSTEM_STYLE_IS_DARK;
       }
 
 void Preferences::setToDefaultValue(const QString key)
diff --git a/mscore/preferences.h b/mscore/preferences.h
index 10b0677bc..df59540ae 100644
--- a/mscore/preferences.h
+++ b/mscore/preferences.h
@@ -64,7 +64,10 @@ enum {
 
 enum class MuseScoreStyleType : char {
       DARK_FUSION = 0,
-      LIGHT_FUSION
+      LIGHT_FUSION,
+      // added keys for the system theme and system theme with dark palette
+      SYSTEM_STYLE,
+      SYSTEM_STYLE_IS_DARK
       };
 
 // MusicXML export break values
diff --git a/mscore/prefsdialog.ui b/mscore/prefsdialog.ui
index 95a1af1bd..87f7f35d6 100644
--- a/mscore/prefsdialog.ui
+++ b/mscore/prefsdialog.ui
@@ -735,6 +735,16 @@
               <string>Light</string>
              </property>
             </item>
+            <item>
+             <property name="text">
+              <string>System Default</string>
+             </property>
+            </item>
+            <item>
+             <property name="text">
+              <string>System Default (with dark palette)</string>
+             </property>
+            </item>
            </widget>
           </item>
           <item row="2" column="3">
