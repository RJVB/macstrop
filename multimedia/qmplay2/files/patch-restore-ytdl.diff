diff --git a/src/gui/DemuxerThr.cpp b/src/gui/DemuxerThr.cpp
index 38d9e18a..200284bd 100644
--- a/src/gui/DemuxerThr.cpp
+++ b/src/gui/DemuxerThr.cpp
@@ -785,7 +785,16 @@ void DemuxerThr::emitInfo()
     if (!Functions::splitPrefixAndUrlIfHasPluginPrefix(url, nullptr, &realUrl, nullptr))
         realUrl = url;
     if (!realUrl.startsWith("file://"))
+    {
+        QString ytUrl;
+        if (playC.url.startsWith("YouTube://")
+            && realUrl.startsWith("[")
+            && Functions::splitPrefixAndUrlIfHasPluginPrefix(playC.url, nullptr, &ytUrl, nullptr))
+        {
+            realUrl = ytUrl;
+        }
         info += "<b>" + tr("Address") + ":</b> " + realUrl + "<br>";
+    }
     else
     {
         const QString pth = realUrl.right(realUrl.length() - 7);
diff --git a/src/qmplay2/YouTubeDL.cpp b/src/qmplay2/YouTubeDL.cpp
index d532c762..abbfecbd 100644
--- a/src/qmplay2/YouTubeDL.cpp
+++ b/src/qmplay2/YouTubeDL.cpp
@@ -25,24 +25,32 @@
 #ifdef Q_OS_WIN
     #include <Functions.hpp>
 #endif
+#include <Module.hpp>
 
 #include <QReadWriteLock>
 #include <QJsonDocument>
 #include <QJsonObject>
 #include <QJsonArray>
 #include <QFile>
+#include <QDebug>
 
 constexpr const char *g_name = "YouTubeDL";
 
 static QReadWriteLock g_lock;
 
+QString YouTubeDL::s_ytDlPath;
+
 QString YouTubeDL::getFilePath()
 {
-    return QMPlay2Core.getSettingsDir() + "youtube-dl"
+    if (s_ytDlPath.isEmpty())
+    {
+        s_ytDlPath = QMPlay2Core.getSettingsDir() + "youtube-dl"
 #ifdef Q_OS_WIN
-    ".exe"
+        ".exe"
 #endif
-    ;
+        ;
+    }
+    return s_ytDlPath;
 }
 
 bool YouTubeDL::fixUrl(const QString &url, QString &outUrl, IOController<> *ioCtrl, QString *name, QString *extension, QString *error)
@@ -70,7 +78,10 @@ bool YouTubeDL::fixUrl(const QString &url, QString &outUrl, IOController<> *ioCt
 
 YouTubeDL::YouTubeDL() :
     m_aborted(false)
-{}
+{
+    getFilePath();
+}
+
 YouTubeDL::~YouTubeDL()
 {}
 
@@ -128,6 +139,103 @@ void YouTubeDL::addr(const QString &url, const QString &param, QString *streamUr
     }
 }
 
+bool YouTubeDL::doUpdate(const QStringList &commonArgs, QString &error)
+{
+    QMPlay2Core.setWorking(true);
+    m_process.start(s_ytDlPath, QStringList() << "-U" << commonArgs);
+    QString updateOutput;
+    bool updating = false;
+    if (m_process.waitForStarted() && m_process.waitForReadyRead() && !m_aborted)
+    {
+        updateOutput = m_process.readAllStandardOutput();
+        if (updateOutput.contains("Updating"))
+        {
+            emit QMPlay2Core.sendMessage(tr("Updating \"youtube-dl\", please wait..."), g_name);
+            updating = true;
+        }
+    }
+    if (!m_aborted && m_process.waitForFinished(-1) && !m_aborted)
+    {
+        updateOutput += m_process.readAllStandardOutput() + m_process.readAllStandardError();
+        if (updateOutput.contains("ERROR:") || updateOutput.contains("package manager"))
+            error += "\n" + updateOutput;
+        else if (m_process.exitCode() == 0 && !updateOutput.contains("up-to-date"))
+        {
+#ifdef Q_OS_WIN
+            const QString updatedFile = s_ytDlPath + ".new";
+            QFile::remove(Functions::filePath(s_ytDlPath) + "youtube-dl-updater.bat");
+            if (QFile::exists(updatedFile))
+            {
+                Functions::s_wait(0.2); //Wait 200 ms to be sure that file is closed
+                QFile::remove(s_ytDlPath);
+                if (QFile::rename(updatedFile, s_ytDlPath))
+#endif
+                {
+                    QMPlay2Core.setWorking(false);
+                    emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" has been successfully updated!"), g_name);
+                    g_lock.unlock(); // Unlock for write
+                    return true;
+                }
+#ifdef Q_OS_WIN
+            }
+            else
+            {
+                error += "\nUpdated youtube-dl file: \"" + updatedFile + "\" not found!";
+            }
+#endif
+        }
+    }
+    else if (updating && m_aborted)
+    {
+        emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" update has been aborted!"), g_name, 2);
+    }
+    QMPlay2Core.setWorking(false);
+    return false;
+}
+
+bool YouTubeDL::doInstall()
+{
+    const QString downloadUrl = "https://yt-dl.org/downloads/latest/youtube-dl"
+#ifdef Q_OS_WIN
+    ".exe"
+#endif
+    ;
+
+    NetworkAccess net;
+    if (net.start(m_reply, downloadUrl))
+    {
+        QMPlay2Core.setWorking(true);
+        emit QMPlay2Core.sendMessage(tr("Downloading \"youtube-dl\", please wait..."), g_name);
+        m_reply->waitForFinished();
+        const QByteArray replyData = m_reply->readAll();
+        const bool hasError = m_reply->hasError();
+        m_reply.reset();
+        if (m_aborted)
+            emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" download has been aborted!"), g_name, 2);
+        else if (!hasError)
+        {
+            QFile f(s_ytDlPath);
+            if (f.open(QFile::WriteOnly | QFile::Truncate))
+            {
+                if (f.write(replyData) != replyData.size())
+                    f.remove();
+                else
+                {
+                    f.close();
+                    emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" has been successfully downloaded!"), g_name);
+                    QMPlay2Core.setWorking(false);
+                    g_lock.unlock(); // Unlock for write
+                    return true;
+                }
+            }
+        }
+        if (!m_aborted)
+            emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" download has failed!"), g_name, 3);
+        QMPlay2Core.setWorking(false);
+    }
+    return false;
+}
+
 QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString *silentErr, bool canUpdate)
 {
 #ifndef Q_OS_ANDROID
@@ -166,13 +274,11 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
         return true;
     };
 
-    const QString ytDlPath = getFilePath();
-
     if (!doLock(Lock::Read, false))
         return {};
 
 #ifndef Q_OS_WIN
-    QFile file(ytDlPath);
+    QFile file(s_ytDlPath);
     if (file.exists())
     {
         if (!doLock(Lock::Write, true)) // Unlock for read and lock for write
@@ -194,8 +300,14 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
     if (httpProxy && *httpProxy)
         commonArgs += {"--proxy", httpProxy};
 
-    m_process.start(ytDlPath, QStringList() << url << "-g" << args << commonArgs << "-j");
-    if (m_process.waitForFinished() && !m_aborted)
+    emit QMPlay2Core.statusBarMessage(tr("youtube-dl fetching streams for") + " " + url, 0);
+
+    m_process.start(s_ytDlPath, QStringList() << url << "-g" << args << commonArgs << "-j");
+    bool isStarted = m_process.waitForStarted();
+    if (!isStarted) {
+        qWarning() << s_ytDlPath << "failed to start:" << m_process.errorString() << m_process.exitCode();
+    }
+    if (isStarted && m_process.waitForFinished() && !m_aborted)
     {
         const auto finishWithError = [&](const QString &error) {
             if (!m_aborted)
@@ -252,127 +364,129 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
             {
                 if (!doLock(Lock::Write, true)) // Unlock for read and lock for write
                     return {};
-                QMPlay2Core.setWorking(true);
-                m_process.start(ytDlPath, QStringList() << "-U" << commonArgs);
-                QString updateOutput;
-                bool updating = false;
-                if (m_process.waitForStarted() && m_process.waitForReadyRead() && !m_aborted)
+                if (doUpdate(commonArgs, error))
                 {
-                    updateOutput = m_process.readAllStandardOutput();
-                    if (updateOutput.contains("Updating"))
+                    return exec(url, args, silentErr, false);
+                }
+                if (!doLock(Lock::Read, true)) // Unlock for write and lock for read
+                    return {};
+            }
+            finishWithError(error);
+            return {};
+        }
+
+        QStringList retList;
+        static bool oldParser = false;
+        if ((args.count() > 0 && args.at(0) == "-f"
+            && !result.at(1).contains("://manifest.googlevideo.com"))
+            || oldParser)
+        {
+            //[Title], url, JSON, [url, JSON]
+            for (int i = result.count() - 1; i >= 0; --i)
+            {
+                if (i > 0 && result.at(i).startsWith('{'))
+                {
+                    const QString url = result.at(i - 1);
+
+                    const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
+                    for (const QJsonValue &formats : json.object()["formats"].toArray())
                     {
-                        emit QMPlay2Core.sendMessage(tr("Updating \"youtube-dl\", please wait..."), g_name);
-                        updating = true;
+                        if (url == formats.toObject()["url"].toString())
+                            QMPlay2Core.addCookies(url, formats.toObject()["http_headers"].toObject()["Cookie"].toString().toUtf8());
                     }
+
+                    result.removeAt(i);
                 }
-                if (!m_aborted && m_process.waitForFinished(-1) && !m_aborted)
+            }
+            retList = result;
+        }
+        else
+        {
+            QStringList formatPrefs;
+			// y
+            for (Module *pluginInstance : QMPlay2Core.getPluginsInstance())
+            {
+                if (pluginInstance->name() == "Extensions")
                 {
-                    updateOutput += m_process.readAllStandardOutput() + m_process.readAllStandardError();
-                    if (updateOutput.contains("ERROR:") || updateOutput.contains("package manager"))
-                        error += "\n" + updateOutput;
-                    else if (m_process.exitCode() == 0 && !updateOutput.contains("up-to-date"))
+                    formatPrefs = pluginInstance->getStringList("YouTube/ItagList");
+                    // append the other itags (is there a point?)
+                    for (const auto iTag : pluginInstance->getString("YouTube/ItagVideoList"))
                     {
-#ifdef Q_OS_WIN
-                        const QString updatedFile = ytDlPath + ".new";
-                        QFile::remove(Functions::filePath(ytDlPath) + "youtube-dl-updater.bat");
-                        if (QFile::exists(updatedFile))
+                        if (!formatPrefs.contains(iTag))
                         {
-                            Functions::s_wait(0.2); //Wait 200 ms to be sure that file is closed
-                            QFile::remove(ytDlPath);
-                            if (QFile::rename(updatedFile, ytDlPath))
-#endif
-                            {
-                                QMPlay2Core.setWorking(false);
-                                emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" has been successfully updated!"), g_name);
-                                g_lock.unlock(); // Unlock for write
-                                return exec(url, args, silentErr, false);
-                            }
-#ifdef Q_OS_WIN
+                            qWarning() << "video itag" << iTag;
+                            formatPrefs << iTag;
                         }
-                        else
+                    }
+                    for (const auto iTag : pluginInstance->getString("YouTube/ItagAudioList"))
+                    {
+                        if (!formatPrefs.contains(iTag))
                         {
-                            error += "\nUpdated youtube-dl file: \"" + updatedFile + "\" not found!";
+                            qWarning() << "audio itag" << iTag;
+                            formatPrefs << iTag;
                         }
-#endif
                     }
+                    break;
                 }
-                else if (updating && m_aborted)
-                {
-                    emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" update has been aborted!"), g_name, 2);
-                }
-                QMPlay2Core.setWorking(false);
-                if (!doLock(Lock::Read, true)) // Unlock for write and lock for read
-                    return {};
             }
-            finishWithError(error);
-            return {};
-        }
-
-        //[Title], url, JSON, [url, JSON]
-        for (int i = result.count() - 1; i >= 0; --i)
-        {
-            if (i > 0 && result.at(i).startsWith('{'))
+            // construct a sorted map of the available heights and the corresponding stream URLs
+            QMap<int,QString> height2Url;
+            for (int i = 1 ; i < result.count(); ++i)
             {
-                const QString url = result.at(i - 1);
-
-                const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
-                for (const QJsonValue &formats : json.object()["formats"].toArray())
+                if (i > 0 && result.at(i).startsWith('{'))
                 {
-                    if (url == formats.toObject()["url"].toString())
-                        QMPlay2Core.addCookies(url, formats.toObject()["http_headers"].toObject()["Cookie"].toString().toUtf8());
+                    const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
+                    for (const QJsonValue &formats : json.object()["formats"].toArray())
+                    {
+                        const auto object = formats.toObject();
+                        if (object.contains("url") && object.contains("height"))
+                        {
+                            const auto streamUrl = object["url"].toString();
+                            const int height = object["height"].toInt();
+                            // add the URL if its format_id is not blacklisted
+                            if (formatPrefs.count() == 0 || formatPrefs.contains(object["format_id"].toString()))
+                            {
+                                if (object.contains("http_headers"))
+                                {
+                                    QMPlay2Core.addCookies(streamUrl, object["http_headers"].toObject()["Cookie"].toString().toUtf8());
+                                }
+                                // there can be multiple formats with the same height
+                                height2Url.insertMulti(height, streamUrl);
+                            }
+                        }
+                    }
                 }
+            }
 
-                result.removeAt(i);
+            // construct the return list
+            const auto urlList = height2Url.values();
+            // reverse-sort the URL list so that the higher resolutions get priority
+            for (const auto streamUrl : urlList)
+            {
+                retList.prepend(streamUrl);
+            }
+            if (!result.at(0).contains("://"))
+            {
+                // this is probably the video title: prepend it.
+                retList.prepend(result.at(0));
             }
         }
 
+        // clear the status bar message, we're done.
+        emit QMPlay2Core.statusBarMessage(QString(), 0);
         g_lock.unlock(); // Unlock for read
-        return result;
+        return retList;
     }
     else if (canUpdate && !m_aborted && m_process.error() == QProcess::FailedToStart)
     {
-        const QString downloadUrl = "https://yt-dl.org/downloads/latest/youtube-dl"
-#ifdef Q_OS_WIN
-        ".exe"
-#endif
-        ;
-
-        NetworkAccess net;
-        if (net.start(m_reply, downloadUrl))
+        if (!doLock(Lock::Write, true)) // Unlock for read and lock for write
         {
-            if (!doLock(Lock::Write, true)) // Unlock for read and lock for write
-            {
-                m_reply.reset();
-                return {};
-            }
-            QMPlay2Core.setWorking(true);
-            emit QMPlay2Core.sendMessage(tr("Downloading \"youtube-dl\", please wait..."), g_name);
-            m_reply->waitForFinished();
-            const QByteArray replyData = m_reply->readAll();
-            const bool hasError = m_reply->hasError();
             m_reply.reset();
-            if (m_aborted)
-                emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" download has been aborted!"), g_name, 2);
-            else if (!hasError)
-            {
-                QFile f(ytDlPath);
-                if (f.open(QFile::WriteOnly | QFile::Truncate))
-                {
-                    if (f.write(replyData) != replyData.size())
-                        f.remove();
-                    else
-                    {
-                        f.close();
-                        emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" has been successfully downloaded!"), g_name);
-                        QMPlay2Core.setWorking(false);
-                        g_lock.unlock(); // Unlock for write
-                        return exec(url, args, silentErr, false);
-                    }
-                }
-            }
-            if (!m_aborted)
-                emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" download has failed!"), g_name, 3);
-            QMPlay2Core.setWorking(false);
+            return {};
+        }
+        if (doInstall())
+        {
+            return exec(url, args, silentErr, false);
         }
     }
 
diff --git a/src/qmplay2/headers/YouTubeDL.hpp b/src/qmplay2/headers/YouTubeDL.hpp
index e3bcafa0..51473790 100644
--- a/src/qmplay2/headers/YouTubeDL.hpp
+++ b/src/qmplay2/headers/YouTubeDL.hpp
@@ -44,9 +44,12 @@ public:
     QStringList exec(const QString &url, const QStringList &args, QString *silentErr = nullptr, bool canUpdate = true);
 
 private:
+    bool doUpdate(const QStringList &commonArgs, QString &error);
+    bool doInstall();
     void abort() override;
 
     IOController<NetworkReply> m_reply;
     QProcess m_process;
     bool m_aborted;
+    static QString s_ytDlPath;
 };
