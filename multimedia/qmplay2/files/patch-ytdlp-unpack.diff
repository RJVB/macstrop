diff --git a/src/qmplay2/YouTubeDL.cpp b/src/qmplay2/YouTubeDL.cpp
index 42a7d608..a474039a 100644
--- a/src/qmplay2/YouTubeDL.cpp
+++ b/src/qmplay2/YouTubeDL.cpp
@@ -63,6 +63,16 @@ QString YouTubeDL::getFilePath()
         return customPath;
     return QMPlay2Core.getSettingsDir() + getYtDlpFileName();
 }
+
+QString YouTubeDL::getUnpackedFilePath()
+{
+    return QMPlay2Core.getSettingsDir() + "__main__.py"
+#ifdef Q_OS_WIN
+    "_x86.exe"
+#endif
+    ;
+}
+
 QStringList YouTubeDL::getCommonArgs()
 {
     auto &QMPSettings = QMPlay2Core.getSettings();
@@ -111,10 +121,14 @@ bool YouTubeDL::fixUrl(const QString &url, QString &outUrl, IOController<> *ioCt
 
 YouTubeDL::YouTubeDL()
     : m_ytDlPath(getFilePath())
+    , m_ytDLUnpackedPath(getUnpackedFilePath())
     , m_commonArgs(getCommonArgs())
     , m_aborted(false)
 {
     m_process.setWorkingDirectory(QDir::tempPath()); // Ensure it's a writable directory
+    if (!QFileInfo::exists(m_ytDLUnpackedPath)) {
+        m_ytDLUnpackedPath.clear();
+    }
 }
 YouTubeDL::~YouTubeDL()
 {}
@@ -403,6 +417,7 @@ bool YouTubeDL::download()
                 {
                     emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" has been successfully downloaded!"), g_name);
                     QMPlay2Core.setWorking(false);
+                    unpack();
                     return true;
                 }
             }
@@ -428,7 +443,7 @@ bool YouTubeDL::update()
     QMPlay2Core.setWorking(true);
 
     ensureExecutable();
-    startProcess(QStringList() << "-U" << m_commonArgs);
+    startProcess(QStringList() << "-U" << m_commonArgs, false);
     if (!m_process.waitForStarted())
     {
         QMPlay2Core.setWorking(false);
@@ -459,6 +474,7 @@ bool YouTubeDL::update()
         {
             QMPlay2Core.setWorking(false);
             emit QMPlay2Core.sendMessage(tr("\"youtube-dl\" has been successfully updated!"), g_name);
+            unpack();
             return true;
         }
     }
@@ -471,6 +487,34 @@ bool YouTubeDL::update()
     return true;
 }
 
+bool YouTubeDL::unpack()
+{
+    bool ret = false;
+#ifdef Q_OS_UNIX
+    const auto unzip = QStandardPaths::findExecutable("unzip");
+    if (!unzip.isNull() && !unzip.isEmpty() && !m_aborted) {
+        QProcess unzipIt;
+        unzipIt.setWorkingDirectory(QMPlay2Core.getSettingsDir());
+        unzipIt.setProgram(unzip);
+        unzipIt.setArguments(QStringList() << "-o" << "-q" << m_ytDlPath);
+        unzipIt.start();
+        unzipIt.waitForFinished(-1);
+        if (unzipIt.exitStatus() == QProcess::NormalExit && unzipIt.exitCode() <= 1) {
+            qDebug() << m_ytDlPath << "unpacked";
+            const QString unpacked = getUnpackedFilePath();
+            if (QFileInfo::exists(unpacked)) {
+                m_ytDLUnpackedPath = unpacked;
+                ret = true;
+            } else {
+                qWarning() << "unpacking did not give a __main__.py file!";
+                m_ytDLUnpackedPath.clear();
+            }
+        }
+    }
+#endif
+    return ret;
+}
+
 void YouTubeDL::ensureExecutable()
 {
 #if !defined(Q_OS_WIN)
@@ -479,6 +523,15 @@ void YouTubeDL::ensureExecutable()
         QFile file(m_ytDlPath);
         file.setPermissions(file.permissions() | QFile::ExeOwner | QFile::ExeUser | QFile::ExeGroup | QFile::ExeOther);
     }
+    if (m_ytDLUnpackedPath.isEmpty()) {
+        unpack();
+    }
+    if (!m_ytDLUnpackedPath.isEmpty()) {
+        if (!QFileInfo(m_ytDLUnpackedPath).isExecutable()) {
+            QFile file(m_ytDLUnpackedPath);
+            file.setPermissions(file.permissions() | QFile::ExeOwner | QFile::ExeUser | QFile::ExeGroup | QFile::ExeOther);
+        }
+    }
 #endif
 }
 
@@ -494,13 +547,30 @@ bool YouTubeDL::onProcessCantStart()
     return prepare();
 }
 
-void YouTubeDL::startProcess(QStringList args)
+void YouTubeDL::startProcess(QStringList args, bool allowUnpacked)
 {
-    QString program = m_ytDlPath;
+    QString program = (allowUnpacked && !m_ytDLUnpackedPath.isEmpty())? m_ytDLUnpackedPath : m_ytDlPath;
 
 #ifndef Q_OS_WIN
     QFile ytDlFile(program);
-    if (ytDlFile.open(QFile::ReadOnly))
+    bool pythonFound = false;
+    if (qEnvironmentVariableIsSet("QMPLAY2_PYTHON_CMD"))
+    {
+        const auto pythonCmd = qgetenv("QMPLAY2_PYTHON_CMD");
+        if (QStandardPaths::findExecutable(pythonCmd).endsWith(pythonCmd))
+        {
+            args.prepend(program);
+            args.prepend("-OO");
+            program = pythonCmd;
+            qWarning() << "Using QMPLAY2_PYTHON_CMD=" << pythonCmd;
+            pythonFound = true;
+        }
+        else
+        {
+            qCritical() << "Cannot locate QMPLAY2_PYTHON_CMD=" << pythonCmd;
+        }
+    }
+    if (!pythonFound && ytDlFile.open(QFile::ReadOnly))
     {
         const auto shebang = ytDlFile.readLine(99).trimmed();
         const int idx = shebang.lastIndexOf("python");
@@ -510,6 +580,7 @@ void YouTubeDL::startProcess(QStringList args)
             if (QStandardPaths::findExecutable(pythonCmd).endsWith(pythonCmd))
             {
                 args.prepend(program);
+                args.prepend("-OO");
                 program = pythonCmd;
             }
 #ifdef Q_OS_MACOS
diff --git a/src/qmplay2/YouTubeDL.hpp b/src/qmplay2/YouTubeDL.hpp
index 202e19e3..d7f0d74b 100644
--- a/src/qmplay2/YouTubeDL.hpp
+++ b/src/qmplay2/YouTubeDL.hpp
@@ -48,19 +48,22 @@ private:
     void abort() override;
 
 private:
+    static QString getUnpackedFilePath();
     bool prepare();
 
     bool download();
     bool update();
+    bool unpack();
 
     void ensureExecutable();
 
     bool onProcessCantStart();
 
-    void startProcess(QStringList args);
+    void startProcess(QStringList args, bool allowUnpacked = true);
 
 private:
     const QString m_ytDlPath;
+    QString m_ytDLUnpackedPath;
     const QStringList m_commonArgs;
     IOController<NetworkReply> m_reply;
     QProcess m_process;
