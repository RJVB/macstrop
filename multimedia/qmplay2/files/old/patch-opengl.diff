diff --git a/src/qmplay2/opengl/OpenGLCommon.cpp b/src/qmplay2/opengl/OpenGLCommon.cpp
index b5a146366e64802256d4fea21fc435477f1db260..59a666109dbb373085e199536aeeb4e81bc810e8 100644
--- a/src/qmplay2/opengl/OpenGLCommon.cpp
+++ b/src/qmplay2/opengl/OpenGLCommon.cpp
@@ -34,6 +34,8 @@
 #include <QPainter>
 #include <QLibrary>
 #include <QWidget>
+#include <QLoggingCategory>
+#include <QOpenGLFunctions>
 
 /* OpenGL|ES 2.0 doesn't have those definitions */
 #ifndef GL_MAP_WRITE_BIT
@@ -52,6 +54,11 @@
     #define GL_TEXTURE_RECTANGLE_ARB 0x84F5
 #endif
 
+Q_LOGGING_CATEGORY(gllog, "OpenGLLog")
+
+OpenGLInstance::GLBindTexture OpenGLCommon::glBindTexture = nullptr;
+OpenGLInstance::GLTexParameteri OpenGLCommon::glTexParameteri = nullptr;
+
 OpenGLCommon::OpenGLCommon() :
     VideoOutputCommon(false),
     vSync(true),
@@ -66,26 +73,37 @@ OpenGLCommon::OpenGLCommon() :
     hasVbo(true),
     nIndices(0)
 {
-#ifndef OPENGL_ES2
+// #ifndef OPENGL_ES2
     glActiveTexture = m_glInstance->glActiveTexture;
     glGenBuffers = m_glInstance->glGenBuffers;
     glBindBuffer = m_glInstance->glBindBuffer;
     glBufferData = m_glInstance->glBufferData;
     glDeleteBuffers = m_glInstance->glDeleteBuffers;
-#endif
+// #endif
     glMapBufferRange = m_glInstance->glMapBufferRange;
     glMapBuffer = m_glInstance->glMapBuffer;
     glUnmapBuffer = m_glInstance->glUnmapBuffer;
 
+    glBindTexture = m_glInstance->glBindTexture;
+    glTexParameteri = m_glInstance->glTexParameteri;
+    glClear = m_glInstance->glClear;
+    glDisable = m_glInstance->glDisable;
+    glEnable = m_glInstance->glEnable;
+    glTexImage2D = m_glInstance->glTexImage2D;
+    glTexSubImage2D = m_glInstance->glTexSubImage2D;
+    glDrawArrays = m_glInstance->glDrawArrays;
+    glDrawElements = m_glInstance->glDrawElements;
+    glDeleteTextures = m_glInstance->glDeleteTextures;
+
     videoAdjustment.unset();
 
     /* Initialize texCoordYCbCr array */
     texCoordYCbCr[0] = texCoordYCbCr[4] = texCoordYCbCr[5] = texCoordYCbCr[7] = 0.0f;
     texCoordYCbCr[1] = texCoordYCbCr[3] = 1.0f;
 
-#ifndef Q_OS_MACOS
+// #ifndef Q_OS_MACOS
     canUseHueSharpness = (m_glInstance->glVer >= 30);
-#endif
+// #endif
 
     m_matrixChangeFn = [this] {
         setMatrix = true;
@@ -133,8 +151,10 @@ void OpenGLCommon::initialize(const std::shared_ptr<OpenGLHWInterop> &hwInterop)
             if (!context.create() || !context.makeCurrent(&surface))
             {
                 isOK = false;
+                qCCritical(gllog) << Q_FUNC_INFO << "Failed to create a QOpenGLContext, or to make it current for" << surface.format();
                 return;
             }
+            qCWarning(gllog) << Q_FUNC_INFO << "Got OpenGL context format:" << context.format();
         }
 
         switch (hwInterop->getFormat())
@@ -310,9 +330,15 @@ void OpenGLCommon::initializeGL()
         return;
     }
 
+    if (!QOpenGLContext::currentContext() || !QOpenGLContext::currentContext()->isValid()) {
+        qCCritical(gllog) << Q_FUNC_INFO << "No current or invalid OpenGL context";
+    } else {
+        qCWarning(gllog) << Q_FUNC_INFO << "Current OpenGL context:" << QOpenGLContext::currentContext()->format();
+    }
     /* Set OpenGL parameters */
-    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
-    glClearColor(0.0, 0.0, 0.0, 1.0);
+    auto qgl = QOpenGLFunctions(QOpenGLContext::currentContext());
+    qgl.glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+    qgl.glClearColor(0.0, 0.0, 0.0, 1.0);
     glClear(GL_COLOR_BUFFER_BIT);
     glDisable(GL_STENCIL_TEST);
     glDisable(GL_DEPTH_TEST);
@@ -320,7 +346,7 @@ void OpenGLCommon::initializeGL()
 
     /* Prepare textures */
     const int texturesToGen = m_hwInterop ? 0 : numPlanes;
-    glGenTextures(texturesToGen + 1, textures);
+    qgl.glGenTextures(texturesToGen + 1, textures);
     for (int i = 0; i < texturesToGen + 1; ++i)
     {
         const quint32 tmpTarget = (i == 0) ? GL_TEXTURE_2D : target;
@@ -330,7 +356,7 @@ void OpenGLCommon::initializeGL()
     if (hasPbo)
     {
         glGenBuffers(1 + texturesToGen, pbo);
-        glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
+        qgl.glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
     }
 
     setVSync(vSync);
diff --git a/src/qmplay2/opengl/OpenGLCommon.hpp b/src/qmplay2/opengl/OpenGLCommon.hpp
index 77efb9883a0ea53711d2fe23209c921f331a1a3e..69cfe30324f34b3b8c0d4606d80367dc9a6d260a 100644
--- a/src/qmplay2/opengl/OpenGLCommon.hpp
+++ b/src/qmplay2/opengl/OpenGLCommon.hpp
@@ -86,17 +86,28 @@ protected:
 
     void contextAboutToBeDestroyed();
 
-#ifndef OPENGL_ES2
+// #ifndef OPENGL_ES2
     OpenGLInstance::GLActiveTexture glActiveTexture = nullptr;
     OpenGLInstance::GLGenBuffers glGenBuffers = nullptr;
     OpenGLInstance::GLBindBuffer glBindBuffer = nullptr;
     OpenGLInstance::GLBufferData glBufferData = nullptr;
     OpenGLInstance::GLDeleteBuffers glDeleteBuffers = nullptr;
-#endif
+// #endif
     OpenGLInstance::GLMapBufferRange glMapBufferRange = nullptr;
     OpenGLInstance::GLMapBuffer glMapBuffer = nullptr;
     OpenGLInstance::GLUnmapBuffer glUnmapBuffer = nullptr;
 
+    static OpenGLInstance::GLBindTexture glBindTexture;
+    static OpenGLInstance::GLTexParameteri glTexParameteri;
+    OpenGLInstance::GLClear glClear = nullptr;
+    OpenGLInstance::GLVoidFunGLenum glDisable = nullptr;
+    OpenGLInstance::GLVoidFunGLenum glEnable = nullptr;
+    OpenGLInstance::GLTexImage2D glTexImage2D = nullptr;
+    OpenGLInstance::GLTexSubImage2D glTexSubImage2D = nullptr;
+    OpenGLInstance::GLDrawArrays glDrawArrays = nullptr;
+    OpenGLInstance::GLDrawElements glDrawElements = nullptr;
+    OpenGLInstance::GLDeleteTextures glDeleteTextures = nullptr;
+
     bool vSync;
 
     void dispatchEvent(QEvent *e, QObject *p) override;
diff --git a/src/qmplay2/opengl/OpenGLInstance.cpp b/src/qmplay2/opengl/OpenGLInstance.cpp
index 3e1cf1644fcc32efab226aa3da98171a2ca8a40e..3e1022d12fec080c16c3247145fda8b84e579864 100644
--- a/src/qmplay2/opengl/OpenGLInstance.cpp
+++ b/src/qmplay2/opengl/OpenGLInstance.cpp
@@ -19,6 +19,7 @@ bool OpenGLInstance::init()
     const bool canCreateNonPowerOfTwoTextures = extenstions.contains("GL_ARB_texture_non_power_of_two");
     if (!supportsShaders || !canCreateNonPowerOfTwoTextures)
         return false;
+#endif
 
     glActiveTexture = (GLActiveTexture)context.getProcAddress("glActiveTexture");
     if (!glActiveTexture)
@@ -29,14 +30,26 @@ bool OpenGLInstance::init()
     glBufferData = (GLBufferData)context.getProcAddress("glBufferData");
     glDeleteBuffers = (GLDeleteBuffers)context.getProcAddress("glDeleteBuffers");
     hasVBO = glGenBuffers && glBindBuffer && glBufferData && glDeleteBuffers;
-#endif
     glMapBufferRange = (GLMapBufferRange)context.getProcAddress("glMapBufferRange");
     glMapBuffer = (GLMapBuffer)context.getProcAddress("glMapBuffer");
     glUnmapBuffer = (GLUnmapBuffer)context.getProcAddress("glUnmapBuffer");
     hasPBO = hasVBO && (glMapBufferRange || glMapBuffer) && glUnmapBuffer;
 
-#if !defined(OPENGL_ES2) && !defined(Q_OS_MACOS) // On macOS I have always OpenGL 2.1...
+    glBindTexture = (GLBindTexture)context.getProcAddress("glBindTexture");
+    glTexParameteri = (GLTexParameteri)context.getProcAddress("glTexParameteri");
+    glClear = (GLClear)context.getProcAddress("glClear");
+    glDisable = (GLVoidFunGLenum)context.getProcAddress("glDisable");
+    glEnable = (GLVoidFunGLenum)context.getProcAddress("glEnable");
+    glTexImage2D = (GLTexImage2D)context.getProcAddress("glTexImage2D");
+    glTexSubImage2D = (GLTexSubImage2D)context.getProcAddress("glTexSubImage2D");
+    glDrawArrays = (GLDrawArrays)context.getProcAddress("glDrawArrays");
+    glDrawElements = (GLDrawElements)context.getProcAddress("glDrawElements");
+    glDeleteTextures = (GLDeleteTextures)context.getProcAddress("glDeleteTextures");
+
+#if !defined(OPENGL_ES2) /*&& !defined(Q_OS_MACOS)*/ // On macOS I have always OpenGL 2.1...
     int glMajor = 0, glMinor = 0;
+    using GLGetIntegerv = void (APIENTRY *)(GLenum, GLint*);
+    GLGetIntegerv glGetIntegerv = (GLGetIntegerv) context.getProcAddress("glGetIntegerv");
     glGetIntegerv(GL_MAJOR_VERSION, &glMajor);
     glGetIntegerv(GL_MINOR_VERSION, &glMinor);
 
diff --git a/src/qmplay2/opengl/OpenGLInstance.hpp b/src/qmplay2/opengl/OpenGLInstance.hpp
index 327969411b52103cfeb69f58ff0f1629d864a0ec..507cc0b4eefb4f44a6c7400ff979bc95f431e314 100644
--- a/src/qmplay2/opengl/OpenGLInstance.hpp
+++ b/src/qmplay2/opengl/OpenGLInstance.hpp
@@ -29,18 +29,28 @@
 class OpenGLInstance final : public GPUInstance
 {
 public:
-#ifndef OPENGL_ES2
+// #ifndef OPENGL_ES2
     using GLActiveTexture  = void  (APIENTRY *)(GLenum);
     using GLGenBuffers     = void  (APIENTRY *)(GLsizei, GLuint *);
     using GLBindBuffer     = void  (APIENTRY *)(GLenum, GLuint);
     using GLBufferData     = void  (APIENTRY *)(GLenum, GLsizeiptr, const void *, GLenum);
     using GLDeleteBuffers  = void  (APIENTRY *)(GLsizei, const GLuint *);
     using GLGenerateMipmap = void  (APIENTRY *)(GLenum);
-#endif
+// #endif
     using GLMapBufferRange = void *(APIENTRY *)(GLenum, GLintptr, GLsizeiptr, GLbitfield);
     using GLMapBuffer      = void *(APIENTRY *)(GLenum, GLbitfield);
     using GLUnmapBuffer    = GLboolean(APIENTRY *)(GLenum);
 
+    using GLBindTexture    = void *(APIENTRY *)(GLenum, GLuint);
+    using GLTexParameteri  = void *(APIENTRY *)(GLenum, GLenum, GLint);
+    using GLClear          = void *(APIENTRY *)(GLbitfield);
+    using GLTexImage2D     = void *(APIENTRY *)(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid*);
+    using GLTexSubImage2D  = void *(APIENTRY *)(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid*);
+    using GLDrawArrays     = void *(APIENTRY *)(GLenum, GLint, GLsizei);
+    using GLDrawElements   = void *(APIENTRY *)(GLenum, GLsizei, GLenum, const GLvoid*);
+    using GLDeleteTextures = void *(APIENTRY *)(GLsizei, const GLuint*);
+    using GLVoidFunGLenum  = GLActiveTexture;
+
 public:
     bool init();
 
@@ -51,17 +61,28 @@ public:
     VideoWriter *createOrGetVideoOutput() override;
 
 public:
-#ifndef OPENGL_ES2
+// #ifndef OPENGL_ES2
     GLActiveTexture glActiveTexture = nullptr;
     GLGenBuffers glGenBuffers = nullptr;
     GLBindBuffer glBindBuffer = nullptr;
     GLBufferData glBufferData = nullptr;
     GLDeleteBuffers glDeleteBuffers = nullptr;
-#endif
+// #endif
     GLMapBufferRange glMapBufferRange = nullptr;
     GLMapBuffer glMapBuffer = nullptr;
     GLUnmapBuffer glUnmapBuffer = nullptr;
 
+    GLBindTexture glBindTexture = nullptr;
+    GLTexParameteri glTexParameteri = nullptr;
+    GLClear glClear = nullptr;
+    GLVoidFunGLenum glDisable = nullptr;
+    GLVoidFunGLenum glEnable = nullptr;
+    GLTexImage2D glTexImage2D = nullptr;
+    GLTexSubImage2D glTexSubImage2D = nullptr;
+    GLDrawArrays glDrawArrays = nullptr;
+    GLDrawElements glDrawElements = nullptr;
+    GLDeleteTextures glDeleteTextures = nullptr;
+
     bool hasVBO = false;
     bool hasPBO = false;
 
