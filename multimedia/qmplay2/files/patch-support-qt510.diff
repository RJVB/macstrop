commit e8921a7925d27607a80848c670660fe9205a9555
Author: Błażej Szczygieł <mumei6102@gmail.com>
Date:   Fri Apr 19 18:38:46 2024 +0200

    Require Qt5 at least 5.15.2

diff --git a/README.md b/README.md
index 45341a88..cb90b9b2 100644
--- a/README.md
+++ b/README.md
@@ -193,7 +193,7 @@ For CMake build be sure that you have CMake 3.16 or higher.
 ### You need devel packages:
 
 #### Necessary:
-- Qt5 >= 5.15.2:
+- Qt5 >= 5.10:
     - Qt5DBus - Linux/BSD only,
     - Qt5Svg - for SVG icons,
     - Qt5Qml - for MediaBrowser,
diff --git a/src/gui/AVThread.cpp b/src/gui/AVThread.cpp
index 1a2ae2f2..61996bfd 100644
--- a/src/gui/AVThread.cpp
+++ b/src/gui/AVThread.cpp
@@ -26,6 +26,9 @@
 
 AVThread::AVThread(PlayClass &playC)
     : playC(playC)
+#if QT_VERSION < QT_VERSION_CHECK(5, 14, 0)
+    , mutex(QMutex::Recursive)
+#endif
 {
     connect(this, SIGNAL(finished()), this, SLOT(deleteLater()));
     mutex.lock();
diff --git a/src/gui/AVThread.hpp b/src/gui/AVThread.hpp
index c415e7cf..e146a25a 100644
--- a/src/gui/AVThread.hpp
+++ b/src/gui/AVThread.hpp
@@ -70,6 +70,10 @@ protected:
 
     volatile bool br = false, br2 = false;
     bool waiting = false;
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     QRecursiveMutex mutex;
+#else
+    QMutex mutex;
+#endif
     QMutex updateMutex;
 };
diff --git a/src/gui/MainWidget.cpp b/src/gui/MainWidget.cpp
index 61ffeb36..c3cbc073 100644
--- a/src/gui/MainWidget.cpp
+++ b/src/gui/MainWidget.cpp
@@ -570,7 +570,7 @@ void MainWidget::focusChanged(QWidget *old, QWidget *now)
 void MainWidget::processParam(const QString &param, const QString &data)
 {
     auto getItemsToPlay = [&] {
-        auto items = data.split('\n', Qt::SkipEmptyParts);
+        auto items = data.split('\n', QT_SKIP_EMPTY_PARTS);
         for (auto &&item : items)
             item = Functions::maybeExtensionAddress(item);
         return items;
@@ -1624,7 +1624,7 @@ void MainWidget::setStreamsMenu(const QStringList &videoStreams, const QStringLi
                 connect(action, &QAction::triggered,
                         this, [this, data = std::move(lines[1])] {
                     if (data.startsWith("seek"))
-                        seek(QStringView(data).mid(4).toDouble());
+                        seek(QStringView(data).mid(4)MAYBE_TO_STRING.toDouble());
                     else
                         playC.chStream(data);
                 });
diff --git a/src/gui/PlayClass.cpp b/src/gui/PlayClass.cpp
index ef40ca31..0930b67d 100644
--- a/src/gui/PlayClass.cpp
+++ b/src/gui/PlayClass.cpp
@@ -275,14 +275,14 @@ void PlayClass::seek(double pos, bool allowAccurate)
 void PlayClass::chStream(const QString &s)
 {
     if (s.startsWith("audio"))
-        chosenAudioStream = QStringView(s).right(s.length() - 5).toInt();
+        chosenAudioStream = QStringView(s).right(s.length() - 5)MAYBE_TO_STRING.toInt();
     else if (s.startsWith("video"))
-        chosenVideoStream = QStringView(s).right(s.length() - 5).toInt();
+        chosenVideoStream = QStringView(s).right(s.length() - 5)MAYBE_TO_STRING.toInt();
     else if (s.startsWith("subtitles"))
-        chosenSubtitlesStream = QStringView(s).right(s.length() - 9).toInt();
+        chosenSubtitlesStream = QStringView(s).right(s.length() - 9)MAYBE_TO_STRING.toInt();
     else if (s.startsWith("fileSubs"))
     {
-        int idx = QStringView(s).right(s.length() - 8).toInt();
+        int idx = QStringView(s).right(s.length() - 8)MAYBE_TO_STRING.toInt();
         if (fileSubsList.count() > idx)
             loadSubsFile(fileSubsList[idx]);
     }
diff --git a/src/qmplay2/Functions.cpp b/src/qmplay2/Functions.cpp
index 4cf5c202a7983fe17d8e3aaefecfa5891fa2ffa0..57a653a8383a5de85222ae1e10d9a4121e1954bc 100644
--- a/src/qmplay2/Functions.cpp
+++ b/src/qmplay2/Functions.cpp
@@ -1110,7 +1110,7 @@ QString Functions::getSeqFile(const QString &dir, const QString &ext, const QStr
     quint16 num = 0;
     for (const QString &f : QDir(dir).entryList({QString("QMPlay2_%1_?????%2").arg(frag, ext)}, QDir::Files, QDir::Name))
     {
-        const quint16 n = QStringView(f).mid(8 + frag.size() + 1, 5).toUShort();
+        const quint16 n = QStringView(f).mid(8 + frag.size() + 1, 5)MAYBE_TO_STRING.toUShort();
         if (n > num)
             num = n;
     }
diff --git a/src/modules/AudioFilters/Equalizer.cpp b/src/modules/AudioFilters/Equalizer.cpp
index e134824a..1bde4ea6 100644
--- a/src/modules/AudioFilters/Equalizer.cpp
+++ b/src/modules/AudioFilters/Equalizer.cpp
@@ -65,6 +65,9 @@ float Equalizer::getAmpl(int val)
 }
 
 Equalizer::Equalizer(Module &module)
+#if QT_VERSION < QT_VERSION_CHECK(5, 14, 0)
+    : m_mutex(QMutex::Recursive)
+#endif
 {
     SetModule(module);
 }
diff --git a/src/modules/AudioFilters/Equalizer.hpp b/src/modules/AudioFilters/Equalizer.hpp
index 516de5b5..18bf8363 100644
--- a/src/modules/AudioFilters/Equalizer.hpp
+++ b/src/modules/AudioFilters/Equalizer.hpp
@@ -56,7 +56,11 @@ private:
     bool m_hasParameters = false;
     bool m_enabled = false;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     mutable QRecursiveMutex m_mutex;
+#else
+    mutable QMutex m_mutex;
+#endif
     FFT m_fftIn;
     FFT m_fftOut;
     FFT::Complex *m_complex = nullptr;
diff --git a/src/modules/CUVID/CuvidAPI.cpp b/src/modules/CUVID/CuvidAPI.cpp
index 613f297e..58f967f6 100644
--- a/src/modules/CUVID/CuvidAPI.cpp
+++ b/src/modules/CUVID/CuvidAPI.cpp
@@ -23,7 +23,11 @@
 
 namespace cu {
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
 static QRecursiveMutex mutex;
+#else
+static QMutex mutex(QMutex::Recursive);
+#endif
 
 cuInitType init = nullptr;
 cuDeviceGetType deviceGet = nullptr;
diff --git a/src/modules/Extensions/Radio.cpp b/src/modules/Extensions/Radio.cpp
index d24fc865..452dcf92 100644
--- a/src/modules/Extensions/Radio.cpp
+++ b/src/modules/Extensions/Radio.cpp
@@ -363,7 +363,7 @@ void Radio::on_saveMyRadioStationButton_clicked()
     if (idx < 0)
         return;
 
-    const auto suffix = QStringView(filter).mid(idx + 2).chopped(1);
+    const auto suffix = QStringView(filter).mid(idx + 2).chopped(1)MAYBE_TO_STRING;
     if (!filePath.endsWith(suffix, Qt::CaseInsensitive))
         filePath += suffix;
 
diff --git a/src/modules/FFmpeg/FFDemux.cpp b/src/modules/FFmpeg/FFDemux.cpp
index ee2debb7..b271af51 100644
--- a/src/modules/FFmpeg/FFDemux.cpp
+++ b/src/modules/FFmpeg/FFDemux.cpp
@@ -250,7 +250,7 @@ bool FFDemux::open(const QString &entireUrl)
     {
         if (!param.isEmpty())
             addFormatContext(url, param);
-        else for (QString stream : url.split("][", Qt::SkipEmptyParts))
+        else for (QString stream : url.split("][", QT_SKIP_EMPTY_PARTS))
         {
             stream.remove('[');
             stream.remove(']');
diff --git a/src/modules/Inputs/Inputs.cpp b/src/modules/Inputs/Inputs.cpp
index 6fd1b00e..03ba4099 100644
--- a/src/modules/Inputs/Inputs.cpp
+++ b/src/modules/Inputs/Inputs.cpp
@@ -316,7 +316,7 @@ void ModuleSettingsWidget::saveSettings()
     if (pcmExtsE->text().isEmpty())
         pcmExtsE->setText(g_standartExts);
     sets().set("PCM", pcmB->isChecked());
-    sets().set("PCM/extensions", pcmExtsE->text().split(';', Qt::SkipEmptyParts));
+    sets().set("PCM/extensions", pcmExtsE->text().split(';', QT_SKIP_EMPTY_PARTS));
     for (int i = 0; i < formatB.size(); ++i)
         if (formatB[i]->isChecked())
         {
diff --git a/src/modules/Inputs/ToneGenerator.cpp b/src/modules/Inputs/ToneGenerator.cpp
index f825b9b1..cefd5b42 100644
--- a/src/modules/Inputs/ToneGenerator.cpp
+++ b/src/modules/Inputs/ToneGenerator.cpp
@@ -137,7 +137,7 @@ bool ToneGenerator::open(const QString &entireUrl)
         srate = 44100;
 
     freqs.clear();
-    for (const QString &freq : QUrlQuery(url).queryItemValue("freqs").split(',', Qt::SkipEmptyParts))
+    for (const QString &freq : QUrlQuery(url).queryItemValue("freqs").split(',', QT_SKIP_EMPTY_PARTS))
         freqs += freq.toInt();
     if (freqs.isEmpty())
     {
diff --git a/src/modules/Subtitles/Classic.cpp b/src/modules/Subtitles/Classic.cpp
index 7f13ce9b..8b0b8790 100644
--- a/src/modules/Subtitles/Classic.cpp
+++ b/src/modules/Subtitles/Classic.cpp
@@ -107,7 +107,7 @@ bool Classic::toASS(const QByteArray &txt, LibASS *ass, double fps)
 
     QList<SubWithoutEnd> subsWithoutEnd;
 
-    for (const QString &line : QString(txt).remove('\r').split('\n', Qt::SkipEmptyParts))
+    for (const QString &line : QString(txt).remove('\r').split('\n', QT_SKIP_EMPTY_PARTS))
     {
         double start = 0.0, duration = 0.0;
         QString sub;
@@ -166,7 +166,7 @@ bool Classic::toASS(const QByteArray &txt, LibASS *ass, double fps)
                 if (use_mDVD_FPS && (s == 0 || s == 1))
                 {
                     use_mDVD_FPS = false;
-                    const double newFPS = QStringView(sub).left(qMin(6, sub.size())).toDouble();
+                    const double newFPS = QStringView(sub).left(qMin(6, sub.size()))MAYBE_TO_STRING.toDouble();
                     if (newFPS > 0.0 && newFPS < 100.0)
                     {
                         fps = newFPS;
diff --git a/src/modules/Subtitles/SRT.cpp b/src/modules/Subtitles/SRT.cpp
index 785576d7..e598cab1 100644
--- a/src/modules/Subtitles/SRT.cpp
+++ b/src/modules/Subtitles/SRT.cpp
@@ -33,7 +33,7 @@ bool SRT::toASS(const QByteArray &srt, LibASS *ass, double)
     bool ok = false;
     const char *scanfFmt = (srt.left(11 /* Including BOM */).contains("WEBVTT")) ? "%d:%d:%d.%d" : "%d:%d:%d,%d";
 
-    for (const QString &entry : QString(QString("\n\n") + srt).remove('\r').split(QRegularExpression("\n\n+(\\d+\n)?"), Qt::SkipEmptyParts))
+    for (const QString &entry : QString(QString("\n\n") + srt).remove('\r').split(QRegularExpression("\n\n+(\\d+\n)?"), QT_SKIP_EMPTY_PARTS))
     {
         int idx = entry.indexOf('\n');
         if (idx > -1)
diff --git a/src/qmplay2/Functions.cpp b/src/qmplay2/Functions.cpp
index 26e9f22e..6791891e 100644
--- a/src/qmplay2/Functions.cpp
+++ b/src/qmplay2/Functions.cpp
@@ -638,7 +638,7 @@ QStringList Functions::getUrlsFromMimeData(const QMimeData *mimeData, const bool
     }
     else if (mimeData->hasText())
     {
-        urls = mimeData->text().remove('\r').split('\n', Qt::SkipEmptyParts);
+        urls = mimeData->text().remove('\r').split('\n', QT_SKIP_EMPTY_PARTS);
     }
     if (checkExtensionsForUrl)
     {
diff --git a/src/qmplay2/YouTubeDL.cpp b/src/qmplay2/YouTubeDL.cpp
index fd4a5d24..9abe815e 100644
--- a/src/qmplay2/YouTubeDL.cpp
+++ b/src/qmplay2/YouTubeDL.cpp
@@ -36,7 +36,11 @@
 
 constexpr const char *g_name = "YouTubeDL";
 static bool g_mustUpdate = true;
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
 static QRecursiveMutex g_mutex;
+#else
+static QMutex g_mutex(QMutex::Recursive);
+#endif
 
 static inline QString getYtDlpFileName()
 {
@@ -196,7 +200,7 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
         }
         else
         {
-            result = result.constFirst().split('\n', Qt::SkipEmptyParts);
+            result = result.constFirst().split('\n', QT_SKIP_EMPTY_PARTS);
 
             // Verify if URLs has printable characters, because sometimes we
             // can get binary garbage at output (especially on Openload).
diff --git a/src/gui/PlaylistDock.cpp b/src/gui/PlaylistDock.cpp
index aef8903f57ce2ffd0e0be6dce2fe8338ac076a3c..ac25b93cbfc4690f665d519372e47ae6e895c7bd 100644
--- a/src/gui/PlaylistDock.cpp
+++ b/src/gui/PlaylistDock.cpp
@@ -564,13 +564,22 @@ void PlaylistDock::delEntries(bool fromDisk)
         return;
 
     if (fromDisk &&
+#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
             QMessageBox::question(
                 this,
                 tr("Playlist"),
                 tr("Are you sure you want to delete selected entries from disk? "
                    "Non-local entries will only be removed from the list."),
                 QMessageBox::Yes,
-                QMessageBox::No) == QMessageBox::No) {
+                QMessageBox::No) == QMessageBox::No
+#else
+            QMessageBox::warning(
+                this,
+                tr("Playlist"),
+                tr("Sorry, file deletion is not supported in this build."),
+                QMessageBox::Ok) == QMessageBox::Ok
+#endif
+    ){
         return;
     }
 
@@ -580,6 +589,7 @@ void PlaylistDock::delEntries(bool fromDisk)
     for (QTreeWidgetItem *tWI : selectedItems)
     {
         bool canDeleteTWI = true;
+#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
         if (fromDisk && !(PlaylistWidget::getFlags(tWI) & Playlist::Entry::Locked))
         {
             if (const QString url = getUrl(tWI); url.startsWith("file://"))
@@ -589,6 +599,7 @@ void PlaylistDock::delEntries(bool fromDisk)
                     diskDeleteFailed = true;
             }
         }
+#endif
         if (canDeleteTWI && maybeDeleteTreeWidgetItem(tWI))
         {
             deleted = true;
diff --git b/src/modules/Extensions/Downloader.cpp a/src/modules/Extensions/Downloader.cpp
index a3b1a32b..03ff9cf1 100644
--- b/src/modules/Extensions/Downloader.cpp
+++ a/src/modules/Extensions/Downloader.cpp
@@ -451,12 +451,16 @@ void DownloadItemW::startConversion()
     maybeAddAbsolutePath(convertCommand);
 
     qDebug() << "Starting conversion:" << convertCommand.toUtf8().constData();
+#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
     auto args = QProcess::splitCommand(convertCommand);
     if (!args.isEmpty())
     {
         const QString program = args.takeFirst();
         m_convertProcess->start(program, args);
     }
+#else
+    m_convertProcess->start(convertCommand);
+#endif
 }
 void DownloadItemW::deleteConvertProcess()
 {
diff --git b/src/qmplay2/QMPlay2Core.cpp a/src/qmplay2/QMPlay2Core.cpp
index cd500d17..f3ec3d31 100644
--- b/src/qmplay2/QMPlay2Core.cpp
+++ a/src/qmplay2/QMPlay2Core.cpp
@@ -592,7 +592,9 @@ void QMPlay2CoreClass::setLanguage()
         lang = QLocale::system().name();
     if (translator->load(lang, langDir))
     {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
         lang = QFileInfo(translator->filePath()).baseName();
+#endif
     }
     else
     {
diff --git b/src/qmplay2/opengl/OpenGLCommon.cpp a/src/qmplay2/opengl/OpenGLCommon.cpp
index 206ddc84..28fe0495 100644
--- b/src/qmplay2/opengl/OpenGLCommon.cpp
+++ a/src/qmplay2/opengl/OpenGLCommon.cpp
@@ -718,8 +718,12 @@ QByteArray OpenGLCommon::readShader(const QString &fileName, bool pure)
             shader = "precision highp float;\n";
         shader.append("#line 1\n");
     }
+#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
     const auto data = res.uncompressedData();
     shader.append(data.constData(), data.size());
+#else
+    shader.append((const char *)res.data(), res.size());
+#endif
     return shader;
 }
 
diff --git b/src/qmplay2/vulkan/VulkanInstance.cpp a/src/qmplay2/vulkan/VulkanInstance.cpp
index ece06eae..1e0d7fac 100644
--- b/src/qmplay2/vulkan/VulkanInstance.cpp
+++ a/src/qmplay2/vulkan/VulkanInstance.cpp
@@ -144,9 +144,14 @@ constexpr auto s_queueFlags = vk::QueueFlagBits::eGraphics | vk::QueueFlagBits::
 vector<uint32_t> Instance::readShader(const QString &fileName)
 {
     const QResource res(":/vulkan/" + fileName + ".spv");
+#if QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)
     const auto data = res.uncompressedData();
     const auto u32Data = reinterpret_cast<const uint32_t *>(data.data());
     return vector<uint32_t>(u32Data, u32Data + data.size() / sizeof(uint32_t));
+#else
+    const auto resData = reinterpret_cast<const uint32_t *>(res.data());
+    return vector<uint32_t>(resData, resData + res.size() / sizeof(uint32_t));
+#endif
 }
 
 vk::Format Instance::fromFFmpegPixelFormat(int avPixFmt)
diff --git a/src/modules/Extensions/OpenSubtitles.cpp b/src/modules/Extensions/OpenSubtitles.cpp
index b5f65aa4..484ebfb3 100644
--- a/src/modules/Extensions/OpenSubtitles.cpp
+++ b/src/modules/Extensions/OpenSubtitles.cpp
@@ -38,6 +38,7 @@
 #include <QDebug>
 #include <QFile>
 #include <QMenu>
+#include <QUrl>
 
 #include <vector>
 
