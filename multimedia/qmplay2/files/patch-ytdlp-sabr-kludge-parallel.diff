diff --git a/src/modules/Extensions/YouTube.cpp b/src/modules/Extensions/YouTube.cpp
index 15915f0532b34c6c48b2f8df21fda8dce21c9c1d..451facc6b66e2adc7f940e88d0059b5153d284cb 100644
--- a/src/modules/Extensions/YouTube.cpp
+++ b/src/modules/Extensions/YouTube.cpp
@@ -1220,21 +1220,42 @@ QStringList YouTube::getYouTubeVideo(const QString &param, const QString &url, I
         return {};
 
     const auto rawOutputs = youTubeDL->exec(url, {"--flat-playlist", "--write-sub", "-J"}, nullptr, true);
-    if (rawOutputs.count() != 2)
+    fprintf(stderr, "youTubeDL->exec() returned %d outputs\n", rawOutputs.count());
+    if (rawOutputs.count() != 2 && rawOutputs.count() != 4)
         return {};
 
-    const auto rawOutput = rawOutputs[0].toUtf8();
+    QStringList urls;
+    QStringList exts;
+    QHash<QString, QString> urlLanguages;
+    QHash<QString, QString> urlNotes;
+    QString title, description;
+    QHash<int, QPair<QStringList, QStringList>> itagsData;
+    bool audioOnly;
+    QJsonObject subtitles;
+    const bool parallelDebug = qEnvironmentVariableIsSet("QMPLAY2_PARALLEL_YOUTUBEDL_DEBUG");
+
+    for (int attempt = 0 ; attempt < rawOutputs.count() / 2 ; ++attempt)
+    {
+    if (attempt > 0)
+        qWarning() << "YouTube :: Couldn't find desired format, trying a less selective approach";
+
+    const int approach = attempt * 2;
+    const auto rawOutput = rawOutputs[approach].toUtf8();
+    if (parallelDebug)
+        qWarning() << QString("yt-dlp output [%1] in bytes: %2").arg(approach).arg(rawOutput.size());
     if (rawOutput.isEmpty())
         return {};
 
-    const auto &rawErrOutput = rawOutputs[1];
+    const auto &rawErrOutput = rawOutputs[approach + 1];
 
     const auto o = QJsonDocument::fromJson(rawOutput).object();
     if (o.isEmpty())
         return {};
+    subtitles = o["subtitles"].toObject();
 
     const bool hasTitle = !rawErrOutput.contains("Unable to extract video title", Qt::CaseInsensitive);
-    const auto title = hasTitle ? o["title"].toString() : QString();
+    title = hasTitle ? o["title"].toString() : QString();
+    description = o["description"].toString();
 
     if (hasTitle && o["_type"].toString() == QStringLiteral("playlist"))
     {
@@ -1256,12 +1277,12 @@ QStringList YouTube::getYouTubeVideo(const QString &param, const QString &url, I
     if (formats.isEmpty())
         return {};
 
-    const bool audioOnly = (param.compare("audio", Qt::CaseInsensitive) == 0);
+    audioOnly = (param.compare("audio", Qt::CaseInsensitive) == 0);
 
-    QStringList urls;
-    QStringList exts;
-    QHash<QString, QString> urlLanguages;
-    QHash<QString, QString> urlNotes;
+    urls.clear();
+    exts.clear();
+    urlLanguages.clear();
+    urlNotes.clear();
 
     m_itagsMutex.lock();
     const auto videoItags = m_videoItags;
@@ -1269,8 +1290,10 @@ QStringList YouTube::getYouTubeVideo(const QString &param, const QString &url, I
     const auto hlsItags = m_hlsItags;
     m_itagsMutex.unlock();
 
-    QHash<int, QPair<QStringList, QStringList>> itagsData;
+    itagsData.clear();
 
+    if (parallelDebug)
+        qWarning() << "Number of formats:" << formats.size();
     for (auto &&formatVal : formats)
     {
         const auto format = formatVal.toObject();
@@ -1292,12 +1315,22 @@ QStringList YouTube::getYouTubeVideo(const QString &param, const QString &url, I
         {
             itagsData[itag].first += url;
             itagsData[itag].second += "." + ext;
+            if (parallelDebug)
+                fprintf(stderr, "Will consider format #%d[%s], sizeof(url)=%d, ext=\"%s\" lang=\"%s\"\n",
+                    itag, qPrintable(format["format_id"].toString()), url.size(), ext.toLatin1().constData(),
+                    qPrintable(format[QStringLiteral("language")].toString()));
             if (!itagStr.value(1).isEmpty())
             {
                 urlLanguages[url] = format[QStringLiteral("language")].toString();
                 urlNotes[url] = format[QStringLiteral("format_note")].toString();
             }
         }
+        else if (parallelDebug)
+        {
+            fprintf(stderr, "\tSkipping format #%d[%s], sizeof(url)=%d, ext=\"%s\"\n",
+                    itag, qPrintable(format["format_id"].toString()), url.size(), qPrintable(ext));
+        }
+
     }
 
     auto appendUrl = [&](const QVector<int> &itags) {
@@ -1328,13 +1361,21 @@ QStringList YouTube::getYouTubeVideo(const QString &param, const QString &url, I
         appendUrl(hlsItags);
     }
 
+    if (!urls.isEmpty())
+    {
+        break;
+    }
+
+    // loop to 2nd attempt/2nd approach
+    }
+
     if (urls.isEmpty())
     {
-        qCritical() << "YouTube :: Can't find desired format, available:" << itagsData.keys();
+        qCritical() << "YouTube :: Can't find desired format, available:" << itagsData.keys()
+            << "considered:" << m_videoItags << "(video) +" << m_audioItags << "(audio) and" << m_hlsItags << "(HLS)";
         return {};
     }
 
-    const auto subtitles = o["subtitles"].toObject();
     QString lang = QMPlay2Core.getSettings().getString("SubtitlesLanguage");
     if (lang.isEmpty()) // Default language
         lang = QLocale::languageToString(QLocale::system().language());
@@ -1433,7 +1474,7 @@ QStringList YouTube::getYouTubeVideo(const QString &param, const QString &url, I
     }
     result += title;
 
-    result += o["description"].toString();
+    result += description;
 
     return result;
 }
diff --git a/src/qmplay2/YouTubeDL.cpp b/src/qmplay2/YouTubeDL.cpp
index 42a7d608f1a4cff78bdd9acf196a0797bdf0c5f6..7062dc6a8d9901a0c3b57e150277a290cc6ec304 100644
--- a/src/qmplay2/YouTubeDL.cpp
+++ b/src/qmplay2/YouTubeDL.cpp
@@ -201,37 +220,74 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
     if (!prepare())
         return {};
 
-    QStringList processArgs;
-    processArgs += url;
+    const bool doParallel = !qEnvironmentVariableIsSet("QMPLAY2_NO_PARALLEL_YOUTUBEDL");
+
+    QStringList processArgs, process2Args;
     if (!rawOutput)
         processArgs += "-g";
     processArgs += args;
+    process2Args = processArgs;
     processArgs += m_commonArgs;
+    process2Args += "--no-check-certificate";
     if (!rawOutput)
+    {
         processArgs += "-j";
+    }
+    // URL comes last!
+    processArgs += url;
+    process2Args += url;
+
+    QElapsedTimer timer;
 
+    timer.start();
     startProcess(processArgs);
     if (!m_process.waitForStarted() && !m_aborted)
     {
         if (!onProcessCantStart())
             return {};
+        timer.restart();
         startProcess(processArgs);
     }
 
-    if (!m_process.waitForFinished(-1) || m_aborted)
+    if (rawOutput && doParallel)
+    {
+        m_processToStart = 2;
+        startProcess(process2Args);
+        m_process2.waitForStarted();
+    }
+
+    bool finished = m_process.waitForFinished(-1);
+    if (rawOutput && doParallel)
+    {
+        fprintf(stderr, "m_process finished (in %gs) ...", timer.elapsed() / 1000.0); fflush(stderr);
+        finished &= m_process2.waitForFinished(-1);
+        fprintf(stderr, " m_process2 finished too (in %gs)\n", timer.elapsed() / 1000.0);
+    }
+    else
+    {
+        fprintf(stderr, "m_process finished (in %gs)\n", timer.elapsed() / 1000.0);
+    }
+    if (!finished || m_aborted)
         return {};
 
     QStringList result;
 
-    bool isOk = (m_process.exitCode() == 0);
+    for (int proc = 0 ; proc < ((rawOutput && doParallel)? 2 : 1) ; ++proc)
+    {
+    QProcess &process = (proc == 0) ? m_process : m_process2;
+
+    bool isOk = (process.exitCode() == 0);
     QString error;
 
     if (isOk)
     {
-        result = QStringList(QString::fromLocal8Bit(m_process.readAllStandardOutput()));
+        result += QStringList(QString::fromLocal8Bit(process.readAllStandardOutput()));
         if (rawOutput)
         {
-            result += m_process.readAllStandardError();
+            const auto error = process.readAllStandardError();
+            result += error;
+            if (!error.isEmpty())
+                qWarning() << QString("yt-dlp (process #%1)").arg(proc+1) << url << ":" << error;
         }
         else
         {
@@ -261,8 +317,10 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
 
     if (!isOk)
     {
-        result.clear();
-        const QString newError = m_process.readAllStandardError();
+        if (!rawOutput)
+            result.clear();
+        const QString newError = process.readAllStandardError();
+        qWarning() << QString("yt-dlp (process #%1)").arg(proc+1) << url << ":" << newError;
         if (error.isEmpty())
         {
             error = newError;
@@ -276,7 +334,11 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
             else
                 emit QMPlay2Core.sendMessage(error, g_name, 3, 0);
         }
-        return {};
+        if (!rawOutput)
+            return {};
+    }
+
+    // loop to handle the output of the 2nd process if there is one
     }
 
     if (!rawOutput)
@@ -312,6 +374,7 @@ void YouTubeDL::abort()
 {
     m_reply.abort();
     m_process.kill();
+    m_process2.kill();
     m_aborted = true;
 }
 
@@ -524,5 +644,19 @@ void YouTubeDL::startProcess(QStringList args)
     }
 #endif
 
-    m_process.start(program, args);
+    switch (m_processToStart)
+    {
+        case 1:
+            qWarning() << "Starting" << program << args;
+            m_process.start(program, args);
+            break;
+        case 2:
+            qWarning() << "Starting process2:" << program << args;
+            m_process2.start(program, args);
+            // reset m_processToStart
+            m_processToStart = 1;
+            break;
+        default:
+            qCritical() << "Unexpected m_processToStart" << m_processToStart << "in" << Q_FUNC_INFO;
+    }
 }
diff --git a/src/qmplay2/YouTubeDL.hpp b/src/qmplay2/YouTubeDL.hpp
index 202e19e374982d91fb1bfbec10e1d33917e1ac07..b76e4319ffc2532590ad241a987e4039d067e565 100644
--- a/src/qmplay2/YouTubeDL.hpp
+++ b/src/qmplay2/YouTubeDL.hpp
@@ -67,2 +70,4 @@ private:
     bool m_aborted;
+    QProcess m_process2;
+    int m_processToStart = 1;
 };
