diff --git a/CMakeLists.txt b/CMakeLists.txt
index db4c1ea129a4f179b47d60fc934203ec3e7f7102..66809ffeb9ae5e9b7628f61b43c24d66b1411042 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -43,7 +43,7 @@ else()
     find_package(DummyPkgConfig REQUIRED)
 endif()
 
-find_package(Qt5Widgets 5.10 REQUIRED)
+find_package(Qt5Widgets 5.9.8 REQUIRED)
 
 pkg_check_modules(LIBAVFORMAT REQUIRED libavformat>=58.12.100)
 pkg_check_modules(LIBAVCODEC REQUIRED libavcodec>=58.18.100)
diff --git a/src/gui/Main.cpp b/src/gui/Main.cpp
index 284c2c534a2a9bf1d838ec150c377be58d0791f5..7e3c07476723e9359536a5f8f286ac3caa08e7d4 100644
--- a/src/gui/Main.cpp
+++ b/src/gui/Main.cpp
@@ -616,10 +652,12 @@ int main(int argc, char *argv[])
 #endif
 
 #ifdef Q_OS_MACOS
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     auto fmt = QSurfaceFormat::defaultFormat();
     fmt.setColorSpace(QSurfaceFormat::sRGBColorSpace);
     QSurfaceFormat::setDefaultFormat(fmt);
 #endif
+#endif
 
 #ifndef Q_OS_WIN
     if (!setjmp(env))
diff --git a/src/qmplay2/CMakeLists.txt b/src/qmplay2/CMakeLists.txt
index 6bb100f9b5f92c8b9da87dc4ef1ddc5c24dc46aa..69002a790416e80c0b8445bbb38c8f8c7c806840 100644
--- a/src/qmplay2/CMakeLists.txt
+++ b/src/qmplay2/CMakeLists.txt
@@ -260,6 +260,12 @@ if(USE_YOUTUBEDL)
         YouTubeDL.cpp
     )
 endif()
+list(APPEND QMPLAY2_HDR
+    QtLegacySupport.hpp
+)
+list(APPEND QMPLAY2_SRC
+    QtLegacySupport.cpp
+)
 
 set(QMPLAY2_RESOURCES
     languages.qrc
diff --git a/src/qmplay2/QtLegacySupport.cpp b/src/qmplay2/QtLegacySupport.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..939a2dc7ae56b8cc08d0fe386c71cc86fd83c263
--- /dev/null
+++ b/src/qmplay2/QtLegacySupport.cpp
@@ -0,0 +1,12 @@
+#include <qglobal.h>
+
+#if QT_VERSION < QT_VERSION_CHECK(5,10,0)
+
+#include "QtLegacySupport.hpp"
+
+QJV QJA::at(int i) const
+{
+    return m_arr.at(i);
+}
+
+#endif
diff --git a/src/qmplay2/QtLegacySupport.hpp b/src/qmplay2/QtLegacySupport.hpp
new file mode 100644
index 0000000000000000000000000000000000000000..182b6c6a4fb3012713cd0f104746478b2b7de49b
--- /dev/null
+++ b/src/qmplay2/QtLegacySupport.hpp
@@ -0,0 +1,90 @@
+#ifndef QTLEGACYSUPPORT_H
+
+#include <qglobal.h>
+
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
+
+#define QJV QJsonValue
+#define QJO QJsonObject
+#define QJA QJsonArray
+#define QJD QJsonDocument
+
+#define toQJsonArray() toArray()
+
+#else
+
+#include <QMPlay2Lib.hpp>
+
+#include <QJsonObject>
+#include <QJsonValue>
+#include <QJsonArray>
+#include <QJsonDocument>
+
+class QJV;
+
+class QMPLAY2SHAREDLIB_EXPORT QJA
+{
+public:
+    QJA(QJsonArray val)
+        : m_arr(val)
+    {}
+
+    QJV at(int i) const;
+    operator QJsonArray() { return m_arr; }
+private:
+    QJsonArray m_arr;
+};
+
+class QMPLAY2SHAREDLIB_EXPORT QJV
+{
+public:
+    QJV(QJsonValue val)
+        : m_val(val)
+    {}
+    QJV(QJsonValueRef val)
+        : m_val(QJsonValue(val))
+    {}
+
+    QJV operator[](const QString &key) const { return m_val.toObject()[key]; }
+    QJV operator[](QLatin1String key) const { return m_val.toObject()[key]; }
+    QJsonArray toQJsonArray() const { return m_val.toArray(); }
+    QJA toArray() const { return m_val.toArray(); }
+    inline QString toString() const { return m_val.toString(); }
+    int toInt(int defaultValue = 0) const { return m_val.toInt(defaultValue); }
+    inline bool isObject() const { return m_val.isObject(); }
+    QJsonObject toObject() const { return m_val.toObject(); }
+private:
+    QJsonValue m_val;
+};
+
+class QMPLAY2SHAREDLIB_EXPORT QJO
+{
+public:
+    QJO(QJsonObject val)
+        : m_obj(val)
+    {}
+
+    inline bool isEmpty() const { return m_obj.isEmpty(); }
+    QJV operator[](const QString &key) const { return m_obj[key]; }
+    QJV operator[](QLatin1String key) const { return m_obj[key]; }
+private:
+    QJsonObject m_obj;
+};
+
+class QMPLAY2SHAREDLIB_EXPORT QJD
+{
+public:
+    QJD(QJsonDocument val)
+        : m_doc(val)
+    {}
+
+    QJV operator[](const QString &key) const { return m_doc.object()[key]; }
+    QJV operator[](QLatin1String key) const { return m_doc.object()[key]; }
+private:
+    QJsonDocument m_doc;
+};
+
+#endif
+
+#define QTLEGACYSUPPORT_H
+#endif //QTLEGACYSUPPORT_H
diff --git a/src/qmplay2/YouTubeDL.cpp b/src/qmplay2/YouTubeDL.cpp
index 5de2b8fcc44aa5c3202f98cff0bbe15e1b9f14d0..2719d1f9b4e35d80aa454d636fda4b9b10adabf3 100644
--- a/src/qmplay2/YouTubeDL.cpp
+++ b/src/qmplay2/YouTubeDL.cpp
@@ -30,6 +30,8 @@
 #include <QMutex>
 #include <QFile>
 
+#include <QtLegacySupport.hpp>
+
 constexpr const char *g_name = "YouTubeDL";
 static bool g_mustUpdate = true;
 static QMutex g_mutex(QMutex::Recursive);
@@ -233,8 +235,8 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
             {
                 const QString url = result.at(i - 1);
 
-                const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
-                for (const QJsonValue &formats : json["formats"].toArray())
+                const QJD json = QJsonDocument::fromJson(result.at(i).toUtf8());
+                for (const QJV &formats : json["formats"].toQJsonArray())
                 {
                     if (url == formats["url"].toString())
                         QMPlay2Core.addCookies(url, formats["http_headers"]["Cookie"].toString().toUtf8());
diff --git a/src/modules/Extensions/MediaBrowser.cpp b/src/modules/Extensions/MediaBrowser.cpp
index 2be196d61cb20f64fe87bae11241053eb4b433d4..44ee0593240aa632d429386f481e37493eca3ca3 100644
--- a/src/modules/Extensions/MediaBrowser.cpp
+++ b/src/modules/Extensions/MediaBrowser.cpp
@@ -50,6 +50,8 @@
 
 #include <algorithm>
 
+#include <QtLegacySupport.hpp>
+
 Q_LOGGING_CATEGORY(mb, "MediaBrowser")
 
 constexpr const char *g_mediaBrowserBaseUrl = "https://raw.githubusercontent.com/zaps166/QMPlay2OnlineContents/master/";
@@ -582,7 +584,7 @@ void MediaBrowser::downloadScripts(const QByteArray &jsonData)
     }();
 
     bool removed = false, downloading = false;
-    for (auto &&jsonVal : jsonArr)
+    for (QJV &&jsonVal : jsonArr)
     {
         const auto name = jsonVal["Name"].toString();
         const auto path = jsonVal["Path"].toString();
diff --git a/src/modules/Extensions/Radio.cpp b/src/modules/Extensions/Radio.cpp
index 06c5ee6eec2f53eb05163589679522ab6324868c..8a6e52eada24cf28e26db576af9d6b08c590cc91 100644
--- a/src/modules/Extensions/Radio.cpp
+++ b/src/modules/Extensions/Radio.cpp
@@ -38,6 +38,8 @@
 #include <QMenu>
 #include <QUrl>
 
+#include <QtLegacySupport.hpp>
+
 Radio::Radio(Module &module) :
     m_newStationTxt(tr("Adding a new radio station")),
     m_radioIcon(":/radio.svgz"),
@@ -229,7 +231,7 @@ void Radio::replyFinished(NetworkReply *reply)
             if (json.isArray())
             {
                 QStringList list;
-                for (const QJsonValue &data : json.array())
+                for (const QJV &data : json.array())
                 {
                     if (!data.isObject())
                         continue;
@@ -324,7 +326,12 @@ void Radio::on_saveMyRadioStationButton_clicked()
     if (idx < 0)
         return;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     const auto suffix = filter.midRef(idx + 2).chopped(1);
+#else
+    const auto mid = filter.midRef(idx + 2);
+    const auto suffix = mid.left(mid.size() - 1);
+#endif
     if (!filePath.endsWith(suffix, Qt::CaseInsensitive))
         filePath += suffix;
 
diff --git a/src/modules/Extensions/Radio/RadioBrowserModel.cpp b/src/modules/Extensions/Radio/RadioBrowserModel.cpp
index 4fc515119fab4f00e75e95ccd56c203b69850fef..6109cba666c92644672869b653befd043c227bd5 100644
--- a/src/modules/Extensions/Radio/RadioBrowserModel.cpp
+++ b/src/modules/Extensions/Radio/RadioBrowserModel.cpp
@@ -30,6 +30,8 @@
 
 #include <algorithm>
 
+#include <QtLegacySupport.hpp>
+
 struct Column
 {
     QString url, homePageUrl, id;
@@ -306,7 +308,7 @@ void RadioBrowserModel::replyFinished(NetworkReply *reply)
 
                 const QPixmap radioIcon = QIcon(":/radio.svgz").pixmap(elementHeight(), elementHeight());
 
-                for (auto &&item : arrayItems)
+                for (QJV &&item : arrayItems)
                 {
                     if (!item.isObject())
                         continue;
diff --git a/src/modules/Extensions/YouTube.cpp b/src/modules/Extensions/YouTube.cpp
index 5e8abe7c178185d55bcb9eef3cc76b86049a8409..9210efe8630fb040ac72e77d0bec7e3c6881ad69 100644
--- a/src/modules/Extensions/YouTube.cpp
+++ b/src/modules/Extensions/YouTube.cpp
@@ -43,6 +43,8 @@
 #include <QMenu>
 #include <QUrl>
 
+#include <QtLegacySupport.hpp>
+
 Q_LOGGING_CATEGORY(youtube, "Extensions/YouTube")
 
 #define YOUTUBE_URL "https://www.youtube.com"
@@ -883,7 +885,7 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
         const auto onResponseReceivedCommands = jsonObj
             ["onResponseReceivedCommands"].toArray()
         ;
-        for (auto &&val : onResponseReceivedCommands)
+        for (QJV &&val : onResponseReceivedCommands)
         {
             items = val
                 ["appendContinuationItemsAction"]
@@ -895,8 +897,8 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
     }
     else
     {
-        items = jsonObj
-            ["contents"]
+        items = QJV(jsonObj
+            ["contents"])
             ["twoColumnSearchResultsRenderer"]
             ["primaryContents"]
             ["sectionListRenderer"]
@@ -904,9 +906,9 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
         ;
     }
 
-    for (const QJsonValue &obj : items)
+    for (const QJV &obj : items)
     {
-        const auto contents = obj
+        const QJsonArray contents = obj
             ["itemSectionRenderer"]
             ["contents"].toArray()
         ;
@@ -920,10 +922,10 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
         if (!token.isEmpty())
             m_continuationToken = token;
 
-        for (auto &&obj : contents)
+        for (QJV &&obj : contents)
         {
-            const auto videoRenderer = obj["videoRenderer"].toObject();
-            const auto playlistRenderer = obj["playlistRenderer"].toObject();
+            const QJO videoRenderer = obj["videoRenderer"].toObject();
+            const QJO playlistRenderer = obj["playlistRenderer"].toObject();
 
             const bool isVideo = !videoRenderer.isEmpty() && playlistRenderer.isEmpty();
 
@@ -1021,8 +1023,8 @@ void YouTube::setRelatedResults(const QJsonObject &jsonObj, bool isContinuation)
 {
     QJsonArray items;
 
-    items = jsonObj
-        ["contents"]
+    items = QJV(jsonObj
+        ["contents"])
         ["twoColumnWatchNextResults"]
         ["secondaryResults"]
         ["secondaryResults"]
@@ -1030,8 +1032,8 @@ void YouTube::setRelatedResults(const QJsonObject &jsonObj, bool isContinuation)
 
     for (const QJsonValue &obj : items)
     {
-        const auto videoRenderer = obj["compactVideoRenderer"].toObject();
-        const auto playlistRenderer = obj["compactPlaylistRenderer"].toObject();
+        const auto videoRenderer = QJV(obj)["compactVideoRenderer"].toObject();
+        const auto playlistRenderer = QJV(obj)["compactPlaylistRenderer"].toObject();
 
         const bool isVideo = !videoRenderer.isEmpty() && playlistRenderer.isEmpty();
 
@@ -1043,28 +1045,28 @@ void YouTube::setRelatedResults(const QJsonObject &jsonObj, bool isContinuation)
 
         if (isVideo)
         {
-            title = videoRenderer["title"]["simpleText"].toString();
+            title = QJV(videoRenderer["title"])["simpleText"].toString();
             contentId = videoRenderer["videoId"].toString();
             if (title.isEmpty() || contentId.isEmpty())
                 continue;
 
-            length = videoRenderer["lengthText"]["simpleText"].toString();
-            user = videoRenderer["longBylineText"]["runs"].toArray().at(0)["text"].toString();
-            publishTime = videoRenderer["publishedTimeText"]["simpleText"].toString();
-            viewCount = videoRenderer["shortViewCountText"]["simpleText"].toString();
-            thumbnail = videoRenderer["thumbnail"]["thumbnails"].toArray().at(0)["url"].toString();
+            length = QJV(videoRenderer["lengthText"])["simpleText"].toString();
+            user = QJV(videoRenderer["longBylineText"])["runs"].toArray().at(0)["text"].toString();
+            publishTime = QJV(videoRenderer["publishedTimeText"])["simpleText"].toString();
+            viewCount = QJV(videoRenderer["shortViewCountText"])["simpleText"].toString();
+            thumbnail = QJV(videoRenderer["thumbnail"])["thumbnails"].toArray().at(0)["url"].toString();
 
             url = YOUTUBE_URL "/watch?v=" + contentId;
         }
         else
         {
-            title = playlistRenderer["title"]["simpleText"].toString();
+            title = QJV(playlistRenderer["title"])["simpleText"].toString();
             contentId = playlistRenderer["playlistId"].toString();
             if (title.isEmpty() || contentId.isEmpty())
                 continue;
 
-            user = playlistRenderer["longBylineText"]["simpleText"].toString();
-            thumbnail = playlistRenderer["thumbnail"]["thumbnails"].toArray().at(0)["url"].toString();
+            user = QJV(playlistRenderer["longBylineText"])["simpleText"].toString();
+            thumbnail = QJV(playlistRenderer["thumbnail"])["thumbnails"].toArray().at(0)["url"].toString();
 
             url = YOUTUBE_URL "/playlist?list=" + contentId;
         }
@@ -1295,7 +1297,7 @@ void YouTube::preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI)
 {
     QStringList playlist;
 
-    const auto contents = getYtInitialData(data)
+    const QJsonArray contents = QJD(getYtInitialData(data))
         ["contents"]
         ["twoColumnBrowseResultsRenderer"]
         ["tabs"].toArray().at(0)
@@ -1309,7 +1311,7 @@ void YouTube::preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI)
         ["contents"].toArray()
     ;
 
-    for (auto &&obj : contents)
+    for (QJV &&obj : contents)
     {
         const auto title = obj["playlistVideoRenderer"]["title"]["runs"].toArray().at(0)["text"].toString();
         const auto videoId = obj["playlistVideoRenderer"]["videoId"].toString();
diff --git a/src/qmplay2/QMPlay2Core.cpp b/src/qmplay2/QMPlay2Core.cpp
index 96713fec9c1bdbac2e11d9a96d2088c69e0757c4..caa2afd29fac35441c5915414ee7f809cded3b51 100644
--- a/src/qmplay2/QMPlay2Core.cpp
+++ b/src/qmplay2/QMPlay2Core.cpp
@@ -187,7 +187,7 @@ int QMPlay2CoreClass::getCPUFlags()
 bool QMPlay2CoreClass::isGlOnWindowForced()
 {
     static bool forced = [] {
-#ifdef Q_OS_MACOS
+#if defined(Q_OS_MACOS) && QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
 #   if defined(MAC_OS_X_VERSION_10_14) && (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_14)
         return (QOperatingSystemVersion::current() <= QOperatingSystemVersion::MacOSHighSierra);
 #   else
