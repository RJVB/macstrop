diff --git a/src/gui/Main.cpp b/src/gui/Main.cpp
index 0845b35b..ad4a6f2d 100644
--- a/src/gui/Main.cpp
+++ b/src/gui/Main.cpp
@@ -672,10 +672,12 @@ int main(int argc, char *argv[])
 #endif
 
 #ifdef Q_OS_MACOS
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     auto fmt = QSurfaceFormat::defaultFormat();
     fmt.setColorSpace(QSurfaceFormat::sRGBColorSpace);
     QSurfaceFormat::setDefaultFormat(fmt);
 #endif
+#endif
 
 #ifndef Q_OS_WIN
     if (!setjmp(env))
diff --git a/src/gui/MainWidget.cpp b/src/gui/MainWidget.cpp
index 17eb9e92..d444bcd7 100644
--- a/src/gui/MainWidget.cpp
+++ b/src/gui/MainWidget.cpp
@@ -1560,7 +1560,7 @@ void MainWidget::setStreamsMenu(const QStringList &videoStreams, const QStringLi
                 connect(action, &QAction::triggered,
                         this, [this, data = std::move(lines[1])] {
                     if (data.startsWith("seek"))
-                        seek(QStringView(data).mid(4)MAYBE_TO_STRING.toDouble());
+                        seek(data.midRef(4).toDouble());
                     else
                         playC.chStream(data);
                 });
diff --git a/src/gui/PlayClass.cpp b/src/gui/PlayClass.cpp
index 79605480..ff0a130a 100644
--- a/src/gui/PlayClass.cpp
+++ b/src/gui/PlayClass.cpp
@@ -268,14 +268,14 @@ void PlayClass::seek(double pos, bool allowAccurate)
 void PlayClass::chStream(const QString &s)
 {
     if (s.startsWith("audio"))
-        chosenAudioStream = QStringView(s).right(s.length() - 5)MAYBE_TO_STRING.toInt();
+        chosenAudioStream = s.rightRef(s.length() - 5).toInt();
     else if (s.startsWith("video"))
-        chosenVideoStream = QStringView(s).right(s.length() - 5)MAYBE_TO_STRING.toInt();
+        chosenVideoStream = s.rightRef(s.length() - 5).toInt();
     else if (s.startsWith("subtitles"))
-        chosenSubtitlesStream = QStringView(s).right(s.length() - 9)MAYBE_TO_STRING.toInt();
+        chosenSubtitlesStream = s.rightRef(s.length() - 9).toInt();
     else if (s.startsWith("fileSubs"))
     {
-        int idx = QStringView(s).right(s.length() - 8)MAYBE_TO_STRING.toInt();
+        int idx = s.rightRef(s.length() - 8).toInt();
         if (fileSubsList.count() > idx)
             loadSubsFile(fileSubsList[idx]);
     }
diff --git a/src/gui/VideoThr.cpp b/src/gui/VideoThr.cpp
index 5cda01e5..58cbf8fb 100644
--- a/src/gui/VideoThr.cpp
+++ b/src/gui/VideoThr.cpp
@@ -235,7 +235,7 @@ void VideoThr::initFilters()
         auto iterateVideoFilters = [this, &QMPSettings](bool isHw) {
             for (QString filterName : QMPSettings.getStringList("VideoFilters"))
             {
-                if (filterName.left(1).toInt()) //if filter is enabled
+                if (filterName.leftRef(1).toInt()) //if filter is enabled
                 {
                     bool ok = false;
                     filterName = filterName.mid(1);
@@ -870,7 +870,7 @@ void VideoThr::screenshot(Frame videoFrame)
         quint16 num = 0;
         for (const QString &f : QDir(dir).entryList({"QMPlay2_snapshot_?????" + ext}, QDir::Files, QDir::Name))
         {
-            const quint16 n = QStringView(f).mid(13, 5)MAYBE_TO_STRING.toUShort();
+            const quint16 n = f.midRef(13, 5).toUShort();
             if (n > num)
                 num = n;
         }
diff --git a/src/modules/Extensions/Downloader.cpp b/src/modules/Extensions/Downloader.cpp
index 02b5e946..16be2d66 100644
--- a/src/modules/Extensions/Downloader.cpp
+++ b/src/modules/Extensions/Downloader.cpp
@@ -65,7 +65,7 @@ constexpr const char *g_conversionError = QT_TRANSLATE_NOOP("DownloadItemW", "Co
 
 /**/
 
-static QStringView getCommandOutput(const QString &command)
+static QStringRef getCommandOutput(const QString &command)
 {
     const int idx1 = command.indexOf("<output>");
     if (idx1 < 0)
@@ -75,7 +75,7 @@ static QStringView getCommandOutput(const QString &command)
     if (idx2 < 0)
         return {};
 
-    return QStringView(command).mid(idx1 + 8, idx2 - idx1 - 8);
+    return command.midRef(idx1 + 8, idx2 - idx1 - 8);
 }
 
 static void maybeAddAbsolutePath(QString &convertCommand)
diff --git a/src/modules/Extensions/MediaBrowser.cpp b/src/modules/Extensions/MediaBrowser.cpp
index b4af7f08..c77f5915 100644
--- a/src/modules/Extensions/MediaBrowser.cpp
+++ b/src/modules/Extensions/MediaBrowser.cpp
@@ -50,6 +50,8 @@
 
 #include <algorithm>
 
+#include <QtLegacySupport.hpp>
+
 Q_LOGGING_CATEGORY(mb, "MediaBrowser")
 
 constexpr const char *g_mediaBrowserBaseUrl = "https://raw.githubusercontent.com/zaps166/QMPlay2OnlineContents/master/";
@@ -582,7 +584,7 @@ void MediaBrowser::downloadScripts(const QByteArray &jsonData)
     }();
 
     bool removed = false, downloading = false;
-    for (const QJsonValue jsonVal : jsonArr)
+    for (const QJV jsonVal : jsonArr)
     {
         const auto name = jsonVal["Name"].toString();
         const auto path = jsonVal["Path"].toString();
diff --git a/src/modules/Extensions/Radio.cpp b/src/modules/Extensions/Radio.cpp
index ee844204..22627f58 100644
--- a/src/modules/Extensions/Radio.cpp
+++ b/src/modules/Extensions/Radio.cpp
@@ -38,6 +38,8 @@
 #include <QMenu>
 #include <QUrl>
 
+#include <QtLegacySupport.hpp>
+
 Radio::Radio(Module &module) :
     m_newStationTxt(tr("Adding a new radio station")),
     m_radioIcon(":/radio.svgz"),
@@ -229,7 +231,7 @@ void Radio::replyFinished(NetworkReply *reply)
             if (json.isArray())
             {
                 QStringList list;
-                for (const QJsonValue &data : json.array())
+                for (const QJV &data : json.array())
                 {
                     if (!data.isObject())
                         continue;
@@ -324,7 +326,12 @@ void Radio::on_saveMyRadioStationButton_clicked()
     if (idx < 0)
         return;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     const auto suffix = QStringView(filter).mid(idx + 2).chopped(1)MAYBE_TO_STRING;
+#else
+    const auto mid = filter.midRef(idx + 2);
+    const auto suffix = mid.left(mid.size() - 1).toString();
+#endif
     if (!filePath.endsWith(suffix, Qt::CaseInsensitive))
         filePath += suffix;
 
diff --git a/src/modules/Extensions/Radio/RadioBrowserModel.cpp b/src/modules/Extensions/Radio/RadioBrowserModel.cpp
index e6044a50..2f767900 100644
--- a/src/modules/Extensions/Radio/RadioBrowserModel.cpp
+++ b/src/modules/Extensions/Radio/RadioBrowserModel.cpp
@@ -30,6 +30,8 @@
 
 #include <algorithm>
 
+#include <QtLegacySupport.hpp>
+
 struct Column
 {
     QString url, homePageUrl, id;
@@ -312,7 +314,7 @@ void RadioBrowserModel::replyFinished(NetworkReply *reply)
 
                 const QPixmap radioIcon = QIcon(":/radio.svgz").pixmap(elementHeight(), elementHeight());
 
-                for (const QJsonValue item : arrayItems)
+                for (const QJV item : arrayItems)
                 {
                     if (!item.isObject())
                         continue;
diff --git a/src/modules/Extensions/YouTube.cpp b/src/modules/Extensions/YouTube.cpp
index d2a8fe3a..e3ceb2ed 100644
--- a/src/modules/Extensions/YouTube.cpp
+++ b/src/modules/Extensions/YouTube.cpp
@@ -44,6 +44,8 @@
 #include <QMenu>
 #include <QUrl>
 
+#include <QtLegacySupport.hpp>
+
 Q_LOGGING_CATEGORY(youtube, "Extensions/YouTube")
 
 #define YOUTUBE_URL "https://www.youtube.com"
@@ -885,7 +887,7 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
         const auto onResponseReceivedCommands = jsonObj
             ["onResponseReceivedCommands"].toArray()
         ;
-        for (const QJsonValue val : onResponseReceivedCommands)
+        for (const QJV val : onResponseReceivedCommands)
         {
             items = val
                 ["appendContinuationItemsAction"]
@@ -897,8 +899,8 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
     }
     else
     {
-        items = jsonObj
-            ["contents"]
+        items = QJV(jsonObj
+            ["contents"])
             ["twoColumnSearchResultsRenderer"]
             ["primaryContents"]
             ["sectionListRenderer"]
@@ -906,9 +908,9 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
         ;
     }
 
-    for (const QJsonValue obj : items)
+    for (const QJV obj : items)
     {
-        const auto contents = obj
+        const QJsonArray contents = obj
             ["itemSectionRenderer"]
             ["contents"].toArray()
         ;
@@ -922,10 +924,10 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation)
         if (!token.isEmpty())
             m_continuationToken = token;
 
-        for (const QJsonValue obj : contents)
+        for (const QJV obj : contents)
         {
-            const auto videoRenderer = obj["videoRenderer"].toObject();
-            const auto playlistRenderer = obj["playlistRenderer"].toObject();
+            const QJO videoRenderer = obj["videoRenderer"].toObject();
+            const QJO playlistRenderer = obj["playlistRenderer"].toObject();
 
             const bool isVideo = !videoRenderer.isEmpty() && playlistRenderer.isEmpty();
 
@@ -1023,8 +1025,8 @@ void YouTube::setRelatedResults(const QJsonObject &jsonObj, bool isContinuation)
 {
     QJsonArray items;
 
-    items = jsonObj
-        ["contents"]
+    items = QJV(jsonObj
+        ["contents"])
         ["twoColumnWatchNextResults"]
         ["secondaryResults"]
         ["secondaryResults"]
@@ -1032,8 +1034,8 @@ void YouTube::setRelatedResults(const QJsonObject &jsonObj, bool isContinuation)
 
     for (const QJsonValue obj : items)
     {
-        const auto videoRenderer = obj["compactVideoRenderer"].toObject();
-        const auto playlistRenderer = obj["compactPlaylistRenderer"].toObject();
+        const auto videoRenderer = QJV(obj)["compactVideoRenderer"].toObject();
+        const auto playlistRenderer = QJV(obj)["compactPlaylistRenderer"].toObject();
 
         const bool isVideo = !videoRenderer.isEmpty() && playlistRenderer.isEmpty();
 
@@ -1045,28 +1047,28 @@ void YouTube::setRelatedResults(const QJsonObject &jsonObj, bool isContinuation)
 
         if (isVideo)
         {
-            title = videoRenderer["title"]["simpleText"].toString();
+            title = QJV(videoRenderer["title"])["simpleText"].toString();
             contentId = videoRenderer["videoId"].toString();
             if (title.isEmpty() || contentId.isEmpty())
                 continue;
 
-            length = videoRenderer["lengthText"]["simpleText"].toString();
-            user = videoRenderer["longBylineText"]["runs"].toArray().at(0)["text"].toString();
-            publishTime = videoRenderer["publishedTimeText"]["simpleText"].toString();
-            viewCount = videoRenderer["shortViewCountText"]["simpleText"].toString();
-            thumbnail = videoRenderer["thumbnail"]["thumbnails"].toArray().at(0)["url"].toString();
+            length = QJV(videoRenderer["lengthText"])["simpleText"].toString();
+            user = QJV(videoRenderer["longBylineText"])["runs"].toArray().at(0)["text"].toString();
+            publishTime = QJV(videoRenderer["publishedTimeText"])["simpleText"].toString();
+            viewCount = QJV(videoRenderer["shortViewCountText"])["simpleText"].toString();
+            thumbnail = QJV(videoRenderer["thumbnail"])["thumbnails"].toArray().at(0)["url"].toString();
 
             url = YOUTUBE_URL "/watch?v=" + contentId;
         }
         else
         {
-            title = playlistRenderer["title"]["simpleText"].toString();
+            title = QJV(playlistRenderer["title"])["simpleText"].toString();
             contentId = playlistRenderer["playlistId"].toString();
             if (title.isEmpty() || contentId.isEmpty())
                 continue;
 
-            user = playlistRenderer["longBylineText"]["simpleText"].toString();
-            thumbnail = playlistRenderer["thumbnail"]["thumbnails"].toArray().at(0)["url"].toString();
+            user = QJV(playlistRenderer["longBylineText"])["simpleText"].toString();
+            thumbnail = QJV(playlistRenderer["thumbnail"])["thumbnails"].toArray().at(0)["url"].toString();
 
             url = YOUTUBE_URL "/playlist?list=" + contentId;
         }
@@ -1297,7 +1299,7 @@ void YouTube::preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI)
 {
     QStringList playlist;
 
-    const auto contents = getYtInitialData(data)
+    const QJsonArray contents = QJD(getYtInitialData(data))
         ["contents"]
         ["twoColumnBrowseResultsRenderer"]
         ["tabs"].toArray().at(0)
@@ -1311,7 +1313,7 @@ void YouTube::preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI)
         ["contents"].toArray()
     ;
 
-    for (const QJsonValue obj : contents)
+    for (const QJV obj : contents)
     {
         const auto title = obj["playlistVideoRenderer"]["title"]["runs"].toArray().at(0)["text"].toString();
         const auto videoId = obj["playlistVideoRenderer"]["videoId"].toString();
diff --git a/src/modules/Subtitles/Classic.cpp b/src/modules/Subtitles/Classic.cpp
index 6932800f..ddaa518d 100644
--- a/src/modules/Subtitles/Classic.cpp
+++ b/src/modules/Subtitles/Classic.cpp
@@ -166,7 +166,7 @@ bool Classic::toASS(const QByteArray &txt, LibASS *ass, double fps)
                 if (use_mDVD_FPS && (s == 0 || s == 1))
                 {
                     use_mDVD_FPS = false;
-                    const double newFPS = QStringView(sub).left(qMin(6, sub.size()))MAYBE_TO_STRING.toDouble();
+                    const double newFPS = sub.midRef(0, 6).toDouble();
                     if (newFPS > 0.0 && newFPS < 100.0)
                     {
                         fps = newFPS;
diff --git a/src/qmplay2/CMakeLists.txt b/src/qmplay2/CMakeLists.txt
index cd3a6b56..60647a60 100644
--- a/src/qmplay2/CMakeLists.txt
+++ b/src/qmplay2/CMakeLists.txt
@@ -278,6 +278,12 @@ if(USE_YOUTUBEDL)
         YouTubeDL.cpp
     )
 endif()
+list(APPEND QMPLAY2_HDR
+    QtLegacySupport.hpp
+)
+list(APPEND QMPLAY2_SRC
+    QtLegacySupport.cpp
+)
 
 set(QMPLAY2_RESOURCES
     languages.qrc
diff --git a/src/qmplay2/QMPlay2Core.cpp b/src/qmplay2/QMPlay2Core.cpp
index 793a9617..3859a6ca 100644
--- a/src/qmplay2/QMPlay2Core.cpp
+++ b/src/qmplay2/QMPlay2Core.cpp
@@ -213,7 +213,7 @@ int QMPlay2CoreClass::getCPUMaxAlign()
 bool QMPlay2CoreClass::isGlOnWindowForced()
 {
     static bool forced = [] {
-#ifdef Q_OS_MACOS
+#if defined(Q_OS_MACOS) && QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
 #   if defined(MAC_OS_X_VERSION_10_14) && (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_14)
         return (QOperatingSystemVersion::current() <= QOperatingSystemVersion::MacOSHighSierra);
 #   else
diff --git a/src/qmplay2/QtLegacySupport.cpp b/src/qmplay2/QtLegacySupport.cpp
new file mode 100644
index 00000000..939a2dc7
--- /dev/null
+++ b/src/qmplay2/QtLegacySupport.cpp
@@ -0,0 +1,12 @@
+#include <qglobal.h>
+
+#if QT_VERSION < QT_VERSION_CHECK(5,10,0)
+
+#include "QtLegacySupport.hpp"
+
+QJV QJA::at(int i) const
+{
+    return m_arr.at(i);
+}
+
+#endif
diff --git a/src/qmplay2/QtLegacySupport.hpp b/src/qmplay2/QtLegacySupport.hpp
new file mode 100644
index 0000000000000000000000000000000000000000..25e4a43cfebb34b4311742787899254f35649c62
--- /dev/null
+++ b/src/qmplay2/QtLegacySupport.hpp
@@ -0,0 +1,91 @@
+#ifndef QTLEGACYSUPPORT_H
+
+#include <qglobal.h>
+
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
+
+#define QJV QJsonValue
+#define QJO QJsonObject
+#define QJA QJsonArray
+#define QJD QJsonDocument
+
+#define toQJsonArray() toArray()
+
+#else
+
+#include <QMPlay2Lib.hpp>
+
+#include <QJsonObject>
+#include <QJsonValue>
+#include <QJsonArray>
+#include <QJsonDocument>
+
+class QJV;
+
+class QMPLAY2SHAREDLIB_EXPORT QJA
+{
+public:
+    QJA(QJsonArray val)
+        : m_arr(val)
+    {}
+
+    QJV at(int i) const;
+    operator QJsonArray() { return m_arr; }
+private:
+    QJsonArray m_arr;
+};
+
+class QMPLAY2SHAREDLIB_EXPORT QJV
+{
+public:
+    QJV(QJsonValue val)
+        : m_val(val)
+    {}
+    QJV(QJsonValueRef val)
+        : m_val(QJsonValue(val))
+    {}
+
+    QJV operator[](const QString &key) const { return m_val.toObject()[key]; }
+    QJV operator[](QLatin1String key) const { return m_val.toObject()[key]; }
+    QJsonArray toQJsonArray() const { return m_val.toArray(); }
+    QJA toArray() const { return m_val.toArray(); }
+    inline QString toString() const { return m_val.toString(); }
+    int toInt(int defaultValue = 0) const { return m_val.toInt(defaultValue); }
+    inline bool isObject() const { return m_val.isObject(); }
+    QJsonObject toObject() const { return m_val.toObject(); }
+    inline double toDouble() const { return m_val.toDouble(); }
+private:
+    QJsonValue m_val;
+};
+
+class QMPLAY2SHAREDLIB_EXPORT QJO
+{
+public:
+    QJO(QJsonObject val)
+        : m_obj(val)
+    {}
+
+    inline bool isEmpty() const { return m_obj.isEmpty(); }
+    QJV operator[](const QString &key) const { return m_obj[key]; }
+    QJV operator[](QLatin1String key) const { return m_obj[key]; }
+private:
+    QJsonObject m_obj;
+};
+
+class QMPLAY2SHAREDLIB_EXPORT QJD
+{
+public:
+    QJD(QJsonDocument val)
+        : m_doc(val)
+    {}
+
+    QJV operator[](const QString &key) const { return m_doc.object()[key]; }
+    QJV operator[](QLatin1String key) const { return m_doc.object()[key]; }
+private:
+    QJsonDocument m_doc;
+};
+
+#endif
+
+#define QTLEGACYSUPPORT_H
+#endif //QTLEGACYSUPPORT_H
diff --git a/src/qmplay2/YouTubeDL.cpp b/src/qmplay2/YouTubeDL.cpp
index a91ee0f7..275ae71c 100644
--- a/src/qmplay2/YouTubeDL.cpp
+++ b/src/qmplay2/YouTubeDL.cpp
@@ -34,6 +34,8 @@
 
 // FIXME: Why Haiku can't use upstream yt-dlp?
 
+#include <QtLegacySupport.hpp>
+
 constexpr const char *g_name = "YouTubeDL";
 static bool g_mustUpdate = true;
 #if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
@@ -260,8 +262,8 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
             {
                 const QString url = result.at(i - 1);
 
-                const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
-                for (const QJsonValue &formats : json["formats"].toArray())
+                const QJD json = QJsonDocument::fromJson(result.at(i).toUtf8());
+                for (const QJV &formats : json["formats"].toQJsonArray())
                 {
                     if (url == formats["url"].toString())
                         QMPlay2Core.addCookies(url, formats["http_headers"]["Cookie"].toString().toUtf8());
diff --git a/src/qmplay2/NotifiesFreedesktop.cpp b/src/qmplay2/NotifiesFreedesktop.cpp
index e4cdb5dc..ecb3416f 100644
--- a/src/qmplay2/NotifiesFreedesktop.cpp
+++ b/src/qmplay2/NotifiesFreedesktop.cpp
@@ -44,7 +44,11 @@ QDBusArgument &operator<<(QDBusArgument &arg, const QImage &image)
     arg << scaledImage.hasAlphaChannel(); // Should be always "true" for ARGB32
     arg << scaledImage.depth() / channels;
     arg << channels;
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     arg << QByteArray::fromRawData((const char *)scaledImage.constBits(), scaledImage.sizeInBytes());
+#else
+    arg << QByteArray::fromRawData((const char *)scaledImage.constBits(), scaledImage.byteCount());
+#endif
     arg.endStructure();
 
     return arg;
