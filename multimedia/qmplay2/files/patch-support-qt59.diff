diff --git a/src/gui/Main.cpp b/src/gui/Main.cpp
index 88230666..d516b5b9 100644
--- a/src/gui/Main.cpp
+++ b/src/gui/Main.cpp
@@ -613,7 +649,7 @@ static void checkForEGL()
         if (isMesa && !qEnvironmentVariableIsSet("QT_XCB_GL_INTEGRATION"))
             qputenv("QT_XCB_GL_INTEGRATION", "xcb_egl");
 
-        const bool isEgl = (qEnvironmentVariable("QT_XCB_GL_INTEGRATION").toLower() == "xcb_egl");
+        const bool isEgl = (qgetenv("QT_XCB_GL_INTEGRATION").toLower() == "xcb_egl");
 
         if (isEgl && !qEnvironmentVariableIsSet("QMPLAY2_EGL_CARD_FILE_PATH") && !cardFilePath.isEmpty())
             qputenv("QMPLAY2_EGL_CARD_FILE_PATH", cardFilePath);
@@ -663,10 +699,12 @@ int main(int argc, char *argv[])
 #endif
 
 #ifdef Q_OS_MACOS
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     auto fmt = QSurfaceFormat::defaultFormat();
     fmt.setColorSpace(QSurfaceFormat::sRGBColorSpace);
     QSurfaceFormat::setDefaultFormat(fmt);
 #endif
+#endif
 
 #ifndef Q_OS_WIN
     if (!setjmp(g_env))
diff --git a/src/gui/MainWidget.cpp b/src/gui/MainWidget.cpp
index c3cbc073..895e20f0 100644
--- a/src/gui/MainWidget.cpp
+++ b/src/gui/MainWidget.cpp
@@ -1624,7 +1624,7 @@ void MainWidget::setStreamsMenu(const QStringList &videoStreams, const QStringLi
                 connect(action, &QAction::triggered,
                         this, [this, data = std::move(lines[1])] {
                     if (data.startsWith("seek"))
-                        seek(QStringView(data).mid(4)MAYBE_TO_STRING.toDouble());
+                        seek(data.midRef(4).toDouble());
                     else
                         playC.chStream(data);
                 });
diff --git a/src/gui/PlayClass.cpp b/src/gui/PlayClass.cpp
index 8bb326cdc902cc5642df5728e177139dd2b4432a..a3d30b50efc77da4adbc9335321deedfbaade7c7 100644
--- a/src/gui/PlayClass.cpp
+++ b/src/gui/PlayClass.cpp
@@ -292,14 +292,14 @@ void PlayClass::seek(double pos, bool allowAccurate)
 void PlayClass::chStream(const QString &s)
 {
     if (s.startsWith("audio"))
-        chosenAudioStream = QStringView(s).right(s.length() - 5).toInt();
+        chosenAudioStream = s.rightRef(s.length() - 5).toInt();
     else if (s.startsWith("video"))
-        chosenVideoStream = QStringView(s).right(s.length() - 5).toInt();
+        chosenVideoStream = s.rightRef(s.length() - 5).toInt();
     else if (s.startsWith("subtitles"))
-        chosenSubtitlesStream = QStringView(s).right(s.length() - 9).toInt();
+        chosenSubtitlesStream = s.rightRef(s.length() - 9).toInt();
     else if (s.startsWith("fileSubs"))
     {
-        int idx = QStringView(s).right(s.length() - 8).toInt();
+        int idx = s.rightRef(s.length() - 8).toInt();
         if (fileSubsList.count() > idx)
             loadSubsFile(fileSubsList[idx]);
     }
diff --git a/src/qmplay2/Functions.cpp b/src/qmplay2/Functions.cpp
index 4cf5c202a7983fe17d8e3aaefecfa5891fa2ffa0..74ea68b4e773806f2a9cd6bdd111953990b20feb 100644
--- a/src/qmplay2/Functions.cpp
+++ b/src/qmplay2/Functions.cpp
@@ -1110,7 +1110,7 @@ QString Functions::getSeqFile(const QString &dir, const QString &ext, const QStr
     quint16 num = 0;
     for (const QString &f : QDir(dir).entryList({QString("QMPlay2_%1_?????%2").arg(frag, ext)}, QDir::Files, QDir::Name))
     {
-        const quint16 n = QStringView(f).mid(8 + frag.size() + 1, 5).toUShort();
+        const quint16 n = f.midRef(8 + frag.size() + 1, 5).toUShort();
         if (n > num)
             num = n;
     }
@@ -1185,7 +1199,9 @@ void Functions::getUserDoubleValue(QWidget *parent, const QString &title, const
     input.setWindowTitle(title);
     input.setTextValue(label);
     input.setDoubleDecimals(decimals);
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     input.setDoubleStep(step);
+#endif
     input.setDoubleRange(min, max);
     input.setDoubleValue(value);
 
diff --git a/src/modules/Extensions/Downloader.cpp b/src/modules/Extensions/Downloader.cpp
index 03ff9cf1..10b9ce71 100644
--- a/src/modules/Extensions/Downloader.cpp
+++ b/src/modules/Extensions/Downloader.cpp
@@ -65,7 +65,7 @@ constexpr const char *g_conversionError = QT_TRANSLATE_NOOP("DownloadItemW", "Co
 
 /**/
 
-static QStringView getCommandOutput(const QString &command)
+static QStringRef getCommandOutput(const QString &command)
 {
     const int idx1 = command.indexOf("<output>");
     if (idx1 < 0)
@@ -75,7 +75,7 @@ static QStringView getCommandOutput(const QString &command)
     if (idx2 < 0)
         return {};
 
-    return QStringView(command).mid(idx1 + 8, idx2 - idx1 - 8);
+    return command.midRef(idx1 + 8, idx2 - idx1 - 8);
 }
 
 static void maybeAddAbsolutePath(QString &convertCommand)
diff --git a/src/modules/Extensions/MediaBrowser.cpp b/src/modules/Extensions/MediaBrowser.cpp
index 8f120657..9f5103f1 100644
--- a/src/modules/Extensions/MediaBrowser.cpp
+++ b/src/modules/Extensions/MediaBrowser.cpp
@@ -49,6 +49,8 @@
 
 #include <algorithm>
 
+#include <QtLegacySupport.hpp>
+
 Q_LOGGING_CATEGORY(mb, "MediaBrowser")
 
 constexpr const char *g_mediaBrowserBaseUrl = "https://raw.githubusercontent.com/zaps166/QMPlay2OnlineContents/master/";
@@ -581,7 +583,7 @@ void MediaBrowser::downloadScripts(const QByteArray &jsonData)
     }();
 
     bool removed = false, downloading = false;
-    for (const QJsonValue jsonVal : jsonArr)
+    for (const QJV jsonVal : jsonArr)
     {
         const auto name = jsonVal["Name"].toString();
         const auto path = jsonVal["Path"].toString();
diff --git a/src/modules/Extensions/OpenSubtitles.cpp b/src/modules/Extensions/OpenSubtitles.cpp
index b5f65aa444718c30c3a8d8144000958071196b17..0a5836beb94dc77a16d02b732e33cd16341d3e05 100644
--- a/src/modules/Extensions/OpenSubtitles.cpp
+++ b/src/modules/Extensions/OpenSubtitles.cpp
@@ -22,6 +22,8 @@
 #include <QMPlay2Core.hpp>
 #include <LineEdit.hpp>
 
+#include <QtLegacySupport.hpp>
+
 #include <QDesktopServices>
 #include <QXmlStreamReader>
 #include <QStringListModel>
@@ -286,7 +289,7 @@ void OpenSubtitles::parseCompleterJson(const QByteArray &data)
     titles.reserve(array.size());
     for (auto &&element : array)
     {
-        const auto title = element[QStringLiteral("name")].toString();
+        const auto title = QJV(element)[QStringLiteral("name")].toString();
         if (!title.isEmpty())
         {
             titles.push_back(title);
diff --git a/src/modules/Extensions/Radio.cpp b/src/modules/Extensions/Radio.cpp
index 452dcf92..9649a07a 100644
--- a/src/modules/Extensions/Radio.cpp
+++ b/src/modules/Extensions/Radio.cpp
@@ -47,6 +47,8 @@ enum SearchByIndexes
     State,
 };
 
+#include <QtLegacySupport.hpp>
+
 Radio::Radio(Module &module) :
     m_newStationTxt(tr("Adding a new radio station")),
     m_radioIcon(":/radio.svgz"),
@@ -268,7 +270,7 @@ void Radio::replyFinished(NetworkReply *reply)
             if (json.isArray())
             {
                 QStringList list;
-                for (const QJsonValue &data : json.array())
+                for (const QJV &data : json.array())
                 {
                     if (!data.isObject())
                         continue;
@@ -363,7 +365,12 @@ void Radio::on_saveMyRadioStationButton_clicked()
     if (idx < 0)
         return;
 
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     const auto suffix = QStringView(filter).mid(idx + 2).chopped(1)MAYBE_TO_STRING;
+#else
+    const auto mid = filter.midRef(idx + 2);
+    const auto suffix = mid.left(mid.size() - 1).toString();
+#endif
     if (!filePath.endsWith(suffix, Qt::CaseInsensitive))
         filePath += suffix;
 
diff --git a/src/modules/Extensions/Radio/RadioBrowserModel.cpp b/src/modules/Extensions/Radio/RadioBrowserModel.cpp
index 978ee110..194ad23d 100644
--- a/src/modules/Extensions/Radio/RadioBrowserModel.cpp
+++ b/src/modules/Extensions/Radio/RadioBrowserModel.cpp
@@ -30,6 +30,8 @@
 
 #include <algorithm>
 
+#include <QtLegacySupport.hpp>
+
 struct Column
 {
     QString url, homePageUrl, uuid;
@@ -323,7 +325,7 @@ void RadioBrowserModel::replyFinished(NetworkReply *reply)
 
             const QPixmap radioIcon = QIcon(":/radio.svgz").pixmap(elementHeight(), elementHeight());
 
-            for (const QJsonValue item : arrayItems)
+            for (const QJV item : arrayItems)
             {
                 if (!item.isObject())
                     continue;
diff --git a/src/modules/Extensions/YouTube.cpp b/src/modules/Extensions/YouTube.cpp
index 35d09fbb3aafd184b323733baceeef08b4507263..8d03004b1362ed70e192cd9621f1ef22e86a241f 100644
--- a/src/modules/Extensions/YouTube.cpp
+++ b/src/modules/Extensions/YouTube.cpp
@@ -44,6 +44,8 @@
 #include <QMenu>
 #include <QUrl>
 
+#include <QtLegacySupport.hpp>
+
 Q_LOGGING_CATEGORY(youtube, "Extensions/YouTube")
 
 #define YOUTUBE_URL "https://www.youtube.com"
@@ -959,7 +961,8 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation,
     {
         Q_ASSERT(!isContinuation);
 
-        items = jsonObj
+        const QJO jo = jsonObj;
+        items = jo
             ["contents"]
             ["twoColumnWatchNextResults"]
             ["secondaryResults"]
@@ -972,7 +975,7 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation,
         const auto onResponseReceivedCommands = jsonObj
             ["onResponseReceivedCommands"].toArray()
         ;
-        for (const QJsonValue val : onResponseReceivedCommands)
+        for (const QJV val : onResponseReceivedCommands)
         {
             items = val
                 ["appendContinuationItemsAction"]
@@ -984,8 +987,8 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation,
     }
     else
     {
-        items = jsonObj
-            ["contents"]
+        items = QJV(jsonObj
+            ["contents"])
             ["twoColumnSearchResultsRenderer"]
             ["primaryContents"]
             ["sectionListRenderer"]
@@ -993,14 +996,14 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation,
         ;
     }
 
-    for (const QJsonValue obj : items)
+    for (const QJV obj : items)
     {
         if (isRelatedResults)
         {
             bool radioRenderer = false;
 
-            const auto videoRenderer = obj["compactVideoRenderer"].toObject();
-            const auto playlistRenderer = [&] {
+            const QJO videoRenderer = obj["compactVideoRenderer"].toObject();
+            const QJO playlistRenderer = [&] {
                 auto r = obj["compactPlaylistRenderer"].toObject();
                 if (r.isEmpty())
                 {
@@ -1058,7 +1061,7 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation,
         }
         else
         {
-            const auto contents = obj
+            const QJsonArray contents = obj
                 ["itemSectionRenderer"]
                 ["contents"].toArray()
             ;
@@ -1072,13 +1075,13 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation,
             if (!token.isEmpty())
                 m_continuationToken = token;
 
-            for (const QJsonValue obj : contents)
+            for (const QJV obj : contents)
             {
                 bool radioRenderer = false;
                 bool lockupViewModel = false;
 
-                const auto videoRenderer = obj["videoRenderer"].toObject();
-                const auto playlistRenderer = [&] {
+                const QJO videoRenderer = obj["videoRenderer"].toObject();
+                const QJO playlistRenderer = [&] {
                     auto r = obj["playlistRenderer"].toObject();
                     if (r.isEmpty())
                     {
@@ -1120,16 +1123,16 @@ void YouTube::setSearchResults(const QJsonObject &jsonObj, bool isContinuation,
                     if (title.isEmpty() || contentId.isEmpty() || videoId.isEmpty())
                         continue;
 
-                    const auto thumbnails = playlistRenderer
+                    const auto thumbnails = QJsonArray(playlistRenderer
                         ["contentImage"]
                         ["collectionThumbnailViewModel"]
                         ["primaryThumbnail"]
                         ["thumbnailViewModel"]
                         ["image"]
-                        ["sources"].toArray()
+                        ["sources"].toArray())
                     ;
                     if (!thumbnails.isEmpty())
-                        thumbnail = thumbnails[0]["url"].toString();
+                        thumbnail = QJV(thumbnails[0])["url"].toString();
 
                     url = YOUTUBE_URL "/watch?v=" + videoId + "&list=" + contentId;
                 }
diff --git a/src/modules/Subtitles/Classic.cpp b/src/modules/Subtitles/Classic.cpp
index 8b0b8790..8a999336 100644
--- a/src/modules/Subtitles/Classic.cpp
+++ b/src/modules/Subtitles/Classic.cpp
@@ -166,7 +166,7 @@ bool Classic::toASS(const QByteArray &txt, LibASS *ass, double fps)
                 if (use_mDVD_FPS && (s == 0 || s == 1))
                 {
                     use_mDVD_FPS = false;
-                    const double newFPS = QStringView(sub).left(qMin(6, sub.size()))MAYBE_TO_STRING.toDouble();
+                    const double newFPS = sub.midRef(0, 6).toDouble();
                     if (newFPS > 0.0 && newFPS < 100.0)
                     {
                         fps = newFPS;
diff --git a/src/qmplay2/CMakeLists.txt b/src/qmplay2/CMakeLists.txt
index 420a4563..d571f535 100644
--- a/src/qmplay2/CMakeLists.txt
+++ b/src/qmplay2/CMakeLists.txt
@@ -269,6 +269,12 @@ if(USE_YOUTUBEDL)
         YouTubeDL.cpp
     )
 endif()
+list(APPEND QMPLAY2_HDR
+    QtLegacySupport.hpp
+)
+list(APPEND QMPLAY2_SRC
+    QtLegacySupport.cpp
+)
 
 set(QMPLAY2_RESOURCES
     languages.qrc
diff --git a/src/qmplay2/NotifiesFreedesktop.cpp b/src/qmplay2/NotifiesFreedesktop.cpp
index e4cdb5dc..ecb3416f 100644
--- a/src/qmplay2/NotifiesFreedesktop.cpp
+++ b/src/qmplay2/NotifiesFreedesktop.cpp
@@ -44,7 +44,11 @@ QDBusArgument &operator<<(QDBusArgument &arg, const QImage &image)
     arg << scaledImage.hasAlphaChannel(); // Should be always "true" for ARGB32
     arg << scaledImage.depth() / channels;
     arg << channels;
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
     arg << QByteArray::fromRawData((const char *)scaledImage.constBits(), scaledImage.sizeInBytes());
+#else
+    arg << QByteArray::fromRawData((const char *)scaledImage.constBits(), scaledImage.byteCount());
+#endif
     arg.endStructure();
 
     return arg;
diff --git a/src/qmplay2/QMPlay2Core.cpp b/src/qmplay2/QMPlay2Core.cpp
index f3ec3d31..a4bf0afe 100644
--- a/src/qmplay2/QMPlay2Core.cpp
+++ b/src/qmplay2/QMPlay2Core.cpp
@@ -213,7 +213,7 @@ int QMPlay2CoreClass::getCPUMaxAlign()
 bool QMPlay2CoreClass::isGlOnWindowForced()
 {
     static bool forced = [] {
-#ifdef Q_OS_MACOS
+#if defined(Q_OS_MACOS) && QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
 #   if defined(MAC_OS_X_VERSION_10_14) && (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_14)
         return (QOperatingSystemVersion::current() <= QOperatingSystemVersion::MacOSHighSierra);
 #   else
diff --git a/src/qmplay2/QtLegacySupport.cpp b/src/qmplay2/QtLegacySupport.cpp
new file mode 100644
index 00000000..939a2dc7
--- /dev/null
+++ b/src/qmplay2/QtLegacySupport.cpp
@@ -0,0 +1,12 @@
+#include <qglobal.h>
+
+#if QT_VERSION < QT_VERSION_CHECK(5,10,0)
+
+#include "QtLegacySupport.hpp"
+
+QJV QJA::at(int i) const
+{
+    return m_arr.at(i);
+}
+
+#endif
diff --git a/src/qmplay2/QtLegacySupport.hpp b/src/qmplay2/QtLegacySupport.hpp
new file mode 100644
index 00000000..25e4a43c
--- /dev/null
+++ b/src/qmplay2/QtLegacySupport.hpp
@@ -0,0 +1,91 @@
+#ifndef QTLEGACYSUPPORT_H
+
+#include <qglobal.h>
+
+#if QT_VERSION >= QT_VERSION_CHECK(5,10,0)
+
+#define QJV QJsonValue
+#define QJO QJsonObject
+#define QJA QJsonArray
+#define QJD QJsonDocument
+
+#define toQJsonArray() toArray()
+
+#else
+
+#include <QMPlay2Lib.hpp>
+
+#include <QJsonObject>
+#include <QJsonValue>
+#include <QJsonArray>
+#include <QJsonDocument>
+
+class QJV;
+
+class QMPLAY2SHAREDLIB_EXPORT QJA
+{
+public:
+    QJA(QJsonArray val)
+        : m_arr(val)
+    {}
+
+    QJV at(int i) const;
+    operator QJsonArray() { return m_arr; }
+private:
+    QJsonArray m_arr;
+};
+
+class QMPLAY2SHAREDLIB_EXPORT QJV
+{
+public:
+    QJV(QJsonValue val)
+        : m_val(val)
+    {}
+    QJV(QJsonValueRef val)
+        : m_val(QJsonValue(val))
+    {}
+
+    QJV operator[](const QString &key) const { return m_val.toObject()[key]; }
+    QJV operator[](QLatin1String key) const { return m_val.toObject()[key]; }
+    QJsonArray toQJsonArray() const { return m_val.toArray(); }
+    QJA toArray() const { return m_val.toArray(); }
+    inline QString toString() const { return m_val.toString(); }
+    int toInt(int defaultValue = 0) const { return m_val.toInt(defaultValue); }
+    inline bool isObject() const { return m_val.isObject(); }
+    QJsonObject toObject() const { return m_val.toObject(); }
+    inline double toDouble() const { return m_val.toDouble(); }
+private:
+    QJsonValue m_val;
+};
+
+class QMPLAY2SHAREDLIB_EXPORT QJO
+{
+public:
+    QJO(QJsonObject val)
+        : m_obj(val)
+    {}
+
+    inline bool isEmpty() const { return m_obj.isEmpty(); }
+    QJV operator[](const QString &key) const { return m_obj[key]; }
+    QJV operator[](QLatin1String key) const { return m_obj[key]; }
+private:
+    QJsonObject m_obj;
+};
+
+class QMPLAY2SHAREDLIB_EXPORT QJD
+{
+public:
+    QJD(QJsonDocument val)
+        : m_doc(val)
+    {}
+
+    QJV operator[](const QString &key) const { return m_doc.object()[key]; }
+    QJV operator[](QLatin1String key) const { return m_doc.object()[key]; }
+private:
+    QJsonDocument m_doc;
+};
+
+#endif
+
+#define QTLEGACYSUPPORT_H
+#endif //QTLEGACYSUPPORT_H
diff --git a/src/qmplay2/YouTubeDL.cpp b/src/qmplay2/YouTubeDL.cpp
index 45928841d1601f255a04e12c89e0a7e9e7329d43..3e5a4a905b378b21790d275a65e2407f29bd2558 100644
--- a/src/qmplay2/YouTubeDL.cpp
+++ b/src/qmplay2/YouTubeDL.cpp
@@ -31,6 +31,9 @@
 #include <QFileInfo>
 #include <QMutex>
 #include <QFile>
+#include <QUrl>
+
+#include <QtLegacySupport.hpp>
 
 constexpr const char *g_name = "YouTubeDL";
 static bool g_mustUpdate = true;
@@ -285,8 +303,8 @@ QStringList YouTubeDL::exec(const QString &url, const QStringList &args, QString
             {
                 const QString url = result.at(i - 1);
 
-                const QJsonDocument json = QJsonDocument::fromJson(result.at(i).toUtf8());
-                for (const QJsonValue &formats : json["formats"].toArray())
+                const QJD json = QJsonDocument::fromJson(result.at(i).toUtf8());
+                for (const QJV &formats : json["formats"].toQJsonArray())
                 {
                     if (url == formats["url"].toString())
                     {
