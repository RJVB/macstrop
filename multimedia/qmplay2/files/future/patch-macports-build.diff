diff --git a/CMakeLists.txt b/CMakeLists.txt
index af04ba88..54f1557a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -270,7 +270,7 @@ option(USE_PIPEWIRE "Build with PipeWire module" ${LIBPIPEWIRE_FOUND})
 add_feature_info(PipeWire USE_PIPEWIRE "Build with PipeWire module")
 
 if(NOT DEFINED USE_XVIDEO)
-    pkg_check_modules(LIB_X11_XV x11 xv)
+    pkg_check_modules(LIB_X11_XV x11 xv xext)
 endif()
 option(USE_XVIDEO "Build with XVideo module" ${LIB_X11_XV_FOUND})
 add_feature_info(XVideo USE_XVIDEO "Build with XVideo module")
@@ -307,6 +307,9 @@ if(USE_GIT_VERSION)
 endif()
 add_feature_info("Git version" QMPLAY2_GIT_HEAD "Append Git HEAD to QMPlay2 version")
 
+option(USE_HIDDEN_VISIBILITY "Use selective export control in shared libraries" ON)
+add_feature_info(VISIBILITY USE_HIDDEN_VISIBILITY "Use selective export control in shared libraries")
+
 if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang") # GCC or Clang
     option(USE_LINK_TIME_OPTIMIZATION "Enable link time optimization for release builds" OFF)
     add_feature_info("Link Time Optimization" USE_LINK_TIME_OPTIMIZATION "Enable link time optimization for release builds")
@@ -329,9 +332,19 @@ if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang"
     endif()
 
     # Hide symbols, and also make sure that debugging symbols are disabled
-    set(CMAKE_CXX_FLAGS_RELEASE    "${RELEASE_DEBUG_FLAG} -fvisibility=hidden -fvisibility-inlines-hidden ${CMAKE_CXX_FLAGS_RELEASE}")
-    set(CMAKE_CXX_FLAGS_MINSIZEREL "${RELEASE_DEBUG_FLAG} -fvisibility=hidden -fvisibility-inlines-hidden ${CMAKE_CXX_FLAGS_MINSIZEREL}")
+    if(USE_HIDDEN_VISIBILITY)
+        set(CMAKE_CXX_VISIBILITY_PRESET hidden)
+    else()
+        # be sure to reset these so code can be rebuilt without the option
+        set(CMAKE_CXX_VISIBILITY_PRESET default)
+    endif()
+    # this one can always be enabled:
+    set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
+    set(CMAKE_CXX_FLAGS            "${CMAKE_CXX_FLAGS}")
+    set(CMAKE_CXX_FLAGS_RELEASE    "${RELEASE_DEBUG_FLAG} ${CMAKE_CXX_FLAGS_RELEASE}")
+    set(CMAKE_CXX_FLAGS_MINSIZEREL "${RELEASE_DEBUG_FLAG} ${CMAKE_CXX_FLAGS_MINSIZEREL}")
     if(NOT USE_VULKAN)
+        set(CMAKE_CXX_FLAGS            "-fno-exceptions ${CMAKE_CXX_FLAGS}")
         set(CMAKE_CXX_FLAGS_RELEASE    "-fno-exceptions ${CMAKE_CXX_FLAGS_RELEASE}")
         set(CMAKE_CXX_FLAGS_MINSIZEREL "-fno-exceptions ${CMAKE_CXX_FLAGS_MINSIZEREL}")
     endif()
@@ -351,8 +364,9 @@ if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang"
     endif()
 
     if(USE_LINK_TIME_OPTIMIZATION)
+        set(CMAKE_CXX_FLAGS            "-flto ${CMAKE_CXX_FLAGS}")
         set(CMAKE_CXX_FLAGS_RELEASE    "-flto ${CMAKE_CXX_FLAGS_RELEASE}")
-        set(CMAKE_CXX_FLAGS_MINSIZEREL "-flto ${CMAKE_CXX_FLAGS_RELEASE}")
+        set(CMAKE_CXX_FLAGS_MINSIZEREL "-flto ${CMAKE_CXX_FLAGS_MINSIZEREL}")
     endif()
 
     if(CMAKE_MODULE_LINKER_FLAGS)
@@ -362,19 +365,22 @@ if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang"
 endif()
 
 if(APPLE)
-    set(MAC_BUNDLE_PATH "${CMAKE_INSTALL_PREFIX}/QMPlay2.app")
+    set(MAC_BUNDLE_PATH "${BUNDLE_INSTALL_DIR}/QMPlay2.app")
 
     # set paths to Bundle
     set(CMAKE_INSTALL_DATAROOTDIR "${MAC_BUNDLE_PATH}/Contents/share")
     set(CMAKE_INSTALL_LIBDIR      "${MAC_BUNDLE_PATH}/Contents/MacOS")
+    if(NOT APPLE_STANDALONE_BUNDLE)
+        include(GNUInstallDirs)
+    endif()
 elseif(NOT WIN32)
     include(GNUInstallDirs)
 endif()
 
-if(NOT APPLE)
+# if(NOT APPLE)
     set(INSTALL_PATH_ICONS "${CMAKE_INSTALL_DATAROOTDIR}/icons")
     set(INSTALL_PATH_MIME "${CMAKE_INSTALL_DATAROOTDIR}/mime")
-endif()
+# endif()
 
 if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD" AND CMAKE_INSTALL_PREFIX STREQUAL "/usr/local")
     set(INSTALL_PATH_MAN "man") # exception for FreeBSD
@@ -430,7 +436,7 @@ else()
     install(FILES AUTHORS ChangeLog LICENSE README.md DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/qmplay2")
 endif()
 
-if(NOT APPLE AND NOT WIN32)
+# if(NOT APPLE AND NOT WIN32)
     # uninstall target
     configure_file(
         "${CMAKE_CURRENT_SOURCE_DIR}/src/cmake/Uninstall.cmake.in"
@@ -439,7 +445,7 @@ if(NOT APPLE AND NOT WIN32)
 
     add_custom_target(uninstall
         COMMAND ${CMAKE_COMMAND} -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
-endif()
+# endif()
 
 feature_summary(WHAT ENABLED_FEATURES DESCRIPTION "Enabled features:")
 feature_summary(WHAT DISABLED_FEATURES DESCRIPTION "Disabled features:")
diff --git a/src/gui/CMakeLists.txt b/src/gui/CMakeLists.txt
index d04be17e..6e83e007 100644
--- a/src/gui/CMakeLists.txt
+++ b/src/gui/CMakeLists.txt
@@ -4,6 +4,9 @@ project(QMPlay2)
 if(WIN32)
     find_package(Qt5WinExtras 5.10 REQUIRED)
 endif()
+if(USE_XVIDEO)
+    add_definitions(-DHAVE_X11)
+endif()
 
 set(GUI_HDR
     Main.hpp
@@ -228,47 +232,49 @@ endif()
 if(WIN32)
     install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/)
 elseif(APPLE)
-    install(TARGETS ${PROJECT_NAME} BUNDLE DESTINATION ${CMAKE_INSTALL_PREFIX})
+    install(TARGETS ${PROJECT_NAME} BUNDLE DESTINATION ${BUNDLE_INSTALL_DIR})
 
     set(QT_LIBS_DIR "${Qt5Widgets_DIR}/../..")
     set(QT_PLUGINS_DIR "${QT_LIBS_DIR}/../plugins")
-    install(FILES
-        "${QT_PLUGINS_DIR}/platforms/libqcocoa.dylib"
-        DESTINATION "${MAC_BUNDLE_PATH}/Contents/plugins/platforms")
-    install(FILES
-        "${QT_PLUGINS_DIR}/iconengines/libqsvgicon.dylib"
-        DESTINATION "${MAC_BUNDLE_PATH}/Contents/plugins/iconengines")
-    install(FILES
-        "${QT_PLUGINS_DIR}/styles/libqmacstyle.dylib"
-        DESTINATION "${MAC_BUNDLE_PATH}/Contents/plugins/styles"
-        OPTIONAL)
-    install(DIRECTORY
-        "${QT_PLUGINS_DIR}/imageformats"
-        DESTINATION "${MAC_BUNDLE_PATH}/Contents/plugins"
-        PATTERN "*_debug.dylib" EXCLUDE
-        PATTERN "*.dSYM" EXCLUDE)
-    install(DIRECTORY
-        "${QT_LIBS_DIR}/../translations"
-        DESTINATION "${MAC_BUNDLE_PATH}/Contents"
-        FILES_MATCHING
-        PATTERN "qtbase_*.qm")
-    if(EXISTS "/usr/local/bin/ffmpeg")
-        install(PROGRAMS
-            "/usr/local/bin/ffmpeg"
-            DESTINATION "${MAC_BUNDLE_PATH}/Contents/MacOS")
-    else()
-        message(WARNING "FFmpeg executable not copied!")
+    if(APPLE_STANDALONE_BUNDLE)
+        install(FILES
+            "${QT_PLUGINS_DIR}/platforms/libqcocoa.dylib"
+            DESTINATION "${MAC_BUNDLE_PATH}/Contents/plugins/platforms")
+        install(FILES
+            "${QT_PLUGINS_DIR}/iconengines/libqsvgicon.dylib"
+            DESTINATION "${MAC_BUNDLE_PATH}/Contents/plugins/iconengines")
+        install(FILES
+            "${QT_PLUGINS_DIR}/styles/libqmacstyle.dylib"
+            DESTINATION "${MAC_BUNDLE_PATH}/Contents/plugins/styles"
+            OPTIONAL)
+        install(DIRECTORY
+            "${QT_PLUGINS_DIR}/imageformats"
+            DESTINATION "${MAC_BUNDLE_PATH}/Contents/plugins"
+            PATTERN "*_debug.dylib" EXCLUDE
+            PATTERN "*.dSYM" EXCLUDE)
+        install(DIRECTORY
+            "${QT_LIBS_DIR}/../translations"
+            DESTINATION "${MAC_BUNDLE_PATH}/Contents"
+            FILES_MATCHING
+            PATTERN "qtbase_*.qm")
+        if(EXISTS "/opt/local/bin/ffmpeg")
+            install(PROGRAMS
+                "/opt/local/bin/ffmpeg"
+                DESTINATION "${MAC_BUNDLE_PATH}/Contents/MacOS")
+        else()
+            message(WARNING "FFmpeg executable not copied!")
+        endif()
+        install(CODE "
+            include(BundleUtilities)
+            set(BU_CHMOD_BUNDLE_ITEMS ON)
+            list(APPEND DIRS /opt/locallib ${QT_LIBS_DIR})
+            file(GLOB_RECURSE QMPLAY2_MODULES_AND_QT_PLUGINS
+                \"${MAC_BUNDLE_PATH}/Contents/MacOS/modules/*\"
+                \"${MAC_BUNDLE_PATH}/Contents/plugins/*.dylib\")
+            file(WRITE \"${MAC_BUNDLE_PATH}/Contents/Resources/qt.conf\")
+            fixup_bundle(${MAC_BUNDLE_PATH} \"\${QMPLAY2_MODULES_AND_QT_PLUGINS}\" \"\${DIRS}\")
+        ")
     endif()
-    install(CODE "
-        include(BundleUtilities)
-        set(BU_CHMOD_BUNDLE_ITEMS ON)
-        list(APPEND DIRS /usr/local/lib ${QT_LIBS_DIR})
-        file(GLOB_RECURSE QMPLAY2_MODULES_AND_QT_PLUGINS
-            \"${MAC_BUNDLE_PATH}/Contents/MacOS/modules/*\"
-            \"${MAC_BUNDLE_PATH}/Contents/plugins/*.dylib\")
-        file(WRITE \"${MAC_BUNDLE_PATH}/Contents/Resources/qt.conf\")
-        fixup_bundle(${MAC_BUNDLE_PATH} \"\${QMPLAY2_MODULES_AND_QT_PLUGINS}\" \"\${DIRS}\")
-    ")
 else()
     # executable
     install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
diff --git a/src/gui/MainWidget.cpp b/src/gui/MainWidget.cpp
index b61316b7..2b263e46 100644
--- a/src/gui/MainWidget.cpp
+++ b/src/gui/MainWidget.cpp
@@ -94,7 +94,7 @@ public:
     }
 };
 
-#ifndef Q_OS_MACOS
+// #ifndef Q_OS_MACOS
 static void copyMenu(QMenu *dest, QMenu *src, QMenu *dontCopy = nullptr)
 {
     QMenu *newMenu = new QMenu(src->title(), dest);
@@ -110,7 +110,7 @@ static void copyMenu(QMenu *dest, QMenu *src, QMenu *dontCopy = nullptr)
     }
     dest->addMenu(newMenu);
 }
-#endif
+// #endif
 
 /* MainWidget */
 MainWidget::MainWidget(QList<QPair<QString, QString>> &arguments)
@@ -158,7 +158,7 @@ MainWidget::MainWidget(QList<QPair<QString, QString>> &arguments)
 
     QMPlay2GUI.menuBar = new MenuBar;
 
-#if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
+#if /*!defined Q_OS_MACOS &&*/ !defined Q_OS_ANDROID
     tray = new QSystemTrayIcon(this);
     tray->setIcon(QMPlay2Core.getIconFromTheme("QMPlay2-panel", QMPlay2Core.getQMPlay2Icon()));
     tray->setVisible(settings.getBool("TrayVisible", true));
@@ -345,7 +345,7 @@ MainWidget::MainWidget(QList<QPair<QString, QString>> &arguments)
     if (settings.getBool("MainWidget/TabPositionNorth"))
         setTabPosition(Qt::AllDockWidgetAreas, QTabWidget::North);
 
-#if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
+#if /*!defined Q_OS_MACOS &&*/ !defined Q_OS_ANDROID
     const bool menuHidden = settings.getBool("MainWidget/MenuHidden", false);
     menuBar->setVisible(!menuHidden);
     hideMenuAct = new QAction(tr("&Hide menu bar"), menuBar);
@@ -410,7 +410,7 @@ MainWidget::MainWidget(QList<QPair<QString, QString>> &arguments)
         setAttribute(Qt::WA_NoSystemBackground, false);
     }
 
-#if defined Q_OS_MACOS || defined Q_OS_ANDROID
+#if /*defined Q_OS_MACOS ||*/ defined Q_OS_ANDROID
     show();
 #else
     setVisible(settings.getBool("MainWidget/isVisible", true) ? true : !isTrayVisible());
@@ -976,7 +976,7 @@ void MainWidget::createMenuBar()
 
     setMenuBar(menuBar);
 
-#ifndef Q_OS_MACOS
+#ifndef Q_OS_MACOS_FOR_REAL
     if (tray)
     {
         auto secondMenu = new QMenu(this);
@@ -1060,7 +1060,7 @@ void MainWidget::toggleCompactView()
 
         hideAllExtensions();
 
-#if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
+#if /*!defined Q_OS_MACOS &&*/ !defined Q_OS_ANDROID
         menuBar->hide();
 #endif
         mainTB->hide();
@@ -1083,7 +1083,7 @@ void MainWidget::toggleCompactView()
         restoreState(dockWidgetState);
         dockWidgetState.clear();
 
-#if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
+#if /*!defined Q_OS_MACOS &&*/ !defined Q_OS_ANDROID
         menuBar->setVisible(!hideMenuAct->isChecked());
 #endif
 
@@ -1108,7 +1108,7 @@ void MainWidget::toggleFullScreen()
 #ifndef Q_OS_ANDROID
     static bool maximized;
 #endif
-#ifdef Q_OS_MACOS
+#if defined(Q_OS_MACOS) && !defined(HAVE_X11)
     if (isFullScreen())
     {
         showNormal();
@@ -1125,7 +1125,7 @@ void MainWidget::toggleFullScreen()
 #ifndef Q_OS_ANDROID
         maximized = isMaximized();
 
-#ifndef Q_OS_MACOS
+#if !defined(Q_OS_MACOS) || defined(HAVE_X11)
 #ifndef Q_OS_WIN
         if (isFullScreen())
 #endif
@@ -1139,7 +1139,7 @@ void MainWidget::toggleFullScreen()
         dockWidgetState = saveState();
 #endif // Q_OS_ANDROID
 
-#if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
+#if /*!defined Q_OS_MACOS &&*/ !defined Q_OS_ANDROID
         menuBar->hide();
 #endif
         statusBar->hide();
@@ -1168,14 +1168,14 @@ void MainWidget::toggleFullScreen()
         videoDock->fullScreen(true);
         videoDock->show();
 
-#ifdef Q_OS_MACOS
+// #if defined(Q_OS_MACOS)
         menuBar->window->toggleVisibility->setEnabled(false);
-#endif
+// #endif
         menuBar->window->toggleCompactView->setEnabled(false);
         menuBar->window->toggleFullScreen->setShortcuts(QList<QKeySequence>() << menuBar->window->toggleFullScreen->shortcut() << QKeySequence("ESC"));
         fullScreen = true;
 
-#ifndef Q_OS_MACOS
+#if !defined(Q_OS_MACOS) || defined(HAVE_X11)
         showFullScreen();
 #else
         setWindowFlags(Qt::Window | Qt::FramelessWindowHint);
@@ -1189,9 +1189,9 @@ void MainWidget::toggleFullScreen()
     }
     else
     {
-#ifdef Q_OS_MACOS
+// #if defined(Q_OS_MACOS)
         menuBar->window->toggleVisibility->setEnabled(true);
-#endif
+// #endif
         menuBar->window->toggleCompactView->setEnabled(true);
         menuBar->window->toggleFullScreen->setShortcuts(QList<QKeySequence>() << menuBar->window->toggleFullScreen->shortcut());
 
@@ -1199,7 +1199,7 @@ void MainWidget::toggleFullScreen()
         fullScreen = false;
 
 #ifndef Q_OS_ANDROID
-#ifdef Q_OS_MACOS
+#if defined(Q_OS_MACOS) && !defined(HAVE_X11)
         QMPlay2MacExtensions::showSystemUi(windowHandle(), true);
         setWindowFlags(Qt::Window);
 #else
@@ -1209,7 +1209,7 @@ void MainWidget::toggleFullScreen()
             showMaximized();
         else
         {
-#ifdef Q_OS_MACOS
+#if defined(Q_OS_MACOS) && !defined(HAVE_X11)
             showNormal();
 #endif
             setGeometry(savedGeo);
@@ -1235,7 +1235,7 @@ void MainWidget::toggleFullScreen()
             if (QDockWidget *dw = QMPlay2Ext->getDockWidget())
                 dw->setFeatures(QDockWidget::AllDockWidgetFeatures);
 
-#if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
+#if /*!defined Q_OS_MACOS &&*/ !defined Q_OS_ANDROID
         menuBar->setVisible(!hideMenuAct->isChecked());
 #endif
         statusBar->show();
@@ -1461,7 +1461,7 @@ void MainWidget::about()
     }
 }
 
-#if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
+// #if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
 void MainWidget::hideMenu(bool h)
 {
     if (fullScreen || isCompactView)
@@ -1472,7 +1472,7 @@ void MainWidget::hideMenu(bool h)
         QMPlay2Core.getSettings().set("MainWidget/MenuHidden", h);
     }
 }
-#endif
+// #endif
 void MainWidget::lockWidgets(bool l)
 {
     if (fullScreen || isCompactView)
@@ -1601,7 +1601,7 @@ QMenu *MainWidget::createPopupMenu()
     QMenu *popupMenu = QMainWindow::createPopupMenu();
     if (!fullScreen && !isCompactView)
     {
-#if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
+#if /*!defined Q_OS_MACOS &&*/ !defined Q_OS_ANDROID
         popupMenu->insertAction(popupMenu->actions().value(0), hideMenuAct);
         popupMenu->insertSeparator(popupMenu->actions().value(1));
         popupMenu->addSeparator();
@@ -1834,6 +1834,16 @@ void MainWidget::mouseMoveEvent(QMouseEvent *e)
         {
             showToolBar(true); //Before restoring dock widgets - show toolbar and status bar
 
+            // FullScreenDockWidgetState has been known to become corrupted, which can cause
+            // Qt to get stuck in an infinite loop trying to restore layout of the videoDock. 
+            // This can lead to a crash or abort. Prevent this in 2 ways:
+            // 1) don't do our mouseMove event processing during the call to restoreState()
+            //    There's only ever a single MainWidget instance so we just use a local static.
+            // 2) by clearing the setting here. If all goes well, the value we will be using
+            //    now will be saved again. If not, we'll have gotten rid of the corrupt value.
+            auto &settings = QMPlay2Core.getSettings();
+            settings.remove("MainWidget/FullScreenDockWidgetState");
+            settings.flush();
             inRestoreState = true;
             restoreState(fullScreenDockWidgetState);
             inRestoreState = false;
@@ -1930,9 +1940,9 @@ void MainWidget::closeEvent(QCloseEvent *e)
     }
     settings.set("MainWidget/FullScreenDockWidgetState", fullScreenDockWidgetState);
     settings.set("MainWidget/AlwaysOnTop", !!(windowFlags() & Qt::WindowStaysOnTopHint));
-#ifndef Q_OS_MACOS
+// #ifndef Q_OS_MACOS
     settings.set("MainWidget/isVisible", isVisible());
-#endif
+// #endif
     if (tray)
         settings.set("TrayVisible", tray->isVisible());
     settings.set("VolumeL", volW->volumeL());
diff --git a/src/gui/MainWidget.hpp b/src/gui/MainWidget.hpp
index bc0d31ee..69a6a794 100644
--- a/src/gui/MainWidget.hpp
+++ b/src/gui/MainWidget.hpp
@@ -110,7 +110,7 @@ private slots:
 
     void about();
 
-#if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
+#if /*!defined Q_OS_MACOS &&*/ !defined Q_OS_ANDROID
     void hideMenu(bool);
 #else
     void hideMenu(bool) {} //To avoid incorrect CPP file generated by MOC on Android
@@ -187,7 +187,7 @@ private:
     bool isCompactView, wasShow, fullScreen, seekSFocus, m_restoreWindowOnVideo = false;
     bool m_loaded = false;
 
-#if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
+#if /*!defined Q_OS_MACOS &&*/ !defined Q_OS_ANDROID
     QAction *hideMenuAct;
 #endif
     QAction *lockWidgetsAct;
diff --git a/src/gui/SettingsWidget.cpp b/src/gui/SettingsWidget.cpp
index cdbba84c..94b467e3 100644
--- a/src/gui/SettingsWidget.cpp
+++ b/src/gui/SettingsWidget.cpp
@@ -67,7 +67,7 @@
 #include "ui_SettingsPlayback.h"
 #include "ui_SettingsPlaybackModulesList.h"
 
-#if !defined(Q_OS_WIN) && !defined(Q_OS_MACOS) && !defined(Q_OS_ANDROID)
+#if !defined(Q_OS_WIN) /*&& !defined(Q_OS_MACOS)*/ && !defined(Q_OS_ANDROID)
     #define ICONS_FROM_THEME
 #endif
 
diff --git a/src/modules/XVideo/CMakeLists.txt b/src/modules/XVideo/CMakeLists.txt
index fb30ee13..6709feed 100644
--- a/src/modules/XVideo/CMakeLists.txt
+++ b/src/modules/XVideo/CMakeLists.txt
@@ -17,7 +17,7 @@ set(XVideo_RESOURCES
     icon.qrc
 )
 
-pkg_check_modules(LIB_X11_XV REQUIRED x11 xv)
+pkg_check_modules(LIB_X11_XV REQUIRED x11 xv xext)
 link_directories(${LIB_X11_XV_LIBRARY_DIRS})
 
 include_directories(${LIB_X11_XV_INCLUDE_DIRS})
diff --git a/src/qmplay2/CMakeLists.txt b/src/qmplay2/CMakeLists.txt
index 32f74cff..f3557a8c 100644
--- a/src/qmplay2/CMakeLists.txt
+++ b/src/qmplay2/CMakeLists.txt
@@ -1,6 +1,9 @@
 cmake_minimum_required(VERSION 3.12)
 project(libqmplay2)
 
+# string(REPLACE "-fvisibility=hidden" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+# string(REPLACE "-fvisibility-inlines-hidden" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+
 set(QMPLAY2_HDR
     QMPlay2Lib.hpp
     QMPlay2Core.hpp
@@ -124,7 +124,7 @@ if(USE_OPENGL)
         opengl/opengl.qrc
     )
 
-    if(APPLE)
+    if(APPLE AND NOT USE_XVIDEO)
         find_package(OpenGL REQUIRED)
         list(APPEND OPENGL_LIBS ${OPENGL_LIBRARIES})
     elseif(WIN32)
@@ -344,7 +344,7 @@ if(WIN32)
     install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX})
 else()
     install(TARGETS ${PROJECT_NAME} LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
-    if(NOT APPLE)
+    if(NOT APPLE_STANDALONE_BUNDLE)
         install(FILES ${QMPLAY2_HDR} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/QMPlay2")
     endif()
 endif()
diff --git a/src/modules/FFmpeg/CMakeLists.txt b/src/modules/FFmpeg/CMakeLists.txt
index ef45fc16c0f2e64ec36ecb4cb25ca2e5f5de3875..b843618d8563d799b43a07069c480f1083d2f529 100644
--- a/src/modules/FFmpeg/CMakeLists.txt
+++ b/src/modules/FFmpeg/CMakeLists.txt
@@ -1,6 +1,9 @@
 cmake_minimum_required(VERSION 3.12)
 project(FFmpeg)
 
+# string(REPLACE "-fvisibility=hidden" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+# string(REPLACE "-fvisibility-inlines-hidden" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
+
 set(FFmpeg_HDR
     FFmpeg.hpp
     FFDemux.hpp
diff --git a/src/modules/FFmpeg/VTBOpenGL.cpp b/src/modules/FFmpeg/VTBOpenGL.cpp
index 0b01bc6821218041f1221c02d9dc0f4e6b4590c9..2d2fe8c9c1da6c9dd53453d3cedce97bf29246b8 100644
--- a/src/modules/FFmpeg/VTBOpenGL.cpp
+++ b/src/modules/FFmpeg/VTBOpenGL.cpp
@@ -23,6 +23,7 @@
 
 #include <QOpenGLContext>
 #include <QImage>
+#include <QLoggingCategory>
 
 extern "C"
 {
@@ -103,12 +104,17 @@ bool VTBOpenGL::mapFrame(Frame &videoFrame)
             internalFormat1 = GL_RG8;
             type = GL_UNSIGNED_BYTE;
             break;
+#if defined(__MAC_10_13) && defined(__MAC_OS_X_VERSION_MAX_ALLOWED) && __MAC_OS_X_VERSION_MAX_ALLOWED >= __MAC_10_13
         case kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange:
+#else
+        case 'x420':
+#endif
             internalFormat0 = GL_R16;
             internalFormat1 = GL_RG16;
             type = GL_UNSIGNED_SHORT;
             break;
         default:
+            qWarning() << Q_FUNC_INFO << "Unsupported pixelFormat" << pixelFormat;
             m_error = true;
             return false;
     }
diff --git a/src/modules/FFmpeg/FFDecVTB.cpp b/src/modules/FFmpeg/FFDecVTB.cpp
index 8ff9f763..9e2e7369 100644
--- a/src/modules/FFmpeg/FFDecVTB.cpp
+++ b/src/modules/FFmpeg/FFDecVTB.cpp
@@ -80,7 +81,10 @@ bool FFDecVTB::open(StreamInfo &streamInfo)
     if (pix_fmt == AV_PIX_FMT_YUV420P10)
     {
         if (streamInfo.params->codec_id == AV_CODEC_ID_H264)
+        {
+            qWarning() << "H264/yuv420p10 not supported by VTB";
             return false;
+        }
     }
     else if (pix_fmt != AV_PIX_FMT_YUV420P && pix_fmt != AV_PIX_FMT_YUVJ420P)
     {
@@ -89,7 +93,10 @@ bool FFDecVTB::open(StreamInfo &streamInfo)
 
     AVCodec *codec = init(streamInfo);
     if (!codec || !hasHWAccel("videotoolbox"))
+    {
+        qWarning() << "VTB: no or unsupported codec";
         return false;
+    }
 
 #ifdef USE_OPENGL
     shared_ptr<VTBOpenGL> vtbOpenGL;
@@ -103,14 +109,20 @@ bool FFDecVTB::open(StreamInfo &streamInfo)
 #endif
 
     if (!m_hwDeviceBufferRef && av_hwdevice_ctx_create(&m_hwDeviceBufferRef, AV_HWDEVICE_TYPE_VIDEOTOOLBOX, nullptr, nullptr, 0) != 0)
+    {
+        qWarning() << "VTB: failed to create hwdevice_ctx";
         return false;
+    }
 
 #ifdef USE_OPENGL
     if (QMPlay2Core.renderer() == QMPlay2CoreClass::Renderer::OpenGL && !vtbOpenGL)
     {
         vtbOpenGL = make_shared<VTBOpenGL>(m_hwDeviceBufferRef);
         if (!QMPlay2Core.gpuInstance()->setHWDecContextForVideoOutput(vtbOpenGL))
+        {
+            qWarning() << "VTB: failed to set VTB GPU context";
             return false;
+        }
     }
 
     if (vtbOpenGL)
@@ -121,7 +134,10 @@ bool FFDecVTB::open(StreamInfo &streamInfo)
     codec_ctx->get_format = vtbGetFormat;
     codec_ctx->thread_count = 1;
     if (!openCodec(codec))
+    {
+        qWarning() << "VTB: failed to open codec";
         return false;
+    }
 
     m_timeBase = streamInfo.time_base;
     return true;
