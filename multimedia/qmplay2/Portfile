# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
set qt5.no_LTO_variant 1
name                qmplay2
if {${os.platform} ne "darwin"} {
    subport "${name}-devel-qt515" {}
}
if {${subport} ne "${name}-devel-qt515"} {
    PortGroup       qt5 1.0
}
PortGroup           cmake 1.1
PortGroup           github 1.0
PortGroup           active_variants 1.1
PortGroup           locale_select 1.0
platform darwin {
    # this isn't really necessary.
    PortGroup       legacysupport 1.1
    legacysupport.newest_darwin_requires_legacy 13
    if {![string match macports-gcc-* ${configure.compiler}]} {
        legacysupport.use_mp_libcxx yes
    }
}
if {${os.platform} ne "darwin" || ${os.major} >= 13} {
    set LTO.configure_option -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON
} else {
    set LTO.configure_option -DUSE_LINK_TIME_OPTIMIZATION=ON
}
PortGroup           LTO 1.0

description         A Qt5-based video and audio player.
long_description    QMPlay2 is a video and audio player. It can play all formats \
                    supported by FFmpeg, libmodplug (including J2B and SFX). It also \
                    supports Audio CD, raw files, Rayman 2 music and chiptunes. It \
                    contains YouTube and Prostopleer browsers.
license             LGPL-3
maintainers         gmail.com:rjvbertin openmaintainer
platforms           darwin linux

subport             ${name}-devel {
    notes-append \
"YouTube streaming functionality requires having `python3` in the path (e.g. via `port select --set python3 ???`) but the Python3 interpreter can also be selected via the QMPLAY2_PYTHON_CMD env. variable."
}

post-install {
    ui_msg "${subport}@${version} installed"
}
post-activate {
    ui_msg "${subport}@${version} activated"
}
post-uninstall {
    ui_msg "${subport}@${version} uninstalled"
}
post-deactivate {
    ui_msg "${subport}@${version} deactivated"
}

if {${os.platform} ne "darwin"} {
    if {${subport} eq "${name}-devel-qt515"} {
        long_description-append \nThis port builds against a full Qt 5.15 install expected in /opt/Qt/5/5.15 !

        cmake_share_module_dir \
                    "/opt/Qt/5/5.15/gcc_64/lib/cmake\;[lindex $cmake_share_module_dir 0]"
        set qt_qmake_cmd \
                    /opt/Qt/5/5.15/gcc_64/bin/qmake
        set qt_libs_dir \
                    /opt/Qt/5/5.15/gcc_64/lib
        set qt_apps_dir \
                    ${prefix}/bin
        if {[string match *clang* ${configure.compiler}]} {
            set qt_qmake_spec linux-clang
        } else {
            set qt_qmake_spec linux-g++-64
        }
        configure.args-append \
            -DQT_QMAKESPEC=${qt_qmake_spec}

        proc qt5.depends_component {args} {
        }

        # create a wrapper script in ${prefix}/bin for an application bundle in qt_apps_dir
        proc qt5.add_app_wrapper {wrappername {bundlename ""} {bundleexec ""} {appdir ""}} {
            global qt_apps_dir destroot prefix subport filespath
            # no app bundles on this platform, but provide the same API by pretending there are.
            # If unset, use ${subport} to guess the exec. name because evidently we cannot
            # symlink ${wrappername} onto itself.
            if {${appdir} eq ""} {
                set appdir ${prefix}/bin
            }
            if {${bundlename} eq ""} {
                set bundlename ${subport}
            }
            if {${bundleexec} eq ""} {
                set bundleexec ${bundlename}
            }
            if {${bundleexec} eq "${prefix}/bin/${wrappername}"
                    || "${appdir}/${bundleexec}" eq "${prefix}/bin/${wrappername}"} {
                ui_error "qt5.add_app_wrapper: wrapper ${wrappername} would overwrite executable ${bundleexec}: ignoring!"
                return;
            }
            xinstall -m 755 -d ${destroot}${prefix}/bin
            xinstall -m 755 ${filespath}/qmplay2-optQt.sh "${destroot}${prefix}/bin/${wrappername}"
            reinplace "s|@PREFIX@|${prefix}|g" "${destroot}${prefix}/bin/${wrappername}"
            reinplace "s|@QTDIR@|/opt/Qt/5/5.15|g" "${destroot}${prefix}/bin/${wrappername}"
        }
        conflicts-append \
            port:${name} \
            port:${name}-devel
    } else {
        conflicts-append \
            port:${name} \
            port:${name}-devel-qt515
    }
}

if {${subport} eq "${name}"} {
    github.setup    zaps166 QMPlay2 17.12.31
    checksums       rmd160  ae99e94899d83809dd2d11c46e2faf94cc3f4a1f \
                    sha256  12675f054ed126ffbda9a96e710331f206b5fbb142967207e3653d3cef2ae45e
    replaced_by     ${name}-devel
    PortGroup       obsolete 1.0
} else {

    github.setup zaps166 QMPlay2 54d4b10f061dfe7117f1fc371588d6c1e35915d2
    # ########################
    # after `git tag v21.06.07 -m "release 21.06.07" 2acce209e1b14bc7b5662f8a354f0d71c59d9cde`
    # after `git tag v21.12.07 -m "release 21.12.07" a84de320e544293fdf9ebe4e3b01b444f666956e`
    # after `git tag v21.12.24 -m "release 21.12.24" 0fc4399de1f010181f92fd349b83c8bfa2fb4d87`
    # after `git tag v22.03.19 -m "release 22.03.19" a8bf83ffb4bdc6e420aec9dedc5f7c00d7468358`
    # after `git tag v22.06.16 -m "release 22.06.16" b49100b7ab538abeb9bd32c77f0d6566053f6903`
    # after `git tag v22.10.23 -m "release 22.10.23" 862b8080a2791a0f82db1901b7c99143e1f6e273`
    # after `git tag v23.02.05 -m "release 23.02.05" 6bc2e4dc0c6fba5470bb5e8fd89513ff03fb854d`
    # after `git tag v23.06.04 -m "release 23.06.04" a21c8bd0ead5ca6672de990879f28f9394b6fefb`
    # after `git tag v23.06.17 -m "release 23.06.17" fe3f05ca43a5953b529cbb3303c1d76b368eeeb0`
    # after `git tag v23.08.08 -m "release 23.08.8" 38c5cdf2e766020ec186291c1936961b1bdd2952`
    # after `git tag v23.08.22 -m "release 23.08.22" 9db4d6375d7dd406ca1c4800775b5e6dad8ee9a4`
    # after `git tag v23.09.5 -m "release 23.09.5" bfdff240dd15e52c5c85b0a1f8fb898424b5f93b`
    # after `git tag v23.10.22 -m "release 23.10.22" da6036373a72eab4c346b09e77207c94a35a6cd0`
    # after `git tag v24.03.16 -m "release 24.03.16" 09d462fc7922109faa580e31f36ef806cc4f2d31`
    # after `git tag v24.04.02 -m "release 24.04.02" f1e5bd81a6d1a097946dde25b5d6078c39d15e0b`
    # after `git tag v24.04.07 -m "release 24.04.07" fe1ce0508f3646deabbb542e6b8081cb217bd55a`
    # after `git tag v24.06.16 -m "release 24.06.16" 935a51ecf20afe48145af7f9aa7c413c79e85fe9`
    # after `git tag v24.12.06 -m "release 24.12.06" 797bfdeb7389edbac806bdbf795bf585b56595ec`
    # after `git tag v24.12.23 -m "release 24.12.23" 5bf25e02493a9ce1d125589538e62b9a1f6a2783`
    # after `git tag v24.12.28 -m "release 24.12.28" eb5b805ad2da5a2596289452662eb3ef2cddaaf1`
    # after `git tag v25.01.19 -m "release 25.01.19" 09a3b9576a173076e32dcebfc9cc2faa4bb54702`
    # after `git tag v25.06.11 -m "release 25.06.11" f450a3feb6f60b632ca56121274b415aa20a9fd9`
    # after `git tag v25.06.27 -m "release 25.06.27" 67c701f0073878e1dc4c68afd2f19a4febfa0322`
    # ########################
    version     25.06.27.14

    compiler.cxx_standard 2017
    if {${os.platform} eq "darwin"} {
        if {${os.major} >= 13} {
#             # checkout the Vulkan code even if it's not currently supported on Mac:
#             post-extract {
#                 system -W ${worksrcpath} "git submodule update --init --recursive"
#             }
            cmake.generator \
                    Ninja
            build.pre_args-prepend -k 0
        } else {
            # avoid a "bad drawable" error that's probably related to VideoToolBox (no idea
            # ATM if this is indeed only an issue systems running an OS older than 10.9).
            github.setup zaps166 QMPlay2 a9af85b093a3bdd6ef530ccc1f5cac31c4699c43
            # after `git tag v19.12.19 -m "release 19.12.19" 4977ded1621abc3cd8f0e5123f30e8334e8c8ec6`
            version     19.12.19.26
            compiler.cxx_standard 2011
        }
    } else {
        post-extract {
            system -W ${worksrcpath} "git submodule update --init --recursive"
        }
        cmake.generator \
                    Ninja
        build.pre_args-prepend -k 0
    }
    # this port is intended to facilitate development efforts shared with "upstreams"
    # so using git instead of a tarball fetch type is more appropriate.
    fetch.type      git
    distname        qmplay2-git
}

cmake.save_configure_cmd "install log"

# ensure pre-compiled headers and the possible use of ccache can co-exist
configure.env-append \
                    "CCACHE_SLOPPINESS=pch_defines,time_macros"
build.env-append    "CCACHE_SLOPPINESS=pch_defines,time_macros"

configure.args-append \
                    -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON \
                    -DUSE_FFMPEG_AVDEVICE=ON \
                    -DUSE_RUBBERBAND=ON \
                    -DCMAKE_DISABLE_FIND_PACKAGE_Qt6=ON \
                    -DBUILD_WITH_QT6=OFF \
                    -DCMAKE_STRIP:FILEPATH=/bin/echo
if {${os.platform} eq "darwin"} {
    configure.args-append \
                    -DUSE_CUVID=OFF
} else {
    configure.args-append \
                    -DUSE_CUVID=ON
}

if {![variant_exists LTO]} {
    variant LTO description {Build with link-time optimisation} {}
    if {[variant_isset LTO]} {
        configure.args-append \
                    -DUSE_LINK_TIME_OPTIMIZATION=ON
    }
}
if {![variant_isset LTO]} {
    configure.args-append \
                    -DUSE_LINK_TIME_OPTIMIZATION=OFF
}

if {${os.platform} eq "darwin" && ${os.major} < 17} {
    # VideoToolBox support is confirmed to work "as is" on 10.13 and up by the developer.
    # On 10.9 it fails because relevant dynamic casting doesn't work across libraries;
    # disable hidden visibibility to work around that.
    configure.args-append \
                    -DUSE_HIDDEN_VISIBILITY=OFF
}

if {[variant_exists qt5stock_kde] && [variant_isset qt5stock_kde]} {
    cmake_share_module_dir \
                    "[lindex $qt_cmake_module_dir 0]\;[lindex $cmake_share_module_dir 0]"
    post-destroot {
        file rename ${destroot}${prefix}/bin/QMPlay2 ${destroot}${prefix}/bin/QMPlay2.bin
        qt5.add_app_wrapper QMPlay2 QMPlay2.bin
    }
} elseif {${subport} eq "${name}-devel-qt515"} {
    post-destroot {
        file rename ${destroot}${prefix}/bin/QMPlay2 ${destroot}${prefix}/bin/QMPlay2.bin
        qt5.add_app_wrapper QMPlay2 QMPlay2.bin
    }
}

if {${os.platform} ne "darwin"} {
    cmake.install_rpath-prepend \
                    ${qt_libs_dir}
    # activate portaudio support on Linux too
    configure.args-append \
                    -DUSE_PORTAUDIO=ON \
                    -DFIND_HWACCEL_DRIVERS_PATH=ON
    # don't use the buildsystem's rpath support
    # (it will install only a single path)
    configure.args-append \
                    -DSET_INSTALL_RPATH=OFF
    variant libcxx description {highly experimental option to build against libc++. \
            Requires using clang and an independently provided libc++ installation.} {}
    if {[variant_isset libcxx]} {
        configure.cxx_stdlib \
                        libc++
        configure.cxxflags-delete \
                    -stdlib=libstdc++
        configure.cxxflags-append \
                    -stdlib=libc++
    }
} elseif {[string match macports-gcc* ${configure.compiler}]} {
    if {![string match macports-clang* ${configure.objcxx}]} {
        # since building with GCC is mostly an experimental hack, just hardcode a build.dep on clang-12
        configure.objcxx ${prefix}/bin/clang++-mp-12
        depends_build-append port:clang-12
    }
} else {
    if {![variant_exists use_lld] || ![variant_isset use_lld]} {
        # ld64.lld seems to have problems with the OpenGL.framework, generating errors
        # that CGLGetCurrentContext isn't found. Force the use of ld64 if the user
        # didn't ask for lld explicitly.
        configure.ldflags-append -fuse-ld=ld
    }
}

qt5.depends_component \
                    qtsvg qttools
depends_lib-append  port:ffmpeg \
                    port:portaudio \
                    port:rubberband

platform linux {
    depends_lib-append \
                    port:vulkan-loader

    variant pipewire description {build the PipeWire module} {}
    if {[variant_isset pipewire]} {
        depends_lib-append \
                    port:pipewire
        configure.args-append \
                    -DUSE_PIPEWIRE=ON
    } else {
        # not requested, force it off
        configure.args-append \
                    -DUSE_PIPEWIRE=OFF
    }
}

proc select_newer_ffmpeg {fvers} {
    global prefix configure.args cmake.module_path cmake.install_rpath
    PortGroup       conflicts_build 1.0
    depends_lib-replace \
                    port:ffmpeg \
                    port:${fvers}
    # patching the code to accept only FFmpeg6+ is unnecessary because
    # CMake will prefer the newest available version (so we'd only have
    # to add the ${fvers} install location). But see just below.
    configure.args-append \
                    -DBUILD_WITH_FFMPEG6=ON
    if {[option os.platform] ne "darwin"} {
        configure.args-append \
                    -DUSE_FFMPEG_VKVIDEO=ON
    }
    cmake.module_path-append \
                    ${prefix}/libexec/${fvers}
    cmake.install_rpath-append \
                    ${prefix}/libexec/${fvers}/lib
    conflicts_build ffmpeg-dev
}

patch.pre_args      -Np1
if {${os.platform} ne "darwin" || ${os.major} >= 13} {

    variant ffmpeg6 conflicts ffmpeg7 description {build against ffmpeg6} {}
    variant ffmpeg7 conflicts ffmpeg6 description {build against ffmpeg7} {}
    if {[variant_isset ffmpeg7]} {
        select_newer_ffmpeg ffmpeg7
    } elseif {[variant_isset ffmpeg6]} {
        select_newer_ffmpeg ffmpeg6
    } else {
        # Ensuring we build against ffmpeg 4.x will probably require
        # a patch at some point in the future, forcing a ceiling to
        # the max. desired version.
        configure.args-append \
                    -DBUILD_WITH_FFMPEG6=OFF
        cmake.module_path
        depends_build-append \
                    port:ffmpeg-dev
    }

    patchfiles-append \
                    patch-macports-build.diff
} else {
    patchfiles-append \
                    legacy/patch-macports-build.diff
}

if {${subport} eq "${name}"} {
    # add support for outputting bit-perfect audio (adapt output device SR, don't resample content) (WIP)
    patchfiles-append   patch-bitperfect.diff
} else {
    patchfiles-append   patch-ytdlp-unpack.diff \
                        patch-show-yt-description.diff \
                        patch-network-language.diff
}

# restore the support for disabling iTunes; it should still work on OS versions < 10.12.4
if {${os.platform} ne "darwin" || ${os.major} >= 13} {
    patchfiles-append \
                    patch-restore-itunes-disable.diff
} else {
    patchfiles-append \
                    legacy/patch-restore-itunes-disable.diff
}

# make sure Qt logging messages don't get lost when running from the app bundle
patchfiles-append   patch-log-to-syslog.diff
# patchfiles-append   patch-restore-ytdl.diff

if {[file exists ${filespath}/patch-temp-fixes.diff]} {
    patchfiles-append \
                    patch-temp-fixes.diff
}

# NB: disallow VTB when QT_QPA_PLATFORM==xcb && QT_XCB_GL_INTEGRATION==xcb_egl
if {[file exists ${filespath}/patch-temp-fixes2.diff]} {
    patchfiles-append \
                    patch-temp-fixes2.diff
}

if {(${os.platform} ne "darwin" || ${os.major} >= 13) && ${subport} ne "${name}-devel-qt515"} {
    # revert the requirement bump to Qt5.15 . This is required for all builds, for now.
    patchfiles-append   patch-support-qt510.diff

    if {![variant_exists qt5stock_kde] || ![variant_isset qt5stock_kde]} {
        # reintroduce support for Qt 5.9:
        # first revert what has to be reverted from the qt510 patch
        # so I don't have to make cumulative patchfiles
        patchfiles-append \
                        patch-support-prevert-qt510-support.diff
        # now we can add Qt5.9 support on top of the current code:
        patchfiles-append \
                        patch-support-qt59.diff
        configure.args-append -DQT5_MIN_VERSION=5.9.8
    } else {
        # reintroduce support for Qt 5.12 until we upgrade to a newer Qt5 version
        configure.args-append -DQT5_MIN_VERSION=5.12.6
    }
}

platform darwin {
    # mostly a proof-of-concept patch that allows using QT_XCB_GL_INTEGRATION=xcb_egl
    # when running QMPlay2 under X11. Plus a few #ifdef MACOS that be obsolete
    # (and certainly not necessary).
    patchfiles-append \
                    patch-opengl.diff
}

# let QMPlay2 handle "youtube:VID" URIs
patchfiles-append   patch-handle-youtube_scheme.diff

# don't (always) raise the window and steal focus
patchfiles-append   patch-no-autoraise-on-play.diff

# Building with GCC (may) need an additional header included explicitly:
patchfiles-append   patch-support-gcc.diff

# attempt to deal with YT videos that are forced into SABR mode
patchfiles-append   patch-ytdlp-sabr-kludge-parallel.diff

post-patch {
    reinplace "s|@PREFIX@|${prefix}|g" ${worksrcpath}/src/gui/CMakeLists.txt
}

if {${os.platform} eq "darwin"} {
    ## build system is set up to create a standalone, all-inclusive app bundle!
    depends_lib-append \
                    port:libass \
                    port:taglib \
                    port:libcdio \
                    port:libcddb

    subport ${name}-x11 {}

    if {[info exists langselect_qm_dir]} {
        langselect_qm_dir ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/qmplay2/lang
    }

    if {${subport} eq "${name}-x11"} {
        pre-fetch {
            if {![variant_exists qt5de] || ![variant_isset qt5kde]} {
                ui_error "This port requires port:qt5-kde or port:qt5-kde-devel"
                return -code error "Not supported with this Qt5 port"
            }
        }
    }
    post-destroot {
        if {[file exists ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/mime]} {
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/mime \
                ${destroot}${prefix}/share/mime
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/man/man1/QMPlay2.1.gz \
                ${destroot}${prefix}/share/man/man1/
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/icons \
                ${destroot}${prefix}/share/icons
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/applications \
                ${destroot}${prefix}/share/applications
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/metainfo \
                ${destroot}${prefix}/share/metainfo
        }
    }
    if {${subport} eq "${name}-x11"} {
        # build an X11 version. This is mostly a proof-of-concept, but also a way to exercise
        # port:mesa+egl . We build QMPlay2.app as normal but making certain it uses Mesa and
        # not Apple's OpenGL.framework, and with minimal source code tweaks.
        # Starting it while NOT using the X11 QPA will (probably) cause it to fall back to
        # using the legacy QPainter render backend.
        long_description-append "\nThis builds an X11 version."
        if {[variant_isset qt5kde]} {
            # the surest way to ensure we're requiring a Qt5 build with X11 support
            # (in a conditional block to prevent portindex errors before port:qt5-kde
            # has had a chance to be installed)
            qt5.depends_component \
                    x11
            depends_lib-append \
                    port:xorg-libXext \
                    port:xorg-libXv
            require_active_variants port:mesa egl
        }
        cmake.install_prefix \
                    ${prefix}/libexec/QMPlay2X11
        configure.args-append \
                    -DUSE_PULSEAUDIO=OFF \
                    -DBUNDLE_INSTALL_DIR=${cmake.install_prefix} \
                    -DUSE_XVIDEO=ON
        post-destroot {
            file delete -force ${destroot}${prefix}/libexec/QMPlay2X11/include
            xinstall -m 755 -d ${destroot}${cmake.install_prefix}/lib
            file rename ${destroot}${cmake.install_prefix}/QMPlay2.app/Contents/MacOS/libqmplay2.dylib \
                ${destroot}${cmake.install_prefix}/lib/
#             # install a wrapper script in ${prefix}/bin
            if {[info procs "qt5.add_app_wrapper"] ne ""} {
                qt5.wrapper_env_additions "QT_QPA_PLATFORM=xcb ## This requires port:qt5-kde-x11 or qt5-kde-devel-x11"
                qt5.add_app_wrapper QMPlay2-x11 QMPlay2 "" ${cmake.install_prefix}
            } else {
                system "echo \"#!/bin/sh\nexec \\\"${cmake.install_prefix}/QMPlay2.app/Contents/MacOS/QMPlay2\\\" -platform xcb \\\"\\\$\@\\\"\" > ${destroot}${prefix}/bin/QMPlay2"
                system "chmod 755 ${destroot}${cmake.install_prefix}/bin/QMPlay2"
            }
        }
    } else {
        configure.args-append \
                    -DUSE_PULSEAUDIO=OFF \
                    -DBUNDLE_INSTALL_DIR=${qt_apps_dir} \
                    -DUSE_XVIDEO=OFF
        post-destroot {
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/MacOS/libqmplay2.dylib ${destroot}${prefix}/lib/
            # install a wrapper script in ${prefix}/bin
            if {[info procs "qt5.add_app_wrapper"] ne ""} {
                qt5.add_app_wrapper QMPlay2
            } else {
                system "echo \"#!/bin/sh\nexec \\\"${qt_apps_dir}/QMPlay2.app/Contents/MacOS/QMPlay2\\\" \\\"\\\$\@\\\"\" > ${destroot}${prefix}/bin/QMPlay2"
                system "chmod 755 ${destroot}${prefix}/bin/QMPlay2"
            }
        }
    }

    variant pulseaudio description {Enable PulseAudio support} {}
    if {[variant_isset pulseaudio]} {
        depends_lib-append \
                    port:pulseaudio
        configure.args-replace \
                    -DUSE_PULSEAUDIO=OFF \
                    -DUSE_PULSEAUDIO=ON
    }
} else {
    if {[info exists langselect_qm_dir]} {
        langselect_qm_dir ${destroot}${prefix}/share/qmplay2/lang
    }
#     post-destroot {
#         xinstall -m 755 ${filespath}/QMPlay2_youtubeservice.desktop ${destroot}${prefix}/share/applications/
#     }
}

depends_run-append  port:python3_select
