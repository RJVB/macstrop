# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
set qt5.no_LTO_variant 1
PortGroup           qt5 1.0
PortGroup           cmake 1.1
PortGroup           github 1.0
PortGroup           active_variants 1.1
PortGroup           locale_select 1.0
platform darwin {
    # this isn't really necessary.
    PortGroup       legacysupport 1.1
    legacysupport.newest_darwin_requires_legacy 13
    legacysupport.use_mp_libcxx yes
}
set LTO.configure_option -DUSE_LINK_TIME_OPTIMIZATION=ON
PortGroup           LTO 1.0

name                qmplay2

description         A Qt5-based video and audio player.
long_description    QMPlay2 is a video and audio player. It can play all formats \
                    supported by FFmpeg, libmodplug (including J2B and SFX). It also \
                    supports Audio CD, raw files, Rayman 2 music and chiptunes. It \
                    contains YouTube and Prostopleer browsers.
license             LGPL-3
maintainers         gmail.com:rjvbertin openmaintainer
platforms           darwin linux

subport             ${name}-devel {
    long_description A QMPlay2 port aimed at development purposes.
}

post-install {
    ui_msg "${subport}@${version} installed"
}
post-activate {
    ui_msg "${subport}@${version} activated"
}
post-uninstall {
    ui_msg "${subport}@${version} uninstalled"
}
post-deactivate {
    ui_msg "${subport}@${version} deactivated"
}

if {${subport} eq "${name}"} {
    github.setup    zaps166 QMPlay2 17.12.31
    checksums       rmd160  ae99e94899d83809dd2d11c46e2faf94cc3f4a1f \
                    sha256  12675f054ed126ffbda9a96e710331f206b5fbb142967207e3653d3cef2ae45e
    replaced_by     ${name}-devel
    PortGroup       obsolete 1.0
} else {
    github.setup zaps166 QMPlay2 1d3a5842972d9b7db2491c6541f5485904a52819
    # ########################
    # after `git tag v21.06.07 -m "release 21.06.07" 2acce209e1b14bc7b5662f8a354f0d71c59d9cde`
    # after `git tag v21.12.07 -m "release 21.12.07" a84de320e544293fdf9ebe4e3b01b444f666956e`
    # after `git tag v21.12.24 -m "release 21.12.24" 0fc4399de1f010181f92fd349b83c8bfa2fb4d87`
    # after `git tag v22.03.19 -m "release 22.03.19" a8bf83ffb4bdc6e420aec9dedc5f7c00d7468358`
    # after `git tag v22.06.16 -m "release 22.06.16" b49100b7ab538abeb9bd32c77f0d6566053f6903`
    # after `git tag v22.10.23 -m "release 22.10.23" 862b8080a2791a0f82db1901b7c99143e1f6e273`
    # after `git tag v23.02.05 -m "release 23.02.05" 6bc2e4dc0c6fba5470bb5e8fd89513ff03fb854d`
    # after `git tag v23.06.04 -m "release 23.06.04" a21c8bd0ead5ca6672de990879f28f9394b6fefb`
    # after `git tag v23.06.17 -m "release 23.06.17" fe3f05ca43a5953b529cbb3303c1d76b368eeeb0`
    # after `git tag v23.08.08 -m "release 23.08.8" 38c5cdf2e766020ec186291c1936961b1bdd2952`
    # after `git tag v23.08.22 -m "release 23.08.22" 9db4d6375d7dd406ca1c4800775b5e6dad8ee9a4`
    # ########################
    version     23.08.22.4
    compiler.cxx_standard 2014
    if {${os.platform} eq "darwin"} {
        if {${os.major} >= 13} {
            # checkout the Vulkan code even if it's not currently supported on Mac:
            post-extract {
                system -W ${worksrcpath} "git submodule update --init --recursive"
            }
        } else {
            # avoid a "bad drawable" error that's probably related to VideoToolBox (no idea
            # ATM if this is indeed only an issue systems running an OS older than 10.9).
            github.setup zaps166 QMPlay2 a9af85b093a3bdd6ef530ccc1f5cac31c4699c43
            # after `git tag v19.12.19 -m "release 19.12.19" 4977ded1621abc3cd8f0e5123f30e8334e8c8ec6`
            version     19.12.19.26
            compiler.cxx_standard 2011
        }
    } else {
        post-extract {
            system -W ${worksrcpath} "git submodule update --init --recursive"
        }
    }
    # this port is intended to facilitate development efforts shared with "upstreams"
    # so using git instead of a tarball fetch type is more appropriate.
    fetch.type      git
    distname        qmplay2-git
}

cmake.save_configure_cmd "install log"

# ensure pre-compiled headers and the possible use of ccache can co-exist
configure.env-append \
                    "CCACHE_SLOPPINESS=pch_defines,time_macros"
build.env-append    "CCACHE_SLOPPINESS=pch_defines,time_macros"

configure.args-append \
                    -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON \
                    -DUSE_FFMPEG_AVDEVICE=ON \
                    -DUSE_RUBBERBAND=ON \
                    -DCMAKE_STRIP:FILEPATH=/bin/echo
if {${os.platform} eq "darwin"} {
    configure.args-append \
                    -DUSE_CUVID=OFF
} else {
    configure.args-append \
                    -DUSE_CUVID=ON
}

if {![variant_exists LTO]} {
    variant LTO description {Build with link-time optimisation} {}
    if {[variant_isset LTO]} {
        configure.args-append \
                    -DUSE_LINK_TIME_OPTIMIZATION=ON
    }
}
if {![variant_isset LTO]} {
    configure.args-append \
                    -DUSE_LINK_TIME_OPTIMIZATION=OFF
}

if {${os.platform} eq "darwin" && ${os.major} < 17} {
    # VideoToolBox support is confirmed to work "as is" on 10.13 and up by the developer.
    # On 10.9 it fails because relevant dynamic casting doesn't work across libraries;
    # disable hidden visibibility to work around that.
    configure.args-append \
                    -DUSE_HIDDEN_VISIBILITY=OFF
}

if {[variant_exists qt5stock_kde] && [variant_isset qt5stock_kde]} {
    cmake_share_module_dir \
                    "[lindex $qt_cmake_module_dir 0]\;[lindex $cmake_share_module_dir 0]"
    post-destroot {
        file rename ${destroot}${prefix}/bin/QMPlay2 ${destroot}${prefix}/bin/QMPlay2.bin
        qt5.add_app_wrapper QMPlay2 QMPlay2.bin
    }
}

if {${os.platform} ne "darwin"} {
    cmake.install_rpath-prepend \
                    ${qt_libs_dir}
    # activate portaudio support on Linux too
    configure.args-append \
                    -DUSE_PORTAUDIO=ON \
                    -DFIND_HWACCEL_DRIVERS_PATH=ON
    # don't use the buildsystem's rpath support
    # (it will install only a single path)
    configure.args-append \
                    -DSET_INSTALL_RPATH=OFF
    variant libcxx description {highly experimental option to build against libc++. \
            Requires using clang and an independently provided libc++ installation.} {}
    if {[variant_isset libcxx]} {
        configure.cxx_stdlib \
                        libc++
        configure.cxxflags-delete \
                    -stdlib=libstdc++
        configure.cxxflags-append \
                    -stdlib=libc++
    }
}

qt5.depends_component \
                    qtsvg qttools
depends_lib-append  port:ffmpeg \
                    port:portaudio \
                    port:rubberband

patch.pre_args      -Np1
if {${os.platform} ne "darwin" || ${os.major} >= 13} {
    patchfiles-append \
                    future/patch-macports-build.diff
} else {
}

if {${subport} eq "${name}"} {
    # add support for outputting bit-perfect audio (adapt output device SR, don't resample content) (WIP)
    patchfiles-append   patch-bitperfect.diff
} else {
    patchfiles-append   patch-ytdlp-unpack.diff \
                        patch-show-yt-description.diff \
                        patch-network-language.diff
}

# restore the support for disabling iTunes; it should still work on OS versions < 10.12.4
if {${os.platform} ne "darwin" || ${os.major} >= 13} {
    patchfiles-append \
                    future/patch-restore-itunes-disable.diff
} else {
    patchfiles-append \
                    patch-restore-itunes-disable.diff
}

# make sure Qt logging messages don't get lost when running from the app bundle
patchfiles-append   patch-log-to-syslog.diff
# patchfiles-append   patch-restore-ytdl.diff

if {[file exists ${filespath}/patch-temp-fixes.diff]} {
    patchfiles-append \
                    patch-temp-fixes.diff
}

# NB: disallow VTB when QT_QPA_PLATFORM==xcb && QT_XCB_GL_INTEGRATION==xcb_egl
if {[file exists ${filespath}/patch-temp-fixes2.diff]} {
    patchfiles-append \
                    patch-temp-fixes2.diff
}

if {![variant_exists qt5stock_kde] || ![variant_isset qt5stock_kde]} {
    # reintroduce support for Qt 5.9:
    patchfiles-append \
                    patch-support-qt59.diff
}

platform darwin {
    # mostly a proof-of-concept patch that allows using QT_XCB_GL_INTEGRATION=xcb_egl
    # when running QMPlay2 under X11. Plus a few #ifdef MACOS that be obsolete
    # (and certainly not necessary).
    patchfiles-append \
                    patch-opengl.diff
}

# let QMPlay2 handle "youtube:VID" URIs
patchfiles-append   patch-handle-youtube_scheme.diff

# don't (always) raise the window and steal focus
patchfiles-append   patch-no-autoraise-on-play.diff

post-patch {
    reinplace "s|@PREFIX@|${prefix}|g" ${worksrcpath}/src/gui/CMakeLists.txt
}

if {${os.platform} eq "darwin"} {
    ## build system is set up to create a standalone, all-inclusive app bundle!
    depends_lib-append \
                    port:libass \
                    port:taglib \
                    port:libcdio \
                    port:libcddb

    subport ${name}-x11 {}

    if {[info exists langselect_qm_dir]} {
        langselect_qm_dir ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/qmplay2/lang
    }

    if {${subport} eq "${name}-x11"} {
        pre-fetch {
            if {![variant_exists qt5de] || ![variant_isset qt5kde]} {
                ui_error "This port requires port:qt5-kde or port:qt5-kde-devel"
                return -code error "Not supported with this Qt5 port"
            }
        }
    }
    post-destroot {
        if {[file exists ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/mime]} {
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/mime \
                ${destroot}${prefix}/share/mime
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/man/man1/QMPlay2.1.gz \
                ${destroot}${prefix}/share/man/man1/
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/icons \
                ${destroot}${prefix}/share/icons
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/applications \
                ${destroot}${prefix}/share/applications
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/share/metainfo \
                ${destroot}${prefix}/share/metainfo
        }
    }
    if {${subport} eq "${name}-x11"} {
        # build an X11 version. This is mostly a proof-of-concept, but also a way to exercise
        # port:mesa+egl . We build QMPlay2.app as normal but making certain it uses Mesa and
        # not Apple's OpenGL.framework, and with minimal source code tweaks.
        # Starting it while NOT using the X11 QPA will (probably) cause it to fall back to
        # using the legacy QPainter render backend.
        long_description-append "\nThis builds an X11 version."
        if {[variant_isset qt5kde]} {
            # the surest way to ensure we're requiring a Qt5 build with X11 support
            # (in a conditional block to prevent portindex errors before port:qt5-kde
            # has had a chance to be installed)
            qt5.depends_component \
                    x11
            depends_lib-append \
                    port:xorg-libXext \
                    port:xorg-libXv
            require_active_variants port:mesa egl
        }
        cmake.install_prefix \
                    ${prefix}/libexec/QMPlay2X11
        configure.args-append \
                    -DUSE_PULSEAUDIO=OFF \
                    -DBUNDLE_INSTALL_DIR=${cmake.install_prefix} \
                    -DUSE_XVIDEO=ON
        post-destroot {
            file delete -force ${destroot}${prefix}/libexec/QMPlay2X11/include
            xinstall -m 755 -d ${destroot}${cmake.install_prefix}/lib
            file rename ${destroot}${cmake.install_prefix}/QMPlay2.app/Contents/MacOS/libqmplay2.dylib \
                ${destroot}${cmake.install_prefix}/lib/
#             # install a wrapper script in ${prefix}/bin
            if {[info procs "qt5.add_app_wrapper"] ne ""} {
                qt5.wrapper_env_additions "QT_QPA_PLATFORM=xcb ## This requires port:qt5-kde-x11 or qt5-kde-devel-x11"
                qt5.add_app_wrapper QMPlay2-x11 QMPlay2 "" ${cmake.install_prefix}
            } else {
                system "echo \"#!/bin/sh\nexec \\\"${cmake.install_prefix}/QMPlay2.app/Contents/MacOS/QMPlay2\\\" -platform xcb \\\"\\\$\@\\\"\" > ${destroot}${prefix}/bin/QMPlay2"
                system "chmod 755 ${destroot}${cmake.install_prefix}/bin/QMPlay2"
            }
        }
    } else {
        configure.args-append \
                    -DUSE_PULSEAUDIO=OFF \
                    -DBUNDLE_INSTALL_DIR=${qt_apps_dir} \
                    -DUSE_XVIDEO=OFF
        post-destroot {
            file rename ${destroot}${qt_apps_dir}/QMPlay2.app/Contents/MacOS/libqmplay2.dylib ${destroot}${prefix}/lib/
            # install a wrapper script in ${prefix}/bin
            if {[info procs "qt5.add_app_wrapper"] ne ""} {
                qt5.add_app_wrapper QMPlay2
            } else {
                system "echo \"#!/bin/sh\nexec \\\"${qt_apps_dir}/QMPlay2.app/Contents/MacOS/QMPlay2\\\" \\\"\\\$\@\\\"\" > ${destroot}${prefix}/bin/QMPlay2"
                system "chmod 755 ${destroot}${prefix}/bin/QMPlay2"
            }
        }
    }
} else {
    if {[info exists langselect_qm_dir]} {
        langselect_qm_dir ${destroot}${prefix}/share/qmplay2/lang
    }
#     post-destroot {
#         xinstall -m 755 ${filespath}/QMPlay2_youtubeservice.desktop ${destroot}${prefix}/share/applications/
#     }
}

