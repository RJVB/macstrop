--- Source/WebKit/Platform/IPC/Connection.h.orig	2023-02-20 09:22:20
+++ Source/WebKit/Platform/IPC/Connection.h	2024-12-23 14:22:33
@@ -53,7 +53,12 @@
 #include <wtf/unix/UnixFileDescriptor.h>
 #endif
 
-#if OS(DARWIN)
+// so PlatformGTK activates UNIX_DOMAIN_SOCKETS
+// - these exist on DARWIN - so going with that
+// think it used to be you could use mach ports
+// without using COCOA ie Objective C
+// so now change all OS(DARWIN) here to PLATFORM(COCOA)
+#if PLATFORM(COCOA)
 #include <mach/mach_port.h>
 #include <wtf/MachSendRight.h>
 #include <wtf/OSObjectPtr.h>
@@ -151,7 +156,7 @@
     using Handle = UnixFileDescriptor;
 #elif OS(WINDOWS)
     using Handle = Win32Handle;
-#elif OS(DARWIN)
+#elif PLATFORM(COCOA)
     using Handle = MachSendRight;
 #endif
 
@@ -179,7 +184,7 @@
         }
         operator bool() const { return !!handle; }
         HANDLE handle { 0 };
-#elif OS(DARWIN)
+#elif PLATFORM(COCOA)
         explicit Identifier(Handle&& handle)
             : Identifier(handle.leakSendRight())
         {
@@ -199,7 +204,7 @@
 #endif
     };
 
-#if OS(DARWIN)
+#if PLATFORM(COCOA)
     xpc_connection_t xpcConnection() const { return m_xpcConnection.get(); }
     std::optional<audit_token_t> getAuditToken();
     pid_t remoteProcessID() const;
@@ -529,7 +534,7 @@
 #if PLATFORM(PLAYSTATION)
     RefPtr<WTF::Thread> m_socketMonitor;
 #endif
-#elif OS(DARWIN)
+#elif PLATFORM(COCOA)
     // Called on the connection queue.
     void receiveSourceEventHandler();
     void initializeSendSource();
