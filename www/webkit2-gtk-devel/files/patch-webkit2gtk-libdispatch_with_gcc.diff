# diff --git Source/WTF/wtf/orig.PlatformHave.h Source/WTF/wtf/PlatformHave.h
# index 949977f..8bcc9f1 100644
# --- Source/WTF/wtf/orig.PlatformHave.h
# +++ Source/WTF/wtf/PlatformHave.h
# @@ -185,7 +185,7 @@
#  #define HAVE_PTHREAD_SETSCHEDPARAM 1
#  #endif
#  
# -#if OS(DARWIN)
# +#if OS(DARWIN) && defined(__clang__)
#  #define HAVE_DISPATCH_H 1
#  #endif

diff --git Source/ThirdParty/ANGLE/src/common/system_utils.cpp Source/ThirdParty/ANGLE/src/common/system_utils.cpp
index 44921be4ed52e2b2138302a526ce9cfaa68192f4..e9b4452c289b289f33cf16a291e4939ebbd98ba5 100644
--- Source/ThirdParty/ANGLE/src/common/system_utils.cpp
+++ Source/ThirdParty/ANGLE/src/common/system_utils.cpp
@@ -249,10 +249,17 @@ uint64_t GetCurrentThreadUniqueId()
     static std::atomic<uint64_t> globalThreadSerial;
     static pthread_key_t tlsIndex;
     static dispatch_once_t once;
+#ifdef __clang__
     dispatch_once(&once, ^{
       auto result = pthread_key_create(&tlsIndex, nullptr);
       ASSERT(result == 0);
     });
+#else
+    dispatch_once_f(&once, &tlsIndex, [](void *tlsIndex) {
+      auto result = pthread_key_create((pthread_key_t*)tlsIndex, nullptr);
+      ASSERT(result == 0);
+    });
+#endif
     void *tlsValue = pthread_getspecific(tlsIndex);
     if (ANGLE_UNLIKELY(tlsValue == nullptr))
     {
diff --git Source/ThirdParty/ANGLE/src/libANGLE/Context.cpp Source/ThirdParty/ANGLE/src/libANGLE/Context.cpp
index 5dd90658943b729d5a7a447254c605af5ebe4d93..62bbee7d63ab1f5cde45ed1f3391121c92117784 100644
--- Source/ThirdParty/ANGLE/src/libANGLE/Context.cpp
+++ Source/ThirdParty/ANGLE/src/libANGLE/Context.cpp
@@ -513,10 +513,17 @@ static angle::TLSIndex GetCurrentValidContextTLSIndex()
 {
     static angle::TLSIndex CurrentValidContextIndex = TLS_INVALID_INDEX;
     static dispatch_once_t once;
+#ifdef __clang__
     dispatch_once(&once, ^{
       ASSERT(CurrentValidContextIndex == TLS_INVALID_INDEX);
       CurrentValidContextIndex = angle::CreateTLSIndex(nullptr);
     });
+#else
+    dispatch_once_f(&once, nullptr, [](void *) {
+      ASSERT(CurrentValidContextIndex == TLS_INVALID_INDEX);
+      CurrentValidContextIndex = angle::CreateTLSIndex(nullptr);
+    });
+#endif
     return CurrentValidContextIndex;
 }
 Context *GetCurrentValidContextTLS()
diff --git Source/ThirdParty/ANGLE/src/libGLESv2/global_state.cpp Source/ThirdParty/ANGLE/src/libGLESv2/global_state.cpp
index 8fdc748bf4f56e5da56bba15ea281c13cc19afb7..15924b6301c15e07f6f050d84a7bd39015fbca1a 100644
--- Source/ThirdParty/ANGLE/src/libGLESv2/global_state.cpp
+++ Source/ThirdParty/ANGLE/src/libGLESv2/global_state.cpp
@@ -93,10 +93,17 @@ static angle::TLSIndex GetCurrentThreadTLSIndex()
 {
     static angle::TLSIndex CurrentThreadIndex = TLS_INVALID_INDEX;
     static dispatch_once_t once;
+#ifdef __clang__
     dispatch_once(&once, ^{
       ASSERT(CurrentThreadIndex == TLS_INVALID_INDEX);
       CurrentThreadIndex = angle::CreateTLSIndex(nullptr);
     });
+#else
+    dispatch_once_f(&once, nullptr, [](void*){
+      ASSERT(CurrentThreadIndex == TLS_INVALID_INDEX);
+      CurrentThreadIndex = angle::CreateTLSIndex(nullptr);
+    });
+#endif
     return CurrentThreadIndex;
 }
 Thread *GetCurrentThreadTLS()
diff --git Source/WebKit/Shared/orig.WebPreferencesDefaultValues.cpp Source/WebKit/Shared/WebPreferencesDefaultValues.cpp
index a9630e4..2e6d020 100644
--- Source/WebKit/Shared/orig.WebPreferencesDefaultValues.cpp
+++ Source/WebKit/Shared/WebPreferencesDefaultValues.cpp
@@ -182,7 +182,11 @@ bool defaultMediaSessionCoordinatorEnabled()
 {
     static dispatch_once_t onceToken;
     static bool enabled { false };
+#ifdef __clang__
     dispatch_once(&onceToken, ^{
+#else
+    dispatch_once_f(&onceToken, nullptr, [enabled](void*){
+#endif
         if (WebCore::isInWebProcess())
             enabled = WebProcess::singleton().parentProcessHasEntitlement("com.apple.developer.group-session.urlactivity"_s);
         else
diff --git Source/WebCore/platform/graphics/cv/orig.GraphicsContextGLCVCocoa.cpp Source/WebCore/platform/graphics/cv/GraphicsContextGLCVCocoa.cpp
index 433b8f2..0bb788d 100644
--- Source/WebCore/platform/graphics/cv/orig.GraphicsContextGLCVCocoa.cpp
+++ Source/WebCore/platform/graphics/cv/GraphicsContextGLCVCocoa.cpp
@@ -420,7 +420,11 @@ static const GLfloat* YCbCrToRGBMatrixForRangeAndTransferFunction(PixelRange ran
     static_assert((smpte240MFullMatrix * GLfloatColor(76,  226, 241, 255)).isApproximatelyEqualTo(GLfloatColors::magenta, 1.5f / 255.f), "SMPTE 240M full matrix does not produce magenta color");
     static_assert((smpte240MFullMatrix * GLfloatColor(201, 158, 1,   255)).isApproximatelyEqualTo(GLfloatColors::cyan,    1.5f / 255.f), "SMPTE 240M full matrix does not produce cyan color");
 
+#ifdef __clang__
     dispatch_once(&onceToken, ^{
+#else
+    dispatch_once_f(&onceToken, nullptr, [r601VideoMatrix,r601FullMatrix,r709VideoMatrix,r709FullMatrix,bt2020VideoMatrix,bt2020FullMatrix,smpte240MVideoMatrix,smpte240MFullMatrix](void*){
+#endif
         matrices.get().emplace(MapKey(PixelRange::Video, TransferFunctionCV::kITU_R_601_4), r601VideoMatrix);
         matrices.get().emplace(MapKey(PixelRange::Full, TransferFunctionCV::kITU_R_601_4), r601FullMatrix);
         matrices.get().emplace(MapKey(PixelRange::Video, TransferFunctionCV::kITU_R_709_2), r709VideoMatrix);
diff --git Source/WTF/wtf/orig.ParallelJobsLibdispatch.h Source/WTF/wtf/ParallelJobsLibdispatch.h
index 8b31a58..917185a 100644
--- Source/WTF/wtf/orig.ParallelJobsLibdispatch.h
+++ Source/WTF/wtf/ParallelJobsLibdispatch.h
@@ -56,13 +56,23 @@ public:
     {
         static dispatch_queue_t globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
 
+#ifdef __clang__
         dispatch_apply(m_numberOfJobs, globalQueue, ^(size_t i) { (*m_threadFunction)(parameters + (m_sizeOfParameter * i)); });
+#else
+        m_parameters = parameters;
+        dispatch_apply_f(m_numberOfJobs, globalQueue, this, [](void *ctx, size_t i) {
+		   WTF::ParallelEnvironment *self = static_cast<WTF::ParallelEnvironment*>(ctx);
+		   (*self->m_threadFunction)(self->m_parameters + (self->m_sizeOfParameter * i)); });
+#endif
     }
 
 private:
     ThreadFunction m_threadFunction;
     size_t m_sizeOfParameter;
     int m_numberOfJobs;
+#ifndef __clang__
+    unsigned char *m_parameters;
+#endif
 };
 
 } // namespace WTF

diff --git Source/ThirdParty/ANGLE/src/libANGLE/Display.cpp Source/ThirdParty/ANGLE/src/libANGLE/Display.cpp
index bfae1c76..dcffeba7 100644
--- Source/ThirdParty/ANGLE/src/libANGLE/Display.cpp
+++ Source/ThirdParty/ANGLE/src/libANGLE/Display.cpp
@@ -111,10 +111,17 @@ static angle::TLSIndex GetDisplayTLSIndex()
 {
     static angle::TLSIndex DisplayIndex = TLS_INVALID_INDEX;
     static dispatch_once_t once;
+#ifdef __clang__
     dispatch_once(&once, ^{
       ASSERT(DisplayIndex == TLS_INVALID_INDEX);
       DisplayIndex = angle::CreateTLSIndex(nullptr);
     });
+#else
+    dispatch_once_f(&once, nullptr, [](void *) {
+      ASSERT(DisplayIndex == TLS_INVALID_INDEX);
+      DisplayIndex = angle::CreateTLSIndex(nullptr);
+    });
+#endif
     return DisplayIndex;
 }
 TLSData *GetDisplayTLS()
