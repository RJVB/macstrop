diff --git Source/WTF/wtf/MemoryPressureHandler.cpp Source/WTF/wtf/MemoryPressureHandler.cpp
index 5379c0a4d5c8c6f367d91696e0d6a18c5d9fec0f..193f56733c45bf90e777bf6fb53d1b0071027b8e 100644
--- Source/WTF/wtf/MemoryPressureHandler.cpp
+++ Source/WTF/wtf/MemoryPressureHandler.cpp
@@ -40,7 +40,7 @@ WTFLogChannel LogMemoryPressure = { WTFLogChannelState::On, "MemoryPressure", WT
 WTFLogChannel LogMemoryPressure = { WTFLogChannelState::On, "MemoryPressure", WTFLogLevel::Error, LOG_CHANNEL_WEBKIT_SUBSYSTEM, OS_LOG_DEFAULT };
 #endif
 
-WTF_EXPORT_PRIVATE bool MemoryPressureHandler::ReliefLogger::s_loggingEnabled = false;
+WTF_EXPORT_PRIVATE bool MemoryPressureHandler::ReliefLogger::s_loggingEnabled = true;
 
 MemoryPressureHandler& MemoryPressureHandler::singleton()
 {
@@ -55,18 +55,20 @@ MemoryPressureHandler::MemoryPressureHandler()
     : m_windowsMeasurementTimer(RunLoop::main(), this, &MemoryPressureHandler::windowsMeasurementTimerFired)
 #endif
 {
-#if PLATFORM(COCOA)
+#if OS(DARWIN)
     setDispatchQueue(dispatch_get_main_queue());
 #endif
 }
 
 void MemoryPressureHandler::setShouldUsePeriodicMemoryMonitor(bool use)
 {
+#ifndef __APPLE__
     if (!isFastMallocEnabled()) {
         // If we're running with FastMalloc disabled, some kind of testing or debugging is probably happening.
         // Let's be nice and not enable the memory kill mechanism.
         return;
     }
+#endif
 
     if (use) {
         m_measurementTimer = makeUnique<RunLoop::Timer<MemoryPressureHandler>>(RunLoop::main(), this, &MemoryPressureHandler::measurementTimerFired);
@@ -301,7 +303,7 @@ void MemoryPressureHandler::ReliefLogger::logMemoryUsageChange()
 void MemoryPressureHandler::platformInitialize() { }
 #endif
 
-#if PLATFORM(COCOA)
+#if OS(DARWIN)
 void MemoryPressureHandler::setDispatchQueue(dispatch_queue_t queue)
 {
     RELEASE_ASSERT(!m_installed);
diff --git Source/WTF/wtf/MemoryPressureHandler.h Source/WTF/wtf/MemoryPressureHandler.h
index 1774954a2b81c2f50ed7d01ed418e4c0b807b9bb..7859b7d36dcce9f632f52681f72be01a095f2a3f 100644
--- Source/WTF/wtf/MemoryPressureHandler.h
+++ Source/WTF/wtf/MemoryPressureHandler.h
@@ -37,6 +37,9 @@
 #if OS(WINDOWS)
 #include <wtf/win/Win32Handle.h>
 #endif
+#if defined(__APPLE__)
+#include <dispatch/dispatch.h>
+#endif
 
 namespace WTF {
 
@@ -82,7 +85,7 @@ public:
     bool isUnderMemoryPressure() const
     {
         return m_underMemoryPressure
-#if PLATFORM(MAC)
+#if defined(__APPLE__)
             || m_memoryUsagePolicy >= MemoryUsagePolicy::Strict
 #endif
             || m_isSimulatingMemoryPressure;
@@ -91,7 +94,7 @@ public:
 
     WTF_EXPORT_PRIVATE static MemoryUsagePolicy currentMemoryUsagePolicy();
 
-#if PLATFORM(COCOA)
+#if defined(__APPLE__)
     WTF_EXPORT_PRIVATE void setDispatchQueue(dispatch_queue_t);
 #endif
 
@@ -205,7 +208,7 @@ private:
     void holdOffTimerFired();
 #endif
 
-#if PLATFORM(COCOA)
+#if defined(__APPLE__)
     dispatch_queue_t m_dispatchQueue { nullptr };
 #endif
 };
diff --git Source/WTF/wtf/generic/MemoryFootprintGeneric.cpp Source/WTF/wtf/generic/MemoryFootprintGeneric.cpp
index e6cb9dd51ddfb721883d73f077f475cbad45251e..85c379c6675aaaccf407127fab7bb5708b5a853d 100644
--- Source/WTF/wtf/generic/MemoryFootprintGeneric.cpp
+++ Source/WTF/wtf/generic/MemoryFootprintGeneric.cpp
@@ -28,6 +28,9 @@
 
 #if !(defined(USE_SYSTEM_MALLOC) && USE_SYSTEM_MALLOC) && OS(LINUX)
 #include <bmalloc/bmalloc.h>
+#elif OS(DARWIN)
+#include <unistd.h>
+#include <wtf/spi/darwin/ProcessMemoryFootprint.h>
 #endif
 
 namespace WTF {
@@ -36,6 +39,8 @@ size_t memoryFootprint()
 {
 #if !(defined(USE_SYSTEM_MALLOC) && USE_SYSTEM_MALLOC) && OS(LINUX)
     return bmalloc::api::memoryFootprint();
+#elif OS(DARWIN)
+    return ProcessMemoryFootprint::now().current;
 #else
     return 0;
 #endif
diff --git Source/WebKit/CMakeLists.txt Source/WebKit/CMakeLists.txt
index 115b5df24ee9986cd5abc6a0d9de0e88e116794d..102e1731c57f690f54e9085e5a6a5581ea9cc655 100644
--- Source/WebKit/CMakeLists.txt
+++ Source/WebKit/CMakeLists.txt
@@ -424,6 +424,10 @@ list(APPEND WebKit_SOURCES ${WebKit_DERIVED_SOURCES})
 WEBKIT_COMPUTE_SOURCES(WebKit)
 
 WEBKIT_FRAMEWORK(WebKit)
+if(APPLE)
+    # the change in Encoder.cpp requires the jemalloc or else WebKitProcess crashes
+    target_link_libraries(WebKit PRIVATE -ljemalloc)
+endif()
 add_dependencies(WebKit WebCore ${WEBKIT_EXTRA_DEPENDENCIES})
 ADD_WEBKIT_PREFIX_HEADER(WebKit)
 
diff --git Source/WebKit/Platform/IPC/Encoder.cpp Source/WebKit/Platform/IPC/Encoder.cpp
index 1c45bc7a163f38679b8981a84a5709060d4463d3..3a15e6f8e22d4b9f0587766604add5d78792947e 100644
--- Source/WebKit/Platform/IPC/Encoder.cpp
+++ Source/WebKit/Platform/IPC/Encoder.cpp
@@ -31,7 +31,8 @@
 #include <algorithm>
 #include <stdio.h>
 
-#if OS(DARWIN)
+// let's not use mmap but rather good ole malloc
+#if OS(DARWIN0)
 #include <sys/mman.h>
 #endif
 
@@ -43,8 +44,10 @@ template <typename T>
 static inline bool allocBuffer(T*& buffer, size_t size)
 {
 #if OS(DARWIN)
-    buffer = static_cast<T*>(mmap(0, size, PROT_READ | PROT_WRITE, MAP_ANON | MAP_PRIVATE, -1, 0));
-    return buffer != MAP_FAILED;
+//     buffer = static_cast<T*>(mmap(0, size, PROT_READ | PROT_WRITE, MAP_ANON | MAP_PRIVATE, -1, 0));
+//     return buffer != MAP_FAILED;
+    buffer = static_cast<T*>(malloc(size));
+    return !!buffer;
 #else
     buffer = static_cast<T*>(fastMalloc(size));
     return !!buffer;
@@ -53,8 +56,12 @@ static inline bool allocBuffer(T*& buffer, size_t size)
 
 static inline void freeBuffer(void* addr, size_t size)
 {
-#if OS(DARWIN)
-    munmap(addr, size);
+#if OS(DARWIN0)
+//     munmap(addr, size);
+    UNUSED_PARAM(size);
+    if (addr) {
+        free(addr);
+    }
 #else
     UNUSED_PARAM(size);
     fastFree(addr);
diff --git Source/WTF/wtf/PlatformGTK.cmake.orig Source/WTF/wtf/PlatformGTK.cmake
index 7822ab7..2a5a64c 100644
--- Source/WTF/wtf/PlatformGTK.cmake.orig
+++ Source/WTF/wtf/PlatformGTK.cmake
@@ -19,6 +19,12 @@ if (CMAKE_SYSTEM_NAME MATCHES "Linux")
     )
 endif ()
 
+if (APPLE)
+    list(APPEND WTF_PUBLIC_HEADERS
+        spi/darwin/ProcessMemoryFootprint.h
+    )
+endif ()
+
 list(APPEND WTF_SOURCES
     generic/MainThreadGeneric.cpp
     generic/WorkQueueGeneric.cpp
