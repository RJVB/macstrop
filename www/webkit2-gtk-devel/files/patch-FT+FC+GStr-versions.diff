diff --git Source/cmake/OptionsGTK.cmake Source/cmake/OptionsGTK.cmake
index 9e4db3a2..cdc26f76 100644
--- Source/cmake/OptionsGTK.cmake
+++ Source/cmake/OptionsGTK.cmake
@@ -14,8 +17,8 @@ endif ()
 set(USER_AGENT_BRANDING "" CACHE STRING "Branding to add to user agent string")
 
 find_package(Cairo 1.16.0 REQUIRED)
-find_package(Fontconfig 2.13.0 REQUIRED)
-find_package(Freetype 2.9.0 REQUIRED)
+find_package(Fontconfig 2.12.1 REQUIRED)
+find_package(Freetype 2.9.0 REQUIRED)
 find_package(LibGcrypt 1.7.0 REQUIRED)
 find_package(Libtasn1 REQUIRED)
 find_package(HarfBuzz 1.4.2 REQUIRED COMPONENTS ICU)
diff --git Source/WebCore/platform/graphics/freetype/FontCacheFreeType.cpp Source/WebCore/platform/graphics/freetype/FontCacheFreeType.cpp
index 411c2846..9198b9e9 100644
--- Source/WebCore/platform/graphics/freetype/FontCacheFreeType.cpp
+++ Source/WebCore/platform/graphics/freetype/FontCacheFreeType.cpp
@@ -47,7 +47,7 @@
 #include "GtkUtilities.h"
 #endif
 
-#if ENABLE(VARIATION_FONTS)
+#if ENABLE(VARIATION_FONTS) && defined(FC_FONT_VARIATIONS)
 #include FT_MULTIPLE_MASTERS_H
 #endif
 
@@ -368,7 +368,7 @@ std::unique_ptr<FontPlatformData> FontCache::createFontPlatformData(const FontDe
     RefPtr<FcPattern> pattern = adoptRef(FcPatternCreate());
     // Never choose unscalable fonts, as they pixelate when displayed at different sizes.
     FcPatternAddBool(pattern.get(), FC_SCALABLE, FcTrue);
-#if ENABLE(VARIATION_FONTS)
+#if ENABLE(VARIATION_FONTS) && defined(FC_FONT_VARIATIONS)
     FcPatternAddBool(pattern.get(), FC_VARIABLE, FcDontCare);
 #endif
     String familyNameString(getFamilyNameStringFromFamily(family));
@@ -446,7 +446,7 @@ std::unique_ptr<FontPlatformData> FontCache::createFontPlatformData(const FontDe
     }
 
     RefPtr<cairo_font_face_t> fontFace = adoptRef(cairo_ft_font_face_create_for_pattern(resultPattern.get()));
-#if ENABLE(VARIATION_FONTS)
+#if ENABLE(VARIATION_FONTS) && defined(FC_FONT_VARIATIONS)
     // Cairo doesn't have API to get the FT_Face of an unscaled font, so we need to
     // create a temporary scaled font to get the FT_Face.
     CairoUniquePtr<cairo_font_options_t> options(cairo_font_options_copy(getDefaultCairoFontOptions()));
@@ -481,7 +481,7 @@ std::optional<ASCIILiteral> FontCache::platformAlternateFamilyName(const String&
     return std::nullopt;
 }
 
-#if ENABLE(VARIATION_FONTS)
+#if ENABLE(VARIATION_FONTS) && defined(FC_FONT_VARIATIONS)
 static String fontNameMapName(FT_Face face, unsigned id)
 {
     auto nameCount = FT_Get_Sfnt_Name_Count(face);
diff --git Source/WebCore/platform/graphics/freetype/FontCustomPlatformDataFreeType.cpp Source/WebCore/platform/graphics/freetype/FontCustomPlatformDataFreeType.cpp
index 050fdcf9..7f5be990 100644
--- Source/WebCore/platform/graphics/freetype/FontCustomPlatformDataFreeType.cpp
+++ Source/WebCore/platform/graphics/freetype/FontCustomPlatformDataFreeType.cpp
@@ -97,7 +97,7 @@ FontPlatformData FontCustomPlatformData::fontPlatformData(const FontDescription&
         }
     }
 
-#if ENABLE(VARIATION_FONTS)
+#if ENABLE(VARIATION_FONTS) && defined(FC_FONT_VARIATIONS)
     auto variants = buildVariationSettings(freeTypeFace, description, fontCreationContext);
     if (!variants.isEmpty()) {
         FcPatternAddString(pattern.get(), FC_FONT_VARIATIONS, reinterpret_cast<const FcChar8*>(variants.utf8().data()));
@@ -161,11 +161,11 @@ bool FontCustomPlatformData::supportsFormat(const String& format)
         || equalLettersIgnoringASCIICase(format, "opentype"_s)
 #if HAVE(WOFF_SUPPORT) || USE(WOFF2)
         || equalLettersIgnoringASCIICase(format, "woff2"_s)
-#if ENABLE(VARIATION_FONTS)
+#if ENABLE(VARIATION_FONTS) && defined(FC_FONT_VARIATIONS)
         || equalLettersIgnoringASCIICase(format, "woff2-variations"_s)
 #endif
 #endif
-#if ENABLE(VARIATION_FONTS)
+#if ENABLE(VARIATION_FONTS) && defined(FC_FONT_VARIATIONS)
         || equalLettersIgnoringASCIICase(format, "woff-variations"_s)
         || equalLettersIgnoringASCIICase(format, "truetype-variations"_s)
         || equalLettersIgnoringASCIICase(format, "opentype-variations"_s)
diff --git Source/WebCore/platform/graphics/freetype/FontPlatformDataFreeType.cpp Source/WebCore/platform/graphics/freetype/FontPlatformDataFreeType.cpp
index 32156225..cf5a9c87 100644
--- Source/WebCore/platform/graphics/freetype/FontPlatformDataFreeType.cpp
+++ Source/WebCore/platform/graphics/freetype/FontPlatformDataFreeType.cpp
@@ -108,7 +108,7 @@ static void setCairoFontOptionsFromFontConfigPattern(cairo_font_options_t* optio
     if (FcPatternGetBool(pattern, FC_HINTING, 0, &booleanResult) == FcResultMatch && !booleanResult)
         cairo_font_options_set_hint_style(options, CAIRO_HINT_STYLE_NONE);
 
-#if ENABLE(VARIATION_FONTS)
+#if ENABLE(VARIATION_FONTS) && defined(FC_FONT_VARIATIONS)
     FcChar8* variations;
     if (FcPatternGetString(pattern, FC_FONT_VARIATIONS, 0, &variations) == FcResultMatch) {
         cairo_font_options_set_variations(options, reinterpret_cast<char*>(variations));
@@ -210,7 +210,7 @@ String FontPlatformData::familyName() const
 
 Vector<FontPlatformData::FontVariationAxis> FontPlatformData::variationAxes(ShouldLocalizeAxisNames shouldLocalizeAxisNames) const
 {
-#if ENABLE(VARIATION_FONTS)
+#if ENABLE(VARIATION_FONTS) && defined(FC_FONT_VARIATIONS)
     CairoFtFaceLocker cairoFtFaceLocker(m_scaledFont.get());
     FT_Face ftFace = cairoFtFaceLocker.ftFace();
     if (!ftFace)
