diff --git Source/ThirdParty/ANGLE/src/common/debug.cpp Source/ThirdParty/ANGLE/src/common/debug.cpp
index c26815d3..b07914be 100644
--- Source/ThirdParty/ANGLE/src/common/debug.cpp
+++ Source/ThirdParty/ANGLE/src/common/debug.cpp
@@ -21,7 +21,7 @@
 #    include <android/log.h>
 #endif
 
-#if defined(ANGLE_PLATFORM_APPLE)
+#if defined(ANGLE_PLATFORM_APPLE) && MAC_OS_X_VERSION_MAX_ALLOWED > 101200
 #    include <os/log.h>
 #endif
 
@@ -232,7 +232,7 @@ void Trace(LogSeverity severity, const char *message)
         }
         __android_log_print(android_priority, "ANGLE", "%s: %s\n", LogSeverityName(severity),
                             str.c_str());
-#elif defined(ANGLE_PLATFORM_APPLE)
+#elif defined(ANGLE_PLATFORM_APPLE) && MAC_OS_X_VERSION_MAX_ALLOWED > 101200
         if (__builtin_available(macOS 10.12, iOS 10.0, *))
         {
             os_log_type_t apple_log_type = OS_LOG_TYPE_DEFAULT;
diff --git Source/WTF/wtf/orig.OSLogPrintStream.h Source/WTF/wtf/OSLogPrintStream.h
index d08d57a..ee0e1c1 100644
--- Source/WTF/wtf/orig.OSLogPrintStream.h
+++ Source/WTF/wtf/OSLogPrintStream.h
@@ -25,7 +25,7 @@
 
 #pragma once
 
-#if OS(DARWIN)
+#if OS(DARWIN) 
 
 #include <wtf/Lock.h>
 #include <wtf/PrintStream.h>
@@ -33,7 +33,24 @@
 #include <wtf/text/CString.h>
 #include <wtf/Vector.h>
 
+#if MAC_OS_X_VERSION_MAX_ALLOWED > 101200
 #include <os/log.h>
+#else
+
+// Make this a dummy class
+
+struct os_log_s {
+	int dum;
+};
+typedef struct os_log_s* os_log_t;
+typedef enum {
+	OS_LOG_TYPE_DEFAULT = (uint8_t) 0x00,
+	OS_LOG_TYPE_INFO    = (uint8_t) 0x01,
+	OS_LOG_TYPE_DEBUG   = (uint8_t) 0x02,
+	OS_LOG_TYPE_ERROR   = (uint8_t) 0x10,
+	OS_LOG_TYPE_FAULT   = (uint8_t) 0x11
+} os_log_type_t;
+#endif
 
 namespace WTF {
 
@@ -49,10 +66,14 @@ public:
 private:
     os_log_t m_log;
     os_log_type_t m_logType;
+#if MAC_OS_X_VERSION_MAX_ALLOWED > 101200
     Lock m_stringLock;
     // We need a buffer because os_log doesn't wait for a new line to print the characters.
     CString m_string WTF_GUARDED_BY_LOCK(m_stringLock);
     size_t m_offset { 0 };
+#else
+    CString m_string;
+#endif
 };
 
 } // namespace WTF
diff --git Source/WTF/wtf/orig.OSLogPrintStream.cpp Source/WTF/wtf/OSLogPrintStream.cpp
index f1f1544..3a02387 100644
--- Source/WTF/wtf/orig.OSLogPrintStream.cpp
+++ Source/WTF/wtf/OSLogPrintStream.cpp
@@ -28,7 +28,11 @@
 
 namespace WTF {
 
-#if OS(DARWIN)
+#if OS(DARWIN) 
+
+#if MAC_OS_X_VERSION_MAX_ALLOWED <= 101200
+#include <stdio.h>
+#endif
 
 OSLogPrintStream::OSLogPrintStream(os_log_t log, os_log_type_t logType)
     : m_log(log)
@@ -42,14 +46,22 @@ OSLogPrintStream::~OSLogPrintStream()
 
 std::unique_ptr<OSLogPrintStream> OSLogPrintStream::open(const char* subsystem, const char* category, os_log_type_t logType)
 {
+#if MAC_OS_X_VERSION_MAX_ALLOWED > 101200
     os_log_t log = os_log_create(subsystem, category);
+#else
+    os_log_t log = nullptr;
+#endif
     return makeUnique<OSLogPrintStream>(log, logType);
 }
 
 void OSLogPrintStream::vprintf(const char* format, va_list argList)
 {
+#if MAC_OS_X_VERSION_MAX_ALLOWED > 101200
     Locker lock { m_stringLock };
     size_t offset = m_offset;
+#else
+    size_t offset = 0;
+#endif
     size_t freeBytes = m_string.length() - offset;
     va_list backup;
     va_copy(backup, argList);
@@ -62,6 +74,7 @@ void OSLogPrintStream::vprintf(const char* format, va_list argList)
         ASSERT(bytesWritten < freeBytes);
     }
 
+#if MAC_OS_X_VERSION_MAX_ALLOWED > 101200
     size_t newOffset = offset + bytesWritten;
     char* buffer = m_string.mutableData();
     bool loggedText = false;
@@ -81,6 +94,10 @@ void OSLogPrintStream::vprintf(const char* format, va_list argList)
     if (loggedText)
         memmove(m_string.mutableData(), buffer, newOffset);
     m_offset = newOffset;
+#else
+    fprintf(stderr, "%s", m_string.mutableData());
+    fflush(stderr);
+#endif
 }
 
 #endif
