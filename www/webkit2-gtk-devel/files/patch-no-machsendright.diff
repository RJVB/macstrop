diff --git Source/WebKit/Platform/IPC/orig.Attachment.h Source/WebKit/Platform/IPC/Attachment.h
index 95689ca..a5e85f2 100644
--- Source/WebKit/Platform/IPC/orig.Attachment.h
+++ Source/WebKit/Platform/IPC/Attachment.h
@@ -26,24 +26,22 @@
 
 #pragma once
 
-#if OS(DARWIN)
-#include <wtf/MachSendRight.h>
-#endif
-
 #if USE(UNIX_DOMAIN_SOCKETS)
 #include <wtf/unix/UnixFileDescriptor.h>
+#elif OS(DARWIN)
+#include <wtf/MachSendRight.h>
 #endif
 
 namespace IPC {
 
 // IPC::Attachment is a type representing objects that cannot be transferred as data,
 // rather they are transferred via operating system cross-process communication primitives.
-#if OS(DARWIN)
+#if USE(UNIX_DOMAIN_SOCKETS)
+using Attachment = UnixFileDescriptor;
+#elif OS(DARWIN)
 using Attachment = MachSendRight;
 #elif OS(WINDOWS)
 using Attachment = int; // Windows does not need attachments at the moment.
-#elif USE(UNIX_DOMAIN_SOCKETS)
-using Attachment = UnixFileDescriptor;
 #else
 #error Unsupported platform
 #endif
diff --git Source/WebKit/Platform/orig.SharedMemory.h Source/WebKit/Platform/SharedMemory.h
index bddc0d2..3cbfbc5 100644
--- Source/WebKit/Platform/orig.SharedMemory.h
+++ Source/WebKit/Platform/SharedMemory.h
@@ -37,7 +37,7 @@
 #include <wtf/win/Win32Handle.h>
 #endif
 
-#if OS(DARWIN)
+#if PLATFORM(COCOA)
 #include <wtf/MachSendRight.h>
 #endif
 
@@ -85,7 +85,7 @@ public:
     private:
 #if USE(UNIX_DOMAIN_SOCKETS)
         mutable UnixFileDescriptor m_handle;
-#elif OS(DARWIN)
+#elif PLATFORM(COCOA)
         mutable MachSendRight m_handle;
 #elif OS(WINDOWS)
         mutable Win32Handle m_handle;
@@ -132,7 +132,7 @@ public:
     Ref<WebCore::SharedBuffer> createSharedBuffer(size_t) const;
 
 private:
-#if OS(DARWIN)
+#if PLATFORM(COCOA)
     WTF::MachSendRight createSendRight(Protection) const;
 #endif
 
@@ -145,7 +145,7 @@ private:
 #if USE(UNIX_DOMAIN_SOCKETS)
     UnixFileDescriptor m_fileDescriptor;
     bool m_isWrappingMap { false };
-#elif OS(DARWIN)
+#elif PLATFORM(COCOA)
     MachSendRight m_sendRight;
 #elif OS(WINDOWS)
     Win32Handle m_handle;
