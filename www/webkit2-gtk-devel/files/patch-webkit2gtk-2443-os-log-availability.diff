diff --git Source/ThirdParty/ANGLE/src/common/debug.cpp Source/ThirdParty/ANGLE/src/common/debug.cpp
index f56475b1b00429d5b43b6e809439d5e01d16dd05..f9c79d7f15f096befdb3bd9d4280a6a6db498497 100644
--- Source/ThirdParty/ANGLE/src/common/debug.cpp
+++ Source/ThirdParty/ANGLE/src/common/debug.cpp
@@ -21,7 +21,7 @@
 #    include <android/log.h>
 #endif
 
-#if defined(ANGLE_PLATFORM_APPLE)
+#if defined(ANGLE_PLATFORM_APPLE) && MAC_OS_X_VERSION_MAX_ALLOWED > 101200
 #    include <os/log.h>
 #endif
 
@@ -264,7 +264,7 @@ void Trace(LogSeverity severity, const char *message)
         // Note: we also log to stdout/stderr below.
 #endif
 
-#if defined(ANGLE_PLATFORM_APPLE)
+#if defined(ANGLE_PLATFORM_APPLE) && MAC_OS_X_VERSION_MAX_ALLOWED > 101200
         if (__builtin_available(macOS 10.12, iOS 10.0, *))
         {
             os_log_type_t apple_log_type = OS_LOG_TYPE_DEFAULT;
diff --git Source/WTF/wtf/darwin/OSLogPrintStream.h Source/WTF/wtf/darwin/OSLogPrintStream.h
index d08d57a..ee0e1c1 100644
--- Source/WTF/wtf/darwin/OSLogPrintStream.h
+++ Source/WTF/wtf/darwin/OSLogPrintStream.h
@@ -25,7 +25,7 @@
 
 #pragma once
 
-#if OS(DARWIN)
+#if OS(DARWIN) 
 
 #include <wtf/Lock.h>
 #include <wtf/PrintStream.h>
@@ -33,7 +33,24 @@
 #include <wtf/text/CString.h>
 #include <wtf/Vector.h>
 
+#if MAC_OS_X_VERSION_MAX_ALLOWED > 101200
 #include <os/log.h>
+#else
+
+// Make this a dummy class
+
+struct os_log_s {
+	int dum;
+};
+typedef struct os_log_s* os_log_t;
+typedef enum {
+	OS_LOG_TYPE_DEFAULT = (uint8_t) 0x00,
+	OS_LOG_TYPE_INFO    = (uint8_t) 0x01,
+	OS_LOG_TYPE_DEBUG   = (uint8_t) 0x02,
+	OS_LOG_TYPE_ERROR   = (uint8_t) 0x10,
+	OS_LOG_TYPE_FAULT   = (uint8_t) 0x11
+} os_log_type_t;
+#endif
 
 namespace WTF {
 
@@ -49,10 +66,14 @@ public:
 private:
     os_log_t m_log;
     os_log_type_t m_logType;
+#if MAC_OS_X_VERSION_MAX_ALLOWED > 101200
     Lock m_stringLock;
     // We need a buffer because os_log doesn't wait for a new line to print the characters.
     CString m_string WTF_GUARDED_BY_LOCK(m_stringLock);
     size_t m_offset { 0 };
+#else
+    CString m_string;
+#endif
 };
 
 } // namespace WTF
