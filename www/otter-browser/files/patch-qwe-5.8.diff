diff --git a/CMakeLists.txt b/CMakeLists.txt
index ae4843c865fe470aac356c01a7712342a24a596e..50561ffa661af9e1a04471e3385fd46bcfb16cd4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -81,7 +81,7 @@ option(ENABLE_DBUS "Enable D-Bus based integration for notifications (only freed
 option(ENABLE_SPELLCHECK "Enable Hunspell based spell checking" ON)
 
 find_package(Qt5 5.6.0 REQUIRED COMPONENTS Core Gui Multimedia Network PrintSupport Qml Svg Widgets)
-find_package(Qt5WebEngineWidgets 5.12.0 QUIET)
+find_package(Qt5WebEngineWidgets 5.8.0 QUIET)
 find_package(Qt5WebKitWidgets 5.212.0 QUIET)
 find_package(Hunspell 1.5.0 QUIET)
 
diff --git a/src/modules/backends/web/qtwebengine/QtWebEngineWebBackend.cpp b/src/modules/backends/web/qtwebengine/QtWebEngineWebBackend.cpp
index 0140bd38f16d4023c20ad470234253af9e5244b9..e747aae3f8e7f828193b6cf7d88d1303c9b3398d 100644
--- a/src/modules/backends/web/qtwebengine/QtWebEngineWebBackend.cpp
+++ b/src/modules/backends/web/qtwebengine/QtWebEngineWebBackend.cpp
@@ -77,6 +77,7 @@ void QtWebEngineWebBackend::handleDownloadRequested(QWebEngineDownloadItem *item
 		return;
 	}
 
+#if QTWEBENGINECORE_VERSION >= 0x050C00
 	QtWebEnginePage *page(qobject_cast<QtWebEnginePage*>(item->page()));
 
 	if (page && page->getWebWidget())
@@ -85,6 +86,7 @@ void QtWebEngineWebBackend::handleDownloadRequested(QWebEngineDownloadItem *item
 
 		return;
 	}
+#endif
 
 	const HandlersManager::HandlerDefinition handler(HandlersManager::getHandler(transfer->getMimeType()));
 
@@ -158,7 +160,9 @@ void QtWebEngineWebBackend::handleOptionChanged(int identifier)
 
 			return;
 		case SettingsManager::Network_EnableDnsPrefetchOption:
+#if QTWEBENGINECORE_VERSION >= 0x050C00
 			QWebEngineSettings::globalSettings()->setAttribute(QWebEngineSettings::DnsPrefetchEnabled, SettingsManager::getOption(SettingsManager::Network_EnableDnsPrefetchOption).toBool());
+#endif
 
 			return;
 		case SettingsManager::Network_UserAgentOption:
@@ -241,7 +245,9 @@ WebWidget* QtWebEngineWebBackend::createWidget(const QVariantMap &parameters, Co
 		QWebEngineProfile::defaultProfile()->setRequestInterceptor(m_requestInterceptor);
 #endif
 
+#if QTWEBENGINECORE_VERSION >= 0x050C00
 		QWebEngineSettings::globalSettings()->setAttribute(QWebEngineSettings::DnsPrefetchEnabled, SettingsManager::getOption(SettingsManager::Network_EnableDnsPrefetchOption).toBool());
+#endif
 		QWebEngineSettings::globalSettings()->setAttribute(QWebEngineSettings::FullScreenSupportEnabled, true);
 		QWebEngineSettings::globalSettings()->setAttribute(QWebEngineSettings::FocusOnNavigationEnabled, false);
 		QWebEngineSettings::globalSettings()->setAttribute(QWebEngineSettings::XSSAuditingEnabled, true);
diff --git a/src/modules/backends/web/qtwebengine/QtWebEngineWebWidget.cpp b/src/modules/backends/web/qtwebengine/QtWebEngineWebWidget.cpp
index a9a8a4cc45c68ac117d9afb26dc5848a76d7d6a6..0bcde17698e1adc071ffd2353684fce30d074de0 100644
--- a/src/modules/backends/web/qtwebengine/QtWebEngineWebWidget.cpp
+++ b/src/modules/backends/web/qtwebengine/QtWebEngineWebWidget.cpp
@@ -60,6 +60,9 @@
 #include <QtWebEngineWidgets/QWebEngineSettings>
 #include <QtWidgets/QAction>
 #include <QtWidgets/QVBoxLayout>
+#if QTWEBENGINECORE_VERSION < 0x050900
+#include <QtCore/QFile>
+#endif
 
 namespace Otter
 {
@@ -101,7 +104,9 @@ QtWebEngineWebWidget::QtWebEngineWebWidget(const QVariantMap &parameters, WebBac
 	connect(m_page, &QtWebEnginePage::requestedNewWindow, this, &QtWebEngineWebWidget::requestedNewWindow);
 	connect(m_page, &QtWebEnginePage::authenticationRequired, this, &QtWebEngineWebWidget::handleAuthenticationRequired);
 	connect(m_page, &QtWebEnginePage::proxyAuthenticationRequired, this, &QtWebEngineWebWidget::handleProxyAuthenticationRequired);
+#if QTWEBENGINECORE_VERSION >= 0x050C00
 	connect(m_page, &QtWebEnginePage::printRequested, this, &QtWebEngineWebWidget::handlePrintRequest);
+#endif
 	connect(m_page, &QtWebEnginePage::windowCloseRequested, this, &QtWebEngineWebWidget::handleWindowCloseRequest);
 	connect(m_page, &QtWebEnginePage::fullScreenRequested, this, &QtWebEngineWebWidget::handleFullScreenRequest);
 	connect(m_page, &QtWebEnginePage::featurePermissionRequested, [&](const QUrl &url, QWebEnginePage::Feature feature)
@@ -211,10 +216,21 @@ void QtWebEngineWebWidget::search(const QString &query, const QString &searchEng
 
 		if (method == QNetworkAccessManager::PostOperation)
 		{
+#if QTWEBENGINECORE_VERSION < 0x050900
+			QFile file(QLatin1String(":/modules/backends/web/qtwebengine/resources/sendPost.js"));
+
+			if (file.open(QIODevice::ReadOnly))
+			{
+				m_page->runJavaScript(QString(file.readAll()).arg(request.url().toString()).arg(QString(body)));
+
+				file.close();
+			}
+#else
 			QWebEngineHttpRequest httpRequest(request.url(), QWebEngineHttpRequest::Post);
 			httpRequest.setPostData(body);
 
 			m_page->load(httpRequest);
+#endif
 		}
 		else
 		{
@@ -903,6 +919,7 @@ void QtWebEngineWebWidget::triggerAction(int identifier, const QVariantMap &para
 			break;
 		case ActionsManager::InspectPageAction:
 			{
+#if QTWEBENGINECORE_VERSION >= 0x050B00
 				const bool showInspector(parameters.value(QLatin1String("isChecked"), !getActionState(identifier, parameters).isChecked).toBool());
 
 				if (showInspector && !m_inspectorView)
@@ -912,6 +929,7 @@ void QtWebEngineWebWidget::triggerAction(int identifier, const QVariantMap &para
 
 				emit requestedInspectorVisibilityChange(showInspector);
 				emit arbitraryActionsStateChanged({ActionsManager::InspectPageAction});
+#endif
 			}
 
 			break;
@@ -1031,6 +1049,7 @@ void QtWebEngineWebWidget::handleViewSourceReplyFinished()
 
 void QtWebEngineWebWidget::handlePrintRequest()
 {
+#if QTWEBENGINECORE_VERSION >= 0x050C00
 	QPrintPreviewDialog printPreviewDialog(this);
 	printPreviewDialog.setWindowFlags(printPreviewDialog.windowFlags() | Qt::WindowMaximizeButtonHint | Qt::WindowMinimizeButtonHint);
 	printPreviewDialog.setWindowTitle(tr("Print Preview"));
@@ -1053,6 +1072,7 @@ void QtWebEngineWebWidget::handlePrintRequest()
 	});
 
 	printPreviewDialog.exec();
+#endif
 }
 
 void QtWebEngineWebWidget::handleAuthenticationRequired(const QUrl &url, QAuthenticator *authenticator)
@@ -1240,12 +1260,16 @@ void QtWebEngineWebWidget::updateOptions(const QUrl &url)
 	QWebEngineSettings *settings(m_page->settings());
 	settings->setAttribute(QWebEngineSettings::AllowRunningInsecureContent, getOption(SettingsManager::Security_AllowMixedContentOption, url).toBool());
 	settings->setAttribute(QWebEngineSettings::AutoLoadImages, (getOption(SettingsManager::Permissions_EnableImagesOption, url).toString() != QLatin1String("onlyCached")));
+#if QTWEBENGINECORE_VERSION >= 0x050C00
 	settings->setAttribute(QWebEngineSettings::DnsPrefetchEnabled, getOption(SettingsManager::Network_EnableDnsPrefetchOption, url).toBool());
+#endif
 	settings->setAttribute(QWebEngineSettings::JavascriptEnabled, getOption(SettingsManager::Permissions_EnableJavaScriptOption, url).toBool());
 	settings->setAttribute(QWebEngineSettings::JavascriptCanAccessClipboard, getOption(SettingsManager::Permissions_ScriptsCanAccessClipboardOption, url).toBool());
 	settings->setAttribute(QWebEngineSettings::JavascriptCanOpenWindows, (getOption(SettingsManager::Permissions_ScriptsCanOpenWindowsOption, url).toString() != QLatin1String("blockAll")));
 	settings->setAttribute(QWebEngineSettings::LocalStorageEnabled, getOption(SettingsManager::Permissions_EnableLocalStorageOption, url).toBool());
+#if QT_VERSION >= 0x050A00
 	settings->setAttribute(QWebEngineSettings::ShowScrollBars, getOption(SettingsManager::Interface_ShowScrollBarsOption, url).toBool());
+#endif
 	settings->setAttribute(QWebEngineSettings::WebGLEnabled, getOption(SettingsManager::Permissions_EnableWebglOption, url).toBool());
 	settings->setDefaultTextEncoding((encoding == QLatin1String("auto")) ? QString() : encoding);
 
@@ -1509,6 +1533,7 @@ WebWidget* QtWebEngineWebWidget::clone(bool cloneHistory, bool isPrivate, const
 
 QWidget* QtWebEngineWebWidget::getInspector()
 {
+#if QTWEBENGINECORE_VERSION >= 0x050B00
 	if (!m_inspectorView)
 	{
 		m_inspectorView = new QWebEngineView(this);
@@ -1519,7 +1544,7 @@ QWidget* QtWebEngineWebWidget::getInspector()
 			m_inspectorView->page()->setInspectedPage(m_page);
 		});
 	}
-
+#endif
 	return m_inspectorView;
 }
 
