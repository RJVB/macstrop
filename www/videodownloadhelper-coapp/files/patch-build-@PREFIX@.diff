diff --git a/build.sh b/build.sh
index 56c549a..9b9bfae 100755
--- a/build.sh
+++ b/build.sh
@@ -92,7 +92,7 @@ case $target in
 esac
 
 target_os=$(echo $target | cut -f1 -d-)
-target_arch=$(echo $target | cut -f2 -d-)
+target_arch=@BUILD_ARCH@
 
 target_dist_dir_rel=$dist_dir_name/$target_os/$target_arch
 target_dist_dir=$PWD/$target_dist_dir_rel
@@ -122,17 +122,23 @@ else
   fi
 fi
 
+# ensure we use a node_modules directory in here, not in our parent dir
+mkdir -p node_modules/.bin
+
+export PATH="${PWD}/node_modules/.bin:${PATH}"
+log "esbuild: $(command -v esbuild)"
 if ! [ -x "$(command -v esbuild)" ]; then
   log "Installing esbuild"
-  npm install -g esbuild
+  npm install esbuild
 fi
 
 if ! [ -x "$(command -v pkg)" ]; then
   log "Installing pkg"
   if [ $target_node == 10 ]; then
-    npm install -g pkg@4.4.9
+    npm install pkg@4.4.9
   else
-    npm install -g pkg
+    npm install @yao-pkg/pkg@^6.3.1
+    chmod +x node_modules/.bin/pkg
   fi
 fi
 
@@ -145,11 +151,11 @@ fi
 
 if ! [ -x "$(command -v ejs)" ]; then
   log "Installing ejs"
-  npm install -g ejs
+  npm install ejs
 fi
 
 if [ ! -d "app/node_modules" ]; then
-  (cd app/ ; npm install)
+  (cd app/ ; mkdir -p node_modules ; npm install)
 fi
 
 # Extract all toml data into shell variables.
@@ -330,33 +336,39 @@ if [ ! $skip_bundling == 1 ]; then
   fi
 
   log "Bundling Node binary with code"
-  pkg "${opts[@]}" \
-    --target node$target_node-$node_os-$node_arch \
+  set -x
+  pkg --debug "${opts[@]}" \
+    --target node$target_node-$node_os \
     --output $target_dist_dir/$package_binary_name$exe_extension
+  set +x
 else
   log "Skipping bundling"
 fi
 
 if [[ ! -f $dist_dir/$filepicker_target ]]; then
-  log "Retrieving filepicker"
-  filepicker_url_base="https://github.com/paulrouget/static-filepicker/releases/download/"
-  filepicker_url=$filepicker_url_base/v$package_filepicker_build_version/$filepicker_target
-  wget -c $filepicker_url -O $dist_dir/$filepicker_target
-  chmod +x $dist_dir/$filepicker_target
+#   log "Retrieving filepicker"
+#   filepicker_url_base="https://github.com/paulrouget/static-filepicker/releases/download/"
+#   filepicker_url=$filepicker_url_base/v$package_filepicker_build_version/$filepicker_target
+#   wget -c $filepicker_url -O $dist_dir/$filepicker_target
+#   chmod +x $dist_dir/$filepicker_target
+  ln -s @PREFIX@/bin/filepicker $dist_dir/$filepicker_target
 fi
 
-cp $dist_dir/$filepicker_target $target_dist_dir/filepicker$exe_extension
+gcp -pvd $dist_dir/$filepicker_target $target_dist_dir/filepicker$exe_extension
 
 if [[ ! -d $dist_dir/$ffmpeg_target_dir ]]; then
-  log "Retrieving ffmpeg"
-  ffmpeg_url_base="https://github.com/aclap-dev/ffmpeg-static-builder/releases/download/"
-  ffmpeg_url=$ffmpeg_url_base/v$package_ffmpeg_build_version/$ffmpeg_target.tar.bz2
-  ffmpeg_tarball=$dist_dir/$ffmpeg_target.tar.bz2
-  wget --show-progress -c -O $ffmpeg_tarball $ffmpeg_url
-  (cd $dist_dir && tar -xf $ffmpeg_tarball)
+#   log "Retrieving ffmpeg"
+#   ffmpeg_url_base="https://github.com/aclap-dev/ffmpeg-static-builder/releases/download/"
+#   ffmpeg_url=$ffmpeg_url_base/v$package_ffmpeg_build_version/$ffmpeg_target.tar.bz2
+#   ffmpeg_tarball=$dist_dir/$ffmpeg_target.tar.bz2
+#   wget --show-progress -c -O $ffmpeg_tarball $ffmpeg_url
+#   (cd $dist_dir && tar -xf $ffmpeg_tarball)
+  mkdir -p $dist_dir/$ffmpeg_target_dir 
+  ln -s @PREFIX@/bin/ffmpeg6 $dist_dir/$ffmpeg_target_dir/ffmpeg$exe_extension
+  ln -s @PREFIX@/bin/ffprobe6 $dist_dir/$ffmpeg_target_dir/ffprobe$exe_extension
 fi
 
-cp $dist_dir/$ffmpeg_target_dir/ffmpeg$exe_extension \
+gcp -pvd $dist_dir/$ffmpeg_target_dir/ffmpeg$exe_extension \
   $dist_dir/$ffmpeg_target_dir/ffprobe$exe_extension \
   $target_dist_dir/
 
@@ -459,9 +471,9 @@ if [ ! $skip_packaging == 1 ]; then
   # Mac
   # ===============================================
   if [[ $node_os == "mac" ]]; then
-    if ! [ -x "$(command -v create-dmg)" ]; then
-      error "create-dmg not installed"
-    fi
+#     if ! [ -x "$(command -v create-dmg)" ]; then
+#       error "create-dmg not installed"
+#     fi
 
     dot_app_dir=$target_dist_dir/dotApp/
     app_dir=$dot_app_dir/$meta_id.app
@@ -473,9 +485,9 @@ if [ ! $skip_packaging == 1 ]; then
     mkdir -p $res_dir
     mkdir -p $scripts_dir
 
-    cp LICENSE.txt README.md assets/mac/icon.icns $res_dir
+    gcp -pv LICENSE.txt README.md assets/mac/icon.icns $res_dir
 
-    cp $target_dist_dir/ffmpeg \
+    gcp -pvd $target_dist_dir/ffmpeg \
       $target_dist_dir/ffprobe \
       $target_dist_dir/filepicker \
       $target_dist_dir/$package_binary_name \
@@ -486,17 +498,17 @@ if [ ! $skip_packaging == 1 ]; then
     echo 'cd $(dirname $0)/ && ./vdhcoapp install' >> $macos_dir/register.sh
     chmod +x $macos_dir/register.sh
 
-    echo '#!/bin/bash' > $scripts_dir/postinstall
-    echo "su \"\$USER\" -c \$DSTROOT/$meta_id.app/Contents/MacOS/register.sh" >> $scripts_dir/postinstall
-    chmod +x $scripts_dir/postinstall
-
-    ejs -f $target_dist_dir/config.json ./assets/mac/pkg-distribution.xml.ejs > $target_dist_dir/pkg-distribution.xml
-    ejs -f $target_dist_dir/config.json ./assets/mac/pkg-component.plist.ejs > $target_dist_dir/pkg-component.plist
+#     echo '#!/bin/bash' > $scripts_dir/postinstall
+#     echo "su \"\$USER\" -c \$DSTROOT/$meta_id.app/Contents/MacOS/register.sh" >> $scripts_dir/postinstall
+#     chmod +x $scripts_dir/postinstall
+# 
+#     ejs -f $target_dist_dir/config.json ./assets/mac/pkg-distribution.xml.ejs > $target_dist_dir/pkg-distribution.xml
+#     ejs -f $target_dist_dir/config.json ./assets/mac/pkg-component.plist.ejs > $target_dist_dir/pkg-component.plist
     ejs -f $target_dist_dir/config.json ./assets/mac/Info.plist.ejs > $app_dir/Contents/Info.plist
-
-    pkgbuild_sign=()
-    create_dmg_sign=()
-    create_dmg_notarize=()
+# 
+#     pkgbuild_sign=()
+#     create_dmg_sign=()
+#     create_dmg_notarize=()
     if [ ! $skip_signing == 1 ]; then
       log "Signing binaries"
       # IMPORTANT: the entry point CFBundleExecutable must be the last
@@ -510,51 +522,51 @@ if [ ! $skip_packaging == 1 ]; then
         $macos_dir/ffprobe \
         $macos_dir/vdhcoapp \
         $macos_dir/register.sh
-      pkgbuild_sign=("--sign" "$package_mac_signing_pkg_cert")
-      create_dmg_sign=("--codesign" "$package_mac_signing_app_cert")
+#       pkgbuild_sign=("--sign" "$package_mac_signing_pkg_cert")
+#       create_dmg_sign=("--codesign" "$package_mac_signing_app_cert")
     else
       log "Skip signing"
     fi
 
-    if [ ! $skip_notary == 1 ]; then
-      create_dmg_notarize=("--notarize" "$package_mac_signing_keychain_profile")
-    fi
-
-    log "Creating .pkg file"
-    pkgbuild \
-      --root $dot_app_dir \
-      --install-location /Applications \
-      --scripts $scripts_dir \
-      --identifier $meta_id \
-      --component-plist $target_dist_dir/pkg-component.plist \
-      --version $meta_version \
-      ${pkgbuild_sign[@]+"${pkgbuild_sign[@]}"} \
-      $target_dist_dir/$out_pkg_file
-
-    log "Creating .dmg file"
-    create-dmg \
-      --volname "$meta_long_name" \
-      --background ./assets/mac/dmg-background.tiff \
-      --window-pos 200 120 --window-size 500 400 --icon-size 70 \
-      --hide-extension "$meta_id.app" \
-      --icon "$meta_id.app" 100 200 \
-      --app-drop-link 350 200 \
-      ${create_dmg_sign[@]+"${create_dmg_sign[@]}"} \
-      ${create_dmg_notarize[@]+"${create_dmg_notarize[@]}"} \
-      $target_dist_dir/$out_dmg_file \
-      $dot_app_dir
-
-    rm $target_dist_dir/pkg-distribution.xml
-    rm $target_dist_dir/pkg-component.plist
-    rm $scripts_dir/postinstall
-    rm -rf $scripts_dir
-
-    if [ ! $skip_notary == 1 ] && [ ! $skip_signing == 1 ]; then
-      log "Sending .pkg to Apple for signing"
-      log "In case of issues, run \"xcrun notarytool log UUID --keychain-profile $package_mac_signing_keychain_profile\""
-      xcrun notarytool submit $target_dist_dir/$out_pkg_file --keychain-profile $package_mac_signing_keychain_profile --wait
-      xcrun stapler staple $target_dist_dir/$out_pkg_file
-    fi
+#     if [ ! $skip_notary == 1 ]; then
+#       create_dmg_notarize=("--notarize" "$package_mac_signing_keychain_profile")
+#     fi
+# 
+#     log "Creating .pkg file"
+#     pkgbuild \
+#       --root $dot_app_dir \
+#       --install-location /Applications \
+#       --scripts $scripts_dir \
+#       --identifier $meta_id \
+#       --component-plist $target_dist_dir/pkg-component.plist \
+#       --version $meta_version \
+#       ${pkgbuild_sign[@]+"${pkgbuild_sign[@]}"} \
+#       $target_dist_dir/$out_pkg_file
+# 
+#     log "Creating .dmg file"
+#     create-dmg \
+#       --volname "$meta_long_name" \
+#       --background ./assets/mac/dmg-background.tiff \
+#       --window-pos 200 120 --window-size 500 400 --icon-size 70 \
+#       --hide-extension "$meta_id.app" \
+#       --icon "$meta_id.app" 100 200 \
+#       --app-drop-link 350 200 \
+#       ${create_dmg_sign[@]+"${create_dmg_sign[@]}"} \
+#       ${create_dmg_notarize[@]+"${create_dmg_notarize[@]}"} \
+#       $target_dist_dir/$out_dmg_file \
+#       $dot_app_dir
+# 
+#     rm $target_dist_dir/pkg-distribution.xml
+#     rm $target_dist_dir/pkg-component.plist
+#     rm $scripts_dir/postinstall
+#     rm -rf $scripts_dir
+# 
+#     if [ ! $skip_notary == 1 ] && [ ! $skip_signing == 1 ]; then
+#       log "Sending .pkg to Apple for signing"
+#       log "In case of issues, run \"xcrun notarytool log UUID --keychain-profile $package_mac_signing_keychain_profile\""
+#       xcrun notarytool submit $target_dist_dir/$out_pkg_file --keychain-profile $package_mac_signing_keychain_profile --wait
+#       xcrun stapler staple $target_dist_dir/$out_pkg_file
+#     fi
   fi
 
   # ===============================================
@@ -632,7 +644,7 @@ if [ $target_os == "mac" ]; then
   log "Binary available: $target_dist_dir_rel/ffprobe"
   if [ ! $skip_packaging == 1 ]; then
     log "App available: $target_dist_dir_rel/dotApp/$meta_id.app"
-    log "Pkg available: $target_dist_dir_rel/$out_pkg_file"
-    log "Dmg available: $target_dist_dir_rel/$out_dmg_file"
+#     log "Pkg available: $target_dist_dir_rel/$out_pkg_file"
+#     log "Dmg available: $target_dist_dir_rel/$out_dmg_file"
   fi
 fi
