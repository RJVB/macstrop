#!/usr/bin/env port-tclsh
# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

# This PortGroup is included automatically by the customised MacPorts/LinuxPorts "base"
# layer from the MacStrop repo, after Portfiles are parsed. It scans the depends_build
# and depends_lib dependency lists for ports that are known to have a "devport" subport.
# It then makes certain that these devports are declared in the build dependencies.

namespace eval devport_helper {
    # our directory:
    variable currentportgroupdir [file dirname [dict get [info frame 0] file]]

    # check if we're invoked as a standalone script, or if the devport database hasn't been created yet:
    if {[info exists ::argv] || ![file exists ${currentportgroupdir}/devport_db.tcl]} {
        if {![info exists ::argv]} {
            ui_info "Generating the devport database"
        } else {
            puts stderr "Generating the devport database"
        }
        # use the port driver to find all ports called ${name}-dev
        set devports [exec port -q info --index --line --name "*-dev"]
        # generate a database (array) that maps the main port name to its corresponding devport
        if {![catch {set fp [open ${currentportgroupdir}/devport_db.tcl "w"]} err]} {
            puts ${fp} "array unset devportDB"
            puts ${fp} "array set devportDB \[list \\"
            foreach dp ${devports} {
                # the mainport name is the devport name minus the "-dev" suffix
                # (because the devport name is generated by appending "-dev" to the mainport's name...)
                puts ${fp} "  [string range ${dp} 0 [string last "-dev" ${dp}]-1]\t${dp} \\"
            }
            puts ${fp} "\]"
            close ${fp}
        } else {
            if {[info exists ::argv]} {
                puts stderr "Error writing ${currentportgroupdir}/devport_db.tcl: $err"
            } else {
                ui_error "Error writing ${currentportgroupdir}/devport_db.tcl: $err"
            }
            return -code error "Error writing devport database ${currentportgroupdir}/devport_db.tcl"
        }
    }
    if {![info exists ::argv]} { ## this is where we do the actual PortGroup work:
        if {![catch {source "${currentportgroupdir}/devport_db.tcl"} err] && [info exists devportDB]} {
        } else {
            ui_error "Error reading ${currentportgroupdir}/devport_db.tcl: $err"
            return -code error "Error reading devport database ${currentportgroupdir}/devport_db.tcl"
        }
    }
}

