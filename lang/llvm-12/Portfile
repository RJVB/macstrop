# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                            1.0
PortGroup select                      1.0
PortGroup compiler_blacklist_versions 1.0
PortGroup active_variants             1.1
PortGroup LTO                         1.0
PortGroup cmake                       1.1
PortGroup legacysupport               1.0

# optional support for HFS-compression of the source and build dirs
if {[file exists ${cmake::currentportgroupdir}/compress_workdir-1.0.tcl]} {
    PortGroup           compress_workdir 1.0
}
# Do not propagate c/c++ standards as set by base
cmake.set_c_standard     no
cmake.set_cxx_standard   no

# link legacysupport statically for compilers
legacysupport.use_static yes
legacysupport.newest_darwin_requires_legacy 13

set lldb_standalone_build true
categories              lang
platforms               darwin
license                 NCSA
maintainers             {kencu @kencu} {jeremyhu @jeremyhu}

set llvm_version        12
version                 12.0.1

checksums               rmd160  15499e64ebb42b73e78f2fec5ac4749c7d1a530f \
                        sha256  129cb25cd13677aad951ce5c2deb0fe4afc1e9d98950f53b51bdcfb5a73afa0e
#                         size    90910004

master_sites            https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}
distname                llvm-project-${version}.src
use_xz                  yes

name                    llvm-${llvm_version}

subport                 clang-${llvm_version} {}
subport                 lld-${llvm_version} {}
subport                 lldb-${llvm_version} {
    PortGroup           code_sign 1.0
}
dist_subdir             llvm
set suffix              mp-${llvm_version}
set sub_prefix          ${prefix}/libexec/llvm-${llvm_version}
worksrcdir              ${worksrcdir}/llvm

# hand-tweaked, approximately c++ standard 2017
compiler.blacklist      *gcc* {clang < 1001} macports-clang-3.*
compiler.fallback       clang macports-clang-9.0
#RJVB - is this still necessary?
if {${subport} ne "lldb-${llvm_version}" && ${subport} ne "lld-${llvm_version}"} {
    # blacklist current and future versions if they're not available in order to
    # help break potential dependency cycles.
    foreach ver {13 devel} {
        if {![file exists ${prefix}/bin/clang-mp-${ver}]} {
            compiler.blacklist-append macports-clang-${ver}
        }
    }
}

variant no_libcxx description {don't build/install with embedded libc++ (also uses hardcoded rpaths as in older llvm ports)} {}
default_variants-append +no_libcxx
# conflicts_build-append  libcxx-dev

# We can't (CAN?!) use Ninja with our custom destrooting plan for llvm
cmake.generator         Ninja
build.pre_args-prepend  -k 0
cmake.install_prefix    ${sub_prefix}
# cmake.build_type        Release

if {![variant_isset no_libcxx]} {
    # clean up some cmake-PG added values we don't want to use, because we want @rpaths
    cmake.install_rpath

    configure.pre_args-delete \
        -DCMAKE_INSTALL_NAME_DIR=${cmake.install_prefix}/lib \
        -DCMAKE_INSTALL_RPATH=${cmake.install_prefix}/lib

    configure.pre_args-replace \
        -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON \
        -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=OFF

    configure.pre_args-replace \
        -DCMAKE_SYSTEM_PREFIX_PATH="${prefix}\;/usr" \
        -DCMAKE_SYSTEM_PREFIX_PATH="${cmake.install_prefix}\;${prefix}\;/usr"
} else {
    # with this config we need a libc++ under ${prefix}
    require_active_variants port:libcxx macports_libcxx
    depends_build-append \
        port:libcxx-dev
    depends_run-append \
        port:libcxx-dev
}

configure.args-append \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_ENABLE_FFI=ON \
    -DFFI_INCLUDE_DIR=${prefix}/include \
    -DFFI_LIBRARY_DIR=${prefix}/lib


# cctools is needed to handle objects from newer clang toolchains
if {[string match macports-clang-* ${configure.compiler}]} {
    depends_build-append            port:cctools
    depends_skip_archcheck-append   cctools
    configure.args-append           -DCMAKE_LIBTOOL=${prefix}/bin/libtool
}

depends_build-append    port:python37
set pythonfullpath      ${prefix}/bin/python3.7
configure.args-append   -DPython3_EXECUTABLE=${pythonfullpath}

platform darwin {
    configure.cxx_stdlib libc++
    depends_lib-append port:libcxx
    pre-fetch {
        if {${os.major} < 11} {
           supported_archs i386 x86_64
            if {![file exists /usr/lib/libc++.dylib]} {
                ui_error "$name requires a C++11 runtime, which your configuration does not allow"
                error "unsupported configuration"
            }
        }
    }
}

patch.dir ${workpath}/${distname}
patch.pre_args  -p1

patchfiles-append \
    0001-MacPorts-only-clang-use-MP-omp-locations.patch \
    0002-MacPorts-Only-Don-t-embed-the-deployment-target-in-t.patch \
    0003-MacPorts-Only-Prepare-clang-format-for-replacement-w.patch \
    0004-MacPorts-Only-Fix-name-of-scan-view-executable-insid.patch \
    0006-Define-EXC_MASK_CRASH-and-MACH_EXCEPTION_CODES-if-th.patch \
    0007-Threading-Only-call-pthread_setname_np-if-we-have-it.patch \
    0008-Threading-Only-call-setpriority-PRIO_DARWIN_THREAD-0.patch \
    0009-lib-Support-Unix-Path.inc-define-COPYFILE_CLONE-if-n.patch \
    0010-compiler-rt-cmake-config-ix.cmake-was-Leopard-No-ASA.patch \
    0011-Fix-missing-long-long-math-prototypes-when-using-the.patch \
    0012-compiler-rt-add-some-defs-missing-in-older-SDKs.patch \
    0013-clang-add-back-runtime-libraries-used-on-10.4-and-10.patch \
    0014-Fix-float.h-to-work-on-Snow-Leopard-and-earlier.patch \
    0015-Fixup-libstdc-header-search-paths-for-older-versions.patch \
    0025-lldb-add-defines-needed-for-older-SDKs.patch

if {${os.platform} eq "darwin" && ${os.major} < 14} {
    patchfiles-append \
        0016-10.10-and-less-compiler-rt-find-macosx-sdk.patch
}

if {${os.platform} eq "darwin" && ${os.major} < 11} {
    patchfiles-append \
        0017-10.6-and-less-libcxx-work-around-no-reexported_symbo.patch \
        0019-10.6-and-less-use-emulated-TLS-before-10.7.patch \
        0020-10.6-and-less-work-around-no-directory-watcher-befor.patch \
        0021-10.6-and-less-libcxx-disable-Availability-tests.patch
}

if {${os.platform} eq "darwin" && ${os.major} < 10} {
    patchfiles-append \
        0022-10.5-and-less-default-to-fno-blocks.patch \
        0023-10.5-and-less-use-older-cfname-and-fix-uuid-on-leopa.patch \
        0024-10.5-and-less-compiler-rt-work-around-no-libdispatch.patch
}
# RJVB
patchfiles-append \
    patch-accept-build_types.diff \
    patch-RTLD_FIRST.diff

post-patch {
    if {![variant_exists dummy] || ![variant_isset dummy]} {
        reinplace "s|@@PREFIX@@|${prefix}|" \
            ${patch.dir}/clang/lib/Driver/ToolChains/Clang.cpp \
            ${patch.dir}/clang/lib/Driver/ToolChains/CommonArgs.cpp

        reinplace "s|@CLANG_FORMAT_PATH@|${prefix}/bin/clang-format-${suffix}|g" \
            ${patch.dir}/clang/tools/clang-format/clang-format-bbedit.applescript \
            ${patch.dir}/clang/tools/clang-format/clang-format-diff.py            \
            ${patch.dir}/clang/tools/clang-format/clang-format-sublime.py         \
            ${patch.dir}/clang/tools/clang-format/clang-format.el                 \
            ${patch.dir}/clang/tools/clang-format/clang-format.py
    }
}

if {${subport} eq "llvm-${llvm_version}"} {

    homepage            https://llvm.org/
    description         llvm is a next generation compiler infrastructure
    long_description    The LLVM Core libraries provide a modern source- and \
                        target-independent optimiser, along with code \
                        generation support for many popular CPUs (as well as \
                        some less common ones!) These libraries are built \
                        around a well specified code representation known as \
                        the LLVM intermediate representation ("LLVM IR").

    depends_lib-append  port:libedit port:libffi port:ncurses path:lib/libxar.dylib:xar port:zlib
    depends_run-append  port:llvm_select

    select.group        llvm
    select.file         ${filespath}/mp-${subport}

    variant dummy description "for use with port:clang-${llvm_version} +monolithic" {
        depends_lib-append \
                        port:clang-${llvm_version}
        require_active_variants port:clang-${llvm_version} monolithic
    }

    if {![catch {set installed [lindex [registry_active clang-${llvm_version}] 0]}]} {
        set clangVariants [split [lindex $installed 3] "+"]
        if {[lsearch -exact ${clangVariants} "monolithic"] != -1} {
            default_variants-append +dummy
            set dummyOK yes
        }
    }

    if {![variant_isset dummy]} {
        configure.args-append \
            -DLLVM_ENABLE_PROJECTS="polly"
        if {[variant_isset no_libcxx]} {
            configure.args-append \
                -DLLVM_BUILD_RUNTIME=OFF       \
                -DLIBCXX_INSTALL_LIBRARY=OFF
        }
        pre-activate {
            if {[info exists clangVariants]} {
                if {[lsearch -exact ${clangVariants} "monolithic"] != -1} {
                    ui_warn "Deactivating the currently active port:clang-${llvm_version}"
                    ui_warn "Please reinstall as port:clang-${llvm_version} \[[lindex $installed 3]\] -monolithic!"
                    registry_deactivate_composite clang-${llvm_version} "" [list ports_nodepcheck 1]
                }
            }
        }
    } else {
        PortGroup       stub 1.0
        if {![tbool dummyOK]} {
            pre-install {
                ui_warn "This port variant should only be used with clang-${llvm_version} +monolithic!"
            }
        }
    }
}

if {${subport} eq "clang-${llvm_version}"} {
    revision            [expr ${revision} +1]

    homepage            https://clang.llvm.org/
    description         C, C++, Objective C and Objective C++ compiler
    long_description    Clang is an "LLVM native" C/C++/Objective-C compiler, \
                        which aims to deliver amazingly fast compiles (e.g. \
                        about 3x faster than GCC when compiling Objective-C \
                        code in a debug configuration), extremely useful error \
                        and warning messages and to provide a platform for \
                        building great source level tools. The included Clang \
                        Static Analyser is a tool that automatically finds bugs in \
                        your code, and is a great example of the sort of tool \
                        that can be built using the Clang frontend as a \
                        library to parse C/C++ code.

    depends_lib-append  port:libxml2 port:libomp
    if {![variant_isset monolithic]} {
        depends_lib-append \
                        port:llvm-${llvm_version}
        require_active_variants port:llvm-${llvm_version} {} dummy
    }
    depends_run-append  port:clang_select port:ld64
    depends_skip_archcheck-append ld64

    select.group        clang
    select.file         ${filespath}/mp-${subport}

# temporarily restrict to newer systems until older systems can be rigorously vetted
    if {${os.platform} eq "darwin" && ${os.major} <= 10} {
        depends_build
        depends_lib
        depends_run
        archive_sites
        known_fail yes
        pre-fetch {
            ui_error "${subport} is not supported on this os version at present."
            return -code error {unsupported platform}
        }
        ui_warn "${subport} is not supported on this os version at present."
    }

    # disable parallel building until upstream fixes the race condition in compiler_rt
#     use_parallel_build no

    if {[variant_isset monolithic]} {
        set polly "polly\;"
        if {[variant_isset no_libcxx]} {
            configure.args-append \
                -DLLVM_BUILD_RUNTIME=OFF       \
                -DLIBCXX_INSTALL_LIBRARY=OFF
        }
    } else {
        set polly ""
    }
    # CMAKE_LINKER is used to determine the value for HOST_LINK_VERSION
    configure.args-append \
        -DCMAKE_LINKER=${prefix}/bin/ld    \
        -DCLANG_INCLUDE_TESTS=OFF          \
        -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
        -DCLANG_ENABLE_ARCMT=OFF           \
        -DDARWIN_PREFER_PUBLIC_SDK=ON      \
        -DLLVM_BUILD_RUNTIME=ON
    if {[variant_isset no_libcxx]} {
        # configure such that the libc++ headers will be prepared but the libraries not built nor installed
        # also build only the shared libcxxabi but do not install it, so its headers will be prepared.
        configure.args-append \
            -DLIBCXX_ENABLE_SHARED=OFF     \
            -DLIBCXX_ENABLE_STATIC=OFF     \
            -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF \
            -DLIBCXX_INSTALL_HEADERS=ON    \
            -DLIBCXX_INSTALL_SHARED_LIBRARY=OFF \
            -DLIBCXX_INSTALL_STATIC_LIBRARY=OFF \
            -DLIBCXX_INSTALL_EXPERIMENTAL_LIBRARY=OFF \
            -DLIBCXXABI_ENABLE_STATIC=OFF  \
            -DLIBCXXABI_INSTALL_STATIC_LIBRARY=OFF \
            -DLIBCXXABI_INSTALL_SHARED_LIBRARY=OFF
    } else {
        configure.args-append \
            -DLIBCXX_ENABLE_SHARED=ON      \
            -DLIBCXX_INSTALL_LIBRARY=ON
    }
    if {[variant_isset flang]} {
        configure.args-append   \
            -DLLVM_ENABLE_PROJECTS="${polly}clang\;clang-tools-extra\;compiler-rt\;libcxx\;libcxxabi\;flang\;mlir"
    } else {
        post-extract {
            file delete -force ${worksrcpath}/flang
            file delete -force ${worksrcpath}/lld
            file delete -force ${worksrcpath}/lldb
        }   
        configure.args-append   \
            -DLLVM_ENABLE_PROJECTS="${polly}clang\;clang-tools-extra\;compiler-rt\;libcxx\;libcxxabi\;mlir"
    }

    if {${os.major} <= 18} {
        # on systems that might build i386, we need atomic builtins
        # https://trac.macports.org/ticket/58712
        configure.args-append    -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF
    }

    if {${os.major} <= 14} {
        # compiler-rt does a broad search for an SDK it likes, but this
        # search fails on older systems that don't have a MacOSX.sdk
        # TODO: apply this always to all systems?
        if {${configure.sdkroot} eq ""} {set configure.sdkroot "/"}
        configure.args-append -DDARWIN_osx_SYSROOT="${configure.sdkroot}"

        # sanitizers in compiler_rt fail to build on older systems
        # might be fixable with the use of newer SDK and/or effort if motivated
        # all three toggles are needed to force them off
        configure.args-append    -DCOMPILER_RT_BUILD_SANITIZERS=OFF
        configure.args-append    -DCOMPILER_RT_BUILD_XRAY=OFF
        configure.args-append    -DCOMPILER_RT_BUILD_MEMPROF=OFF
    }

    if {${os.major} <= 11} {
        # xpc.h available 10.7 but doesn't support nullable features
        configure.args-append    -DCLANGD_BUILD_XPC=OFF
    }

    if {${os.major} <= 10} {
        # avoid need for thread_local_storage
        configure.args-append -DCLANG_ENABLE_CLANGD=OFF
        configure.args-append -DLLVM_ENABLE_BACKTRACES=OFF
    }
}

if {${subport} eq "lld-${llvm_version}"} {
    homepage            https://lld.llvm.org/
    description         The LLVM linker
    long_description    LLD is a linker from the LLVM project that is a drop-in replacement \
                        for system linkers and runs much faster than them. It also provides \
                        features that are useful for toolchain developers.\n\
                        The ${version} version of lld is not yet on feature parity with ld64!

    depends_lib-append  port:llvm-${llvm_version}
    depends_run-append  port:clang_select

    select.group        lld
    select.file         ${filespath}/mp-${subport}

    # CMAKE_LINKER is used to determine the value for HOST_LINK_VERSION
    configure.args-append \
        -DCMAKE_LINKER=${prefix}/bin/ld
    post-extract {
        file delete -force ${worksrcpath}/flang ${worksrcpath}/clang ${worksrcpath}/polly ${worksrcpath}/lldb
    }   
    # for the standalone build:
    if {[info exists lldb_standalone_build]} {
        # Seems to find the correct llvm-config under ${prefix}/libexec/llvm-${llvm_version}
        # on its own but better safe than sorry:
        configure.args-append \
            -DLLVM_CONFIG_PATH=${sub_prefix}/bin/llvm-config
        configure.post_args \
            ../${worksrcdir}/../lld
    } else {
        configure.args-append \
            -DLLVM_ENABLE_PROJECTS="lld" \
            -DDARWIN_PREFER_PUBLIC_SDK=ON
    }

    if {${os.major} <= 10} {
        configure.args-append -DLLVM_ENABLE_BACKTRACES=OFF
    }
}

if {${subport} eq "lldb-${llvm_version}"} {

    homepage            https://lldb.llvm.org/
    description         the LLVM debugger
    long_description    lldb is the "LLVM native" debugger.

    depends_lib-append  port:libedit port:libffi port:ncurses path:lib/libxar.dylib:xar port:zlib
    depends_lib-append  port:llvm-${llvm_version} port:clang-${llvm_version}
    depends_build-append port:swig-python port:doxygen

    if {${os.platform} eq "darwin" && ${os.major} <= 15} {
    # see Note 1 below
        depends_build
        depends_lib
        depends_run
        archive_sites
        known_fail yes
        pre-fetch {
            ui_error "${subport} is not supported on this os version at present."
            return -code error {unsupported platform}
        }
        ui_warn "${subport} is not supported on this os version at present."
    }

    configure.args-append \
        -DLLDB_CODESIGN_IDENTITY=- \
        -DLLDB_ENABLE_LUA=OFF
    # RJVB
    if {[string match *clang-mp* ${configure.cc}]} {
        configure.args-append \
            -DCMAKE_ASM-ATT_COMPILER=[string map {"clang-" "llvm-as-"} ${configure.cc}]
    }
    # for the standalone build:
    if {[info exists lldb_standalone_build]} {
        configure.args-append \
            -DLLVM_CONFIG=${sub_prefix}/bin/llvm-config \
            -DLLVM_DIR=${sub_prefix}/lib/cmake/llvm
        configure.post_args \
            ../${worksrcdir}/../lldb
    }

    set worksrcpath ${workpath}/${distname}/lldb

    post-destroot {
        xinstall -m 755 -d ${destroot}${prefix}/share/doc/lldb-${llvm_version}
        xinstall -m 644 ${worksrcpath}/tools/lldb/docs/code-signing.txt ${destroot}${prefix}/share/doc/lldb-${llvm_version}/
    }
    post-activate {
        if {[codesign ${sub_prefix}/bin/debugserver lldb_codesign] ne 0} {
            ui_msg "Please follow the instructions at  https://lldb.llvm.org/resources/build.html#code-signing-on-macos and then codesign lldb-server with:"
            if {${os.major} >= 13} {
                ui_msg "   sudo codesign --force --deep --preserve-metadata=identifier,entitlements,resource-rules,requirements,flags,team-identifier --sign <identity> ${sub_prefix}/bin/lldb-server"
            } else {
               ui_msg "   sudo codesign --force --deep --preserve-metadata=identifier,entitlements,resource-rules,requirements --sign <identity> ${sub_prefix}/bin/lldb-server"
            }
        }
    }
}

if {${subport} eq "lldb-${llvm_version}"} {
    variant tests description {Enable building of test code} {}
}
if {[variant_isset tests]} {
    depends_test-append     port:py37-psutil
    test.run                yes
    configure.args-append   -DLLVM_INCLUDE_TESTS=ON
    test.target             check

   if {${subport} eq "clang-${llvm_version}"} {
       test.target    check-all
   }

   if {${subport} eq "lldb-${llvm_version}"} {
        pre-fetch {
            ui_error "running the test suite on ${subport} is not supported at present."
            return -code error {unsupported platform}
        }
        ui_warn "running the test suite on ${subport} is not supported at present."
   }
}

variant desktop description "Target only Mac desktop CPUs and GPUs" {
    if {${os.major} >= 18} {
        configure.args-append -DLLVM_TARGETS_TO_BUILD="X86\;PowerPC\;AMDGPU\;arm64"
    } else {
        configure.args-append -DLLVM_TARGETS_TO_BUILD="X86\;PowerPC\;AMDGPU"
    }
}
# check if we're not attempting to build a complete dependent against a restricted llvm dependency:
if {${subport} ne "llvm-${llvm_version}" && ![variant_isset desktop]} {
    require_active_variants port:llvm-${llvm_version} {}  desktop
}

if {${subport} ne "lldb-${llvm_version}"} {
    variant nortti description "Don't build with internal RTTI support (increases compilation performance somewhat)" {
        configure.args-delete -DLLVM_ENABLE_RTTI=ON
        configure.args-append -DLLVM_ENABLE_RTTI=OFF
    }
}

if {${subport} eq "clang-${llvm_version}"} {
    if {![variant_isset monolithic]} {
        # reset the pre_args so we only install the targets below
        destroot.pre_args
    }
    destroot.pre_args-append \
            tools/clang/install \
            tools/mlir/install \
            projects/compiler-rt/install
    if {[variant_isset flang]} {
        destroot.pre_args-append \
            tools/flang/install
    }
    if {![variant_isset no_libcxx]} {
        destroot.pre_args-append \
            projects/libcxxabi/install
    } else {
        # install only the libc++ headers, as earlier port:clang versions
        destroot.pre_args-append \
            projects/libcxx/include/install
        # also install the 2 libcxxabi headers (has to be done manually)
        post-destroot {
            xinstall -m 644 ${build.dir}/include/c++/v1/__cxxabi_config.h ${destroot}${sub_prefix}/include/c++/v1/
            xinstall -m 644 ${build.dir}/include/c++/v1/cxxabi.h ${destroot}${sub_prefix}/include/c++/v1/
        }
    }
    destroot.target
}

post-destroot {

    if {[variant_exists dummy] && [variant_isset dummy]} {
        return
    }

    if {${subport} eq "clang-${llvm_version}"} {
        # remove the clang symlink and replace it with the actual binary
        delete      ${destroot}${sub_prefix}/bin/clang
        file rename ${destroot}${sub_prefix}/bin/clang-${llvm_version} ${destroot}${sub_prefix}/bin/clang
    }

    # generate a versioned wrapper script for each file in the bin directory
    foreach bin [glob ${destroot}${sub_prefix}/bin/*] {
        set bin_filename [string map "${sub_prefix} ${prefix}" ${bin}]-${suffix}
        set exec_path    [string map "${destroot}${sub_prefix} ${sub_prefix}" ${bin}]

        # see https://trac.macports.org/ticket/54985
        if {${os.platform} eq "darwin" && [vercmp ${xcodeversion} 4.6] < 0} {
             xinstall -m 755 "${filespath}/llvm-bin-compat" "${bin_filename}"
        } else {
             xinstall -m 755 "${filespath}/llvm-bin" "${bin_filename}"
        }

        reinplace "s:EXEC_PATH:${exec_path}:" "${bin_filename}"
    }

    if {${subport} eq "llvm-${llvm_version}"
        || (${subport} eq "clang-${llvm_version}" && [variant_isset monolithic])} {
        # https://llvm.org/bugs/show_bug.cgi?id=19465
        ln -s LLVMPolly.so ${destroot}${sub_prefix}/lib/LLVMPolly.dylib
    }
    
    if {${subport} eq "clang-${llvm_version}"} {
        if {[variant_isset flang]} {
            # fix errant permissions on the flang binary
            system "chmod 755 ${destroot}${sub_prefix}/bin/flang"
        }

        # fix the cmake scripts to point to the versioned files
        reinplace "s|/bin/clang-${llvm_version}|/bin/clang|g" \
                  "${destroot}${sub_prefix}/lib/cmake/clang/ClangTargets-[string tolower ${cmake.build_type}].cmake"

        # http://trac.macports.org/ticket/33207
        ln -s ${prefix}/libexec/ld64/ld ${destroot}${sub_prefix}/bin/ld
    }
    
    if {${subport} eq "lldb-${llvm_version}"} {
        delete ${destroot}${prefix}/bin/debugserver-${suffix}
        if {[info exists lldb_standalone_build]} {
            system "otool -L ${destroot}${sub_prefix}/lib/liblldb.${version}.dylib"
            system "install_name_tool -id @rpath/liblldb.${version}.dylib ${destroot}${sub_prefix}/lib/liblldb.${version}.dylib"
        }
    }
}

if {${subport} eq "clang-${llvm_version}"} {

    variant monolithic description {experimental variant that includes the traditional port:llvm-12} {}

    variant full_cxx description {Don't limit the C++ std namespace by the system libc++ version} {
        require_active_variants port:libcxx macports_libcxx
    }
    if {[variant_isset full_cxx]} {
        patchfiles-append \
            patch-config-availability+ABIhiding.diff
    }

# lld-for-Mac isn't yet evolved enough in this llvm release
#     variant lld description "configure to use lld-${suffix} as the default linker" {
#         configure.args-append \
#             -DCLANG_DEFAULT_LINKER=lld
#     }

    variant analyzer description {Install clang static analyser} {
        # these have to be switched on or off together
        configure.args-replace -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
                               -DCLANG_ENABLE_STATIC_ANALYZER=ON
        configure.args-replace -DCLANG_ENABLE_ARCMT=OFF \
                               -DCLANG_ENABLE_ARCMT=ON

        depends_run-append port:perl5

        post-patch {
            reinplace "s|/usr/bin/env perl|${prefix}/bin/perl5|g" \
                ${patch.dir}/clang/tools/scan-build/libexec/ccc-analyzer \
                ${patch.dir}/clang/tools/scan-build/libexec/c++-analyzer \
                ${patch.dir}/clang/tools/scan-build/bin/scan-build
       }
    }

    variant flang description {build flang, a Fortran pre-compiler} {}

    # Avoid requiring a bootstrap version of perl5 on 10.6.
    if {${os.major} >= 11} {
        default_variants    +analyzer
    }


    if { ${cxx_stdlib} eq "libc++" && ${os.major} < 13 } {
        variant defaultlibcxx description {default to -stdlib=libc++ if not otherwise specified}  {
            # on systems older than darwin 13, if macports.conf is configured to stdlib=libc++
            # then make that the default if not otherwise specified. This matches the behaviour of newer systems.
            patchfiles-append 0018-10.6-and-less-clang-default-to-libc-on-all-darwin-sy.patch
        }
        default_variants-append +defaultlibcxx
    }

    variant libstdcxx description {-stdlib=macports-libstdc++ searches for MacPorts libstdc++} {

        patchfiles-append 0005-clang-support-macports-libstdcxx.patch

        post-patch {
            reinplace "s|@@MACPORTS_GCC_INCLUDE_DIR@@|${prefix}/include/gcc/c++|g" \
                ${patch.dir}/clang/lib/Frontend/InitHeaderSearch.cpp \
                ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_HOST_NAME@@|${build_arch}-apple-darwin${os.major}|g" \
                ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_libstdc++@@|${prefix}/lib/libgcc/libstdc++.6.dylib|g" \
                ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp

            # GCC was built for ${build_arch}-apple-darwin${os.major}
            # if GCC was also built universal, it has an extra include directory
            # if ${build_arch} is 32-bit, there is an extra 64-bit subdirectory
            # if ${build_arch} is 64-bit, there is an extra 32-bit subdirectory
            # MacPorts GCC can not compile across platforms
            switch ${build_arch} {
                x86_64 {
                    set gcc_subdirectory_ppc    ""
                    set gcc_subdirectory_ppc64  "ppc64"
                    set gcc_subdirectory_i386   "i386"
                    set gcc_subdirectory_x86_64 ""
                }
                i386 {
                    set gcc_subdirectory_ppc    ""
                    set gcc_subdirectory_ppc64  "ppc64"
                    set gcc_subdirectory_i386   ""
                    set gcc_subdirectory_x86_64 "x86_64"
                }
                ppc64 {
                    set gcc_subdirectory_ppc    "ppc"
                    set gcc_subdirectory_ppc64  ""
                    set gcc_subdirectory_i386   ""
                    set gcc_subdirectory_x86_64 "x86_64"
                }
                ppc {
                    set gcc_subdirectory_ppc    ""
                    set gcc_subdirectory_ppc64  "ppc64"
                    set gcc_subdirectory_i386   ""
                    set gcc_subdirectory_x86_64 "x86_64"
                }
            }

            reinplace "s|@@MACPORTS_GCC_SUBDIRECTORY_x86_64@@|${gcc_subdirectory_x86_64}|g" \
                ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_GCC_SUBDIRECTORY_i386@@|${gcc_subdirectory_i386}|g" \
                ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_GCC_SUBDIRECTORY_ppc64@@|${gcc_subdirectory_ppc64}|g" \
                ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_GCC_SUBDIRECTORY_ppc@@|${gcc_subdirectory_ppc}|g" \
                ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
        }
    }
    # at present, only the non-arm archs can use this variant
    if {${build_arch} in "x86_64 i386 ppc64 ppc"} {
        default_variants-append +libstdcxx
    }

    if {[variant_isset monolithic]} {
        pre-activate {
            if {![catch {set installed [lindex [registry_active llvm-${llvm_version}] 0]}]} {
                set llvmVariants [split [lindex $installed 3] "+"]
                if {[lsearch -exact ${llvmVariants} "dummy"] == -1} {
                    ui_warn "Deactivating the currently active port:llvm-${llvm_version}"
                    ui_warn "Please reinstall as port:llvm-${llvm_version} \[[lindex $installed 3]\] +dummy!"
                    registry_deactivate_composite llvm-${llvm_version} "" [list ports_nodepcheck 1]
                }
            }
        }
    }
}

cmake.save_configure_cmd "install log"

livecheck.type          none


# Note 1:

# lldb-12 build fails on 10.11 with this link error at 98% of the build:
#Undefined symbols for architecture x86_64:
#  "__dyld_get_shared_cache_range", referenced from:
#      lldb_private::HostInfoMacOSX::GetSharedCacheImageInfo(llvm::StringRef) in liblldbHostMacOSXObjCXX.a(HostInfoMacOSX.mm.o)
#  "__dyld_get_shared_cache_uuid", referenced from:
#      lldb_private::HostInfoMacOSX::GetSharedCacheImageInfo(llvm::StringRef) in liblldbHostMacOSXObjCXX.a(HostInfoMacOSX.mm.o)
#  "_dyld_shared_cache_iterate_text", referenced from:
#      lldb_private::HostInfoMacOSX::GetSharedCacheImageInfo(llvm::StringRef) in liblldbHostMacOSXObjCXX.a(HostInfoMacOSX.mm.o)

# This appears related to this commit in the lldb build tree, which would appear to be non-trivial to work around:
# https://github.com/llvm/llvm-project/commit/8113a8bb793453832301e2684dc2b8cebec331b0
# building against a newer SDK may or may not be an option for someone motivated to have lldb-12 on < 10.12
