# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup select    1.0

epoch               3
name                libgcc
version             7.0
platform linux {
    revision        1
}

conflicts           libgcc-devel

categories          lang
maintainers         nomaintainer

distfiles

use_configure       no

description         Provides the appropriate gcc runtime.
long_description    {*}${description} \
                    Picks the version to use based on the current Mac OS version or based on the selected variant

license             BSD
platforms           any

homepage            https://www.macports.org/

installs_libs       no

variant universal   { }

# Pick the gcc version that provides the primary runtime.
# NOTE : The logic here must match that in the gccX ports *and*
# that in _resources/port1.0/group/compilers-1.0.tcl
if { ${os.platform} eq "darwin" && ${os.major} < 10 } {
    set gcc_version 7
} else {
    set gcc_version 13
}
for {set gv 7} {$gv <= 13} {incr gv 1} {
    variant gcc${gv} description "Install libgcc ${gv}" {}
    if {${gv} eq ${gcc_version}} {
        default_variants +gcc${gv}
    }
    if {[variant_isset gcc${gv}]} {
        set gcc_version ${gv}
    }
}

depends_lib port:libgcc${gcc_version}

platform linux {
    PortGroup active_variants 1.1
    # check how the system GCC c++ compiler is configured w.r.t. the CXX11 ABI
    # and set up this port so that by default it will build code that should
    # link against binaries generated against the system libstdc++ runtime (= with 
    # the system compilers or our own macports-clang compilers NOT invoked with
    # -stdlib=macports-libstdc++).
    # see https://gcc.gnu.org/onlinedocs/libstdc++/manual/using_dual_abi.html
    if {[catch {eval [exec ${filespath}/get_GLIBCXX_USE_CXX11_ABI.sh /usr/bin/g++]}]} {
        # assume a modern system that doesn't disable the dual ABI
        set _GLIBCXX_USE_CXX11_ABI 1
    }
    variant oldabi description {The old libstdc++ ABI will be used by default (#define _GLIBCXX_USE_CXX11_ABI 0)} {}
    if {!${_GLIBCXX_USE_CXX11_ABI}} {
        default_variants +oldabi
        if {![variant_isset oldabi]} {
            ui_warn "variant `oldabi` unset; code generated against this libstdc++ can fail to link with binaries generated from the system C++ runtime!"
        }
    }
    if {[variant_isset oldabi]} {
        require_active_variants port:libgcc${gcc_version} oldabi
    } else {
        require_active_variants port:libgcc${gcc_version} {} oldabi
    }
}

build { }

destroot {
   xinstall -d ${destroot}${prefix}/share/doc/${name}
   system "echo 'libgcc runtime is provided by libgcc${gcc_version}' > ${destroot}${prefix}/share/doc/${name}/README"
}

#post-deactivate {
#    # When this port is deactivated, the associated libgccX should also be.
#    if {![catch {set installed [lindex [registry_active libgcc${gcc_version}] 0]}]} {
#        registry_deactivate_composite libgcc${gcc_version} "" [list ports_nodepcheck 1]
#    }
#}
