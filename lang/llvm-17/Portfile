# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                            1.0
PortGroup select                      1.0
PortGroup compiler_blacklist_versions 1.0
PortGroup active_variants             1.1
PortGroup cmake                       1.1
PortGroup legacysupport               1.1
PortGroup conflicts_build             1.0
PortGroup LTO                         1.0
PortGroup compress_workdir            1.0

# Do not propagate c/c++ standards as set by base
cmake.set_c_standard                  no
cmake.set_cxx_standard                no

# link legacysupport statically for compilers
legacysupport.use_static              yes
# Sysconf wrapping causes issues so disable
legacysupport.disable_function_wrap   yes

categories              lang
platforms               {darwin >= 11}
license                 NCSA
maintainers             nomaintainer

set llvm_version        17
set clang_exe_version   ${llvm_version}
version                 ${llvm_version}.0.6

name                    llvm-${llvm_version}
subport                 mlir-${llvm_version}  { revision [ expr ${revision} + 0 ] }
subport                 clang-${llvm_version} { revision [ expr ${revision} + 0 ] }
subport                 lldb-${llvm_version}  { revision [ expr ${revision} + 0 ] }
# for updated port:legacy-support
subport                 lld-${llvm_version}   { revision [ expr ${revision} + 1 ] }
subport                 flang-${llvm_version} { revision [ expr ${revision} + 0 ] }

checksums               rmd160  10f44d5a8e3d0d5fc1a1961a8adaac945733ec07 \
                        sha256  58a8818c60e6627064f312dbf46c02d9949956558340938b71cf731ad8bc0813
#                         size    127838860

master_sites            https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}
distname                llvm-project-${version}.src
use_xz                  yes

dist_subdir             llvm
set suffix              mp-${llvm_version}
set sub_prefix          ${prefix}/libexec/llvm-${llvm_version}
if {${subport} ne "lld-${llvm_version}"} {
    worksrcdir          ${worksrcdir}/llvm
}
# https://github.com/macports/macports-ports/commit/a83a493bc21cbe7e14b1f5884379649ec8f31bae#commitcomment-132530885
# RJVB : I created a devport containing the linker libraries so libunwind dependents (including htop)
# don't have to be deactivated for the whole time llvm-17+ is being built.
conflicts_build-append  libunwind-dev libunwind-headers

# hand-tweaked, approximately c++ standard 2017
compiler.blacklist      *gcc* {clang < 1001} macports-clang-3.*
# work/build/include/c++/v1/optional:224:5: error: destructor cannot be marked constexpr
#     _LIBCPP_CONSTEXPR_AFTER_CXX17 ~__optional_destruct_base()
compiler.blacklist-append {clang < 1204} {macports-clang-[5-9].0} {macports-clang-1[0-3]}
compiler.fallback       clang macports-clang-14 macports-clang-15

## llvm-17 needs a libc++ newer than the v13 we have in port:libcxx so we do have to build the static versions at least
## and also install them as subports other than clang-17 might require them too.
## It seems to be impossible also to build with hardcoded paths
if {${subport} ne "llvm-${llvm_version}"} {
    variant no_libcxx description {don't build/install with embedded shared libc++ (also uses hardcoded rpaths as in older llvm ports)} {}
#     default_variants-append +no_libcxx
}
proc variant_enabled {v} {
    return [expr [variant_exists ${v}] && [variant_isset ${v}]]
}


switch ${subport} {
    "lldb-${llvm_version}" {
        ui_debug "Building using Makefiles"
        build.post_args-append -k
    }
    default {
        # most builds tested with Ninja
        cmake.generator Ninja
        build.pre_args  -k 0
    }
}
cmake.install_prefix    ${sub_prefix}
# NB: LLVM no longer rejects custom CMAKE_BUILD_TYPEs!
#cmake.build_type        Release
cmake.save_configure_cmd "install log"

if {![variant_enabled no_libcxx]} {
# clean up some cmake-PG added values we don't want to use, because we want @rpaths (why?)
    cmake.install_rpath

    configure.pre_args-delete \
        -DCMAKE_INSTALL_NAME_DIR=${cmake.install_prefix}/lib \
        -DCMAKE_INSTALL_RPATH=${cmake.install_prefix}/lib

    platform darwin {
        configure.pre_args-replace \
            -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON \
            -DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=OFF
    }

    configure.pre_args-replace \
        -DCMAKE_SYSTEM_PREFIX_PATH="${prefix}\;/usr" \
        -DCMAKE_SYSTEM_PREFIX_PATH="${cmake.install_prefix}\;${prefix}\;/usr"
} else {
    # with this config we need a libc++ under ${prefix}
    require_active_variants port:libcxx macports_libcxx
    depends_build-append \
        port:libcxx-dev
    depends_run-append \
        port:libcxx-dev
}

configure.args-append \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_ENABLE_FFI=ON \
    -DFFI_INCLUDE_DIR=${prefix}/include \
    -DFFI_LIBRARY_DIR=${prefix}/lib

# Disable iOS support
# To Be reviewed with later versions
# https://reviews.llvm.org/D133273
# Reported unused by cmake for llvm-17
configure.args-append -DCOMPILER_RT_ENABLE_IOS=OFF

# cctools is needed to handle objects from newer clang toolchains
if {[string match macports-clang-* ${configure.compiler}]} {
    depends_build-append            port:cctools
    depends_skip_archcheck-append   cctools
    configure.args-append           -DCMAKE_LIBTOOL=${prefix}/bin/libtool
}

# build fails on 10.6.8 with ld64-127, the current default
if {${os.platform} eq "darwin" && ${os.major} < 11} {
    depends_build-append            port:ld64-latest
    depends_skip_archcheck-append   ld64-latest
    configure.ldflags-append        -fuse-ld=${prefix}/bin/ld-latest
}

set py_ver              11
# find the oldest (= fastest) new-enough python version the user already has installed.
# LLVM-16 actually accepts 3.0 but we start a bit after that...
for {set pv 7} {$pv < ${py_ver}} {incr pv 1} {
    if {[file exists ${prefix}/bin/python3.${pv}]} {
        break
    }
}
set py_ver              "3.${pv}"
set py_ver_nodot        [string map {. {}} ${py_ver}]
depends_build-append    port:python${py_ver_nodot} \
                        port:py${py_ver_nodot}-pygments \
                        port:py${py_ver_nodot}-yaml
depends_skip_archcheck-append python${py_ver_nodot} \
                        py${py_ver_nodot}-pygments \
                        py${py_ver_nodot}-yaml
set pythonfullpath      ${prefix}/bin/python${py_ver}
configure.args-append   -DPython3_EXECUTABLE=${pythonfullpath}

platform darwin {
    configure.cxx_stdlib libc++
    depends_lib-append port:libcxx
    if {${os.major} < 11} {
        pre-fetch {
            if {![file exists /usr/lib/libc++.dylib]} {
                ui_error "$name requires a C++11 runtime, which your configuration does not allow"
                error "unsupported configuration"
            }
        }
    }
}

patch.dir ${workpath}/${distname}
patch.pre_args  -p1

patchfiles-append \
    0001-MacPorts-only-clang-use-MP-omp-locations.patch \
    0002-MacPorts-Only-Don-t-embed-the-deployment-target-in-t.patch \
    0003-MacPorts-Only-Prepare-clang-format-for-replacement-w.patch \
    0004-MacPorts-Only-Fix-name-of-scan-view-executable-insid.patch \
    0006-Define-EXC_MASK_CRASH-and-MACH_EXCEPTION_CODES-if-th.patch \
    0007-Threading-Only-call-pthread_setname_np-if-we-have-it.patch \
    0008-Threading-Only-call-setpriority-PRIO_DARWIN_THREAD-0.patch \
    0009-lib-Support-Unix-Path.inc-define-COPYFILE_CLONE-if-n.patch \
    0010-compiler-rt-cmake-config-ix.cmake-was-Leopard-No-ASA.patch \
    0011-Fix-missing-long-long-math-prototypes-when-using-the.patch \
    0012-compiler-rt-add-some-defs-missing-in-older-SDKs.patch \
    0013-clang-add-back-runtime-libraries-used-on-10.4-and-10.patch \
    0014-Fix-float.h-to-work-on-Snow-Leopard-and-earlier.patch \
    0019-10.6-and-less-use-emulated-TLS-before-10.7.patch \
    0025-lldb-add-defines-needed-for-older-SDKs.patch \
    0026-llvm-set-memrchr-unavailable.patch \
    0999-i386-fix.diff \
    add-missed-i386-host.diff

if {${os.platform} eq "darwin" && ${os.major} < 14} {
    patchfiles-append \
        0016-10.10-and-less-compiler-rt-find-macosx-sdk.patch
}

if {${os.platform} eq "darwin" && ${os.major} < 11} {
    patchfiles-append \
        0017-10.6-and-less-libcxx-work-around-no-reexported_symbo.patch \
        0017-10.6-and-less-libcxxabi-work-around-no-reexported_symbo.patch \
        0020-10.6-and-less-work-around-no-directory-watcher-befor.patch \
        0021-10.6-and-less-libcxx-disable-Availability-tests.patch
}

if {${os.platform} eq "darwin" && ${os.major} < 10} {
    patchfiles-append \
        0022-10.5-and-less-default-to-fno-blocks.patch \
        0024-10.5-and-less-compiler-rt-work-around-no-libdispatch.patch \
        0027-libcxx-link-gcc_s.1-on-macOS-before-10.6.patch \
        0028-libcxx-use-malloc-free-only-on-macOS-before-10.6.patch

    # inverse limit of building for macOS 10.7+
    # See: https://github.com/llvm/llvm-project/commit/49d2071572d484a2b5dc356f59050bb173c8c77c
    patchfiles-append \
        49d2071572d484a2b5dc356f59050bb173c8c77c-inverse.patch
}

if {${os.platform} eq "darwin" && ${os.major} < 16} {
    # error: 'TARGET_OS_OSX' is not defined, evaluates to 0 [-Werror,-Wundef-prefix=TARGET_OS_]
    patchfiles-append  0100-define-target-os-osx.patch
}

if {${os.platform} eq "darwin" && ${os.major} < 16} {
    # Avoid attempts to use 'clonefile'
    # llvm/lib/Support/Unix/Path.inc:1476:10: error: use of undeclared identifier 'clonefile'
    patchfiles-append  0031-Avoid-Use-Of-Clonefile.patch
}

if {${os.platform} eq "darwin" && ${os.major} < 14} {
    # Revert use of pthread/qos.h that is only available on macOS10.10 and newer
    # https://trac.macports.org/ticket/65626#comment:5
    # Created by reverting the commit
    # https://github.com/llvm/llvm-project/commit/9902a0945d22cd5757b16ebe85fe07059723aa09
    # > git revert 9902a0945d22cd5757b16ebe85fe07059723aa09
    patchfiles-append  0110-Avoid-Pthread-QOS.patch
}

if {${os.platform} eq "darwin" && ${os.major} < 12} {
    # On OSX10.7 and older revert call to add_security_warnings as fails with
    #   add_security_warnings Function invoked with incorrect arguments
    post-patch {
        reinplace "s|add_security_warnings\(|\#add_security_warnings\(|" \
            ${patch.dir}/compiler-rt/lib/builtins/CMakeLists.txt \
            ${patch.dir}/compiler-rt/cmake/Modules/CompilerRTDarwinUtils.cmake
    }
}

# https://trac.macports.org/ticket/67686
# revert commit that breaks rpath linkages in clang runtime
if {${os.platform} eq "darwin"} {
    patchfiles-append b98da4c71edda3df0a0555b1ab63ec52e92252b4-inverse.patch
}

if {${os.platform} eq "darwin" && ${os.major} <= 16} {
    # error: 'utimensat' is only available on macOS 10.13 or newer
    patchfiles-append 0041-no-Werror-unguarded-availability-new.patch
}

if {${os.platform} eq "darwin" && ${os.major} <= 16} {
    # https://github.com/llvm/llvm-project/issues/64226
    patchfiles-append 0042-mbstate_t-not-defined.patch
}

# RJVB
patchfiles-append \
    patch-accept-build_types.diff
# clangd requires RTLD_FIRST which may not be defined
patchfiles-append \
    patch-RTLD_FIRST.diff

post-patch {
    reinplace "s|@@PREFIX@@|${prefix}|" \
        ${patch.dir}/clang/lib/Driver/ToolChains/Clang.cpp \
        ${patch.dir}/clang/lib/Driver/ToolChains/CommonArgs.cpp

    reinplace "s|@CLANG_FORMAT_PATH@|${prefix}/bin/clang-format-${suffix}|g" \
        ${patch.dir}/clang/tools/clang-format/clang-format-bbedit.applescript \
        ${patch.dir}/clang/tools/clang-format/clang-format-diff.py            \
        ${patch.dir}/clang/tools/clang-format/clang-format-sublime.py         \
        ${patch.dir}/clang/tools/clang-format/clang-format.el                 \
        ${patch.dir}/clang/tools/clang-format/clang-format.py
}

# libc++ link step fails on OSX10.10 and older to correctly use static legacy support lib.
if {${os.platform} eq "darwin" && ${os.major} <= [option legacysupport.newest_darwin_requires_legacy] } {
    post-patch {
        reinplace "s|LIBCXX_LIBRARIES \"\"|LIBCXX_LIBRARIES \"[legacysupport::get_library_link_flags]\"|" ${patch.dir}/libcxx/CMakeLists.txt
    }
}

if {${subport} eq "llvm-${llvm_version}"} {

    homepage            https://llvm.org/
    description         llvm is a next generation compiler infrastructure
    long_description    The LLVM Core libraries provide a modern source- and \
                        target-independent optimizer, along with code \
                        generation support for many popular CPUs (as well as \
                        some less common ones!) These libraries are built \
                        around a well specified code representation known as \
                        the LLVM intermediate representation ("LLVM IR").

    depends_lib-append  port:libedit port:libffi port:ncurses path:lib/libxar.dylib:xar port:zlib port:zstd
    depends_run-append  port:llvm_select

    select.group        llvm
    select.file         ${filespath}/mp-${subport}

    configure.args-append \
                        -DLLVM_ENABLE_PROJECTS="polly"
#     if {[variant_enabled no_libcxx]} {
        # makes no difference for the installed products (I checked), just possibly in the build time
        configure.args-append \
            -DLLVM_BUILD_RUNTIME=OFF
#     }
}

if {${subport} eq "mlir-${llvm_version}"} {
    homepage            https://mlir.llvm.org

    description         The MLIR project is a novel approach to building reusable \
                        and extensible compiler infrastructure.
    long_description    {*}${description} MLIR aims to address software fragmentation, \
                        improve compilation for heterogeneous hardware, significantly \
                        reduce the cost of building domain specific compilers, and aid \
                        in connecting existing compilers together.

    depends_lib-append  port:llvm-${llvm_version}

    configure.args-append \
                        -DLLVM_ENABLE_PROJECTS="mlir"

#     destroot {
#         # we have to run the destroot like this, because individual targets for each of the
#         # components we want to install are not available; we want "everything but llvm"
#         system "cd ${destroot.dir}/tools/mlir && ${destroot.cmd} ${destroot.pre_args} ${destroot.target} ${destroot.post_args}"
#     }
    destroot.pre_args \
            tools/mlir/install
    destroot.target
}

if { ${subport} eq "clang-${llvm_version}" } {
    homepage            https://clang.llvm.org/

    description         C, C++, Objective C and Objective C++ compiler
    long_description    The Clang project provides a language front-end and tooling infrastructure \
                        for languages in the C language family (C, C++, Objective C/C++, OpenCL, \
                        CUDA, and RenderScript) for the LLVM project.

    depends_run-append  port:clang_select port:cctools port:lld-${llvm_version}
    select.group        clang
    select.file         ${filespath}/mp-${subport}

    variant full_cxx description {Don't limit the C++ std namespace by the system libc++ version} {
        require_active_variants port:libcxx macports_libcxx
    }
    if {[variant_isset full_cxx]} {
        patchfiles-append \
            patch-config-availability+ABIhiding.diff
    }

    configure.args-append   \
        -DLLVM_ENABLE_PROJECTS="clang\;clang-tools-extra\;compiler-rt" \
        -DLLVM_ENABLE_RUNTIMES="libcxx\;libcxxabi"
    if {[variant_enabled no_libcxx]} {
        # configure such that the libc++ headers will be prepared but the shared libraries not built nor installed
        configure.args-append \
            -DLIBCXXABI_ENABLE_SHARED=OFF  \
            -DLIBCXXABI_ENABLE_STATIC=ON  \
            -DLIBCXX_ENABLE_SHARED=OFF     \
            -DLIBCXX_ENABLE_STATIC=ON     \
            -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=ON \
            -DLIBCXX_INSTALL_HEADERS=ON    \
            -DLIBCXX_INSTALL_SHARED_LIBRARY=OFF \
            -DLIBCXX_INSTALL_STATIC_LIBRARY=ON \
            -DLIBCXX_INSTALL_EXPERIMENTAL_LIBRARY=ON \
            -DLIBCXXABI_INSTALL_SHARED_LIBRARY=OFF \
            -DLIBCXXABI_INSTALL_STATIC_LIBRARY=ON
#         post-destroot {
#             file delete -force {*}[glob -nocomplain ${destroot}${sub_prefix}/lib/libc++*]
#         }
    } else {
        configure.args-append \
            -DLIBCXX_ENABLE_SHARED=ON      \
            -DLIBCXX_INSTALL_LIBRARY=ON
    }

## obsolete:
#     destroot {
#         # we have to run the destroot like this, because individual targets for each of the
#         # components we want to install are not available; we want "everything but llvm"
#         system "cd ${destroot.dir}/tools/clang                      && ${destroot.cmd} ${destroot.pre_args} ${destroot.target} ${destroot.post_args}"
#         system "cd ${destroot.dir}/projects/compiler-rt             && ${destroot.cmd} ${destroot.pre_args} ${destroot.target} ${destroot.post_args}"
#         system "cd ${destroot.dir}/runtimes/runtimes-bins/libcxx    && ${destroot.cmd} ${destroot.pre_args} ${destroot.target} ${destroot.post_args}"
#         system "cd ${destroot.dir}/runtimes/runtimes-bins/libcxxabi && ${destroot.cmd} ${destroot.pre_args} ${destroot.target} ${destroot.post_args}"
#     }
    destroot.pre_args \
            tools/clang/install \
            projects/compiler-rt/install \
            install-cxxabi \
            install-cxx
    destroot.target
}

if { ${subport} eq "lld-${llvm_version}" } {
    homepage            https://lld.llvm.org/

    description         The LLVM linker
    # lld-17 is roughly 2x faster in linking the libLLVM.so from this port than ld64-latest 450.3 is
    long_description    LLD is a linker from the LLVM project that is a drop-in replacement \
                        for system linkers and runs much faster than them (roughly up to 2x faster than ld64). \
                        It also provides features that are useful for toolchain developers.\n\
                        The ${version} version of lld is not yet on feature parity with ld64, \
                        and cannot link 32-bit binaries.

    #depends_run-append  port:clang_select
    select.group        lld
    select.file         ${filespath}/mp-${subport}

    pre-fetch {
        if {[variant_isset use_lld]} {
            ui_error "Port:${subport} cannot be built using itself!"
            return -code error "Illegal variant +use_lld"
        }
    }

    post-extract {
        file delete -force ${worksrcpath}/flang ${worksrcpath}/clang ${worksrcpath}/polly ${worksrcpath}/lldb
    }   

    # lld isn't supported on 32 bit CPUs, or at least it won't link 32bit binaries
    supported_archs     arm64 x86_64

    depends_lib-append \
        port:zstd \
        port:zlib

    configure.args-append   \
        -DLLVM_ENABLE_PROJECTS="lld"  \
        -DLIBCXX_ENABLE_SHARED=OFF    \
        -DLIBCXX_INSTALL_LIBRARY=OFF  \
        -DCMAKE_LINKER=${prefix}/bin/ld    \
        -DDARWIN_PREFER_PUBLIC_SDK=ON      \
        -DLLVM_INCLUDE_BENCHMARKS=OFF
    if {${os.platform} eq "darwin" && ${os.major} <= 10} {
        # avoid need for thread_local_storage
        configure.args-append    -DLLVM_ENABLE_BACKTRACES=OFF
    }
    if {![info exists lld_build_standalone]} {
        worksrcdir ${worksrcdir}/llvm
        set llvm_prefix ${sub_prefix}
        set sub_prefix ${prefix}/libexec/lld-${llvm_version}
        cmake.install_prefix ${sub_prefix}

        long_description-append \
            "\nThis port is independent from the other llvm-${llvm_version} ports and installs \
            under ${sub_prefix}."

        variant libstdcxx description {experimental: build against libstdc++; requires GCC} {}
        if {[variant_isset libstdcxx]} {
            if {[string match macports-gcc* ${configure.compiler}]} {
                post-configure {
                    ui_warn "Only works with port:gccXY without +libcxx variant set"
                }
                configure.cxx_stdlib libstdc++
                set configure.cxxflags "${configure.cxxflags} -stdlib=libstdc++"
                # annoying: "base" seems to filter out -stdlib argument from cxxflags, so we
                configure.ldflags-append \
                                -stdlib=libstdc++
            } else {
                pre-configure {
                    ui_error "Variant requires configure.compiler=macports-gcc-XY"
                    return -code error "Variant requires building with GCC"
                }
            }
        }

        # make a standalone build as much as possible that doesn't depend on port:llvm-${llvm_version}
        if {[info exists lld_uses_polly]} {
            configure.args-append \
                -DLLVM_ENABLE_PROJECTS="polly\;lld" \
        } else {
            configure.args-append \
                -DLLVM_ENABLE_PROJECTS="lld" \
        }
        configure.args-append \
            -DLLVM_BUILD_RUNTIME=ON \
            -DLLVM_BUILD_TOOLS=OFF \
            -DLLVM_BUILD_UTILS=OFF \
            -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF
# it would be great if a static link to libLLVM were possible, but apparently it isn't
#         configure.args-append \
#             -DLLVM_BUILD_LLVM_DYLIB=OFF \

        # install just the things we need (and we probably don't need libLTO...)
        destroot.pre_args \
             tools/llvm-shlib/install \
             tools/lto/install \
             tools/lld/install
        if {[info exists lld_uses_polly]} {
            destroot.pre_args-append \
                 tools/polly/lib/install
        }
        post-destroot {
            # and prune what we could prevent getting as well:
            file delete -force ${destroot}${sub_prefix}/include \
                {*}[glob -nocomplain ${destroot}${sub_prefix}/lib/*.a]
            if {${sub_prefix} ne ${llvm_prefix}} {
                # also expose the linker in the location where clang-${llvm_version} expects it
                xinstall -m 755 -d ${destroot}${llvm_prefix}/bin
                ln -s ${sub_prefix}/bin/ld64.lld ${destroot}${llvm_prefix}/bin
                # and in ${prefix}/bin!
                ln -s ${sub_prefix}/bin/ld64.lld ${destroot}${prefix}/bin
            }
        }
## build time with clang-16 on portia:
# 34609.776 user_cpu 1817.481 kernel_cpu 2:51:41.45 total_time 353.8%CPU {1531371520M 140782F 157470775R 50066I 91477O 685k 134917w ??c}
## build time with gcc12+stdlib_flag (= stock build) on portia:
# 33270.445 user_cpu 2334.875 kernel_cpu 2:48:34.81 total_time 352.0%CPU {1621516288M 91739F 223921089R 36016I 91497O 7k 114157w 13927966c}
    } else {
        # configure in the lld subdir to get a standalone build that will also destroot normally
        # ** This would be the way the subport would be built normally if its existence is/were justified. **
        worksrcdir ${worksrcdir}/lld
        depends_lib-append \
            port:llvm-${llvm_version}
        configure.args-append \
            -DLLVM_CONFIG_PATH=${sub_prefix}/bin/llvm-config \
            -DLLVM_CMAKE_DIR=${sub_prefix}/lib/cmake/llvm
    }
    post-destroot {
        file delete ${destroot}${sub_prefix}/bin/ld64.lld
        xinstall -m 755 -d ${destroot}${sub_prefix}/bin/wrapped
        ln -s ../lld ${destroot}${sub_prefix}/bin/wrapped/ld64.lld
        # install a wrapper that adds a potentially missing required argument
        xinstall -m 755 ${filespath}/ld64.lld.sh  ${destroot}${sub_prefix}/bin/ld64.lld
        reinplace "s|@SUBPREFIX@|${sub_prefix}|g" ${destroot}${sub_prefix}/bin/ld64.lld
    }
}

if { ${subport} eq "flang-${llvm_version}" } {
    homepage            https://flang.llvm.org/

    description         LLVM Fortran compiler
    long_description    {*}${description}

    # CMakeLists.txt: flang isn't supported on 32 bit CPUs
    supported_archs     arm64 x86_64

    configure.args-append \
        -DLLVM_ENABLE_PROJECTS="clang\;flang\;compiler-rt\;mlir" \
        -DLIBCXX_ENABLE_SHARED=OFF          \
        -DLIBCXX_INSTALL_LIBRARY=OFF

    depends_lib-append  port:clang-${llvm_version} port:mlir-${llvm_version}

#     destroot {
#         # we have to run the destroot like this, because individual targets for each of the
#         # components we want to install are not available; we want "everything but llvm"
#         system "cd ${destroot.dir}/tools/flang && ${destroot.cmd} ${destroot.pre_args} ${destroot.target} ${destroot.post_args}"
#     }
    destroot.pre_args \
        tools/flang/install
    destroot.target
}

if { ${subport} eq "clang-${llvm_version}" || ${subport} eq "flang-${llvm_version}" } {

    depends_lib-append  port:libxml2 port:libomp port:llvm-${llvm_version}
    depends_run-append  port:ld64
    depends_skip_archcheck-append ld64

    # CMAKE_LINKER is used to determine the value for HOST_LINK_VERSION
    configure.args-append \
        -DCMAKE_LINKER=${prefix}/bin/ld    \
        -DCLANG_INCLUDE_TESTS=OFF          \
        -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
        -DCLANG_ENABLE_ARCMT=OFF           \
        -DDARWIN_PREFER_PUBLIC_SDK=ON      \
        -DLLVM_BUILD_RUNTIME=ON

    # the orc submodule is not building at present - can't find c_api.h
    # https://trac.macports.org/ticket/65578
    configure.args-append        -DCOMPILER_RT_BUILD_ORC=OFF

    if {${os.platform} eq "darwin" && ${os.major} <= 18} {
        # on systems that might build i386, we need atomic builtins
        # https://trac.macports.org/ticket/58712
        configure.args-append    -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=OFF
    }

    if {${os.platform} eq "darwin" && ${os.major} <= 14} {
        # compiler-rt does a broad search for an SDK it likes, but this
        # search fails on older systems that don't have a MacOSX.sdk
        # TODO: apply this always to all systems?
        if {${configure.sdkroot} eq ""} {set configure.sdkroot "/"}
        configure.args-append    -DDARWIN_osx_SYSROOT="${configure.sdkroot}"
    }

    if {${os.platform} eq "darwin" && ${os.major} <= 15} {
        # sanitizers in compiler_rt fail to build on older systems
        # might be fixable with the use of newer SDK and/or effort if motivated
        # all three toggles are needed to force them off
        # Extended to 10.11 and older, see https://trac.macports.org/ticket/65887
        configure.args-append    -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
                                 -DCOMPILER_RT_BUILD_XRAY=OFF \
                                 -DCOMPILER_RT_BUILD_MEMPROF=OFF
    }

    if {${os.platform} eq "darwin" && ${os.major} <= 11} {
        # xpc.h available 10.7 but doesn't support nullable features
        configure.args-append    -DCLANGD_BUILD_XPC=OFF
    }

    if {${os.platform} eq "darwin" && ${os.major} <= 10} {
        # avoid need for thread_local_storage
        configure.args-append    -DCLANG_ENABLE_CLANGD=OFF \
                                 -DLLVM_ENABLE_BACKTRACES=OFF
    }
}

if {${subport} eq "lldb-${llvm_version}"} {

    homepage            https://lldb.llvm.org/
    description         the LLVM debugger
    long_description    lldb is the "LLVM native" debugger.

    depends_lib-append  port:libedit port:libffi port:ncurses path:lib/libxar.dylib:xar port:zlib
    depends_lib-append  port:llvm-${llvm_version} port:clang-${llvm_version}
    depends_build-append port:swig-python path:bin/doxygen:doxygen
    depends_run-append  port:lldb_select

    select.group        lldb
    select.file         ${filespath}/mp-${subport}

    # error: use of undeclared identifier 'CPU_SUBTYPE_ARM64E
    platforms {darwin >= 18}

    configure.args-append \
        -DLLDB_CODESIGN_IDENTITY=- \
        -DLLDB_ENABLE_LUA=OFF

    set worksrcpath ${workpath}/${distname}/lldb

    notes "Please follow the instructions at https://lldb.llvm.org/resources/build.html#code-signing-on-macos and then codesign lldb-server with:\n--------------------\n"
    notes-append "${sub_prefix}/scripts/lldb/macos-setup-codesign.sh"
    if {${os.major} >= 13} {
        notes-append "sudo codesign --force --deep --preserve-metadata=identifier,entitlements,resource-rules,requirements,flags,team-identifier --sign lldb_codesign ${sub_prefix}/bin/lldb-server"
    } else {
        notes-append "sudo codesign --force --deep --preserve-metadata=identifier,entitlements,resource-rules,requirements --sign lldb_codesign ${sub_prefix}/bin/lldb-server"
    }
}

variant tests description {Enable building of test code} {
    depends_test-append     port:py${py_ver_nodot}-psutil
    test.run                yes
    configure.args-append   -DLLVM_INCLUDE_TESTS=ON
    test.target             check

   if {${subport} eq "clang-${llvm_version}"} {
       test.target    check-all
   }

   if {${subport} eq "lldb-${llvm_version}"} {
        pre-fetch {
            ui_error "running the test suite on ${subport} is not supported on this os version at present."
            return -code error {unsupported platform}
        }
   }
}

variant desktop description "Target only Mac desktop CPUs and GPUs" {
    if {${os.major} >= 18} {
        configure.args-append -DLLVM_TARGETS_TO_BUILD="X86\;PowerPC\;AMDGPU\;arm64"
    } else {
        configure.args-append -DLLVM_TARGETS_TO_BUILD="X86\;PowerPC\;AMDGPU"
    }
}
# check if we're not attempting to build a complete dependent against a restricted llvm dependency:
if {${subport} ne "llvm-${llvm_version}" && ![variant_isset desktop]} {
    require_active_variants port:llvm-${llvm_version} {}  desktop
}

if {${subport} ne "lldb-${llvm_version}"} {
    variant nortti description "Don't build with internal RTTI support (increases compilation performance somewhat)" {
        configure.args-delete -DLLVM_ENABLE_RTTI=ON
        configure.args-append -DLLVM_ENABLE_RTTI=OFF
    }
}

post-destroot {

    if {${subport} eq "clang-${llvm_version}"} {
        # remove the clang symlink and replace it with the actual binary
        delete      ${destroot}${sub_prefix}/bin/clang
        file rename ${destroot}${sub_prefix}/bin/clang-${clang_exe_version} ${destroot}${sub_prefix}/bin/clang
        # amdgpu-ach fails with:
        # Failed to 'dlopen' libhsa-runtime64.so
        # Failed to load libamdhip64.so: dlopen(libamdhip64.so, 9): image not found
        file delete ${destroot}${sub_prefix}/bin/amdgpu-arch
    }

    # generate a versioned wrapper script for each file in the bin directory
    foreach bin [glob ${destroot}${sub_prefix}/bin/*] {
        set bname [file tail ${bin}]
        if {${subport} eq "lld-${llvm_version}" && ${bname} ne "lld" && ${bname} ne "ld64.lld"} {
            # RJVB : for lld, only expose the ld64 version and the actual binary
            continue
        }
        set bin_filename [string map "${sub_prefix} ${prefix}" ${bin}]-${suffix}
        set exec_path    [string map "${destroot}${sub_prefix} ${sub_prefix}" ${bin}]

        # see https://trac.macports.org/ticket/54985
        if {${os.platform} eq "darwin" && [vercmp ${xcodeversion} 4.6] < 0} {
             xinstall -m 755 "${filespath}/llvm-bin-compat" "${bin_filename}"
        } else {
             xinstall -m 755 "${filespath}/llvm-bin" "${bin_filename}"
        }

        reinplace "s:EXEC_PATH:${exec_path}:" "${bin_filename}"
    }

    if {${subport} eq "llvm-${llvm_version}"} {
        # https://llvm.org/bugs/show_bug.cgi?id=19465
        ln -s LLVMPolly.so ${destroot}${sub_prefix}/lib/LLVMPolly.dylib
    }

    if {${subport} eq "clang-${llvm_version}"} {
        # fix the cmake scripts to point to the versioned files
        reinplace "s|/bin/clang-${clang_exe_version}|/bin/clang|g" \
                  "${destroot}${sub_prefix}/lib/cmake/clang/ClangTargets-[string tolower ${cmake.build_type}].cmake"

        # http://trac.macports.org/ticket/33207
        ln -s ${prefix}/libexec/ld64/ld ${destroot}${sub_prefix}/bin/ld
    }

    if {${subport} eq "lldb-${llvm_version}"} {
        delete ${destroot}${prefix}/bin/debugserver-${suffix}

        set lldb_scripts_srcdir ${worksrcpath}/scripts
        set lldb_scripts_destdir ${destroot}${sub_prefix}/scripts/lldb
        xinstall -d ${lldb_scripts_destdir}
        xinstall -m 755 -W ${lldb_scripts_srcdir} \
            macos-setup-codesign.sh \
            ${lldb_scripts_destdir}
    }
}

if {${subport} eq "clang-${llvm_version}"} {

    variant analyzer description {Install clang static analyzer} {
        # these have to be switched on or off together
        configure.args-replace -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
                               -DCLANG_ENABLE_STATIC_ANALYZER=ON
        configure.args-replace -DCLANG_ENABLE_ARCMT=OFF \
                               -DCLANG_ENABLE_ARCMT=ON

        depends_run-append port:perl5

        post-patch {
            reinplace "s|/usr/bin/env perl|${prefix}/bin/perl5|g" \
                ${patch.dir}/clang/tools/scan-build/libexec/ccc-analyzer \
                ${patch.dir}/clang/tools/scan-build/libexec/c++-analyzer \
                ${patch.dir}/clang/tools/scan-build/bin/scan-build
       }
    }

    # Avoid requiring a bootstrap version of perl5 on 10.6.
    if {${os.major} >= 11} {
        default_variants    +analyzer
    }

    variant libstdcxx description {-stdlib=libstdc++_macports searches for MacPorts libstdc++} {

        patchfiles-append 0005-clang-support-macports-libstdcxx.patch
        if {${os.major} < 11} {
            # see https://trac.macports.org/ticket/61778
            depends_run-append  port:libstdcxx_clang_fix
        }

        post-patch {
            reinplace "s|@@MACPORTS_GCC_INCLUDE_DIR@@|${prefix}/include/gcc/c++|g" \
                ${patch.dir}/clang/lib/Lex/InitHeaderSearch.cpp \
                ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_HOST_NAME@@|${configure.build_arch}-apple-darwin${os.major}|g" \
                ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
            reinplace "s|@@MACPORTS_libstdc++@@|${prefix}/lib/libgcc/libstdc++.6.dylib|g" \
                ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp

            # GCC was built for ${configure.build_arch}-apple-darwin${os.major}
            # if GCC was also built universal, it has an extra include directory
            # if ${configure.build_arch} is 32-bit, there is an extra 64-bit subdirectory
            # if ${configure.build_arch} is 64-bit, there is an extra 32-bit subdirectory
            # MacPorts GCC cannot compile across platforms
            switch ${configure.build_arch} {
                x86_64 {
                    reinplace {s|@@MACPORTS_TEST_32_64@@|getTriple().getArch() == llvm::Triple::x86_64 ? "" : "i386"|g} \
                        ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
                }
                i386 {
                    reinplace {s|@@MACPORTS_TEST_32_64@@|getTriple().getArch() == llvm::Triple::x86_64 ? "x86_64" : ""|g} \
                        ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
                }
                ppc64 {
                    reinplace {s|@@MACPORTS_TEST_32_64@@|getTriple().getArch() == llvm::Triple::ppc64 ? "" : "ppc"|g} \
                        ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
                }
                ppc {
                    reinplace {s|@@MACPORTS_TEST_32_64@@|getTriple().getArch() == llvm::Triple::ppc64 ? "ppc64" : ""|g} \
                        ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
                }
                arm64 {
                    reinplace {s|@@MACPORTS_TEST_32_64@@|""|g} \
                        ${patch.dir}/clang/lib/Driver/ToolChains/Darwin.cpp
                }
            }
        }
    }
    if { ${cxx_stdlib} eq "libstdc++" } {
        default_variants-append +libstdcxx
    }
}

livecheck.type      regex
livecheck.url       https://github.com/llvm/llvm-project/tags
livecheck.regex     llvmorg-(${llvm_version}.\[\\d.\]+).tar.gz
