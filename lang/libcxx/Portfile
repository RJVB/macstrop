# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0

# cmake requires C++11 and thus libc++. Avoid circular dependencies and allow
# building using the cmake build system only when the system has already has libc++
# installed, either natively or because the libc++ conversion has been bootstrapped.
# Also require cmake to be present.
# check the presence of cmake by checking the registry for the activated port as
# ${prefix} will be set to "${prefix}" during portindex'ing ...
if {[catch {set cmake_available [registry_active cmake]}]} {
    ui_debug "port:cmake is not installed or not activated"
    set use_cmake       0
} else {
    set use_cmake       [expr [file exists /usr/lib/libc++.dylib] && [lindex [lindex ${cmake_available} 0] 2]]
    ui_debug "use_cmake: [tbool use_cmake]"
}

if {${os.platform} ne "darwin" || ${os.major} < 11} {
    ui_debug "Platform ${os.platform}, version ${os.major}.${os.minor}"
    # The official/mainstream port:libcxx has received some useful
    # tweaks recently, for 10.6 and earlier.
    name                libcxx_from_macstrop
    version             0
    set almost_done     yes
} elseif {![tbool use_cmake]} {
    ui_debug "/usr/lib/libc++.dylib and/or ${prefix}/bin/cmake are missing"
    # force a bootstrap using the mainstream port:libcxx
    ## NB ##
    # We could also embed the bootstrap version, maintaining the 2 different build methods
    # like we long did, except clamping the bootstart libc++ version to 5.0.1
    name                libcxx_from_macstrop
    long_description    ${description} \n\
                        This port can only been installed if you already have a libc++ in /usr/lib \
                        and have port:cmake installed.
    set almost_done     yes
} else {
    name                libcxx
}

if {[tbool almost_done]} {
    # we're in uncharted waters; bail out
    platform darwin {
        # we probably want to provide a libcxx-dev subport so ports can have a build
        # dependency on it. 
        subport libcxx-dev {}
        if {${subport} eq "libcxx-dev"} {
            PortGroup   stub 1.0
            version     0
            description stub for the newer port:libcxx's dev-port
            long_description \
                        This is a stub for the the dev-port of a port:libcxx \
                        that you cannot install (or not yet).
        } else {
            replaced_by libcxx
            PortGroup   obsolete 1.0
        }
    }
    configure.compiler.add_deps no
    return
}

PortGroup               compiler_blacklist_versions 1.0
PortGroup               LTO 1.0
PortGroup               cmake 1.1

variant replacemnt_libcxx description {EXPERTS ONLY: Build a replacement libcxxabi and libcxx even if it is already part of the base OS.} {}
variant macports_libcxx description "EXPERTS ONLY: Install the libcxx library so that MacPorts build will link against it" {}
variant pstl description "Experimental: Build libc++ with ParallelSTL support (TBB backend)" {}

# if {${os.major} >= 11 && ![variant_isset replacemnt_libcxx] && ![variant_isset macports_libcxx]} {
#     # nothing to be done in this case, we're a stub port
#     set is_stub         yes
# }

epoch                   1
# FUTURE WARNING:
# Starting with LLVM 8.0.0, users who wish to link together translation units built
# with different versions of libc++'s headers into the same final linked image MUST
# define the _LIBCPP_HIDE_FROM_ABI_PER_TU macro to 1 when building those translation
# units. Not defining _LIBCPP_HIDE_FROM_ABI_PER_TU to 1 and linking translation units
# built with different versions of libc++'s headers together may lead to ODR violations
# and ABI issues. On the flipside, code size improvements should be expected for
# everyone not defining the macro.
# Hence see patch-config-availability+ABIhiding.diff

version                 13.0.1 ; revision 1
set llvm_version        13

# some kind of version that should be larger than the current_version Apple gave to this libc++ version
# could also simply be a version that is based on Apple's libc++ version on the OS version we are building for.
set version4macports    1300.99.1

categories              lang
platforms               darwin
license                 MIT NCSA
maintainers             gmail.com:rjvbertin {jeremyhu @jeremyhu}
description             libc++ is a new implementation of the C++ standard library with support for C++11 and newer.
long_description        ${description} \
                        Because objects cannot be passed between different versions of the C++ runtime, this port must \
                        replace the host version in order to be used. On Lion and later, \
                        users must build the port with +replacemnt_libcxx and install the root manually if they wish \
                        to replace the existing host implementation. Either way, the libraries are installed into \
                        $prefix/lib/libcxx, in line with port:macports-libcxx . They can also use the +macports_libcxx variant \
                        which installs the library under $prefix/lib where it will be picked up by all \
                        subsequent MacPorts builds if port:libcxx-dev is also installed. This variant also installs the optlibs \
                        wrapper script with which applications can be started such that they use the libc++ from this port.

homepage                http://libcxx.llvm.org/

# master_sites            http://www.llvm.org/releases/${version}/
master_sites            https://github.com/llvm/llvm-project/releases/download/llvmorg-${version}
dist_subdir             llvm

livecheck.url           http://www.llvm.org/
livecheck.regex         download.html\#(\\d+\\.\\d+(\\.\\d+)+)

use_xz                  yes

distname                llvm-project-${version}.src

checksums               rmd160  ae542658ad0e97b4bf088b1cfba66fa10b9b52d8 \
                        sha256  326335a830f2e32d06d0a36393b5455d17dc73e0bd1211065227ee014f92cbf8
#                         size    97584928


set suffix              mp-${llvm_version}

compiler.blacklist-append clang
# pick the newest available (= installed) port:clang-XY compiler:
foreach clv {8.0 9.0 10 11 12 13 14 15 16 17 18 19 20} {
    if {[file exists ${prefix}/bin/clang-mp-${clv}]} {
        compiler.whitelist-prepend macports-clang-${clv}
    }
    compiler.fallback-prepend macports-clang-${clv}
}

compiler.blacklist-append {clang < 1204} {macports-clang-[5-7].0}
compiler.fallback         clang macports-clang-11 macports-clang-10 macports-clang-9.0 macports-clang-8.0
set clangversion [lindex [split ${configure.cc} -] 2]
if {${clangversion} ne ""} {
    depends_build-append port:clang-${clangversion}
    if {${clangversion} < 8} {
        pre-configure {
            ui_error "This port requires at least clang 8 to be built!"
            return -code error "Please install or specify a sufficiently recent compiler"
        }
    }
}

# variant builtwith description {Label the install with the compiler used} {}
# if {[variant_isset builtwith]} {
# 	set usedCompiler [string map {"-" "_"} [file tail ${configure.cc}]]
# 	variant ${usedCompiler} requires builtwith description "placeholder variant to record the compiler used" {
# 		pre-configure {
# 			ui_warn "+builtwith+${usedCompiler} are just placeholder variants used only to label the install with the compiler used"
# 		}
# 	}
# 	default_variants-append +${usedCompiler}
# }

if {${name} eq "libcxx"} {
    PortGroup           devport 1.0
    create_devport      port:${name}
}

if {![is_mainport]} {
    # nothing else to be done
    return
}
PortGroup           compress_workdir 1.0

installs_libs       yes

worksrcdir          ${distname}

# these are used during the build but not linked to by the resulting libraries
depends_build-append \
                    port:libedit \
                    port:libffi \
                    port:ncurses \
                    port:libxml2 \
                    port:zlib \
                    port:git \
                    port:cctools

depends_skip_archcheck-append git cctools

patch.pre_args -Np1
patchfiles-append \
        0010-compiler-rt-cmake-config-ix.cmake-was-Leopard-No-ASA.patch \
        0011-Fix-missing-long-long-math-prototypes-when-using-the.patch \
        0012-compiler-rt-add-some-defs-missing-in-older-SDKs.patch \
        0016-10.10-and-less-compiler-rt-find-macosx-sdk.patch \
        0017-10.6-and-less-libcxxabi-work-around-no-reexported_symbo.patch \
        0017-10.6-and-less-libcxx-work-around-no-reexported_symbo.patch \
        0021-10.6-and-less-libcxx-disable-Availability-tests.patch \
        0024-10.5-and-less-compiler-rt-work-around-no-libdispatch.patch
# 240318 : NB: 1 build_type fix moved to patch-benchmarks-cmake-fixes.diff
patchfiles-append \
        patch-accept-build_types.diff \
        patch-config-availability+ABIhiding.diff \
        patch-experimental-no-lto.diff
# make benchmarks buildable (incl. not requiring over 2G of RAM to build)
patchfiles-append \
        patch-no-universal-or-filesystem-benchmarks.diff \
        patch-strings-benchmark.diff \
        patch-cheaper-variant-benchmark.diff
# clang-13/work/build/include/c++/v1/optional:224:5: error: destructor cannot be marked constexpr
#     _LIBCPP_CONSTEXPR_AFTER_CXX17 ~__optional_destruct_base()
patchfiles-append patch-no-const_expr_dtor.diff
# set our compatibility version and install location:
patchfiles-append patch-install_location_version_and_name.diff
# let's see what we gain from supporting ParellelSTL
# see https://reviews.llvm.org/D129452
patchfiles-append patch-use-pstl.diff \
        patch-no_result_of.diff
# make certain symbols like __gxx_personality_v0 can be found as expected by software
# built against older libc++ versions.
patchfiles-append patch-more-exported-symbols.diff
# allow building with compilers that don't support -nostdlib++ (like GCC 12)
# (NB: the build still fails ATM, when using g++ -stdlib=libc++)
patchfiles-append patch-allow-builds-with-gcc.diff
# Somehow the benchmarks used to build for me, and now they didn't until I came up with:
patchfiles-append patch-benchmarks-cmake-fixes.diff

# make the +benchmark_mpstdlibcxx variant possible:
patchfiles-append patch-benchmark_mplibstdcxx.diff

if {${os.platform} eq "darwin" && ${os.major} < 12} {
    # On OSX10.7 and older revert call to add_security_warnings as fails with
    #   add_security_warnings Function invoked with incorrect arguments
    post-patch {
        reinplace "s|add_security_warnings\(|\#add_security_warnings\(|" \
            ${patch.dir}/compiler-rt/lib/builtins/CMakeLists.txt \
            ${patch.dir}/compiler-rt/cmake/Modules/CompilerRTDarwinUtils.cmake
    }

    # On OSX10.7 and older revert call to add_security_warnings as fails with
    #   add_security_warnings Function invoked with incorrect arguments
    post-patch {
        reinplace "s|add_security_warnings\(|\#add_security_warnings\(|" \
            ${patch.dir}/compiler-rt/lib/builtins/CMakeLists.txt \
            ${patch.dir}/compiler-rt/cmake/Modules/CompilerRTDarwinUtils.cmake
    }
}

# make some space, but only after the patching so it's easier to share
# patchfiles with the main llvm ports.
post-patch {
    ui_info "Cleaning up unneeded directories"
    file delete -force ${worksrcpath}/clang
    file delete -force ${worksrcpath}/llvm/lib
    file delete -force ${worksrcpath}/llvm/test
    file delete -force ${worksrcpath}/polly
    file delete -force ${worksrcpath}/lldb
}

configure.args-append \
                    -DLLVM_ENABLE_RUNTIMES="libcxx\;libcxxabi" \
                    -DLIBCXX_INSTALL_LIBRARY=ON \
                    -DLIBCXX_ENABLE_ASSERTIONS=OFF \
                    -DLIBCXXABI_ENABLE_STATIC=OFF \
                    -DLIBCXX_ENABLE_STATIC=OFF \
                    -ULIBCXX_BENCHMARK_NATIVE_STDLIB \
                    -DLIBCXX_LINK_TESTS_WITH_SHARED_LIBCXXABI=ON
## NB: prevent "dyld: Symbol not found: __ZdaPv (expected in libc++)
## idem __ZdlPv
## See https://reviews.llvm.org/D68269
configure.args-append \
                    -DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS=ON

if {[variant_isset pstl]} {
    depends_lib-append \
                    port:onetbb
    configure.args-replace \
                    -DLLVM_ENABLE_RUNTIMES="libcxx\;libcxxabi" \
                    -DLLVM_ENABLE_RUNTIMES="pstl\;libcxx\;libcxxabi"
    configure.args-append \
                    -DPSTL_PARALLEL_BACKEND=tbb \
                    -DLIBCXX_ENABLE_PARALLEL_ALGORITHMS=ON \
                    -DPSTL_HIDE_FROM_ABI_PER_TU=ON
}

if {${os.major} >= 18} {
    configure.args-append -DLLVM_TARGETS_TO_BUILD="X86\;PowerPC\;AMDGPU\;arm64"
} else {
    configure.args-append -DLLVM_TARGETS_TO_BUILD="X86\;PowerPC\;AMDGPU"
}
# Testing:
configure.args-append \
                    -DVERSION_ACCORDING_TO_MACPORTS=${version4macports}

if {[string match *g++-mp-* ${configure.cxx}]} {
    configure.args-replace \
                    -ULIBCXX_BENCHMARK_NATIVE_STDLIB \
                    -DLIBCXX_BENCHMARK_NATIVE_STDLIB=libstdc++
    if {[string match *clang++-mp-* ${configure.cxx}]} {
        # clang++-mp-XY will need `-stdlib=macports-stdc++`, g++-mp-XY just `-stdlib=libstdc++`
        # to achieve the same effect: build and link against our libstdc++ runtime.
        pre-configure {
            if {![catch \
                {exec echo "extern int foo;" | ${configure.cxx} -x c++ -fsyntax-only - -stdlib=macports-libstdc++}]} {
                configure.args-append \
                    -DLIBCXX_BENCHMARK_NATIVE_STDLIB_FROM_MACPORTS=ON
            } else {
                ui_warn "${configure.cxx} doesn't accept -stdlib=macports-libstdcxx"
            }
        }
        pre-test {
            if {[catch \
                {exec echo "extern int foo;" | ${configure.cxx} -x c++ -fsyntax-only - -stdlib=macports-libstdc++}]} {
                ui_warn "${configure.cxx} doesn't accept -stdlib=macports-libstdcxx; the native benchmark will probably fail"
            }
        }
    }
}

if {[info proc cmake.save_configure_cmd] ne ""} {
    cmake.save_configure_cmd "install log"
}
if {${build.jobs} ne 1} {
    build.post_args-append -wk
}

cmake.source_dir    ${worksrcpath}/runtimes

set libcxxabi_worksrcpath \
                    ${build.dir}
set libcxx_worksrcpath \
                    ${build.dir}

post-build {
    file delete -force ${libcxxabi_worksrcpath}/lib/libc++abi.dylib ${libcxxabi_worksrcpath}/lib/libc++abi.1.dylib
    file rename ${libcxxabi_worksrcpath}/lib/libc++abi.${version4macports}.dylib ${libcxxabi_worksrcpath}/lib/libc++abi.dylib
    file delete -force ${libcxx_worksrcpath}/lib/libc++.dylib ${libcxx_worksrcpath}/lib/libc++.1.dylib
    file rename ${libcxx_worksrcpath}/lib/libc++.${version4macports}.dylib ${libcxx_worksrcpath}/lib/libc++.1.dylib
}

variant universal {}
default_variants +universal

set roots_path ${prefix}/var/system_roots/
set root_name  ${name}-${version}-${revision}

# variant runtime description "EXPERTS ONLY: Install the libcxx library so that it can be used with DYLD_INSERT_LIBRARIES (obsolete: use +macports_libcxx)" {
#     ui_warn "The +runtime variant is obsolete, please use +macports_libcxx"
    default_variants-append +macports_libcxx
# }
if {[variant_isset macports_libcxx]} {
    notes-append "Install port:libcxx-dev and rebuild ports or start applications via ${prefix}/bin/optlibs to use libc++ v${version}, or\
         set DYLD_INSERT_LIBRARIES as illustrated in that script."
}

## always install to $prefix. This means we could just use a regular destroot phase followed by a
## post-desroot{} to make our changes.
# if {[variant_isset macports_libcxx]} {
    configure.args-append \
                    -DLIBCXX_INSTALL_PREFIX=${prefix}
# } else {
#     cmake.install_prefix \
#                     /usr
# }


supported_archs i386 x86_64 ppc arm64

# We want to use the host's libc++ everywhere because we want to ensure
# that only *ONE* copy of this library is in any process's address space.
# On Snow Leopard and earlier, this port provides this library in /usr for
# binary compatibility with Lion and later.
#
# On newer OS version, this port does not install the content to /usr and
# just leaves it to expert users who may want to replace their system
# runtime.

destroot {
    ## Make a formal reference install so it's easier to track what would get installed where
    ui_debug "-->  doing a 'formal-reference' install to ${destroot}-formal"
    system -W ${build.dir} "${build.cmd} ${build.pre_args} install/fast ${build.post_args} ${destroot.destdir}-formal"

    ## TODO:
    ## install ${destroot}-formal/lib/libc++experimental.a
    if {[variant_isset replacemnt_libcxx]} {
        xinstall -m 755 -d ${destroot}${roots_path}/${root_name}/usr/lib

        xinstall -m 755 ${libcxxabi_worksrcpath}/lib/libc++abi.dylib ${destroot}${roots_path}/${root_name}/usr/lib

        xinstall -m 755 ${libcxx_worksrcpath}/lib/libc++.1.dylib ${destroot}${roots_path}/${root_name}/usr/lib
        ln -s libc++.1.dylib ${destroot}${roots_path}/${root_name}/usr/lib/libc++.dylib

        if {[file exists ${destroot}-formal${prefix}/lib/libc++experimental.a]} {
            xinstall -m 755 ${destroot}-formal${prefix}/lib/libc++experimental.a \
                ${destroot}${roots_path}/${root_name}/usr/lib
        }

        system "install_name_tool -id /usr/lib/libc++abi.dylib ${destroot}${roots_path}/${root_name}/usr/lib/libc++abi.dylib"
        system "install_name_tool -id /usr/lib/libc++.1.dylib ${destroot}${roots_path}/${root_name}/usr/lib/libc++.1.dylib"
        system "install_name_tool -change ${prefix}/lib/libc++abi.1.dylib /usr/lib/libc++abi.dylib ${destroot}${roots_path}/${root_name}/usr/lib/libc++.1.dylib"
        system "install_name_tool -change @rpath/libc++abi.1.dylib /usr/lib/libc++abi.dylib ${destroot}${roots_path}/${root_name}/usr/lib/libc++.1.dylib"

        system -W ${destroot}${roots_path}/${root_name} "tar czf ../${root_name}.tgz ."
        delete ${destroot}${roots_path}/${root_name}
    }

    ## 20230729 : our default behaviour should already have been to install like port:macports_libcxx, i.e.
    ## install the headers and the libraries into $prefix/lib/libcxx!
    ## We keep the macports_libcxx VARIANT to install into $prefix/lib too, as before.

    # contrary to port:macports-libcxx we build the libraries from source so
    # we can just install the headers using the corresponding command rather
    # than copying them from the corresponding port:clang-${clangversion} install.
    ui_debug "-->  installing libc++ headers to destroot"
    system -W ${build.dir} "${build.cmd} ${build.pre_args} install-cxx-headers/fast ${build.post_args} ${destroot.destdir}"
    file rename ${destroot}${prefix}/include/c++ ${destroot}${prefix}/include/libcxx
    if {[variant_isset pstl]} {
        system -W ${build.dir} "${build.cmd} ${build.pre_args} install-pstl/fast ${build.post_args} ${destroot.destdir}"
        foreach i [glob ${destroot}${prefix}/include/*pstl*] {
            # move the ParellelSTL headers into the libc++ include dir so they're be found when
            # that directory is added to the compiler's header search path. Upstream appear to
            # be making this same merger.
            file rename ${i} ${destroot}${prefix}/include/libcxx/v1
        }
    }
    xinstall -m 755 -d ${destroot}${prefix}/lib/libcxx

    # first install possibly temporary copies into a temp dir
    xinstall -m 755 -d ${destroot}${prefix}/libtemp
    xinstall -m 755 ${libcxxabi_worksrcpath}/lib/libc++abi.dylib ${destroot}${prefix}/libtemp/libc++abi.1.dylib
    xinstall -m 755 ${libcxx_worksrcpath}/lib/libc++.1.dylib ${destroot}${prefix}/libtemp/
    ln -s libc++abi.1.dylib  ${destroot}${prefix}/libtemp/libc++abi.dylib
    ln -s libc++.1.dylib  ${destroot}${prefix}/libtemp/libc++.dylib
    foreach l {libc++ libc++abi} {
        # make copies that are interchangeable with the ones from port:macports-libcxx (version aside)
        xinstall -m 755 ${destroot}${prefix}/libtemp/${l}.1.dylib ${destroot}${prefix}/lib/libcxx/
        system "install_name_tool -id ${prefix}/lib/libcxx/${l}.1.dylib ${destroot}${prefix}/lib/libcxx/${l}.1.dylib"
        system "install_name_tool -change \
            ${prefix}/lib/libc++abi.1.dylib ${prefix}/lib/libcxx/libc++abi.1.dylib \
            ${destroot}${prefix}/lib/libcxx/${l}.1.dylib"
        system "install_name_tool -change \
            @rpath/libc++abi.1.dylib ${prefix}/lib/libcxx/libc++abi.1.dylib \
            ${destroot}${prefix}/lib/libcxx/${l}.1.dylib"
        ln -s ${l}.1.dylib ${destroot}${prefix}/lib/libcxx/${l}.dylib
    }
    if {[file exists ${destroot}-formal${prefix}/lib/libc++experimental.a]} {
        xinstall -m 755 ${destroot}-formal${prefix}/lib/libc++experimental.a \
            ${destroot}${prefix}/lib/libcxx/
    }

    if {[variant_isset macports_libcxx]} {
        # move the files from libtemp
        foreach l [glob ${destroot}${prefix}/libtemp/*] {
            file rename ${l} ${destroot}${prefix}/lib/[file tail ${l}]
        }
        foreach l {libc++ libc++abi} {
            system "install_name_tool -id ${prefix}/lib/${l}.1.dylib ${destroot}${prefix}/lib/${l}.1.dylib"
            system "install_name_tool -change \
                ${prefix}/lib/libc++abi.1.dylib ${prefix}/lib/libc++abi.1.dylib \
                ${destroot}${prefix}/lib/${l}.1.dylib"
            system "install_name_tool -change \
                @rpath/libc++abi.1.dylib ${prefix}/lib/libc++abi.1.dylib \
                ${destroot}${prefix}/lib/${l}.1.dylib"
        }
        if {[file exists ${destroot}${prefix}/lib/libcxx/libc++experimental.a]} {
            ln -s libcxx/libc++experimental.a  ${destroot}${prefix}/lib/
        }
        xinstall -m 755 ${filespath}/optlibs.sh ${destroot}${prefix}/bin/optlibs
        reinplace "s|@PREFIX@|${prefix}|g" ${destroot}${prefix}/bin/optlibs
    } else {
        file delete -force ${destroot}${prefix}/libtemp
    }
}

post-destroot {
    register_devport_standard_content
    append_to_devport_standard_content ${prefix}/lib/libcxx/libc++.dylib
    append_to_devport_standard_content ${prefix}/lib/libcxx/libc++abi.dylib
    append_to_devport_standard_content ${prefix}/lib/libcxx/libc++experimental.a
    append_to_devport_standard_content ${prefix}/lib/cmake
    create_devport_content_archive
}

test.run        yes
test.dir        ${build.dir}
test.target     cxx-benchmarks
test.post_args-append -wk
pre-test {
    # this doesn't seem to have any effect?!"
    test.env-append "SDKROOT=macosx${macosx_deployment_target}"
    set SDKPATH [exec xcrun -sdk macosx${macosx_deployment_target} --show-sdk-path]
    test.env-append "SDKPATH=${SDKPATH}"
    # don't set LIBRARY_PATH (we don't want unexpected linking to $prefix/lib/libc++)!
    test.env-append "LIBRARY_PATH="
}
post-test {
    # on Mac we don't build/run the "native" benchmarks as it is very tricky to link only the system libc++
    # and there is a good chance that it will be too old anyway.
    system -W ${build.dir}/libcxx/benchmarks "time ./algorithms.libcxx.out --benchmark_repetitions=1 --benchmark_filter='_1$'\;\
        time ./algorithms.libcxx.out --benchmark_repetitions=1 --benchmark_filter='_262144$'"
}

