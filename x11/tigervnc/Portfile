# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem              1.0
PortGroup               cmake 1.1
PortGroup               conflicts_build 1.0
PortGroup               github 1.0
if {${os.platform} eq "darwin"} {
    PortGroup           muniversal 1.0
    PortGroup           active_variants 1.1
} else {
    # go for maximum optimisation because we'll be building the VNC server(s)!
    set LTO.allow_ThinLTO no
}
PortGroup               LTO 1.0
PortGroup               locale_select 1.0

# github.setup            TigerVNC tigervnc 1.11.0 v
github.setup            TigerVNC tigervnc e9d78517c90f393a5f5c420d6543b958d2b31032
fetch.type              git
# after `git tag 1.11.0 -m "v1.11.0 released after this commit" e6f910a0ad660d38617341747f49d7bcc41b2696`
# after `git tag 1.13.1 -m "v1.13.1 released just after this commit" cbed625888eb1ef87272dac39472b67dccf677b4`
# 1.13.1-144-ge9d78517c90f393a5f5c420d6543b958d2b31032
version                 1.13.1.144
platform darwin {
    revision            1
}
epoch                   1
conflicts               vnc tightvnc
categories              x11 vnc
maintainers             ryandesign openmaintainer
platforms               darwin
license                 GPL-2+

description             Advanced VNC implementation.

long_description        TigerVNC is an advanced VNC implementation. \
                        It is based on the fourth generation of VNC. TigerVNC \
                        also includes features from the TightVNC and TurboVNC \
                        projects. This includes accelerated JPEG compression. \
                        TigerVNC supports the latest X.Org X server.

homepage                https://tigervnc.org
github.tarball_from     archive

#checksums               rmd160  2afe93bc9cbfb1a0aa83414f6da5c9cf90bb5216 \
#                        sha256  b7c5b8ed9e4e2c2f48c7b2c9f21927db345e542243b4be88e066b2daa3d1ae25 \
#                        size    1989081

worksrcdir              ${name}-git
distname                ${name}-git

depends_build           port:gettext

depends_lib-append      port:gettext-runtime \
                        path:lib/pkgconfig/gnutls.pc:gnutls \
                        path:include/turbojpeg.h:libjpeg-turbo \
                        port:libiconv \
                        path:lib/pkgconfig/pixman-1.pc:libpixman \
                        port:zlib

if {${os.platform} eq "darwin"} {
    depends_lib-append  path:lib/libfltk.dylib:fltk
    patchfiles          patch-release-makemacapp.in.diff \
                        patch-vncviewer-CMakeLists.txt.diff
    if {[string match macports-gcc* ${configure.compiler}]} {
        configure.cflags-append \
                        -fpermissive
        configure.cxxflags-append \
                        -fpermissive
    }
} else {
    depends_lib-append  path:lib/libfltk.so:fltk
    depends_build-append \
                        port:ffmpeg \
                        port:gmp \
                        port:nettle \
                        port:systemd
    patchfiles-append   patch-CMakeLists-linux.diff
}
# get rid of that fugly blue
patchfiles-append       patch-selection-colour.diff
# don't resize the remote desktop by default
patchfiles-append       patch-no-default-remoteresize.diff

# ivtools' OS/os.h shadows tigervnc's os/os.h on case-insensitive filesystems.
if {[file exists ${prefix}/include/os/os.h]} {
    conflicts_build-append ivtools
}

post-extract {
    xinstall -m 655 ${filespath}/FindFLTK.cmake ${worksrcpath}/cmake/Modules/
}

cmake.save_configure_cmd "install log"

# patch.pre_args          -Np1

if {${os.platform} eq "darwin"} {

    post-patch {
        # make sure CMake uses our OBJCXXFLAGS!
        reinplace "s|project(tigervnc)|project(tigervnc LANGUAGES C CXX OBJCXX)|g" ${worksrcpath}/CMakeLists.txt
    }

    # variant x11 description {build an X11 version} {}
    if {[variant_exists x11] && [variant_isset x11]} {
        require_active_variants \
                        path:lib/libfltk.dylib:fltk x11
        configure.args-append \
                        -DAPPLE_FORCE_X11=ON
    } else {
        require_active_variants \
                        path:lib/libfltk.dylib:fltk "" x11
        configure.cppflags-append \
                        -D__APPLE_QUARTZ__
        configure.args-append \
                        -DAPPLE_FORCE_X11=OFF
        # make certain the app bundle is created
        build.target    translations dmg
    }
#    configure.args-append \
#                        -DINSTALL_SYSTEMD_UNITS=OFF

    # the app bundle is moved into place in a post-destroot step that comes after the
    # langselect prune step...
    langselect_dirs_dir "${build.dir}/TigerVNC Viewer.app/Contents/Resources/locale"

    if {![variant_exists x11] || ![variant_isset x11]} {
        if {${universal_possible} && [variant_isset universal]} {
            merger-post-destroot {
                foreach arch ${universal_archs_to_use} {
                    copy "${build.dir}-${arch}/TigerVNC Viewer.app" ${destroot}-${arch}${applications_dir}
                    xinstall ${filespath}/vncviewer.in ${destroot}-${arch}${prefix}/bin/vncviewer
                    reinplace "s|@APPLICATIONS_DIR@|${applications_dir}|g" ${destroot}-${arch}${prefix}/bin/vncviewer
                }
            }
        } else {
            post-destroot {
                copy "${build.dir}/TigerVNC Viewer.app" ${destroot}${applications_dir}
                xinstall ${filespath}/vncviewer.in ${destroot}${prefix}/bin/vncviewer
                reinplace "s|@APPLICATIONS_DIR@|${applications_dir}|g" ${destroot}${prefix}/bin/vncviewer
            }
        }
    }
} else {
    configure.args-append \
                        -DUSE_GETTEXT_FROM_LIBINTL=ON
    post-destroot {
        destroot.violate_mtree yes
        xinstall -m 755 -d ${destroot}/etc/pam.d
        file rename ${destroot}/etc/${prefix}/pam.d/tigervnc ${destroot}/etc/pam.d/tigervnc
        file rename ${destroot}/etc${prefix}/tigervnc ${destroot}${prefix}/etc
    }
}
