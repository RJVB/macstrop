# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           muniversal 1.0
PortGroup           LTO 1.0
PortGroup           compress_workdir 1.0
PortGroup           meson 1.0

platform darwin {
    # May need clock_gettime()
    PortGroup       legacysupport 1.0
    legacysupport.newest_darwin_requires_legacy 15
}

name                mesa
epoch               1
version             19.0.8 ; revision 3
categories          x11 graphics
maintainers         {jeremyhu @jeremyhu} openmaintainer
license             MIT
license_noconflict  py26-libxml2 py27-libxml2
description         Mesa 3D Graphics Library
long_description    Mesa is an open-source implementation of the OpenGL specification, a system for rendering interactive 3D graphics.

homepage            https://www.mesa3d.org
master_sites        https://archive.mesa3d.org
platforms           macosx darwin
use_xz              yes

checksums           rmd160  c658d9e93d19bf2de694001c8c9886b8bb89ee2e \
                    sha256  d017eb53a810c32dabeedf6ca2238ae1e897ce9090e470e9ce1d6c9e3f1b0862
#                     size    11967592

depends_build       port:pkgconfig \
                    port:flex \
                    port:bison \
                    port:gindent

depends_lib         port:expat \
                    port:xorg-xorgproto \
                    port:xorg-libxcb \
                    port:xorg-libX11 \
                    port:xorg-libXext \
                    port:xorg-libXdamage \
                    port:xorg-libXfixes \
                    port:xorg-libXi \
                    port:xorg-libXmu \
                    port:xorg-libXxf86vm

patch.pre_args      -p1
patchfiles          0001-applegl-Provide-requirements-of-_SET_DrawBuffers.patch \
                    0002-Hack-to-address-build-failure-when-using-newer-macOS.patch

patchfiles-append   patch-meson.diff \
                    patch-autoconf-c11.diff

if {[string match *meson* ${configure.cmd}]} {
    depends_build   port:cctools

    configure.args-append \
                    -Dplatforms=x11 \
                    -Ddri3=false \
                    -Degl=false \
                    -Dgbm=false \
                    -Dosmesa=none \
                    -Dshared-llvm=false \
                    -Dgallium-drivers=
} else {
#     depends_build-append \
#                     port:slibtool
#     depends_skip_archcheck-append \
#                     slibtool
    post-patch {
        system -W ${worksrcpath} "autoreconf -fvi"
    }
    configure.args  --enable-autotools \
                    --disable-dependency-tracking \
                    --disable-silent-rules \
                    --with-platforms=x11 \
                    --disable-dri3 \
                    --disable-egl \
                    --disable-gbm \
                    --disable-osmesa \
                    --disable-llvm-shared-libs \
                    --with-gallium-drivers=
}

# mesa builds with -std=c99 but uses timespec_get() which was added in c11, so this works around that bug
configure.env-append \
                    export ac_cv_func_timespec_get=no

configure.env-append \
                    INDENT=${prefix}/bin/gindent \
                    STRIP=echo

# if {[string match macports-clang* ${configure.compiler}]} {
#     configure.env-append \
#                     AR="[string map {"clang" "llvm-ar"} ${configure.cc}]" \
#                     NM="[string map {"clang" "llvm-nm"} ${configure.cc}]" \
#                     RANLIB="[string map {"clang" "llvm-ranlib"} ${configure.cc}]"
# }

# This project is affected by a bug in Apple's gcc driver driver that I fixed in the apple-gcc42 port.
# Use that or clang.
# clang-700.1.81 (Xcode 7.2.1) fails at:
#     disk_cache.c:637:7: error: cannot compile this atomic library call yet
#           p_atomic_add(cache->size, - (uint64_t)sb.st_blocks * 512);
#           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compiler.blacklist gcc-3.3 gcc-4.0 gcc-4.2 llvm-gcc-4.2 {clang < 800}

platform darwin {
    if {${os.major} < 11} {

        # versions > 17 do not presently compile on systems prior to 10.7
        version             17.1.6 ;    revision 2
        checksums           rmd160  43a9b758462316ad344ccdccf72d6d0ce295620e \
                            sha256  0686deadde1f126b20aa67e47e8c50502043eee4ecdf60d5009ffda3cebfee50
#                             size    9868932

        # this option does nothing in mesa 17.x and generates warnings
        configure.args-delete --enable-autotools

        # overwrite previous patchfiles, and then add as needed below
        patchfiles \
            mesa17-0001-glxcmds-Fix-a-typo-in-the-__APPLE__-codepath.patch \
            mesa17-0002-glext.h-Add-missing-include-of-stddef.h-for-ptrdiff_.patch \
            mesa17-0003-applegl-Provide-requirements-of-_SET_DrawBuffers.patch \
            mesa17-0004-mesa-Deal-with-size-differences-between-GLuint-and-G.patch

        # https://bugs.freedesktop.org/show_bug.cgi?id=89088
        configure.env-append INDENT=cat

        # not needed if legacysupport is used
        # patchfiles-append static-strndup.patch
    }

    if {${os.major} < 10} {
        # https://trac.macports.org/ticket/52811
        patchfiles-append patch-include-GL-mesa_glinterop_h.diff
    }

    if {${os.major} < 11} {
        # See https://trac.macports.org/ticket/54643
        if {[string match *meson* ${configure.cmd}]} {
            patchfiles-append \
                    patch-disable-glx_tls.diff
        } else {
            configure.args-append \
                    --disable-glx-tls
        }
    }

    if {${os.major} < 14} {
        # See https://trac.macports.org/ticket/54638
        # See https://trac.macports.org/ticket/54643
        # disk_cache uses the fstatat() function
        patchfiles-append disable_shader_cache.patch
        if {[string match *meson* ${configure.cmd}]} {
            configure.args-append \
                    -Dshader-cache=false
        }
    }

    if { ![file exists /usr/include/Xplugin.h] } {
        # Xplugin.h is missing on Tiger
        configure.cppflags-append -I${filespath}/include
    }

    pre-configure {
        if { ![file exists /usr/lib/libXplugin.dylib] } {
            ui_error "Detected a problem with your development environment.  Please work around it by executing:"
            ui_error "sudo ln -s libXplugin.1.dylib /usr/lib/libXplugin.dylib"
            return -code error "missing libXplugin.dylib"
        }
    }
}

if {[string match *gcc* ${configure.compiler}]} {
    # Older gcc fail to do -Werror=missing-prototypes correctly
    # https://trac.macports.org/ticket/46827
    patchfiles-append no-missing-prototypes-error.patch
}

configure.cppflags-delete -I${prefix}/include
configure.cxxflags-append -std=c++11

variant python27 description {Use python 2.7} {
    depends_build-append \
        port:py27-libxml2
    configure.env-append \
        PYTHON2="${prefix}/bin/python2.7"
}

if {![variant_isset python27]} {
    default_variants-append +python27
}

platform darwin {
    variant egl description {enable EGL support} {}
    if {[variant_isset egl]} {
        depends_lib-append  port:xorg-libxshmfence
        if {[string match *meson* ${configure.cmd}]} {
            configure.args-replace \
                            -Degl=false \
                            -Degl=true
            configure.args-replace \
                            -Dgallium-drivers= \
                            -Dgallium-drivers=swrast
        } else {
            configure.args-replace \
                            --disable-egl \
                            --enable-egl
            configure.args-replace \
                            --with-gallium-drivers= \
                            --with-gallium-drivers=swrast
        }
        patchfiles-append   patch-support-egl_dri2.diff
    }

    variant llvm64bit requires universal description {The +llvm and +opencl variants are effective for the 64bit components of universal builds only} {}
# doesn't work (yet?)
#     variant opencl requires egl description {enable OpenCL (requires a +llvm variant)} {}
} else {
    variant opencl description {enable OpenCL (requires a +llvm variant)} {}
}

    set lldversions {3.8 3.9 4.0 5.0 6.0 8.0 9.0}
    set llvariant ""
    foreach ldv ${lldversions} {
        set llv [join [lrange [split ${ldv} .] 0 1] ""]
        set conflist ""
        foreach v ${lldversions} {
            if {${v} ne ${ldv}} {
                set v [join [lrange [split ${v} .] 0 1] ""]
                set conflist "${conflist} llvm${v}"
            }
        }
        variant llvm${llv} requires egl conflicts ${conflist} description "Use LLVM/Clang ${ldv} for the \"accelerated\" Gallium swrast driver" {}
        if {[variant_isset llvm${llv}]} {
            set llvariant llvm${llv}
        }
    }
#     if {${llvariant} eq "" && ![variant_isset universal]} {
#         default_variants \
#                     +llvm40
#     }
    foreach ldv ${lldversions} {
        set llv [join [lrange [split ${ldv} .] 0 1] ""]
        if {[variant_isset llvm${llv}]} {
            if {![variant_isset llvm64bit]} {
                # LLVMPipe links against a static library
                depends_build-append \
                    port:llvm-${ldv} port:clang-${ldv}
            } else {
                # This is a hack; build (and runtime) dependencies are agnostic of the +universal variant
                # *if depends_skip_archcheck is also set* and
                # so the only way to register some kind of dependency on the required LLVM ports
                # without forcing them to be installed +universal too.
                depends_build-append \
                    port:llvm-${ldv} port:clang-${ldv}
                depends_skip_archcheck-append \
                    llvm-${ldv} clang-${ldv}
            }
            if {[string match *meson* ${configure.cmd}]} {
                if {[variant_isset llvm64bit]} {
                    lappend merger_configure_args(x86_64) \
                        -Dllvm=true
                    lappend merger_configure_env(x86_64) \
                        PATH=${prefix}/libexec/llvm-${ldv}/bin:$env(PATH)
                    lappend merger_configure_args(arm64) \
                        -Dllvm=true
                    lappend merger_configure_env(arm64) \
                        PATH=${prefix}/libexec/llvm-${ldv}/bin:$env(PATH)
                } else {
                    configure.args-append \
                        -Dllvm=true
                    configure.env-append \
                        PATH=${prefix}/libexec/llvm-${ldv}/bin:$env(PATH)
                }
            } else {
                if {[variant_isset llvm64bit]} {
                    lappend merger_configure_args(x86_64) \
                        --enable-llvm \
                        --with-llvm-prefix=${prefix}/libexec/llvm-${ldv}
                    lappend merger_configure_args(arm64) \
                        --enable-llvm \
                        --with-llvm-prefix=${prefix}/libexec/llvm-${ldv}
                } else {
                    configure.args-append \
                        --enable-llvm \
                        --with-llvm-prefix=${prefix}/libexec/llvm-${ldv}
                }
            }
        }
    }

if {[variant_exists opencl] && [variant_isset opencl]} {
    if {${llvariant} ne ""} {
        depends_build-append port:libclc
        depends_lib-append  port:libelf
        # libclc provides headers only
        depends_skip_archcheck-append libclc
        if {[string match *meson* ${configure.cmd}]} {
            if {[variant_isset llvm64bit]} {
                lappend merger_configure_args(x86_64) \
                    -Dgallium-opencl=standalone
                lappend merger_configure_args(arm64) \
                    -Dgallium-opencl=standalone
            } else {
                configure.args-append \
                    -Dgallium-opencl=standalone
            }
        } else {
            if {[variant_isset llvm64bit]} {
                lappend merger_configure_args(x86_64) \
                    --enable-opencl
                lappend merger_configure_args(arm64) \
                    --enable-opencl
            } else {
                configure.args-append \
                    --enable-opencl
            }
        }
    } else {
        ui_warn "+opencl needs a +llvmXY variant to be set!"
    }
}

variant osmesa description {enable OSMesa library} {}
if {[variant_isset osmesa]} {
    if {[string match *meson* ${configure.cmd}]} {
        if {${llvariant} eq ""} {
            # no LLVM variant, so OSMesa will use softpipe instead of llvmpipe
            # NB: this also happens for the 32bit component(s) of +llvmXY+universal+llvm64bit
            configure.args-replace \
                            -Dgallium-drivers= \
                            -Dgallium-drivers=swrast
        }
        configure.args-replace \
                    -Dosmesa=none \
                    -Dosmesa=gallium
    } else {
        configure.args-replace \
                    --disable-osmesa \
                    --enable-osmesa
    }
}
default_variants-append +osmesa

#variant openvg description {enable support for OpenVG API} {
#    configure.args-delete --disable-egl --disable-openvg
#    configure.args-append --enable-egl --enable-openvg
#}
#default_variants-append +openvg

# the destroot env. should also contain these 2 (at least for building through meson):
destroot.env-append "AR=${configure.ar}"
destroot.env-append "NM=${configure.nm}"

if {[string match *meson* ${configure.cmd}]} {
    post-destroot {
        # align the lib versioning with the autoconf build (the changes making this possible are in patch-meson.diff)
        # not required if you accept to require a revbump in all dependents
        file rename ${destroot}${prefix}/lib/libGL.4.dylib ${destroot}${prefix}/lib/libGL.1.dylib
        file delete -force  ${destroot}${prefix}/lib/libGL.dylib
        ln -s libGL.1.dylib  ${destroot}${prefix}/lib/libGL.dylib
        if {[variant_isset egl]} {
            file rename ${destroot}${prefix}/lib/libEGL.2.dylib ${destroot}${prefix}/lib/libEGL.1.dylib
            file delete -force  ${destroot}${prefix}/lib/libEGL.dylib
            ln -s libEGL.1.dylib  ${destroot}${prefix}/lib/libEGL.dylib
        }

        # fix some rpath & ID issues
        set libFixees {lib/libGL.1.dylib}
        if {[variant_isset egl]} {
            lappend libFixees lib/dri/swrast_dri.so lib/libEGL.1.dylib lib/libGLESv1_CM.1.dylib lib/libGLESv2.2.dylib
        }
        if {[variant_isset osmesa]} {
            lappend libFixees lib/libOSMesa.8.dylib
        }
        foreach L ${libFixees} {
            system -W ${destroot}${prefix} "install_name_tool -change @rpath/libglapi.0.dylib ${prefix}/lib/libglapi.0.dylib ${L}"
        }
        # also fix the ID of lib/libglapi.dylib
        lappend libFixees lib/libglapi.0.dylib
        foreach L ${libFixees} {
            system -W ${destroot}${prefix} "install_name_tool -id ${prefix}/${L} ${L}"
        }
    }
}

if {[string match *meson* ${configure.cmd}]} {
    build.post_args-append     -k 0
} else {
#     pre-build {
#         build.env-append "MAKEFLAGS=LIBTOOL=rlibtool"
#         build.env-append "SLIBTOOL_AR=${configure.ar}"
#         build.env-append "SLIBTOOL_NM=${configure.nm}"
#         build.env-append "SLIBTOOL_RANLIB=${configure.ranlib}"
#     }
    build.post_args-append     -k
}

livecheck.type  regex
livecheck.url   ${homepage}
livecheck.regex {relnotes/([0-9.]+)\.html}


if {[string match *meson* ${configure.cmd}]} {
    meson.save_configure_cmd "log too"
} else {
    configure.post_args-append "|& tee -a ${workpath}/.macports.${subport}.configure.log'"
    pre-configure {
        set cmd [join "${configure.cmd} ${configure.pre_args} ${configure.args}"]
        configure.pre_args-prepend "-cf '${configure.cmd} "
        configure.cmd "/bin/csh"
        ui_debug "configure command set to `${configure.cmd} ${configure.pre_args} ${configure.args} ${configure.post_args}`"
        system "echo '## ${cmd}' > ${workpath}/.macports.${subport}.configure.log"
    }
    post-configure {
        if {![catch {set fd [open "${workpath}/.macports.${subport}.configure.cmd" "w"]} err]} {
            foreach var [array names ::env] {
                puts ${fd} "${var}=$::env(${var})"
            }
            puts ${fd} "[join [lrange [split ${configure.env} " "] 0 end] "\n"]\n"
            puts ${fd} "cd ${worksrcpath}"
            if {[info exists configure.post_args]} {
                puts ${fd} "${configure.cmd} ${configure.pre_args} ${configure.args} ${configure.post_args}"
            } else {
                puts ${fd} "${configure.cmd} ${configure.pre_args} ${configure.args}"
            }
        } else {
            if {[info exists fd]} {
                unset fd
            }
        }
    }
}
