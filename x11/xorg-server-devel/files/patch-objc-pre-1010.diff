diff --git a/hw/xquartz/NSUserDefaults+XQuartzDefaults.m b/hw/xquartz/NSUserDefaults+XQuartzDefaults.m
index bd5dd2305..4c7f3c441 100644
--- a/hw/xquartz/NSUserDefaults+XQuartzDefaults.m
+++ b/hw/xquartz/NSUserDefaults+XQuartzDefaults.m
@@ -53,7 +57,7 @@ NSString * const XQuartzPrefKeySyncPrimaryOnSelect = @"sync_primary_on_select";
         NSString * const defaultsDomain = @".GlobalPreferences";
         defaults = [[[NSUserDefaults alloc] initWithSuiteName:defaultsDomain] retain];
 
-        NSDictionary<NSString *, id> * const defaultDefaultsDict = @{
+        NSDictionary * const defaultDefaultsDict = @{
             @"AppleSpacesSwitchOnActivate" : @(YES),
         };
 
@@ -72,7 +76,7 @@ NSString * const XQuartzPrefKeySyncPrimaryOnSelect = @"sync_primary_on_select";
         NSString * const defaultsDomain = @"com.apple.dock";
         defaults = [[[NSUserDefaults alloc] initWithSuiteName:defaultsDomain] retain];
 
-        NSDictionary<NSString *, id> * const defaultDefaultsDict = @{
+        NSDictionary * const defaultDefaultsDict = @{
             @"workspaces" : @(NO),
         };
 
@@ -106,7 +110,7 @@ NSString * const XQuartzPrefKeySyncPrimaryOnSelect = @"sync_primary_on_select";
             defaultWindowItemModifiers = defaultWindowItemModifiersLocalized;
         }
 
-        NSDictionary<NSString *, id> * const defaultDefaultsDict = @{
+        NSDictionary * const defaultDefaultsDict = @{
             XQuartzPrefKeyAppsMenu : defaultAppsMenu,
             XQuartzPrefKeyFakeButtons : @(NO),
             // XQuartzPrefKeyFakeButton2 nil default
diff --git a/hw/xquartz/X11Application.m b/hw/xquartz/X11Application.m
index ab126f164..70d61b351 100644
--- a/hw/xquartz/X11Application.m
+++ b/hw/xquartz/X11Application.m
@@ -567,10 +567,10 @@ X11ApplicationSetWindowMenu(int nitems, const char **items,
                             const char *shortcuts)
 {
     @autoreleasepool {
-        NSMutableArray <NSArray <NSString *> *> * const allMenuItems = [NSMutableArray array];
+        NSMutableArray * const allMenuItems = [NSMutableArray array];
 
         for (int i = 0; i < nitems; i++) {
-            NSMutableArray <NSString *> * const menuItem = [NSMutableArray array];
+            NSMutableArray * const menuItem = [NSMutableArray array];
             [menuItem addObject:@(items[i])];
 
             if (shortcuts[i] == 0) {
@@ -774,10 +774,13 @@ X11ApplicationMain(int argc, char **argv, char **envp)
         QuartzModeBundleInit();
 
         /* Calculate the height of the menubar so we can avoid it. */
-        aquaMenuBarHeight = NSApp.mainMenu.menuBarHeight;
+        aquaMenuBarHeight = [[NSApp mainMenu] menuBarHeight];
+        NSLog(@"aquaMenuBarHeight according to [NSApp mainMenu]: %d", aquaMenuBarHeight);
         if (!aquaMenuBarHeight) {
             NSScreen* primaryScreen = NSScreen.screens[0];
             aquaMenuBarHeight = NSHeight(primaryScreen.frame) - NSMaxY(primaryScreen.visibleFrame);
+            NSLog(@"aquaMenuBarHeight calculated for primaryScreen %@ with height=%g and visibleFrameHeight=%g : %d",
+                primaryScreen, NSHeight([primaryScreen frame]), NSMaxY([primaryScreen visibleFrame]), aquaMenuBarHeight);
         }
 
         eventTranslationQueue = dispatch_queue_create(BUNDLE_ID_PREFIX ".X11.NSEventsToX11EventsQueue", NULL);
diff --git a/hw/xquartz/X11Controller.m b/hw/xquartz/X11Controller.m
index e21aed0d3..514999021 100644
--- a/hw/xquartz/X11Controller.m
+++ b/hw/xquartz/X11Controller.m
@@ -62,8 +62,8 @@ extern char *bundle_id_prefix;
 @property (nonatomic, readwrite, strong) NSMenuItem *check_for_updates_item; // Programatically enabled
 #endif
 
-@property (nonatomic, readwrite, strong) NSArray <NSArray <NSString *> *> *apps;
-@property (nonatomic, readwrite, strong) NSMutableArray <NSMutableArray <NSString *> *> *table_apps;
+@property (nonatomic, readwrite, strong) NSArray *apps;
+@property (nonatomic, readwrite, strong) NSMutableArray *table_apps;
 @property (nonatomic, readwrite, assign) NSInteger windows_menu_nitems;
 @property (nonatomic, readwrite, assign) int checked_window_item;
 @property (nonatomic, readwrite, assign) x_list *pending_apps;
@@ -155,10 +155,10 @@ extern char *bundle_id_prefix;
     self.apps = nil;
 }
 
-- (void) prepend_apps_item:(NSArray <NSArray <NSString *> *> *)list index:(int)i menu:(NSMenu *)menu
+- (void) prepend_apps_item:(NSArray *)list index:(int)i menu:(NSMenu *)menu
 {
     NSString *title, *shortcut = @"";
-    NSArray <NSString *> *group;
+    NSArray *group;
     NSMenuItem *item;
 
     group = [list objectAtIndex:i];
@@ -182,7 +182,7 @@ extern char *bundle_id_prefix;
     [item setTag:i + 1];                  /* can't be zero, so add one */
 }
 
-- (void) install_apps_menu:(NSArray <NSArray <NSString *> *> *)list
+- (void) install_apps_menu:(NSArray *)list
 {
     NSMenu *menu;
     int i, count;
@@ -206,7 +206,7 @@ extern char *bundle_id_prefix;
     self.apps = list;
 }
 
-- (void) set_window_menu:(NSArray <NSArray <NSString *> *> *)list
+- (void) set_window_menu:(NSArray *)list
 {
     NSMenu * const menu = X11App.windowsMenu;
     NSMenu * const dock_menu = self.dock_menu;
@@ -302,7 +302,7 @@ extern char *bundle_id_prefix;
     self.checked_window_item = n;
 }
 
-- (void) set_apps_menu:(NSArray <NSArray <NSString *> *> *)list
+- (void) set_apps_menu:(NSArray *)list
 {
     [self remove_apps_menu];
     [self install_apps_menu:list];
@@ -448,7 +448,7 @@ extern char *bundle_id_prefix;
 {
     int tag;
     NSString *item;
-    NSArray <NSArray <NSString *> *> * const apps = self.apps;
+    NSArray * const apps = self.apps;
 
     tag = [sender tag] - 1;
     if (apps == nil || tag < 0 || tag >= [apps count])
@@ -462,15 +462,15 @@ extern char *bundle_id_prefix;
 - (IBAction) apps_table_show:sender
 {
     NSArray *columns;
-    NSMutableArray <NSMutableArray <NSString *> *> * const oldapps = self.table_apps;
+    NSMutableArray * const oldapps = self.table_apps;
     NSTableView * const apps_table = self.apps_table;
 
-    NSMutableArray <NSMutableArray <NSString *> *> * const table_apps = [[NSMutableArray alloc] initWithCapacity:1];
+    NSMutableArray * const table_apps = [[NSMutableArray alloc] initWithCapacity:1];
     self.table_apps = table_apps;
 
-    NSArray <NSArray <NSString *> *> * const apps = self.apps;
+    NSArray * const apps = self.apps;
     if (apps != nil) {
-        for (NSArray <NSString *> * row in apps) {
+        for (NSArray * row in apps) {
             [table_apps addObject:row.mutableCopy];
         }
     }
@@ -492,7 +492,7 @@ extern char *bundle_id_prefix;
 
 - (IBAction) apps_table_done:sender
 {
-    NSMutableArray <NSMutableArray <NSString *> *> * const table_apps = self.table_apps;
+    NSMutableArray * const table_apps = self.table_apps;
     NSTableView * const apps_table = self.apps_table;
     [apps_table deselectAll:sender];    /* flush edits? */
 
@@ -510,7 +510,7 @@ extern char *bundle_id_prefix;
 - (IBAction) apps_table_new:sender
 {
     NSMutableArray *item;
-    NSMutableArray <NSMutableArray <NSString *> *> * const table_apps = self.table_apps;
+    NSMutableArray * const table_apps = self.table_apps;
     NSTableView * const apps_table = self.apps_table;
 
     int row = [apps_table selectedRow], i;
@@ -539,10 +539,10 @@ extern char *bundle_id_prefix;
 
 - (IBAction) apps_table_duplicate:sender
 {
-    NSMutableArray <NSMutableArray <NSString *> *> * const table_apps = self.table_apps;
+    NSMutableArray * const table_apps = self.table_apps;
     NSTableView * const apps_table = self.apps_table;
     int row = [apps_table selectedRow], i;
-    NSMutableArray <NSString *> *item;
+    NSMutableArray *item;
 
     if (row < 0) {
         [self apps_table_new:sender];
@@ -565,7 +565,7 @@ extern char *bundle_id_prefix;
 
 - (IBAction) apps_table_delete:sender
 {
-    NSMutableArray <NSMutableArray <NSString *> *> * const table_apps = self.table_apps;
+    NSMutableArray * const table_apps = self.table_apps;
     NSTableView * const apps_table = self.apps_table;
     int row = [apps_table selectedRow];
 
@@ -589,7 +589,7 @@ extern char *bundle_id_prefix;
 
 - (NSInteger) numberOfRowsInTableView:(NSTableView *)tableView
 {
-    NSMutableArray <NSMutableArray <NSString *> *> * const table_apps = self.table_apps;
+    NSMutableArray * const table_apps = self.table_apps;
     if (table_apps == nil) return 0;
 
     return [table_apps count];
@@ -598,7 +598,7 @@ extern char *bundle_id_prefix;
 - (id)             tableView:(NSTableView *)tableView
    objectValueForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row
 {
-    NSMutableArray <NSMutableArray <NSString *> *> * const table_apps = self.table_apps;
+    NSMutableArray * const table_apps = self.table_apps;
     NSArray *item;
     int col;
 
@@ -616,8 +616,8 @@ extern char *bundle_id_prefix;
 - (void) tableView:(NSTableView *)tableView setObjectValue:(id)object
     forTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row
 {
-    NSMutableArray <NSMutableArray <NSString *> *> * const table_apps = self.table_apps;
-    NSMutableArray <NSString *> *item;
+    NSMutableArray * const table_apps = self.table_apps;
+    NSMutableArray *item;
     int col;
 
     if (table_apps == nil) return;
