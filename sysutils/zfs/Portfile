# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
# PortGroup           LTO 1.0

name                zfs
categories          sysutils filesystems

description         OpenZFS on OS X
long_description    OpenZFS on OS X (O3X) brings OpenZFS features to Apple's OS X.
homepage            http://openzfsonosx.org/
license             CDDL

maintainers         gmail.com:rjvbertin openmaintainer

platforms           darwin
installs_libs       yes

universal_variant   no

subport ${name}-devel {
    description     ${description} This port follows git/master.
    long_description \
                    ${long_description} This port follows git/master.
    if {${os.major} >= 14} {
        variant look_ma_no_sip description \
            "This port won't work without disabling a basic security feature: see `port info ${subport} +look_ma_no_sip`" {}
        if {[variant_isset look_ma_no_sip]} {
            long_description-append \nNB NB NB\n\
                "This port installs unsigned kexts, and those will not load without disabling SIP. You do so at your own risk."
        } else {
            pre-fetch {
                ui_error "This port won't build by default on OS X 10.10 and higher; see `port variants ${subport}`"
                return -code error "See `port variants ${subport}`"
            }
        }
    }
}

# ensure we can load from ${prefix}/Library/Extensions
patchfiles-append   patch-kextloading.diff 

if {${subport} eq "${name}-devel"} {
    conflicts       ${name}
    version         1.8.1.58
    epoch           1
#     # spl-1.7.3-12-g9fb091e but is spl-1.8.1-4!
#     set spl_commit  9fb091e0844d686959ad8d563af71e1643ac5c56
    # v1.8.1-13-gcb56533
    set spl_commit  cb5653346d3e4e923244c1dbff7291df49d4d46d
#     # v1.8.1-27-gd48d8749f
#     set zfs_commit  d48d8749f240018c11a197bc083ff43efa9b2d3b
    # v1.8.1-58-g29e8f741b
    set zfs_commit  29e8f741bb37ac82cffe3a127dc6cd2825232270
    master_sites    https://github.com/openzfsonosx/spl/tarball/${spl_commit}/:distspl \
                    https://github.com/openzfsonosx/zfs/tarball/${zfs_commit}:distzfs
    distfiles       spl-${spl_commit}${extract.suffix}:distspl \
                    zfs-${zfs_commit}${extract.suffix}:distzfs
    checksums       spl-${spl_commit}${extract.suffix} \
                    rmd160  d1c9a92b656c234f4e3e5f7493727518bb476f54 \
                    sha256  defb58334300797a2d9116f0428f54f63edc2ebdac3ac40d83a8008d1df40dea \
                    zfs-${zfs_commit}${extract.suffix} \
                    rmd160  69e98bd2cb6b869ceef27f7e97df7e22edfb7909 \
                    sha256  b62436bd5bd61dc9fbe429c8bc1a2d12203f2bf103b59686dc2e64275e49b812

    patchfiles-append \
                    patch-dont-invoke-launchctl.diff \
                    patch-libblkid-test.diff \
                    patch-build-on-109.diff

    post-extract {
        # correct the directory names. We know we'll only have 1 of each, so we can use glob
        foreach spl [glob ${workpath}/openzfsonosx-spl*] {
            file rename ${spl} ${workpath}/spl-${spl_commit}
        }
        foreach zfs [glob ${workpath}/openzfsonosx-zfs*] {
            file rename ${zfs} ${workpath}/zfs-${zfs_commit}
        }
    }

    depends_build-append \
                    port:coreutils
} else {
    conflicts       ${name}-devel
    version         1.8.1
    if {[vercmp ${version} 1.8.1] == 0} {
        set dmg_version 1.8.2
    } else {
        set dmg_version ${version}
    }
    set spl_commit  spl-${version}
    set zfs_commit  zfs-${version}

    # Code borrowed from port:osxfuse, except that we make do with the single unsigned kext
    # warning on OS X 10.9.
    # Use the published signed kext for OS 10.9 (Darwin 13) and later.
    # Don't even fetch and extract the dmg unnecessarily, since the commands don't
    # work on some earlier OS versions.
    if {${os.major} >= 13} {
        set use_signed_kext    yes
    } else {
        # not currently available for this version?
        set use_signed_kext    no
    }
    set extdir ""

    master_sites    https://github.com/openzfsonosx/spl/archive/:distspl \
                    https://github.com/openzfsonosx/zfs/archive/:distzfs
    distfiles       spl-${version}${extract.suffix}:distspl \
                    zfs-${version}${extract.suffix}:distzfs
    checksums       spl-${version}${extract.suffix} \
                    rmd160  21eab30802af1d9732f88cebfb0cd31339e300f1 \
                    sha256  502371ba9c0ad624acf8a7ae68f86f5f9fae1126c9a1c3c48ce5c7cc2c8cba9c \
                    zfs-${version}${extract.suffix} \
                    rmd160  c9a8f6b96ec4b7af1acf78266d12a5826e212555 \
                    sha256  39216008f096f043a751cd2a36becf99c4fbb2d1ec844b58ee1f93d9bdd73a0f
    if {${use_signed_kext}} {
        master_sites-append \
                    https://openzfsonosx.org/w/images/f/fb/:officialDmg
        distfiles-append \
                    OpenZFS_on_OS_X_${dmg_version}.dmg:officialDmg
        checksums-append \
                    OpenZFS_on_OS_X_${dmg_version}.dmg \
                    rmd160  7c9fe204e30d83cdef2ee890da279413cf7b7692 \
                    sha256  d1f23704127e22ead62972ba668d3dfce0718b9f7ee1092dec014244eff73f61
        # extract phase will just extract the dmg; post-extract will expand
        # the tarballs
        use_dmg yes
        extract.only OpenZFS_on_OS_X_${dmg_version}.dmg

        post-extract {
            ui_msg "--->    Extracting kernel extensions from the official OpenZFS_on_OS_X_${dmg_version}.dmg install image"
            switch ${os.major} {
                # 10.9
                "13" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} Mavericks.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs109.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs109.pkg ${workpath}/pkg/official.pkg
                }
                # 10.10
                "14" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} Yosemite.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1010.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1010.pkg ${workpath}/pkg/official.pkg
                }
                # 10.11
                "15" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} El Capitan.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1011.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1011.pkg ${workpath}/pkg/official.pkg
                }
                # 10.12
                "16" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} Sierra.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1012.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1012.pkg ${workpath}/pkg/official.pkg
                }
                # 10.13
                "17" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} High Sierra.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1013.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1013.pkg ${workpath}/pkg/official.pkg
                }
                # 10.14
                "18" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} Mojave.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1014.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1014.pkg ${workpath}/pkg/official.pkg
                }
                default {
                    ui_error "Darwin ${os.major}.${os.minor} is an as-yet unsupport OS X version"
                    return -code error "Unsupported OS X version"
                }
            }

            # Extract the source tarballs
            foreach tarball {spl zfs} {
                system -W ${workpath} "tar -xf ${distpath}/${tarball}-${version}.tar.gz"
            }
            # cleanup
            file delete -force ${workpath}/${name}-${version}
        }
        post-destroot {
            # replace our home-built kexts with the signed ones from the official dmg
            file delete -force ${destroot}${prefix}/Library/Extensions/spl.kext
            file delete -force ${destroot}${prefix}/Library/Extensions/zfs.kext
            system "ditto --rsrc ${workpath}/pkg/official.pkg/Library/Extensions/spl.kext ${destroot}${prefix}/Library/Extensions/spl.kext"
            system "ditto --rsrc ${workpath}/pkg/official.pkg/Library/Extensions/zfs.kext ${destroot}${prefix}/Library/Extensions/zfs.kext"
            system -W ${destroot}${prefix}/Library/Extensions/ "chown -R root:wheel spl.kext zfs.kext"
        }
    }
    patchfiles-append \
                    patch-dont-invoke-launchctl.diff \
}

post-extract {
    file delete -force zfs-${version}
}

use_configure       yes
patch.pre_args      -Np1

depends_build-append \
                    port:autoconf \
                    port:automake \
                    port:libtool

depends_lib-append  port:zlib

configure.dir       ${workpath}/zfs-${zfs_commit}
build.dir           ${configure.dir}
patch.dir           ${configure.dir}

# build.env-append            "MAKEFLAGS=LIBTOOL=${prefix}/bin/rlibtool"
# destroot.env-append         "MAKEFLAGS=LIBTOOL=${prefix}/bin/rlibtool"
# if {[info exists configure.ar]} {
#     build.env-append        SLIBTOOL_AR="${configure.ar}" \
#                             SLIBTOOL_RANLIB="${configure.ranlib}"
#     destroot.env-append     SLIBTOOL_AR="${configure.ar}" \
#                             SLIBTOOL_RANLIB="${configure.ranlib}"
# }

pre-configure {
    if {![file exists ${workpath}/spl-${spl_commit}/configure]} {
        ui_msg "--->    Preparing SPL"
        system -W ${workpath}/spl-${spl_commit} "./autogen.sh"
    }
    if {![file exists ${workpath}/zfs-${zfs_commit}/configure]} {
        ui_msg "--->    Preparing ZFS"
        system -W ${workpath}/zfs-${zfs_commit} "./autogen.sh"
    }
#     reinplace "s|`mktemp`|`mktemp ./zfsdevXXXXXX`|g" ${workpath}/zfs-${zfs_commit}/configure
}

if {"${os.major}" <= 13 && ${configure.sdkroot} eq ""} {
    # The ZFS code contains conditional code that uses functions available only
    # in 10.10+. For detection to work correctly, 10.9 and earlier must build using
    # their dedicated SDKs.
    set configure.sdkroot \
                    "$developer_dir/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${configure.sdk_version}.sdk"
}

configure.ldflags-append \
                    ${configure.optflags} -mmacosx-version-min=${configure.sdk_version}

configure.args-append \
                    --disable-dependency-tracking \
                    --with-kernel-modprefix=${prefix}/Library/Extensions
configure.cflags-append\
                    -mmacosx-version-min=${configure.sdk_version}
configure.cxxflags-append\
                    -mmacosx-version-min=${configure.sdk_version}

pre-configure {
    ui_msg "--->    Configuring SPL"
    system -W ${workpath}/spl-${spl_commit} "${configure.cmd} ${configure.pre_args} ${configure.args}"

    ui_msg "--->    Configuring ZFS"
    configure.args-append \
                    --with-spl=${workpath}/spl-${spl_commit}
}

build.args-append   V=1

pre-build {
    ui_msg "--->    Building SPL"
    system -W ${workpath}/spl-${spl_commit} "${build.cmd} ${build.pre_args} ${build.args}"

    ui_msg "--->    Building ZFS"
}

destroot.args-append \
                    V=1

pre-destroot {
    ui_msg "--->    Staging SPL into destroot"
    system -W ${workpath}/spl-${spl_commit} "${destroot.cmd} ${destroot.pre_args} ${destroot.args} ${destroot.post_args}"

    ui_msg "--->    Staging ZFS into destroot"
}

post-destroot {
    foreach d [glob -nocomplain ${destroot}/Library/*] {
        file rename ${d} ${destroot}${prefix}/Library/
    }
    xinstall -m 755 ${filespath}/zfs_unload_kexts.sh ${destroot}${prefix}/sbin/zfs_unload_kexts.sh
    xinstall -m 755 ${filespath}/zfs_kexts_loaded.sh ${destroot}${prefix}/sbin/zfs_kexts_loaded.sh
}

# keep this in sync with the list in etc/launchd/daemons/launchd-daemons.am
# but exclude the import-all plist as well as the zed plist which causes the
# kexts to load.
set launchddaemon_DATA {org.openzfsonosx.zconfigd.plist \
                        org.openzfsonosx.InvariantDisks.plist}

pre-deactivate {
    if {[catch {exec ${prefix}/sbin/zfs_kexts_loaded.sh} result]} {
        ui_debug "ZFS and SPL kexts aren't loaded: allowing deactivation"
        foreach p ${launchddaemon_DATA} {
            # unload the plists just as the standard install process does
            # (keep in sync whenever patchfile:patch-dont-invoke-launchctl.diff needs refactoring!)
            set pl "${prefix}/Library/LaunchDaemons/${p}"
            if {[file exists ${pl}]} {
                if {[catch {system "launchctl unload -F ${pl}"} err]} {
                    ui_warn "error unloading ${pl}: ${err}"
                }
            }
        }
    } else {
        ui_error ${result}
        ui_error "Unmount all ZFS pools and then invoke zfs_unload_kexts.sh before deactivating port:${subport}"
        # Being able to use `return -code error` here would be nice
        set thePid [pid]
        # but the only way to interrupt deactivation ATM is to send ourselves a SIGKILL
        system "kill -9 ${thePid}"
    }
}

post-activate {
    # do a diag run of the kext we just installed, but catch any errors!
    if {[catch {exec kextutil -n -print-diagnostics -v 6 \
        -d ${prefix}/Library/Extensions/spl.kext ${prefix}/Library/Extensions/zfs.kext} result]} {
        ui_msg "Checking zfs.kext:\n${result}"
        foreach p ${launchddaemon_DATA} {
            # load the plists just as the standard install process does
            # (keep in sync whenever patchfile:patch-dont-invoke-launchctl.diff needs refactoring!)
            set pl "${prefix}/Library/LaunchDaemons/${p}"
            if {[file exists ${pl}]} {
                if {[catch {system "launchctl load -wF ${pl}"} err]} {
                    ui_warn "error loading ${pl}: ${err}"
                } else {
                    ui_msg "Loaded ${pl} (${err})"
                }
            }
        }
    } else {
        ui_error "Error checking zfs.kext:\n${result}"
    }
}

notes-append "You can test this port as follows: \n\
# create a file for a 128m disk image: \n\
dd if=/dev/zero of=/path/to/tank.pool.bin bs=1024k count=128 \n\
# create a ZFS pool called 'tank' in that disk image (ashift=12 is for modern disk with 4k blocks) \n\
# and the normalisation option is to avoid issues displaying files with non-ASCII names: \n\
zpool create -o ashift=12 -O normalization=formD tank /path/to/tank.pool.bin \n\
zpool status -v \n\
# there should now be a new volume: \n\
df -H \n\
ls -la /Volumes/tank \n\
# get the pool's properties: \n\
zpool get all tank \n\
# get the pool's main dataset's properties: \n\
zfs get all tank \n\
# set lz4 compression and 2-way, single-device redundancy:\n\
zfs set compression=lz4 tank \n\
zfs set copies=2 tank \n\
# export (unmount) the pool and all its datasets: \n\
zpool export tank \n\
# to import the pool once more:\n\
zpool import -d /path/to tank \n\
# to see all available pools on the connected storage devices:\n\
zpool import -d /dev \n\
\n\
See ${homepage} for more information about ZFS and its OS X implementation.
"

livecheck.url   http://openzfsonosx.org/wiki/Downloads
livecheck.regex OpenZFS_on_OS_X_(\\d+(\\.\\d+)+)
