# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
set LTO.allow_ThinLTO no
PortGroup           LTO 1.0
PortGroup           save_configure_cmd 1.0

name                zfs
categories          sysutils filesystems

description         OpenZFS on OS X
long_description    OpenZFS on OS X (O3X) brings OpenZFS features to Apple's OS X.
homepage            http://openzfsonosx.org/
license             CDDL

maintainers         gmail.com:rjvbertin openmaintainer

platforms           darwin
installs_libs       yes

universal_variant   no

subport ${name}-devel {
    description     ${description} This port follows git/master.
    long_description \
                    ${long_description} This port follows git/master.
    if {${os.major} >= 14} {
        variant look_ma_no_sip description \
            "This port won't work without disabling a basic security feature: see `port info ${subport} +look_ma_no_sip`" {}
        if {[variant_isset look_ma_no_sip]} {
            long_description-append \nNB NB NB\n\
                "This port installs unsigned kexts, and those will not load without disabling SIP. You do so at your own risk."
        } else {
            pre-fetch {
                ui_error "This port won't build by default on OS X 10.10 and higher; see `port variants ${subport}`"
                return -code error "See `port variants ${subport}`"
            }
        }
    }
}

variant System description {Install the kext in /System/Library/Extensions} {}
if {[variant_isset System]} {
    set libdir "/System/Library"
    destroot.violate_mtree yes
} else {
    set libdir "${prefix}/Library"
}

if {${subport} eq "${name}-devel"} {
    conflicts       ${name}
    epoch           1
# after `git tag v2.1.6  -m "release 2.1.6?"  a61f1e8028022ccad5f861f0083a5c3bb337f1d2`
#     v2.1.6-2-gb803d548a8c1f3b4bc3755fd7b8c14ca0571ff71
    set zfs_commit  b803d548a8c1f3b4bc3755fd7b8c14ca0571ff71
    github.setup    openzfsonosx openzfs ${zfs_commit}
    fetch.type      git
    version         2.1.6.2

    set PPREFIX     devel/

    distname        openzfs-git
    # set worksrcpath ${workpath}/openzfs-${zfs_commit}

    # ensure we can load from ${prefix}/Library/Extensions and that we always auto-load the kext
    # (as was the case before).
    patchfiles-append \
                    ${PPREFIX}patch-kextloading.diff
    # don't warn about invalid arguments in some thread policy change attemps as
    # they could be due to OS version specifics.
    patchfiles-append \
                    ${PPREFIX}patch-threadpol-warnings.diff
    # define SYSCTL_ULONG if not provided by sysctl.h
    patchfiles-append \
                    ${PPREFIX}patch-sysctl_ulong.diff
    # mute the warnings about thread policy setting failures
    # by not even attempting to set them.
    patchfiles-append \
                    ${PPREFIX}patch-mute-threadpolicy-warning.diff

} else {
    conflicts       ${name}-devel
    set has_dmg no

    set zfs_commit  a3ba8b30c1d2bbef37e0b2bd1753221a2c5a30e3
    github.setup    openzfsonosx openzfs ${zfs_commit}
    version         2.1.0
    set worksrcpath ${workpath}/openzfs-${zfs_commit}

    supported_archs x86_64

    if {[tbool has_dmg]} {
#         set dmg_version ${version}
#         set zfs_commit  zfs-${version}
    }

    set PPREFIX ""

    ## The github mastersite ignore the filename, so we have to download from it after having
    ## fetched the official installer from elsewhere!
    set gh_master_site ${master_sites}

    if {[tbool has_dmg]} {
        ui_warn "This has not been tested since v1.8.1!!"
#         master_sites \
#                     https://openzfsonosx.org/w/images/1/18:officialDmg
#         distfiles \
#                     OpenZFS_on_OS_X_${dmg_version}.dmg:officialDmg
#         checksums \
#                     OpenZFS_on_OS_X_${dmg_version}.dmg \
#                     rmd160  d56320c38de3e1cf1cc5324282679eec399d593b \
#                     sha256  a6b05d29e9ae1f313e642109d18da6d930b1991bcd24c5f91ecc6a64bdc130fc
#         master_sites-append \
#                     gh_master_site
#         checksums-append \
#                         openzfs-${zfs_commit}.tar.gz \
#                         rmd160  xxx \
#                         sha256  yyy
#         # extract phase will just extract the dmg; post-extract will expand
#         # the tarballs
#         use_dmg yes
#         extract.only OpenZFS_on_OS_X_${dmg_version}.dmg
    } else {
        ## No DMG for this version :(
        ## We need to download the OS-specific installeds from 
        ## https://openzfsonosx.org/forum/viewtopic.php?f=20&t=3619
        ## And we'll checksum using just the MD5 signatures listed on that page.
        master_sites \
                    https://openzfsonosx.org/forum/download/file.php?id=
        set dist_pkg_name "OpenZFSonOsX-${version}-darwin${os.major}.pkg"
        distfiles-append \
                    ${dist_pkg_name}
        switch ${os.major} {
            # 10.9
            "13" {
                set pkg_name 351
                checksums \
                    ${dist_pkg_name} \
                    md5  9bf430adacf391ee5dba8600e98eeefe
            }
            # 10.10
            "14" {
                set pkg_name 352
                checksums \
                    ${dist_pkg_name} \
                    md5  301c6438fd9a8e0953217b7b71b6924e
            }
            # 10.11
            "15" {
                set pkg_name 353
                checksums \
                    ${dist_pkg_name} \
                    md5  68abbb11468c6ad1b84ef65e59188cc1
            }
            # 10.12
            "16" {
                set pkg_name 354
                checksums \
                    ${dist_pkg_name} \
                    md5  72764416100939456c97d7449be69003
            }
            # 10.13
            "17" {
                set pkg_name 346
                checksums \
                    ${dist_pkg_name} \
                    md5  7da11f79bd6c1dc5a8eaa3d5c120aea5
            }
            # 10.14
            "18" {
                set pkg_name 345
                checksums \
                    ${dist_pkg_name} \
                    md5  866b0be0c33e9c6cdf0a8cce90e90b32
            }
            # 10.15
            "19" {
                set pkg_name 344
                checksums \
                    ${dist_pkg_name} \
                    md5  c5925e4a362ac3e9a0c403472ea5dd6b
            }
            # 11.0/intel
            "20" {
                set pkg_name 343
                checksums \
                    ${dist_pkg_name} \
                    md5  80bee1c01362372ea3a803fdac56bfaa
            }
            default {
                ui_error "Darwin ${os.major}.${os.minor} is an as-yet unsupport OS X version"
                pre-fetch {
                    return -code error "Unsupported OS X version"
                }
            }
        }

        depends_fetch-append \
                    bin:wget:wget
        fetch {
            # the standard fetch mechanism cannot seem to fetch from databases;
            # it will percent-encode the ? in the file.php?id= above.
            # not sure which OS version will do the fetch correctly...
            if {![file exists ${distpath}/${distname}${extract.suffix}]} {
                ui_info "--->  Fetching ${distname}${extract.suffix}"
                system "wget --no-check-certificate \"${github.master_sites}/${distfiles}\" \
                            --progress=bar:force -O ${distpath}/${distname}${extract.suffix}"
            }
            if {![file exists ${distpath}/${dist_pkg_name}]} {
                ui_info "--->  Fetching ${master_sites}${pkg_name}"
                system "wget --no-check-certificate \"${master_sites}${pkg_name}\" \
                            --progress=bar:force -O ${distpath}/${dist_pkg_name}"
            }
        }

        checksums-append \
                    openzfs-${zfs_commit}.tar.gz \
                    rmd160  b027cfef823c003207cfdf93bea5e312c6438a04 \
                    sha256  b488cc3d1df5791a391d2248b277c54d0a25c5ecfe129332526c5250a33be9e8
        extract.only openzfs-${zfs_commit}.tar.gz
    }

    post-extract {
        file delete -force ${workpath}/pkg
        if {[tbool has_dmg]} {
            ui_msg "--->    Extracting kernel extensions from the official OpenZFS_on_OS_X_${dmg_version}.dmg install image"
            switch ${os.major} {
                # 10.9
                "13" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} Mavericks.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs109.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs109.pkg ${workpath}/pkg/official.pkg
                }
                # 10.10
                "14" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} Yosemite.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1010.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1010.pkg ${workpath}/pkg/official.pkg
                }
                # 10.11
                "15" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} El Capitan.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1011.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1011.pkg ${workpath}/pkg/official.pkg
                }
                # 10.12
                "16" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} Sierra.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1012.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1012.pkg ${workpath}/pkg/official.pkg
                }
                # 10.13
                "17" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} High Sierra.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1013.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1013.pkg ${workpath}/pkg/official.pkg
                }
                # 10.14
                "18" {
                    system -W ${workpath}/${name}-${version} "pkgutil --expand 'OpenZFS on OS X ${version} Mojave.pkg' ${workpath}/pkg"
                    system -W ${workpath}/pkg/zfs1014.pkg "gzip -dc Payload | cpio -id"
                    file rename ${workpath}/pkg/zfs1014.pkg ${workpath}/pkg/official.pkg
                }
                default {
                    ui_error "Darwin ${os.major}.${os.minor} is an as-yet unsupport OS X version"
                    return -code error "Unsupported OS X version"
                }
            }

            # Extract the source tarballs
            foreach tarball {spl zfs} {
                system -W ${workpath} "tar -xf ${distpath}/${tarball}-${version}.tar.gz"
            }
            # cleanup
            file delete -force ${workpath}/${name}-${version}
        } else {
            ui_msg "--->    Extracting kernel extensions from the official ${dist_pkg_name} installer"
            system -W ${workpath} "pkgutil --expand ${distpath}/${dist_pkg_name} ${workpath}/pkg"
            file rename ${workpath}/pkg/my_package.pkg ${workpath}/official.pkg
            system -W ${workpath}/official.pkg "gzip -dc Payload | cpio -id"
            file delete -force ${workpath}/pkg
        }
    }
    post-destroot {
        # replace our home-built kexts with the signed ones from the official dmg
        file delete -force ${destroot}${prefix}/Library/Extensions/zfs.kext
        system "ditto --rsrc ${workpath}/official.pkg/Library/Extensions/zfs.kext ${destroot}${libdir}/Extensions/zfs.kext"
        system -W ${destroot}${libdir}/Extensions/ "chown -R root:wheel zfs.kext"
    }
    # ensure we can load from ${prefix}/Library/Extensions
    patchfiles-append   patch-kextloading.diff 
    patchfiles-append   patch-threadpol-warnings.diff \
                        patch-missing-stdbool_h.diff
#     configure.dir   ${workpath}/zfs-${zfs_commit}
}

use_configure       yes
patch.pre_args      -Np1

depends_build-append \
                    port:autoconf \
                    port:automake \
                    port:libtool \
                    port:gmake \
                    port:coreutils

depends_lib-append  port:zlib \
                    port:openssl

build.dir           ${configure.dir}
patch.dir           ${configure.dir}

# build.env-append            "MAKEFLAGS=LIBTOOL=${prefix}/bin/rlibtool"
# destroot.env-append         "MAKEFLAGS=LIBTOOL=${prefix}/bin/rlibtool"

if {"${os.major}" <= 13 && ${configure.sdkroot} eq ""} {
    # The ZFS code contains conditional code that uses functions available only
    # in 10.10+. For detection to work correctly, 10.9 and earlier must build using
    # their dedicated SDKs.
    set configure.sdkroot \
                    "$developer_dir/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${configure.sdk_version}.sdk"
}

configure.cflags-append\
                    -mmacosx-version-min=${configure.sdk_version}
configure.cxxflags-append\
                    -mmacosx-version-min=${configure.sdk_version}
configure.ldflags-append \
                    ${configure.optflags} -mmacosx-version-min=${configure.sdk_version}

configure.save_configure_cmd "install log"

configure.args-append \
                    --disable-dependency-tracking \
                    --disable-pyzfs \
                    --with-kernel-modprefix=${libdir}/Extensions

set pythonversions {3.6 3.7 3.8 3.9 3.10 3.11}
foreach pdv ${pythonversions} {
    set pv [join [lrange [split ${pdv} .] 0 1] ""]
    set conflist ""
    foreach v ${pythonversions} {
        if {${v} ne ${pdv}} {
            set vv [join [lrange [split ${v} .] 0 1] ""]
            set conflist "${conflist} python${vv}"
        }
    }
    variant python${pv} conflicts {*}${conflist} description "Add pyzfs bindings for Python ${pdv}" {}
    # settings that depend on loop variables must be set in an appropriate if, not in the
    # variant declaration scope.
    if {[variant_isset python${pv}]} {
        depends_lib-append  port:python${pv}
        configure.args-replace \
                    --disable-pyzfs \
                    --enable-pyzfs
        configure.args-append \
                    --with-python=${pdv}
    }
}

# we need gmake because ZFS builds recursively and the system make can let that
# lead to too many processes and "resource temp. unavailable" errors.
build.cmd           ${prefix}/bin/gmake
build.args-append   V=1

destroot.args-append \
                    V=1

pre-configure {
    if {![file exists ${worksrcpath}/configure]} {
        ui_msg "--->    Preparing ZFS"
        system -W ${worksrcpath} "./autogen.sh"
    }
}

post-destroot {
    foreach d [glob -nocomplain ${destroot}/Library/*] {
        file rename ${d} ${destroot}${prefix}/Library/
    }
    xinstall -m 755 ${filespath}/${PPREFIX}zfs_unload_kexts.sh ${destroot}${prefix}/sbin/zfs_unload_kexts.sh
    reinplace "s|@LIBDIR@|${libdir}|g" ${destroot}${prefix}/sbin/zfs_unload_kexts.sh
    xinstall -m 755 ${filespath}/${PPREFIX}zfs_kexts_loaded.sh ${destroot}${prefix}/sbin/zfs_kexts_loaded.sh
    xinstall -m 755 ${filespath}/zfsopt.sh ${destroot}${prefix}/bin/zfsopt
    # librt contains clock_gettime, among others, which can mess up building e.g. python 3.10 on OS versions
    # that don't have a header for clock_gettime.
    file delete -force ${destroot}${prefix}/lib/librt.a
    if {${os.major} == 13 || [variant_isset System]} {
        # put the filesystem plugin in /System/Library/Filesystems to prevent the "unrecognised disk" popup
        xinstall -m 755 -d ${destroot}/System/Library/Filesystems
        file rename ${destroot}${prefix}/Library/Filesystems/zfs.fs ${destroot}/System/Library/Filesystems/zfs.fs
        destroot.violate_mtree yes
    }
}

# keep this in sync with the list in etc/launchd/daemons/launchd-daemons.am
# but exclude the import-all plist as well as the zed plist which causes the
# kext to load.
set launchddaemon_DATA {org.openzfsonosx.zconfigd.plist \
                        org.openzfsonosx.InvariantDisks.plist}

pre-deactivate {
    if {[catch {exec ${prefix}/sbin/zfs_kexts_loaded.sh} result]} {
        ui_debug "ZFS kext isn't loaded: allowing deactivation"
        foreach p ${launchddaemon_DATA} {
            # unload the plists just as the standard install process does
            # (keep in sync whenever patchfile:patch-dont-invoke-launchctl.diff needs refactoring!)
            set pl "${prefix}/Library/LaunchDaemons/${p}"
            if {[file exists ${pl}]} {
                if {[catch {system "launchctl unload -F ${pl}"} err]} {
                    ui_warn "error unloading ${pl}: ${err}"
                }
            }
        }
    } else {
        ui_error ${result}
        ui_error "Unmount all ZFS pools and then invoke zfs_unload_kexts.sh before deactivating port:${subport}"
        # Being able to use `return -code error` here would be nice
        set thePid [pid]
        # but the only way to interrupt deactivation ATM is to send ourselves a SIGKILL
        system "kill -9 ${thePid}"
    }
}

post-activate {
    set kext "${libdir}/Extensions/zfs.kext"
    # do a diag run of the kext we just installed, but catch any errors!
    if {[catch {exec kextutil -n -print-diagnostics -v 6 ${kext}} result]} {
        ui_msg "Checking zfs.kext:\n${result}"
        foreach p ${launchddaemon_DATA} {
            # load the plists just as the standard install process does
            # (keep in sync whenever patchfile:patch-dont-invoke-launchctl.diff needs refactoring!)
            set pl "${prefix}/Library/LaunchDaemons/${p}"
            if {[file exists ${pl}]} {
                if {[catch {system "launchctl load -wF ${pl}"} err]} {
                    ui_warn "error loading ${pl}: ${err}"
                } else {
                    ui_msg "Loaded ${pl} (${err})"
                }
            }
        }
    } else {
        ui_error "Error checking zfs.kext:\n${result}"
    }
}

notes-append "You can test this port as follows: \n\
# create a file for a 128m disk image: \n\
dd if=/dev/zero of=/path/to/tank.pool.bin bs=1024k count=128 \n\
# create a ZFS pool called 'tank' in that disk image (ashift=12 is for modern disk with 4k blocks) \n\
# and the normalisation option is to avoid issues displaying files with non-ASCII names: \n\
zpool create -o ashift=12 -O normalization=formD tank /path/to/tank.pool.bin \n\
zpool status -v \n\
# there should now be a new volume: \n\
df -H \n\
ls -la /Volumes/tank \n\
# get the pool's properties: \n\
zpool get all tank \n\
# get the pool's main dataset's properties: \n\
zfs get all tank \n\
# set lz4 compression and 2-way, single-device redundancy:\n\
zfs set compression=lz4 tank \n\
zfs set copies=2 tank \n\
# export (unmount) the pool and all its datasets: \n\
zpool export tank \n\
# to import the pool once more:\n\
zpool import -d /path/to tank \n\
# to see all available pools on the connected storage devices:\n\
zpool import -d /dev \n\
\n\
See ${homepage} for more information about ZFS and its OS X implementation.
"

livecheck.url   http://openzfsonosx.org/wiki/Downloads
livecheck.regex OpenZFS_on_OS_X_(\\d+(\\.\\d+)+)
