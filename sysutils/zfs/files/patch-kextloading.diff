diff --git a/lib/libzfs/os/macos/libzfs_util_os.c b/lib/libzfs/os/macos/libzfs_util_os.c
index f5f9aca05..10b3c05e8 100644
--- a/lib/libzfs/os/macos/libzfs_util_os.c
+++ b/lib/libzfs/os/macos/libzfs_util_os.c
@@ -101,13 +101,16 @@ libzfs_module_loaded(const char *module)
  * - ZFS_MODULE_TIMEOUT="<seconds>"     - Seconds to wait for ZFS_DEV
  */
 static int
-libzfs_load_module_impl(const char *module)
+libzfs_load_module_impl()
 {
-	const char *argv[4] = {"/sbin/kextload", (char *)module, (char *)0};
+	const char *module = ZFS_DRIVER;
+	const char kext[(sizeof(KERNEL_MODPREFIX) + sizeof(ZFS_DRIVER)) / sizeof(char) + 7] =
+		KERNEL_MODPREFIX "/" ZFS_DRIVER ".kext";
+	const char *argv[4] = {"/sbin/kextload", "-v", kext, (char *)0};
 	char *load_str, *timeout_str;
 	long timeout = 10; /* seconds */
 	long busy_timeout = 10; /* milliseconds */
-	int load = 0, fd;
+	int load = 1, fd;
 	hrtime_t start;
 
 	/* Optionally request module loading */
@@ -123,7 +126,7 @@ libzfs_load_module_impl(const char *module)
 
 		if (load) {
 			if (libzfs_run_process("/sbin/kextload", (char **)argv,
-			    0))
+			    STDERR_VERBOSE|STDOUT_VERBOSE))
 				return (ENOEXEC);
 		}
 
@@ -170,7 +173,7 @@ libzfs_load_module(void)
 	// Using this as a libzfs_init_os() - we should probably do it properly
 	libdiskmgt_init();
 
-	return (libzfs_load_module_impl(ZFS_DRIVER));
+	return (libzfs_load_module_impl());
 }
 
 int
@@ -189,6 +192,10 @@ zfs_version_kernel(void)
 {
 	size_t rlen = 0;
 
+	if (!libzfs_module_loaded(ZFS_DRIVER)) {
+		libzfs_load_module();
+		sleep(1);
+	}
 	if (sysctlbyname("zfs.kext_version",
 	    NULL, &rlen, NULL, 0) == -1)
 		return (NULL);
