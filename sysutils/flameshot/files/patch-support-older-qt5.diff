diff --git a/CMakeLists.txt b/CMakeLists.txt
index 25fe388..5a3a9f2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -15,9 +15,9 @@ set(PROJECT_NAME_CAPITALIZED "Flameshot")
 include(FetchContent)
 #Must be set before fetching external content!
 #QT_DEFAULT_MAJOR_VERSION used by QHotkey
-set(QT_DEFAULT_MAJOR_VERSION 6 CACHE STRING "")
+set(QT_DEFAULT_MAJOR_VERSION 5 CACHE STRING "")
 #QT_VERSION_MAJOR used by Flameshot and QtColorWidgets
-set(QT_VERSION_MAJOR 6 CACHE STRING "")
+set(QT_VERSION_MAJOR 5 CACHE STRING "")
 #BUILD_SHARED_LIBS used by QHotkey and QtColorWidgets
 option(BUILD_SHARED_LIBS OFF)
 
@@ -48,7 +48,7 @@ endif()
 
 # This can be read from ${PROJECT_NAME} after project() is called
 if (APPLE)
-  set(CMAKE_OSX_DEPLOYMENT_TARGET "10.15" CACHE STRING "Minimum OS X deployment version")
+  set(CMAKE_OSX_DEPLOYMENT_TARGET "10.9" CACHE STRING "Minimum OS X deployment version")
 endif()
 
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 63c64df..395708f 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -145,9 +145,9 @@ set(FLAMESHOT_TS_FILES
          )
 
 if (GENERATE_TS)
-  qt6_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${FLAMESHOT_TS_FILES})
+  qt5_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${FLAMESHOT_TS_FILES})
 else ()
-  qt6_add_translation(QM_FILES ${FLAMESHOT_TS_FILES})
+  qt5_add_translation(QM_FILES ${FLAMESHOT_TS_FILES})
 endif ()
 
 target_sources(
diff --git a/src/config/generalconf.cpp b/src/config/generalconf.cpp
index 91bf8c9..dd36b09 100644
--- a/src/config/generalconf.cpp
+++ b/src/config/generalconf.cpp
@@ -17,7 +17,11 @@
 #include <QSizePolicy>
 #include <QSpinBox>
 #include <QStandardPaths>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
 #include <QStringDecoder>
+#else
+#include <QTextCodec>
+#endif
 #include <QVBoxLayout>
 
 GeneralConf::GeneralConf(QWidget* parent)
@@ -198,8 +202,13 @@ void GeneralConf::importConfiguration()
         QMessageBox::about(this, tr("Error"), tr("Unable to read file."));
         return;
     }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QStringDecoder decoder(QStringDecoder::System);
     QString text = decoder(file.readAll());
+#else
+    QTextCodec* codec = QTextCodec::codecForLocale();
+    QString text = codec->toUnicode(file.readAll());
+#endif
     file.close();
 
     QFile config(ConfigHandler().configFilePath());
@@ -207,8 +216,12 @@ void GeneralConf::importConfiguration()
         QMessageBox::about(this, tr("Error"), tr("Unable to write file."));
         return;
     }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     QStringEncoder encoder(QStringEncoder::System);
     config.write(encoder(text));
+#else
+    config.write(codec->fromUnicode(text));
+#endif
     config.close();
 }
 
diff --git a/src/core/flameshot.cpp b/src/core/flameshot.cpp
index 3eb1432..7b5df90 100644
--- a/src/core/flameshot.cpp
+++ b/src/core/flameshot.cpp
@@ -140,6 +140,19 @@ CaptureWidget* Flameshot::gui(const CaptureRequest& req)
     }
 }
 
+static QScreen* screenAt(const QPoint& pos)
+{
+#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
+    return qApp->screenAt(pos);
+#else
+    for (QScreen* const screen : QGuiApplication::screens()) {
+        if (screen->geometry().contains(pos)) {
+            return screen;
+        }
+    }
+#endif
+}
+
 void Flameshot::screen(CaptureRequest req, const int screenNumber)
 {
     if (!resolveAnyConfigErrors()) {
@@ -151,7 +164,7 @@ void Flameshot::screen(CaptureRequest req, const int screenNumber)
 
     if (screenNumber < 0) {
         QPoint globalCursorPos = QCursor::pos();
-        screen = qApp->screenAt(globalCursorPos);
+        screen = screenAt(globalCursorPos);
     } else if (screenNumber >= qApp->screens().count()) {
         AbstractLogger() << QObject::tr(
           "Requested screen exceeds screen count");
diff --git a/src/main.cpp b/src/main.cpp
index 66bfe52..f2e68b3 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -34,6 +34,7 @@
 #include <QDBusMessage>
 #include <desktopinfo.h>
 #endif
+#include <QDebug>
 
 // Required for saving button list QList<CaptureTool::Type>
 Q_DECLARE_METATYPE(QList<int>)
@@ -142,7 +143,12 @@ void configureApp(bool gui)
       qtTranslator.load(QLocale::system(),
                         "qt",
                         "_",
-                        QLibraryInfo::path(QLibraryInfo::TranslationsPath));
+#if QT_VERSION >= QT_VERSION_CHECK(6,0,0)
+                        QLibraryInfo::path(QLibraryInfo::TranslationsPath)
+#else
+                        QLibraryInfo::location(QLibraryInfo::TranslationsPath)
+#endif
+				    );
     if (!foundTranslation) {
         qWarning() << QStringLiteral("No Qt translation found for %1")
                         .arg(QLocale::languageToString(
diff --git a/src/tools/pin/pinwidget.cpp b/src/tools/pin/pinwidget.cpp
index a5f1b1d..68ec5e0 100644
--- a/src/tools/pin/pinwidget.cpp
+++ b/src/tools/pin/pinwidget.cpp
@@ -1,5 +1,6 @@
 // SPDX-License-Identifier: GPL-3.0-or-later
 // SPDX-FileCopyrightText: 2017-2019 Alejandro Sirgo Rica & Contributors
+
 #include <QGraphicsDropShadowEffect>
 #include <QGraphicsOpacityEffect>
 #include <QPinchGesture>
@@ -132,7 +133,11 @@ bool PinWidget::scrollEvent(QWheelEvent* event)
     return true;
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6,0,0)
 void PinWidget::enterEvent(QEnterEvent*)
+#else
+void PinWidget::enterEvent(QEvent*)
+#endif
 {
     m_shadowEffect->setColor(m_hoverColor);
 }
@@ -149,13 +154,30 @@ void PinWidget::mouseDoubleClickEvent(QMouseEvent*)
 
 void PinWidget::mousePressEvent(QMouseEvent* e)
 {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 15,0)
     if (QWindow* window = windowHandle(); window != nullptr) {
         window->startSystemMove();
         return;
     }
+#else
+    m_dragStart = e->globalPos();
+    m_offsetX = e->localPos().x() / width();
+    m_offsetY = e->localPos().y() / height();
+#endif
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(5, 15,0)
 void PinWidget::mouseMoveEvent(QMouseEvent* e) {}
+#else
+void PinWidget::mouseMoveEvent(QMouseEvent* e)
+{
+    const QPoint delta = e->globalPos() - m_dragStart;
+    const int offsetW = width() * m_offsetX;
+    const int offsetH = height() * m_offsetY;
+    move(m_dragStart.x() + delta.x() - offsetW,
+         m_dragStart.y() + delta.y() - offsetH);
+}
+#endif
 
 void PinWidget::keyPressEvent(QKeyEvent* event)
 {
@@ -183,6 +205,7 @@ void PinWidget::keyPressEvent(QKeyEvent* event)
 
     setWindowOpacity(m_opacity);
 }
+
 bool PinWidget::gestureEvent(QGestureEvent* event)
 {
     if (QGesture* pinch = event->gesture(Qt::PinchGesture)) {
diff --git a/src/tools/pin/pinwidget.h b/src/tools/pin/pinwidget.h
index 54ea92b..f98a8c2 100644
--- a/src/tools/pin/pinwidget.h
+++ b/src/tools/pin/pinwidget.h
@@ -24,7 +24,11 @@ protected:
     void mousePressEvent(QMouseEvent*) override;
     void mouseMoveEvent(QMouseEvent*) override;
     void keyPressEvent(QKeyEvent*) override;
+#if QT_VERSION >= QT_VERSION_CHECK(6,0,0)
     void enterEvent(QEnterEvent*) override;
+#else
+    void enterEvent(QEvent*) override;
+#endif
     void leaveEvent(QEvent*) override;
 
     bool event(QEvent* event) override;
@@ -45,6 +49,10 @@ private:
     QPixmap m_pixmap;
     QVBoxLayout* m_layout;
     QLabel* m_label;
+#if QT_VERSION < QT_VERSION_CHECK(5,15,0)
+    QPoint m_dragStart;
+    qreal m_offsetX{}, m_offsetY{};
+#endif
     QGraphicsDropShadowEffect* m_shadowEffect;
     QColor m_baseColor, m_hoverColor;
 
diff --git a/src/tools/text/textconfig.cpp b/src/tools/text/textconfig.cpp
index 328e7f3..954750a 100644
--- a/src/tools/text/textconfig.cpp
+++ b/src/tools/text/textconfig.cpp
@@ -27,7 +27,11 @@ TextConfig::TextConfig(QWidget* parent)
             &QComboBox::currentTextChanged,
             this,
             &TextConfig::fontFamilyChanged);
+#if QT_VERSION >= QT_VERSION_CHECK(6,0,0)
     m_fontsCB->addItems(QFontDatabase::families());
+#else
+    m_fontsCB->addItems(QFontDatabase().families());
+#endif
     setFontFamily(ConfigHandler().fontFamily());
 
     QString iconPrefix = ColorUtils::colorIsDark(palette().windowText().color())
diff --git a/src/utils/confighandler.cpp b/src/utils/confighandler.cpp
index 2117e12..532c1b9 100644
--- a/src/utils/confighandler.cpp
+++ b/src/utils/confighandler.cpp
@@ -512,15 +512,25 @@ void ConfigHandler::resetValue(const QString& key)
 
 QSet<QString>& ConfigHandler::recognizedGeneralOptions()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     auto keys = ::recognizedGeneralOptions.keys();
     static QSet<QString> options = QSet<QString>(keys.begin(), keys.end());
+#else
+    static QSet<QString> options =
+      QSet<QString>::fromList(::recognizedGeneralOptions.keys());
+#endif
     return options;
 }
 
 QSet<QString>& ConfigHandler::recognizedShortcutNames()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(5, 14, 0)
     auto keys = recognizedShortcuts.keys();
     static QSet<QString> names = QSet<QString>(keys.begin(), keys.end());
+#else
+    static QSet<QString> names =
+      QSet<QString>::fromList(recognizedShortcuts.keys());
+#endif
     return names;
 }
 
diff --git a/src/widgets/capture/capturewidget.cpp b/src/widgets/capture/capturewidget.cpp
index 3426bb9..686aa44 100644
--- a/src/widgets/capture/capturewidget.cpp
+++ b/src/widgets/capture/capturewidget.cpp
@@ -430,7 +430,11 @@ void CaptureWidget::showxywh()
 void CaptureWidget::initHelpMessage()
 {
     QList<QPair<QString, QString>> keyMap;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     keyMap << std::pair(tr("Mouse"), tr("Select screenshot area"));
+#else
+    keyMap << QPair(tr("Mouse"), tr("Select screenshot area"));
+#endif
     using CT = CaptureTool;
     for (auto toolType : { CT::TYPE_ACCEPT, CT::TYPE_SAVE, CT::TYPE_COPY }) {
         if (!m_tools.contains(toolType)) {
@@ -441,14 +445,26 @@ void CaptureWidget::initHelpMessage()
           ConfigHandler().shortcut(QVariant::fromValue(toolType).toString());
         shortcut.replace("Return", "Enter");
         if (!shortcut.isEmpty()) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
             keyMap << std::pair(shortcut, tool->description());
+#else
+            keyMap << QPair(shortcut, tool->description());
+#endif
         }
     }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     keyMap << std::pair(tr("Mouse Wheel"), tr("Change tool size"));
     keyMap << std::pair(tr("Right Click"), tr("Show color picker"));
     keyMap << std::pair(ConfigHandler().shortcut("TYPE_TOGGLE_PANEL"),
                         tr("Open side panel"));
     keyMap << std::pair(tr("Esc"), tr("Exit"));
+#else
+    keyMap << QPair(tr("Mouse Wheel"), tr("Change tool size"));
+    keyMap << QPair(tr("Right Click"), tr("Show color picker"));
+    keyMap << QPair(ConfigHandler().shortcut("TYPE_TOGGLE_PANEL"),
+                        tr("Open side panel"));
+    keyMap << QPair(tr("Esc"), tr("Exit"));
+#endif
 
     m_helpMessage = OverlayMessage::compileFromKeyMap(keyMap);
 }
diff --git a/src/widgets/capture/notifierbox.cpp b/src/widgets/capture/notifierbox.cpp
index 4c177fb..13fd091 100644
--- a/src/widgets/capture/notifierbox.cpp
+++ b/src/widgets/capture/notifierbox.cpp
@@ -26,7 +26,11 @@ NotifierBox::NotifierBox(QWidget* parent)
     setFixedSize(QSize(size, size));
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6,0,0)
 void NotifierBox::enterEvent(QEnterEvent*)
+#else
+void NotifierBox::enterEvent(QEvent*)
+#endif
 {
     hide();
 }
diff --git a/src/widgets/capture/notifierbox.h b/src/widgets/capture/notifierbox.h
index df163a9..622ecef 100644
--- a/src/widgets/capture/notifierbox.h
+++ b/src/widgets/capture/notifierbox.h
@@ -14,7 +14,11 @@ public:
     explicit NotifierBox(QWidget* parent = nullptr);
 
 protected:
+#if QT_VERSION >= QT_VERSION_CHECK(6,0,0)
     void enterEvent(QEnterEvent*) override;
+#else
+    void enterEvent(QEvent*) override;
+#endif
     virtual void paintEvent(QPaintEvent*) override;
 
 signals:
diff --git a/src/widgets/draggablewidgetmaker.cpp b/src/widgets/draggablewidgetmaker.cpp
index 6f93fc8..981de7b 100644
--- a/src/widgets/draggablewidgetmaker.cpp
+++ b/src/widgets/draggablewidgetmaker.cpp
@@ -17,6 +17,9 @@ bool DraggableWidgetMaker::eventFilter(QObject* obj, QEvent* event)
 {
     auto* widget = static_cast<QWidget*>(obj);
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+#define globalPosition globalPos
+#endif
     // based on https://stackoverflow.com/a/12221360/964478
     switch (event->type()) {
         case QEvent::MouseButtonPress: {
diff --git a/src/widgets/trayicon.cpp b/src/widgets/trayicon.cpp
index df37c19..11c75a1 100644
--- a/src/widgets/trayicon.cpp
+++ b/src/widgets/trayicon.cpp
@@ -11,7 +11,7 @@
 #include <QUrl>
 #include <QVersionNumber>
 
-#if defined(Q_OS_MACOS)
+#if defined(Q_OS_MACOS) && (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
 #include <QOperatingSystemVersion>
 #endif
 
@@ -21,12 +21,12 @@ TrayIcon::TrayIcon(QObject* parent)
     initMenu();
 
     setToolTip(QStringLiteral("Flameshot"));
-#if defined(Q_OS_MACOS)
+#if defined(Q_OS_MACOS) && (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
     // Because of the following issues on MacOS "Catalina":
     // https://bugreports.qt.io/browse/QTBUG-86393
     // https://developer.apple.com/forums/thread/126072
     auto currentMacOsVersion = QOperatingSystemVersion::current();
-    if (currentMacOsVersion >= QOperatingSystemVersion::MacOSBigSur) {
+    if (currentMacOsVersion >= currentMacOsVersion.MacOSBigSur) {
         setContextMenu(m_menu);
     }
 #else
@@ -36,8 +36,8 @@ TrayIcon::TrayIcon(QObject* parent)
       QIcon::fromTheme("flameshot-tray", QIcon(GlobalValues::iconPathPNG()));
     setIcon(icon);
 
-#if defined(Q_OS_MACOS)
-    if (currentMacOsVersion < QOperatingSystemVersion::MacOSBigSur) {
+#if defined(Q_OS_MACOS) && (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
+    if (currentMacOsVersion < currentMacOsVersion.MacOSBigSur) {
         // Because of the following issues on MacOS "Catalina":
         // https://bugreports.qt.io/browse/QTBUG-86393
         // https://developer.apple.com/forums/thread/126072
@@ -99,9 +99,9 @@ void TrayIcon::initMenu()
 
     auto* captureAction = new QAction(tr("&Take Screenshot"), this);
     connect(captureAction, &QAction::triggered, this, [this]() {
-#if defined(Q_OS_MACOS)
+#if defined(Q_OS_MACOS) && (QT_VERSION >= QT_VERSION_CHECK(6, 0, 0))
         auto currentMacOsVersion = QOperatingSystemVersion::current();
-        if (currentMacOsVersion >= QOperatingSystemVersion::MacOSBigSur) {
+        if (currentMacOsVersion >= currentMacOsVersion.MacOSBigSur) {
             startGuiCapture();
         } else {
             // It seems it is not relevant for MacOS BigSur (Wait 400 ms to hide
