diff --git a/Action.c b/Action.c
index 61cc1ef9..f37ad77e 100644
--- a/Action.c
+++ b/Action.c
@@ -926,15 +926,15 @@ void Action_setBindings(Htop_Action* keys) {
    keys['u'] = actionFilterByUser;
    keys['w'] = actionShowCommandScreen;
    keys['x'] = actionShowLocks;
-   keys[KEY_F(1)] = actionHelp;
-   keys[KEY_F(2)] = actionSetup;
-   keys[KEY_F(3)] = actionIncSearch;
-   keys[KEY_F(4)] = actionIncFilter;
-   keys[KEY_F(5)] = actionToggleTreeView;
-   keys[KEY_F(6)] = actionSetSortColumn;
-   keys[KEY_F(7)] = actionHigherPriority;
-   keys[KEY_F(8)] = actionLowerPriority;
-   keys[KEY_F(9)] = actionKill;
+   keys[KEY_ALT('1')] = actionHelp;
+   keys[KEY_ALT('2')] = actionSetup;
+   keys[KEY_ALT('3')] = actionIncSearch;
+   keys[KEY_ALT('4')] = actionIncFilter;
+   keys[KEY_ALT('5')] = actionToggleTreeView;
+   keys[KEY_ALT('6')] = actionSetSortColumn;
+   keys[KEY_ALT('7')] = actionHigherPriority;
+   keys[KEY_ALT('8')] = actionLowerPriority;
+   keys[KEY_ALT('9')] = actionKill;
    keys[KEY_F(10)] = actionQuit;
    keys[KEY_F(18)] = actionExpandCollapseOrSortColumn;
    keys[KEY_RECLICK] = actionExpandOrCollapse;
diff --git a/AvailableColumnsPanel.c b/AvailableColumnsPanel.c
index a590bac2..a0bc2e1f 100644
--- a/AvailableColumnsPanel.c
+++ b/AvailableColumnsPanel.c
@@ -22,6 +22,7 @@ in the source distribution for its full text.
 #include "Process.h"
 #include "ProvideCurses.h"
 #include "XUtils.h"
+#include "CRT.h"
 
 
 static const char* const AvailableColumnsFunctions[] = {"      ", "      ", "      ", "      ", "Add   ", "      ", "      ", "      ", "      ", "Done  ", NULL};
@@ -49,7 +50,7 @@ static HandlerResult AvailableColumnsPanel_eventHandler(Panel* super, int ch) {
    switch (ch) {
       case 13:
       case KEY_ENTER:
-      case KEY_F(5):
+      case KEY_ALT('5'):
       {
          const ListItem* selected = (ListItem*) Panel_getSelected(super);
          if (!selected)
diff --git a/AvailableMetersPanel.c b/AvailableMetersPanel.c
index de1dd211..fa533430 100644
--- a/AvailableMetersPanel.c
+++ b/AvailableMetersPanel.c
@@ -24,6 +24,7 @@ in the source distribution for its full text.
 #include "Platform.h"
 #include "ProvideCurses.h"
 #include "XUtils.h"
+#include "CRT.h"
 
 
 static void AvailableMetersPanel_delete(Object* object) {
@@ -55,7 +56,7 @@ static HandlerResult AvailableMetersPanel_eventHandler(Panel* super, int ch) {
    bool update = false;
 
    switch (ch) {
-      case KEY_F(5):
+      case KEY_ALT('5'):
       case 'l':
       case 'L':
       {
@@ -67,7 +68,7 @@ static HandlerResult AvailableMetersPanel_eventHandler(Panel* super, int ch) {
       case 0x0a:
       case 0x0d:
       case KEY_ENTER:
-      case KEY_F(6):
+      case KEY_ALT('6'):
       case 'r':
       case 'R':
       {
diff --git a/CRT.c b/CRT.c
index 68020e37..49adb1b6 100644
--- a/CRT.c
+++ b/CRT.c
@@ -876,6 +876,10 @@ static void dumpStderr(void) {
          }
          full_write(STDERR_FILENO, buffer, res);
       }
+      for (char c = '0'; c <= '9'; c++) {
+         sequence[1] = c;
+         define_key(sequence, KEY_ALT(c));
+      }
    }
 
    if (header)
diff --git a/ColumnsPanel.c b/ColumnsPanel.c
index e3445a00..a85a24b0 100644
--- a/ColumnsPanel.c
+++ b/ColumnsPanel.c
@@ -62,7 +62,7 @@ static HandlerResult ColumnsPanel_eventHandler(Panel* super, int ch) {
          }
       }
          /* else fallthrough */
-      case KEY_F(7):
+      case KEY_ALT('7'):
       case '[':
       case '-':
       {
@@ -78,7 +78,7 @@ static HandlerResult ColumnsPanel_eventHandler(Panel* super, int ch) {
          }
       }
          /* else fallthrough */
-      case KEY_F(8):
+      case KEY_ALT('8'):
       case ']':
       case '+':
       {
@@ -87,7 +87,7 @@ static HandlerResult ColumnsPanel_eventHandler(Panel* super, int ch) {
          result = HANDLED;
          break;
       }
-      case KEY_F(9):
+      case KEY_ALT('9'):
       case KEY_DC:
       {
          if (selected < size - 1) {
diff --git a/FunctionBar.c b/FunctionBar.c
index 08500373..72a357d5 100644
--- a/FunctionBar.c
+++ b/FunctionBar.c
@@ -18,11 +18,11 @@ in the source distribution for its full text.
 #include "XUtils.h"
 
 
-static const char* const FunctionBar_FKeys[] = {"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", NULL};
+static const char* const FunctionBar_FKeys[] = {"Alt-1", "Alt-2", "Alt-3", "Alt-4", "Alt-5", "Alt-6", "Alt-7", "Alt-8", "Alt-9", "F10", NULL};
 
 static const char* const FunctionBar_FLabels[] = {"      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", NULL};
 
-static int FunctionBar_FEvents[] = {KEY_F(1), KEY_F(2), KEY_F(3), KEY_F(4), KEY_F(5), KEY_F(6), KEY_F(7), KEY_F(8), KEY_F(9), KEY_F(10)};
+static int FunctionBar_FEvents[] = {KEY_ALT('1'), KEY_ALT('2'), KEY_F(3), KEY_ALT('4'), KEY_ALT('5'), KEY_ALT('6'), KEY_ALT('7'), KEY_ALT('8'), KEY_ALT('9'), KEY_F(10)};
 
 static const char* const FunctionBar_EnterEscKeys[] = {"Enter", "Esc", NULL};
 static const int FunctionBar_EnterEscEvents[] = {13, 27};
diff --git a/InfoScreen.c b/InfoScreen.c
index e9f06f27..7c22c5d7 100644
--- a/InfoScreen.c
+++ b/InfoScreen.c
@@ -24,9 +24,9 @@ in the source distribution for its full text.
 
 static const char* const InfoScreenFunctions[] = {"Search ", "Filter ", "Refresh", "Done   ", NULL};
 
-static const char* const InfoScreenKeys[] = {"F3", "F4", "F5", "Esc"};
+static const char* const InfoScreenKeys[] = {"Alt-3", "Alt-4", "Alt-5", "Esc"};
 
-static const int InfoScreenEvents[] = {KEY_F(3), KEY_F(4), KEY_F(5), 27};
+static const int InfoScreenEvents[] = {KEY_F(3), KEY_ALT('4'), KEY_ALT('5'), 27};
 
 InfoScreen* InfoScreen_init(InfoScreen* this, const Process* process, FunctionBar* bar, int height, const char* panelHeader) {
    this->process = process;
@@ -144,11 +144,11 @@ void InfoScreen_run(InfoScreen* this) {
       case '/':
          IncSet_activate(this->inc, INC_SEARCH, panel);
          break;
-      case KEY_F(4):
+      case KEY_ALT('4'):
       case '\\':
          IncSet_activate(this->inc, INC_FILTER, panel);
          break;
-      case KEY_F(5):
+      case KEY_ALT('5'):
          clear();
          if (As_InfoScreen(this)->scan) {
             Vector_prune(this->lines);
diff --git a/MainPanel.c b/MainPanel.c
index 7ca7b201..e23411a1 100644
--- a/MainPanel.c
+++ b/MainPanel.c
@@ -26,8 +26,8 @@ static const char* const MainFunctions_ro[]  = {"Help  ", "Setup ", "Search", "F
 
 void MainPanel_updateLabels(MainPanel* this, bool list, bool filter) {
    FunctionBar* bar = MainPanel_getFunctionBar(this);
-   FunctionBar_setLabel(bar, KEY_F(5), list   ? "List  " : "Tree  ");
-   FunctionBar_setLabel(bar, KEY_F(4), filter ? "FILTER" : "Filter");
+   FunctionBar_setLabel(bar, KEY_ALT('5'), list   ? "List  " : "Tree  ");
+   FunctionBar_setLabel(bar, KEY_ALT('4'), filter ? "FILTER" : "Filter");
 }
 
 static void MainPanel_idSearch(MainPanel* this, int ch) {
@@ -107,7 +107,7 @@ static HandlerResult MainPanel_eventHandler(Panel* super, int ch) {
    } else if (ch == 27) {
       this->state->hideSelection = true;
       return HANDLED;
-   } else if (ch != ERR && ch > 0 && ch < KEY_MAX && this->keys[ch]) {
+   } else if (ch != ERR && ch > 0 && ch < this->nkeys && this->keys[ch]) {
       reaction |= (this->keys[ch])(this->state);
       result = HANDLED;
    } else if (0 < ch && ch < 255 && isdigit((unsigned char)ch)) {
@@ -212,7 +212,11 @@ MainPanel* MainPanel_new(void) {
    this->readonlyBar = FunctionBar_new(MainFunctions_ro, NULL, NULL);
    FunctionBar* activeBar = Settings_isReadonly() ? this->readonlyBar : this->processBar;
    Panel_init((Panel*) this, 1, 1, 1, 1, Class(Row), false, activeBar);
-   this->keys = xCalloc(KEY_MAX, sizeof(Htop_Action));
+   this->nkeys = KEY_MAX;
+   if (KEY_ALT('9') >= this->nkeys) {
+      this->nkeys = KEY_ALT('9') + 1;
+   }
+   this->keys = xCalloc(this->nkeys, sizeof(Htop_Action));
    this->inc = IncSet_new(activeBar);
 
    Action_setBindings(this->keys);
diff --git a/MainPanel.h b/MainPanel.h
index 19229d59..7ec2995a 100644
--- a/MainPanel.h
+++ b/MainPanel.h
@@ -25,6 +25,7 @@ typedef struct MainPanel_ {
    State* state;
    IncSet* inc;
    Htop_Action* keys;
+   size_t nkeys;
    FunctionBar* processBar;  /* function bar with process-specific actions */
    FunctionBar* readonlyBar;  /* function bar without process actions (ro) */
    unsigned int idSearch;
diff --git a/MetersPanel.c b/MetersPanel.c
index 580e41bd..4cafc299 100644
--- a/MetersPanel.c
+++ b/MetersPanel.c
@@ -103,7 +103,7 @@ static HandlerResult MetersPanel_eventHandler(Panel* super, int ch) {
          break;
       }
       case ' ':
-      case KEY_F(4):
+      case KEY_ALT('4'):
       case 't':
       {
          if (!Vector_size(this->meters))
@@ -124,7 +124,7 @@ static HandlerResult MetersPanel_eventHandler(Panel* super, int ch) {
          }
       }
          /* else fallthrough */
-      case KEY_F(7):
+      case KEY_ALT('7'):
       case '[':
       case '-':
       {
@@ -140,7 +140,7 @@ static HandlerResult MetersPanel_eventHandler(Panel* super, int ch) {
          }
       }
          /* else fallthrough */
-      case KEY_F(8):
+      case KEY_ALT('8'):
       case ']':
       case '+':
       {
@@ -168,7 +168,7 @@ static HandlerResult MetersPanel_eventHandler(Panel* super, int ch) {
          }
          break;
       }
-      case KEY_F(9):
+      case KEY_ALT('9'):
       case KEY_DC:
       {
          if (!Vector_size(this->meters))
diff --git a/TraceScreen.c b/TraceScreen.c
index 03315482..804df116 100644
--- a/TraceScreen.c
+++ b/TraceScreen.c
@@ -32,7 +32,7 @@ static const char* const TraceScreenFunctions[] = {"Search ", "Filter ", "AutoSc
 
 static const char* const TraceScreenKeys[] = {"F3", "F4", "F8", "F9", "Esc"};
 
-static const int TraceScreenEvents[] = {KEY_F(3), KEY_F(4), KEY_F(8), KEY_F(9), 27};
+static const int TraceScreenEvents[] = {KEY_F(3), KEY_ALT('4'), KEY_ALT('8'), KEY_ALT('9'), 27};
 
 TraceScreen* TraceScreen_new(const Process* process) {
    // This initializes all TraceScreen variables to "false" so only default = true ones need to be set below
@@ -166,15 +166,15 @@ static bool TraceScreen_onKey(InfoScreen* super, int ch) {
    TraceScreen* this = (TraceScreen*) super;
    switch (ch) {
       case 'f':
-      case KEY_F(8):
+      case KEY_ALT('8'):
          this->follow = !(this->follow);
          if (this->follow)
             Panel_setSelected(super->display, Panel_size(super->display) - 1);
          return true;
       case 't':
-      case KEY_F(9):
+      case KEY_ALT('9'):
          this->tracing = !this->tracing;
-         FunctionBar_setLabel(super->display->defaultBar, KEY_F(9), this->tracing ? "Stop Tracing   " : "Resume Tracing ");
+         FunctionBar_setLabel(super->display->defaultBar, KEY_ALT('9'), this->tracing ? "Stop Tracing   " : "Resume Tracing ");
          InfoScreen_draw(this);
          return true;
    }
