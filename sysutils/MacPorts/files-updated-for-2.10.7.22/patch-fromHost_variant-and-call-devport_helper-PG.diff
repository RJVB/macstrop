commit f636c4c89c4ecdec27c3ec0ad3e263f67f84aa86
Author: bertin <macportsuser@macports.org>
Date:   Fri May 23 00:02:09 2025 +0200

    /opt/local/site-ports/sysutils/MacPorts/files/patch-fromHost_variant-and-call-devport_helper-PG.diff

diff --git a/src/macports1.0/macports.tcl b/src/macports1.0/macports.tcl
index 08c52b70c..38127688d 100644
--- a/src/macports1.0/macports.tcl
+++ b/src/macports1.0/macports.tcl
@@ -2627,6 +2627,72 @@ proc mportopen {porturl {options {}} {variations {}} {nocache {}}} {
     # are conditional on whether universal is set
     $workername eval [list universal_setup]
 
+    $workername eval {
+        if {${os.platform} eq "linux"} {
+            if {[info exist PortInfo(variants)] && ![variant_exists fromHost]} {
+                set fhconfs ""
+                foreach v $PortInfo(variants) {
+                    if {${v} ne "fromHost"} {
+                        set fhconfs "${fhconfs} ${v}"
+                    }
+                }
+                variant fromHost conflicts [list {*}${fhconfs}] description \
+                    {assume the host already provides this port via distro packages, typically with the dev package included.} {}
+            } else {
+                variant fromHost description \
+                    {assume the host already provides this port via distro packages, typically with the dev package included.} {}
+            }
+            if {[variant_exists fromHost] && [info exist PortInfo(variants)] && [info exists PortInfo(vinfo)]} {
+                array unset vinfo
+                array set vinfo $PortInfo(vinfo)
+                foreach v $PortInfo(variants) {
+                    if {${v} eq "fromHost"} {
+                        continue
+                    }
+                    # if we're in the clear for ${v} vs. fromHost we can record
+                    # the conflict to inform the user via `port variants`:
+                    array unset variant
+                    if {[info exist vinfo(${v})] && [catch {array set variant $vinfo(${v})} err]} {
+                        # my KF5 ports trigger this??
+                        ui_debug "vinfo(${v})=\"$vinfo(${v})\" error is <${err}>; skipping"
+                        continue
+                    }
+                    if {[info exists variant(conflicts)]} {
+                        ui_debug "${v}: conflicts with $variant(conflicts), adding +fromHost"
+                        set newConflicts [join [lsort "$variant(conflicts) fromHost"]]
+                    } else {
+                        ui_debug "${v}: adding conflict with +fromHost"
+                        set newConflicts "fromHost"
+                    }
+                    array set variant [list conflicts ${newConflicts}]
+                    array set vinfo [list ${v} [array get variant]]
+                    array set PortInfo [list vinfo [array get vinfo]]
+                }
+            }
+            if {[variant_exists fromHost] && [variant_isset fromHost]} {
+                PortGroup stub 1.0
+                if {${subport} ne ${name}} {
+                    long_description-append \nNB: Stub because of +fromHost\; make sure you have all \
+                        the required distro packages installed to use and build against \"${subport}\" and/or \"${name}\"!
+                } else {
+                    long_description-append \nNB: Stub because of +fromHost\; make sure you have all \
+                        the required distro packages installed to use and build against \"${subport}\"!
+                }
+                fetch {}
+                depends_fetch
+                depends_extract
+                depends_lib
+                depends_build
+            }
+        }
+        if {![variant_exists fromHost] || ![variant_isset fromHost]} {
+            # Import a (possibly) local PortGroup that auto-adds
+            # missing X-dev build dependencies for dependencies
+            # known to have such an associated port.
+            catch {PortGroup devport_helper 1.0}
+        }
+    }
+
     # evaluate the variants
     if {[$workername eval [list eval_variants variations]] != 0} {
         mportclose $mport
@@ -2635,6 +2701,16 @@ proc mportopen {porturl {options {}} {variations {}} {nocache {}}} {
 
     $workername eval [list port::run_callbacks]
 
+    $workername eval {
+        if {[variant_exists fromHost] && [variant_isset fromHost]} {
+            ui_debug "+fromHost resetting late-added dependencies"
+            depends_fetch
+            depends_extract
+            depends_lib
+            depends_build
+        }
+    }
+
     set actual_subport [$workername eval [list set PortInfo(name)]]
     if {[$workername eval [list info exists user_options(subport)]]} {
         # The supplied subport may have been set on the command line by the
