commit e4d4c43c35107f5e417b4dd136919a74644038b5
Author: bertin <macportsuser@macports.org>
Date:   Thu May 22 16:10:08 2025 +0200

    /opt/local/site-ports/sysutils/MacPorts/files/patch-os_arch-linux.diff

diff --git a/src/macports1.0/macports.tcl b/src/macports1.0/macports.tcl
index fccb9053a..49215d418 100644
--- a/src/macports1.0/macports.tcl
+++ b/src/macports1.0/macports.tcl
@@ -1078,7 +1078,9 @@ proc mportinit {{up_ui_options {}} {up_options {}} {up_variations {}}} {
     package require Pextlib 1.0
     package require registry 1.0
     package require registry2 2.0
-    package require machista 1.0
+    if {[string tolower $tcl_platform(os)] eq "darwin"} {
+        package require machista 1.0
+    }
 
     # Set the system encoding to utf-8
     encoding system utf-8
@@ -1108,10 +1110,17 @@ proc mportinit {{up_ui_options {}} {up_options {}} {up_variations {}}} {
            set os_arch arm
        }
     }
+    set os_platform [string tolower $tcl_platform(os)]
     set os_version $tcl_platform(osVersion)
     set os_major [lindex [split $os_version .] 0]
+    if {${os_platform} eq "linux" && (${os_major} > 3) } {
+        # RJVB : on Linux, 2.x kernels may need special treatment, but booting
+        # a 3.x or 4.x kernel (or later, presumably) doesn't make enough difference
+        # for the userland to justify upgrading all ports. Clamp everyone to 3
+        # until we encounter a backwards-incompatibile kernel.
+        set os_major 3
+    }
     set os_minor [lindex [split $os_version .] 1]
-    set os_platform [string tolower $tcl_platform(os)]
     # Remove trailing "Endian"
     set os_endian [string range $tcl_platform(byteOrder) 0 end-6]
     set os_subplatform {}
@@ -4870,12 +4879,21 @@ proc macports::_upgrade {portname dspec variations options {depscachename {}}} {
     }
     set requestedflag [$regref requested]
     set os_platform_installed [$regref os_platform]
-    set os_major_installed [$regref os_major]
-    # These might error if the info is not present in the registry.
-    if {[catch {$regref cxx_stdlib} cxx_stdlib_installed]} {
+    if {$macports::os_platform eq "darwin"} {
+        set os_major_installed [$regref os_major]
+        # These might error if the info is not present in the registry.
+        if {[catch {$regref cxx_stdlib} cxx_stdlib_installed]} {
+            set cxx_stdlib_installed ""
+        }
+        if {[catch {$regref cxx_stdlib_overridden} cxx_stdlib_overridden]} {
+            set cxx_stdlib_overridden 0
+        }
+    } else {
+        # esp. on Linux there's no point in looking at the kernel version
+        global macports::os_major
+        set os_major_installed ${macports::os_major}
+        # nor at cxx_ stdlib stuff
         set cxx_stdlib_installed ""
-    }
-    if {[catch {$regref cxx_stdlib_overridden} cxx_stdlib_overridden]} {
         set cxx_stdlib_overridden 0
     }
     if {[dict exists $options ports_do_dependents]} {
@@ -5941,6 +5959,7 @@ proc macports::revupgrade_update_cxx_stdlib {fancy_output {revupgrade_progress "
 # @return 1 if ports were rebuilt and this function should be called again,
 #         0 otherwise.
 proc macports::revupgrade_scanandrebuild {broken_port_counts_name options} {
+    global macports::os_platform
     upvar $broken_port_counts_name broken_port_counts
     variable ui_options; variable ui_prefix
     variable cxx_stdlib; variable revupgrade_mode
@@ -5959,7 +5978,7 @@ proc macports::revupgrade_scanandrebuild {broken_port_counts_name options} {
     set broken_files [list]
     set binaries [registry::file search active 1 binary 1]
     set binary_count [llength $binaries]
-    if {$binary_count > 0} {
+    if {$binary_count > 0 && $macports::os_platform eq "darwin"} {
         ui_msg "$ui_prefix Scanning binaries for linking errors"
         set handle [machista::create_handle]
         if {$handle eq "NULL"} {
