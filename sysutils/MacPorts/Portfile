# -*- coding: utf-8; mode: tcl; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 4; truncate-lines: t -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4

## TODO

PortSystem          1.0
PortGroup           github 1.0

github.setup        macports macports-base 2.9.3 v
name                MacPorts

categories          sysutils macports
platforms           darwin freebsd linux
maintainers         gmail.com:rjvbertin lists.macports.org:macports-mgr
license             BSD

description         The MacPorts Infrastructure
long_description \
   MacPorts provides the infrastructure that allows easy installation and \
   management of freely available software on Mac OS X 10.4 or newer systems.

notes "This port cannot directly be used to upgrade MacPorts; use 'port\
selfupdate' for that."

homepage            https://www.macports.org
distname            ${name}-${version}
github.tarball_from releases
# testing subdir is for non-final releases only
#dist_subdir         ${name}/testing
use_bzip2           yes

checksums           rmd160 51547bd24f101b75e69905495c5a8cb7ca120ab4 \
                    sha256 ff98de0ad8ef6156c3231fff0c9c87b4adf8441ff039746bc16bf511f4905d3c

if {![string match /* ${prefix}]} {
    # this is for `portindex`:
    set prefix "/opt/local"
    ui_debug "Prefix not set to a path, setting it to /opt/local"
}

if {![info exists current_prefix]} {
    set current_prefix  ${prefix}
    ui_debug "current_prefix set to ${current_prefix}"
} else {
    ui_debug "current_prefix already set to ${current_prefix}"
}

if {![info exists altprefix]} {
    if {${prefix} eq "/opt/local"} {
        set altprefix "/alt/local"
        ui_debug "prefix=/opt/local => altprefix=${altprefix}"
    } elseif {${prefix} eq "/alt/local"} {
        set altprefix "/opt/local"
        ui_debug "prefix=/alt/local => altprefix=${altprefix}"
    } else {
        ui_error "Unforeseen 'prefix' value \"${prefix}\""
        return -code error "Unforeseen configuration, bailing!"
    }
} else {
    ui_debug "altprefix already set to ${altprefix}"
}

if {${subport} eq "${name}-devel"} {
    variant keep_prefix description "Use configured prefix instead of enforcing /opt/local" {}
    if {![variant_isset keep_prefix]} {
        post-configure {
            prefix  /opt/local
            ui_warn "${subport} configured to install into *hardcoded* ${prefix}"
        }
    }
    default_variants-append \
                    +keep_prefix
}

subport ${name}-devel {
    description     {*}${description}. Installs to ${prefix}. Follows git/master.
    long_description \
                    {*}${long_description} Builds for installation into ${prefix} but \
                    cannot be installed like a regular port. Instead, use one of the \
                    packaging options (`port pkg` or `port dpkg`). \nFollows git/master.
}

subport ${name}-altdevel {
    description     Like ${name}-devel but installs to the alternative prefix ${altprefix}.
    long_description \
                    {*}${long_description} Installs to the alternative prefix ${altprefix} \
                    instead of ${current_prefix} .\
                    For testing new \"base\" releases, but also can also be installed as any \
                    other port under the sun. \nFollows git/master.
    notes
}

if {${subport} eq "${name}"} {
    PortGroup stub 1.0
    description-append "The MacStrop version of port:${subport} is a stub"
    long_description-append "\nThe MacStrop version of port:${subport} is a stub"
    return
}

# Readline is disabled by default to avoid support issues with people who
# have a readline in /usr/local. Since this portfile is presumably used in a
# clean environment, enable it here.
configure.args      --enable-readline

# We don't want to use anything supplied by ports when building MacPorts itself.
# with the possible exception of the linker.
post-extract {
    if {[file exists ${current_prefix}/bin/ld]} {
        xinstall -m 755 -d ${worksrcpath}/../bin
        ln -s ${current_prefix}/bin/ld ${worksrcpath}/../bin
    }
#     if {![file exists ${worksrcpath}/configure.stock]} {
#         file rename ${worksrcpath}/configure ${worksrcpath}/configure.stock
#     }
}

if {${os.platform} eq "darwin"} {
    set defaultpath /usr/bin:/bin:/usr/sbin:/sbin
} elseif {${prefix} ne "/usr/local"} {
    # important to include /usr/local/bin, esp. on *BSD!
    set defaultpath /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
}

if {[file exists ${workpath}/bin]} {
    configure.env   PATH=${workpath}/bin:${defaultpath}
} else {
    configure.env   PATH=${defaultpath}
}

# Some of MacPorts' default flags don't play well when we're building MacPorts
# itself; nuke them. Do all this before configuring the subports and Linux build, below.
configure.cppflags
configure.ldflags
configure.cc_archflags
configure.objc_archflags
configure.ld_archflags
compiler.cpath
compiler.library_path
configure.cxx_stdlib

# import the LTO PortGroup after resetting all the above flags
# building with LTO worked for a while by adding -fno-lto in the proper places
# but that is no longer the case, sadly.
set LTO.disable_LTO yes
PortGroup           LTO 1.0
PortGroup           locale_select 1.0
PortGroup           save_configure_cmd 1.0

use_autoreconf  yes
autoreconf.args -fvi

patch.pre_args      -Np1

pre-configure {
    if {[file exists ${worksrcpath}/configure] \
            && [file exists ${worksrcpath}/config.log]
            && [file mtime ${worksrcpath}/aclocal.m4] <= [file mtime ${worksrcpath}/configure]
            && [file mtime ${worksrcpath}/configure.ac] <= [file mtime ${worksrcpath}/configure]} {
        # no need to waste time again
        use_autoreconf no
        if {${os.platform} ne "darwin"} {
            # check if we need to remove something that would have gotten removed by
            # re-generating the configure script:
            if {![catch {fgrep "rdar://7244457" ${worksrcpath}/configure > /dev/null}]} {
                system -W ${worksrcpath} "${patch.cmd} ${patch.pre_args} ${filespath}/lamarck/patch-configure-libcurl.diff"
            }
        }
    }
}

# MacPorts' configure removes ${prefix}/bin from $PATH,
# so better do not use ccache, to avoid problems.
if {[tbool configure.ccache] || [tbool configureccache]} {
    if {![file exists /usr/bin/ccache] && ![file exists /usr/local/bin/ccache]} {
        ui_warn "disabling ccache"
        configure.ccache no
    }
}

configure.save_configure_cmd "install log"

if {${subport} ne "${name}"} {
    if {${subport} eq "${name}-altdevel"} {
        # consolidate the still dynamic value of langselect_keep_locales_file:
        langselect_keep_locales_file ${langselect_keep_locales_file}
        set prefix ${altprefix}
        ui_debug "${subport} uses prefix=altprefix=${prefix} !"
        configure.args-append \
                    --with-no-root-privileges
    } else {
        ui_warn "## REMOVE THIS WHEN DONE ##"
        ### ALSO REMOVE revbump BELOW!
        pre-fetch {
            ui_error "Upgrade in progress, don't install the current version"
            return -code error "port not ready"
        }
    }
    fetch.type      git
##    See https://github.com/macports/macports-base/releases/latest for release info and the "number of commits
##    to master since release"; use the commit before the 1st one in that list as the target for the custom
##    version tag.
#     RJVB-v2.6.2-86-gca071954
#     git.branch      718e903df8a22c916f9032564fb1436c8da6ebdb
##     after `git tag RJVB-v2.7.1 -a -m "RJVB 2.7.1 release tag" 8e66a82b3fb50812c05a19b7bb49e1eec86ed708`
##     after `git tag RJVB-v2.9.3 -a -m "RJVB 2.9.3 release tag" b6878b17059c12ff056931fa50ae2172074e57ea`
##     after `git tag RJVB-v2.10.0 -a -m "RJVB 2.10.0 release tag" 1e63542e7b724ca949ffb0e273e68d75529df55e`
##     after `git tag RJVB-v2.10.1 -a -m "RJVB 2.10.1 release tag" 1612b9df8e4b7b83ef8702e3efaefd44fad8acd1`
    git.branch      96520f22738465a4427f32cce9a773c3fd393bdc
    version         2.10.1.1 ; revision 2
    epoch           240810
    # the version from autoconf (config/macports_version), which isn't very useful in the master branch:
    set macports_version 2.10.99
    worksrcdir      ${name}-git
    distname        ${name}-git
    if {${os.platform} ne "darwin"} {
        PortGroup   conflicts_build 1.0

        # the configure script might pick up the linker interface libraries from our
        # libmd and/or libbsd ports; we don't want Pextlib to depend on those.
        conflicts_build-append \
                    libmd-dev \
                    libbsd-dev

        # maybe only Clang needs to be told to pull in libm but it won't hurt with other compilers
        configure.env-append \
                    "LIBS=-lm"
        configure.args-append \
                    --enable-shared \
                    --with-applications-dir=${prefix}/Applications \
                    --disable-flag-sanitization
#         # sic!
#         configure.args-append \
#                     --with-mtree=${current_prefix}/bin/mtree
        if {[file exists /usr/libexec/openssl11/bin/openssl]} {
            configure.args-append \
                    --with-openssl=/usr/libexec/openssl11/bin/openssl
        }
        compiler.whitelist \
                    clang macports-clang
        post-configure {
            reinplace "s|.*undef HAVE_SETMODE.*|\#define HAVE_SETMODE 1|g" ${worksrcpath}/src/config.h
            reinplace "s|.*undef HAVE_STRLCAT.*|\#define HAVE_STRLCAT 1|g" ${worksrcpath}/src/config.h
            reinplace "s|LIBS+= \$\{CURL_LIBS\}|LIBS+= -lbsd \$\{CURL_LIBS\}|g" ${worksrcpath}/src/pextlib1.0/Makefile
        }
    }

    # add the `port environment` command
    patchfiles-append \
                    patch-port-environment-option.diff \
                    patch-macports.tcl-environment-option.diff
    # - don't generate a .CC_PRINT_OPTIONS file
    # - use tar's -J option for .txz archives
    patchfiles-append \
                    patch-no-CCPRINT.diff \
                    patch-tar-cJf.diff
    # record successfully applied patchfiles in the statefile:
    patchfiles-append \
                    patch-record-patches-in-statefile.diff

#     # workaround to restore the error message no longer printed when a conflicting port is active
#     patchfiles-append \
#                     patch-workaround-missing-error-msgs.diff
    # do not os_arch=x86_64->i386 on Linux.
    patchfiles-append \
                    patch-os_arch-linux.diff
    # avoid converting an empty env. array to a string (raises error)
    patchfiles-append \
                    patch-ignore-empty-env_array.diff
#     # a prototype implementation of a more generic `port info --var foo <port>` option
#     patchfiles-append \
#                     patch-port-info--var-prototype.diff
    # a prototype implementation of platform os version {} else {}
    patchfiles-append \
                    patch-platform-command.diff
    # make `port provides` support a symlinked prefix
    patchfiles-append \
                    patch-portprovides-support-symlinked-prefix.diff
    if {${os.platform} ne "darwin"} {
        pre-patch {
            ui_info "      Patching for ${os.platform}"
        }
        # Lamarck isn't Darwin :)
        patchfiles-append \
                    lamarck/patch-aclocalm4-libcurl.diff \
                    lamarck/patch-restore-dpkg+rpm.diff \
                    lamarck/patch-fileIsBinary-for-linux.diff \
                    lamarck/patch-no-enforced-universal-on-linux.diff \
                    lamarck/patch-machistawrap.diff \
                    lamarck/patch-pextlib-no-sip.diff \
                    lamarck/patch-pextlib-passwd-fields.diff \
                    lamarck/patch-no-arch-flag.diff \
                    lamarck/patch-vcs-from-macports.diff \
                    lamarck/patch_sysctlbyname_emu.diff
        if {${os.platform} eq "linux"} {
            # Debian provides "fmtree" in the freebsd-buildutils package
            patchfiles-append \
                    lamarck/patch-xinstall-have_setmode.diff \
                    lamarck/patch-configure-mtree.diff
        } else {
            // for now this means freebsd
            patchfiles-append \
                    lamarck/patch-for-freebsd.diff
        }
    } else {
        # on Darwin we only restore `port dpkg`
        patchfiles-append \
                    patch-restore-dpkg.diff
    }

    # <RJVB personal patches
    patchfiles-append \
                    patch-no-update-nagging.diff \
                    patch-curl-fallback.diff \
                    patch-better-registry-error.diff \
                    port-o-option-default.diff
    # don't open the logfile in append mode.
    # This should really be a configurable option!
    patchfiles-append \
                    patch-truncate-logfile.diff \
                    patch-silent-command-exec.diff
    # show ui_info messages during `port info`
    patchfiles-append \
                    patch-ui_info-in-info.diff
    # add a `contains` action to options variables
    patchfiles-append \
                    patch-option-contains.diff
    # port -f edit foo opens the portfile in vi[m] regardless of MP_EDITOR, VISUAL or EDITOR
    patchfiles-append \
                    patch-port-force-edit.diff
    # port -f work foo always shows the workdir regardless of whether it exists
    patchfiles-append \
                    patch-port-force-work-command.diff \
                    patch-allow-clazy-and-gcclibcxx.diff
    # make xinstall show errors from chmod and implement the -v option
    patchfiles-append \
                    patch-xinstall-mkdirchmod-warning.diff
    # add `port {history,diff,status,add,commit}` commands for git-based port trees
    patchfiles-append \
                    patch-action_history.diff
    # port -f activate foo will do a de/activate cycle (on the selected port if multiple variants are installed)
    patchfiles-append \
                    patch-allow-reactivation.diff
    patchfiles-append \
                    patch-headerpaths,pad.diff
    # make the PortGroup search follow the same rules as Portfile searches
    # so that custom port trees can override PGs too.
    patchfiles-append \
                    patch-hierarchical-portgroup-search.diff
    # only set up ccachedir if it doesn't already exist, so users can configure
    # a central, persistent ccachedir.
    patchfiles-append \
                    patch-conditional-ccachedir-creation.diff
    patchfiles-append \
                    patch-nowarn-unsigned-source.diff \
                    patch-wrong_stdlib-no-error-and-not-on-linux.diff \
                    patch-macports-stdlibc-only-on-darwin.diff \
                    patch-parallel-xz.diff \
                    patch-linux-no-default-compdeps.diff
    # show what's going on while making Tcl pkgIndex.tcl files
    patchfiles-append \
                    patch-no-voodoo.diff
    # Don't show pointless progressbars (= that show no progress) and don't display them
    # when running in or pushed to the background
    # disable the progressbar on port de/activation; too much unjustified overhead
    patchfiles-append \
                    patch-progressbar-tweaks.diff
    # export get_logfile and flush_logfile function, for instance so that ports can
    # save parts of it for later reference.
    patchfiles-append \
                    patch-export-logfilename.diff
    # composite patch (too hard to disentangle) that
    # 1- adds a +fromHost variant on Linux (= make the port a stub; the equivalent host packages are installed)
    # 2- adds post-parse load of the devport helper PG which itself adds missing build depencies on devports
    patchfiles-append \
                    patch-fromHost_variant-and-call-devport_helper-PG.diff
    if {${os.platform} ne "darwin"} {
       # Skip the pre- and post- blocks if a stub port has been defined
       # using the LinuxPorts version of the stub-1.0 PG:
        patchfiles-append \
                    lamarck/patch-stubports-no-pre-or-post.diff
    } else {
        # allow the user to move the host's curl-config script to curl-config.host
        # so it isn't usually found (I/RJVB do/es that on OS X).
        patchfiles-append \
                    patch-curlconfig-host.diff
    }
    patchfiles-append \
                    patch-cregistry-announce-vacuuming.diff
    # RJVB personal patches>

    post-patch {
        # there must be a more elegant way to get everyone to use the right `ar` and `ranlib`
        # commands but that would require running autoreconf (and fails on the required
        # AM_PROG_AR macro).
        reinplace "s|@STLIB_LD@|${configure.ar} crs|g" ${worksrcpath}/src/cregistry/Makefile.in
        reinplace "s|@RANLIB@|${configure.ranlib}|g" ${worksrcpath}/src/cregistry/Makefile.in
    }

#     # set up for out-of-source build == not supported because of "vendor" contrib stuff.
#     build.dir       ${workpath}/build
#     configure.dir   ${build.dir}
#     configure.cmd   ../${worksrcdir}/configure
#     configure.pre_args-append \
#                     --srcdir=${worksrcpath}
    pre-build {
        # replace the version generated by autoconf with the port version, so that
        # `port version` returns the same value as `port info --version MacPorts-devel`.
        reinplace "s|macports_version .*|macports_version \"${version}\"|g" \
            ${worksrcpath}/src/macports1.0/macports_autoconf.tcl
        reinplace "s|MACPORTS_VERSION	= .*|MACPORTS_VERSION	= ${version}|g" \
            ${worksrcpath}/Mk/macports.autoconf.mk
    }
    post-build {
        system -W ${worksrcpath}/src/cregistry "${build.cmd} -w macports.sqlext"
    }

    langselect_dirs_dir-append ${prefix}/share/nls
    post-destroot {
        if {[variant_isset langselect]} {
            set keep_languages ""
            foreach l ${langselect_keep_languages} {
                set keep_languages "${keep_languages} [string tolower ${l}]"
            }
            ui_debug "Pruning Tcl msg files (~\{${keep_languages}\}) in [glob -nocomplain -types d ${destroot}${prefix}/libexec/macports/lib/tcl*/msgs]"
            foreach ldirdir [glob -nocomplain -types d ${destroot}${prefix}/libexec/macports/lib/tcl*/msgs] {
                foreach l [glob -nocomplain ${ldirdir}/*.msg] {
                    set lang [file rootname [file tail ${l}]]
                    if {[lsearch -exact ${keep_languages} ${lang}] eq "-1"} {
                        ui_info "rm ${l}"
                        file delete -force ${l}
                    } else {
                        ui_debug "won't delete ${l} (${lang})"
                    }
                }
            }
        }
        if {${os.platform} eq "linux"} {
            file rename ${destroot}${prefix}/var/macports ${destroot}${prefix}/var/lnxports
            ln -s lnxports ${destroot}${prefix}/var/macports
        }
        if {[file exists ${worksrcpath}/src/cregistry/macports.sqlext]} {
            xinstall -m 755 ${worksrcpath}/src/cregistry/macports.sqlext \
                ${destroot}${prefix}/libexec/macports/lib/registry2.0/
        }
    }
}

post-destroot {
    # Only install .default versions of config files.
    delete ${destroot}${prefix}/etc/macports/archive_sites.conf
    delete ${destroot}${prefix}/etc/macports/macports.conf
    delete ${destroot}${prefix}/etc/macports/pubkeys.conf
    delete ${destroot}${prefix}/etc/macports/sources.conf
    delete ${destroot}${prefix}/etc/macports/variants.conf
#     platform linux {
#         system -W ${destroot} "patch -Np0 -i ${filespath}/lamarck/patch-no-headerpad_max.diff"
#     }
}

if {!${package.flat}} {
    package.scripts   ${package.resources}
}
set resources_lang ${package.resources}/English.lproj

pre-pkg {
    file copy -force -- ${worksrcpath}/portmgr/dmg/ReadMe.rtf ${resources_lang}
    file copy -force -- ${worksrcpath}/portmgr/dmg/License.html ${resources_lang}
    file copy -force -- ${worksrcpath}/portmgr/dmg/postflight ${package.scripts}
    file copy -force -- ${worksrcpath}/src/upgrade_sources_conf_default.tcl ${package.scripts}
    file copy -force -- ${worksrcpath}/src/images_to_archives.tcl ${package.scripts}
    file copy -force -- ${worksrcpath}/src/dedup_portfiles.tcl ${package.scripts}
    file copy -force -- ${worksrcpath}/src/cxx_stdlib_overridden.tcl ${package.scripts}

    file attributes ${package.scripts}/postflight -permissions 0755
    file attributes ${package.scripts}/upgrade_sources_conf_default.tcl -permissions 0755
    file attributes ${package.scripts}/images_to_archives.tcl -permissions 0755
    file attributes ${package.scripts}/dedup_portfiles.tcl -permissions 0755
    file attributes ${package.scripts}/cxx_stdlib_overridden.tcl -permissions 0755
    file attributes ${resources_lang}/ReadMe.rtf -permissions 0644
    file attributes ${resources_lang}/License.html -permissions 0644

    reinplace "s|__PREFIX__|${prefix}|g" \
              ${resources_lang}/ReadMe.rtf
    if {${os.major} < 11 || ${os.major} >= 20} {
        reinplace "s|is built|contains a Universal installer|" ${resources_lang}/ReadMe.rtf
    }

    if {[vercmp $macosx_deployment_target >= 11]} {
        set mdt_major [lindex [split $macosx_deployment_target .] 0]
    } else {
        set mdt_major $macosx_deployment_target
    }
    reinplace "s|__XVERS__|${mdt_major}|" ${resources_lang}/ReadMe.rtf
    if {${package.flat}} {
        file copy -force -- ${worksrcpath}/portmgr/dmg/Distribution ${workpath}
        file attributes ${workpath}/Distribution -permissions 0644
        reinplace "s|__PREFIX__|${prefix}|g" ${workpath}/Distribution
        switch $macosx_deployment_target {
            10.4    {set xcode_cli "Command Line Support"}
            10.5    -
            10.6    {set xcode_cli "UNIX Development"}
            default {set xcode_cli "Command Line Tools or UNIX Development"}
        }
        reinplace "s|__XCODECLITOOLS__|${xcode_cli}|g" ${workpath}/Distribution
        reinplace "s|__XVERS__|$mdt_major|" ${workpath}/Distribution
        if {[vercmp $macosx_deployment_target 11] >= 0} {
            set next_major [expr {[lindex [split $macosx_deployment_target .] 0]+1}].0
            set hostArchs { hostArchitectures="arm64,x86_64"}
        } else {
            set next_major [lindex [split $macosx_deployment_target .] 0].[expr {[lindex [split $macosx_deployment_target .] 1] + 1}]
            set hostArchs ""
        }
        reinplace "s|__NEXT_XVERS__|$next_major|" ${workpath}/Distribution
        reinplace "s|__ARCHS__|$hostArchs|" ${workpath}/Distribution
        set pkgvers ${version}
        if {$revision != 0} {
            append pkgvers _${revision}
        }
        reinplace "s|__VERSION__|${pkgvers}|" ${workpath}/Distribution
        move ${package.scripts}/postflight ${package.scripts}/postinstall
    } else {
        file copy -force -- ${worksrcpath}/portmgr/dmg/InstallationCheck ${package.resources}
        file copy -force -- ${worksrcpath}/portmgr/dmg/InstallationCheck.strings ${resources_lang}
        file attributes ${package.resources}/InstallationCheck -permissions 0755
        file attributes ${resources_lang}/InstallationCheck.strings -permissions 0644
        reinplace "s|__PREFIX__|${prefix}|g" \
              ${package.resources}/InstallationCheck
        reinplace "s|__DARWINVERS__|${os.major}|" ${package.resources}/InstallationCheck
        reinplace "s|__XVERS__|${macosx_deployment_target}|" \
            ${resources_lang}/InstallationCheck.strings
    }

    reinplace "s|or newer ||" ${resources_lang}/Welcome.html
    if {${os.major} >= 16} {
        reinplace "s|Mac OS X 10\\.4|macOS ${mdt_major}|" ${resources_lang}/Welcome.html
    } elseif {${os.major} >= 12} {
        reinplace "s|Mac OS X 10\\.4|OS X ${mdt_major}|" ${resources_lang}/Welcome.html
    } elseif {${os.major} > 8} {
        reinplace "s|10\\.4|${mdt_major}|" ${resources_lang}/Welcome.html
    }
}

platform darwin 8 {
    # has ${prefix}/include ahead of /usr/include in default search path
    compiler.blacklist apple-gcc-4.2
}

platform darwin 8 powerpc {
    pre-configure {
        set sdkrootpath /Developer/SDKs/MacOSX10.4u.sdk
        if {[file exists ${sdkrootpath}]} {
            # User has SDK installed.
            set tclstubpath /System/Library/Frameworks/Tcl.framework/Versions/8.4/libtclstub8.4.a
            if {![file exists ${sdkrootpath}${tclstubpath}]} {
                ui_msg "Fixing your MacOSX10.4u installation by copying libtclstub8.4.a to ${sdkrootpath}${tclstubpath}"
                xinstall -p ${tclstubpath} ${sdkrootpath}${tclstubpath}
            }
            # Supply architecture and sysroot flags to build MacPorts universal.
            configure.cflags-append -isysroot ${sdkrootpath} -arch ppc -arch i386
            configure.env-append "SHLIB_LDFLAGS=-Wl,-syslibroot,${sdkrootpath} -arch ppc -arch i386"
        }
    }
}

platform darwin 8 i386 {
    # Supply architecture flags to build MacPorts universal.
    configure.cflags-append -arch ppc -arch i386
    configure.args-append SHLIB_LDFLAGS='-arch ppc -arch i386'
}

platform darwin 9 {
    # Supply architecture flags to build MacPorts universal.
    configure.cflags-append -arch ppc -arch i386
    configure.args-append SHLIB_LDFLAGS='-arch ppc -arch i386'
}

platform darwin {
    if {${os.major} >= 20} {
        # Big Sur runs on arm64 and x86_64.
        configure.cflags-append -arch arm64 -arch x86_64
        configure.args-append SHLIB_LDFLAGS='-arch arm64 -arch x86_64'

        # Notarization requires static libs to be signed, but
        # codesign(1) doesn't seem to be able to sign them properly.
        post-destroot {
            delete {*}[glob ${destroot}${prefix}/libexec/macports/lib/libtclstub*.a] \
                {*}[glob ${destroot}${prefix}/libexec/macports/lib/tdbc*/libtdbcstub*.a] \
                {*}[glob ${destroot}${prefix}/libexec/macports/lib/itcl*/libitclstub*.a]
        }
    } elseif {${os.major} >= 11} {
        # Lion through Catalina only run on x86_64.
        configure.cflags-append -arch x86_64
        configure.args-append SHLIB_LDFLAGS='-arch x86_64'
    } elseif {${os.major} == 10} {
        # Supply architecture flags to build MacPorts universal.
        configure.cflags-append -arch x86_64 -arch i386
        configure.args-append SHLIB_LDFLAGS='-arch x86_64 -arch i386'
    }

    # FIXME: "error: The specified item could not be found in the keychain."
    if {${os.major} >= 18} {
        # Workaround: in-tree tclsh can't be used to install tcllib
        # when it has been signed (ignores DYLD_* vars).
        patchfiles-append   tclsh.patch
    #    post-build {
    #        if {[getuid] == 0 && [info exists sudo_user]} {
    #            set codesign_cmd "/usr/bin/env SUDO_USER=${sudo_user} HOME=/Users/${sudo_user} ${build.cmd} codesign"
    #        } else {
    #            set codesign_cmd "${build.cmd} codesign"
    #        }
    #        system -W ${worksrcpath} ${codesign_cmd}
    #    }
    }
}

destroot.violate_mtree yes
destroot.keepdirs    ${destroot}${prefix}/include \
                     ${destroot}${prefix}/lib \
                     ${destroot}${prefix}/libexec \
                     ${destroot}${prefix}/sbin \
                     ${destroot}${prefix}/share/doc \
                     ${destroot}${prefix}/share/info \
                     ${destroot}${prefix}/share/man/cat1 \
                     ${destroot}${prefix}/share/man/cat2 \
                     ${destroot}${prefix}/share/man/cat3 \
                     ${destroot}${prefix}/share/man/cat4 \
                     ${destroot}${prefix}/share/man/cat5 \
                     ${destroot}${prefix}/share/man/cat6 \
                     ${destroot}${prefix}/share/man/cat7 \
                     ${destroot}${prefix}/share/man/cat8 \
                     ${destroot}${prefix}/share/man/cat9 \
                     ${destroot}${prefix}/share/man/catl \
                     ${destroot}${prefix}/share/man/catn \
                     ${destroot}${prefix}/share/man/man1 \
                     ${destroot}${prefix}/share/man/man2 \
                     ${destroot}${prefix}/share/man/man3 \
                     ${destroot}${prefix}/share/man/man4 \
                     ${destroot}${prefix}/share/man/man5 \
                     ${destroot}${prefix}/share/man/man6 \
                     ${destroot}${prefix}/share/man/man7 \
                     ${destroot}${prefix}/share/man/man8 \
                     ${destroot}${prefix}/share/man/man9 \
                     ${destroot}${prefix}/share/man/manl \
                     ${destroot}${prefix}/share/man/mann \
                     ${destroot}${prefix}/share/nls/C \
                     ${destroot}${prefix}/share/skel \
                     ${destroot}${prefix}/var/cache \
                     ${destroot}${prefix}/var/db \
                     ${destroot}${prefix}/var/macports/build \
                     ${destroot}${prefix}/var/macports/distfiles \
                     ${destroot}${prefix}/var/macports/registry \
                     ${destroot}${prefix}/var/macports/sip-workaround \
                     ${destroot}${prefix}/var/run \
                     ${destroot}${prefix}/var/spool \
                     ${destroot}${prefix}/share/skel \
                     ${destroot}${prefix}/var/cache \
                     ${destroot}${prefix}/var/db \
                     ${destroot}${prefix}/var/macports/build \
                     ${destroot}${prefix}/var/macports/distfiles \
                     ${destroot}${prefix}/var/macports/registry \
                     ${destroot}${prefix}/var/macports/sip-workaround \
                     ${destroot}${prefix}/var/run \
                     ${destroot}${prefix}/var/spool
if {![variant_isset langselect]} {
    destroot.keepdirs-append \
                     ${destroot}${prefix}/share/nls/af_ZA.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/af_ZA.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/bg_BG.CP1251 \
                     ${destroot}${prefix}/share/nls/cs_CZ.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/da_DK.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/da_DK.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/de_AT.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/de_AT.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/de_CH.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/de_CH.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/de_DE.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/de_DE.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/el_GR.ISO8859-7 \
                     ${destroot}${prefix}/share/nls/en_AU.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/en_AU.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/en_AU.US-ASCII \
                     ${destroot}${prefix}/share/nls/en_CA.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/en_CA.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/en_CA.US-ASCII \
                     ${destroot}${prefix}/share/nls/en_GB.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/en_GB.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/en_GB.US-ASCII \
                     ${destroot}${prefix}/share/nls/en_NZ.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/en_NZ.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/en_NZ.US-ASCII \
                     ${destroot}${prefix}/share/nls/en_US.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/en_US.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/es_ES.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/es_ES.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/et_EE.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/fi_FI.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/fi_FI.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/fr_BE.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/fr_BE.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/fr_CA.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/fr_CA.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/fr_CH.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/fr_CH.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/fr_FR.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/fr_FR.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/hi_IN.ISCII-DEV \
                     ${destroot}${prefix}/share/nls/hr_HR.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/hu_HU.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/is_IS.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/is_IS.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/it_CH.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/it_CH.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/it_IT.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/it_IT.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/ja_JP.SJIS \
                     ${destroot}${prefix}/share/nls/ja_JP.eucJP \
                     ${destroot}${prefix}/share/nls/ko_KR.eucKR \
                     ${destroot}${prefix}/share/nls/la_LN.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/la_LN.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/la_LN.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/la_LN.ISO8859-4 \
                     ${destroot}${prefix}/share/nls/la_LN.US-ASCII \
                     ${destroot}${prefix}/share/nls/lt_LT.ISO8859-4 \
                     ${destroot}${prefix}/share/nls/nl_BE.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/nl_BE.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/nl_NL.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/nl_NL.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/no_NO.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/no_NO.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/pl_PL.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/pt_BR.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/pt_PT.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/pt_PT.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/ro_RO.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/ru_RU.CP866 \
                     ${destroot}${prefix}/share/nls/ru_RU.ISO8859-5 \
                     ${destroot}${prefix}/share/nls/ru_RU.KOI8-R \
                     ${destroot}${prefix}/share/nls/sk_SK.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/sl_SI.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/sv_SE.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/sv_SE.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/tr_TR.ISO8859-9 \
                     ${destroot}${prefix}/share/nls/uk_UA.ISO8859-5 \
                     ${destroot}${prefix}/share/nls/uk_UA.KOI8-U \
                     ${destroot}${prefix}/share/nls/zh_CN.eucCN \
                     ${destroot}${prefix}/share/nls/zh_TW.Big5
}

known_fail yes
if {${subport} ne "${name}-altdevel"} {
    pre-install {
        ui_error ""
        ui_error "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        ui_error "!! DO NOT INSTALL THE MACPORTS PORT !!"
        ui_error "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        ui_error "The MacPorts port is only used to build the installers you can download from"
        ui_error "macports.org It is not intended for installation by a user, and doing so will"
        ui_error "overwrite your MacPorts installation and render it unusable when removed."
        ui_error ""
        error "Installation aborted"
    }
} else {
    post-activate {
        ui_msg "--->   All Done"
    }
}

github.livecheck.regex  {([0-9.]+)}

if {[info commands pre-dpkg] ne ""} {
    pre-dpkg {
        ui_debug "Debian package will be created using PATH=$env(PATH)"
    }
}
