PortSystem          1.0
PortGroup           github 1.0

github.setup        macports macports-base 2.6.2 v
name                MacPorts

categories          sysutils macports
platforms           darwin freebsd
maintainers         lists.macports.org:macports-mgr
license             BSD

description         The MacPorts Infrastructure
long_description \
   MacPorts provides the infrastructure that allows easy installation and \
   management of freely available software on Mac OS X 10.4 or newer systems.

notes "This port cannot directly be used to upgrade MacPorts; use 'port\
selfupdate' for that."

homepage            https://www.macports.org
distname            ${name}-${version}
github.tarball_from releases
use_bzip2           yes

checksums           rmd160 1400db2449d50e77d5d30e5f0820bb339dc3b080 \
                    sha256 1b58ccbb1cd6c6fab5e1f15b959208ef5233802fc9ac9585037d21c8e42e2b70
subport ${name}-devel {
    description     ${description}. Follows git/master.
    long_description \
                    ${long_description} Follows git/master.
}

set current_prefix  ${prefix}
variant keep_prefix description "Use configured prefix instead of enforcing /opt/local" {}
if {![variant_isset keep_prefix]} {
    # set this to something else when testing a new release (do a full re-configure+build!)
#     prefix          /opt/MPtest
    prefix          /opt/local
}

# Readline is disabled by default to avoid support issues with people who
# have a readline in /usr/local. Since this portfile is presumably used in a
# clean environment, enable it here.
configure.args      --enable-readline

# We don't want to use anything supplied by ports when building MacPorts itself.
# with the possible exception of the linker.
post-extract {
    if {[file exists ${current_prefix}/bin/ld]} {
        xinstall -m 755 -d ${worksrcpath}/../bin
        ln -s ${current_prefix}/bin/ld ${worksrcpath}/../bin
    }
#     if {![file exists ${worksrcpath}/configure.stock]} {
#         file rename ${worksrcpath}/configure ${worksrcpath}/configure.stock
#     }
}

if {${os.platform} eq "darwin"} {
    set defaultpath /usr/bin:/bin:/usr/sbin:/sbin
} elseif {${prefix} ne "/usr/local"} {
    # important to include /usr/local/bin, esp. on *BSD!
    set defaultpath /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
}

if {[file exists ${workpath}/bin]} {
    configure.env   PATH=${workpath}/bin:${defaultpath}
} else {
    configure.env   PATH=${defaultpath}
}

# Some of MacPorts' default flags don't play well when we're building MacPorts
# itself; nuke them. Do all this before configuring the subports and Linux build, below.
configure.cppflags
configure.ldflags
configure.cc_archflags
configure.objc_archflags
configure.ld_archflags
compiler.cpath
compiler.library_path
configure.cxx_stdlib

# import the LTO PortGroup after resetting all the above flags
PortGroup           LTO 1.0
PortGroup           save_configure_cmd 1.0

use_autoreconf  yes
autoreconf.args -fvi

pre-configure {
    if {[file exists ${worksrcpath}/configure] \
            && [file mtime ${worksrcpath}/configure.ac] <= [file mtime ${worksrcpath}/configure]} {
        # no need to waste time again
        use_autoreconf no
    }
}

# MacPorts' configure removes ${prefix}/bin from $PATH,
# so better do not use ccache, to avoid problems.
if {[tbool configure.ccache] || [tbool configureccache]} {
    if {![file exists /usr/bin/ccache] && ![file exists /usr/local/bin/ccache]} {
        ui_warn "disabling ccache"
        configure.ccache no
    }
}

# configure.post_args-append "|& tee -a ${workpath}/.macports.${subport}.configure.log'"
# pre-configure {
#     set cmd [join "${configure.cmd} ${configure.pre_args} ${configure.args}"]
#     configure.pre_args-prepend "-cf '${configure.cmd} "
#     configure.cmd "/bin/csh"
#     ui_debug "configure command set to `${configure.cmd} ${configure.pre_args} ${configure.args} ${configure.post_args}`"
#     system "echo '## ${cmd}' > ${workpath}/.macports.${subport}.configure.log"
# }
configure.save_configure_cmd "install log"

patch.pre_args      -Np1

if {${subport} eq "${name}-devel"} {
    fetch.type      git
##    See https://github.com/macports/macports-base/releases/latest for release info and the "number of commits
##    to master since release"; use the commit before the 1st one in that list as the target for the custom
##    version tag.
#     RJVB-v2.6.2-86-gca071954
#     git.branch      718e903df8a22c916f9032564fb1436c8da6ebdb
##     after `git tag RJVB-v2.7.1 -a -m "RJVB 2.7.1 release tag" 8e66a82b3fb50812c05a19b7bb49e1eec86ed708`
##     RJVB-v2.7.1-55-gee6096ce3
    git.branch      ee6096ce3789742a7961b98bb87abf06b48d2d12
    version         2.7.1.55
    # the version from autoconf (config/macports_version), which is counterproductive in the master branch:
    set macports_version 2.7.99
    worksrcdir      ${name}-git
    distname        ${name}-git
    if {${os.platform} ne "darwin"} {
        # revbump for fixed sandbox/rpm patch:
	   revision [expr ${revision} +1]
        # NB: requires the host's libssl-dev package or whatever provides the openssl headers
        # this to avoid a dependency on port:openssl
        # Idem for sqlite3 (libsqlite3-dev)
        # TODO: check if the code still require -fblocks?!
        configure.cflags-append \
                    -fblocks
        configure.objcflags-append \
                    -fblocks
        # maybe only Clang needs to be told to pull in libm but it won't hurt with other compilers
        configure.env-append \
                    "LIBS=-lm"
        configure.args-append \
                    --enable-shared \
                    --with-applications-dir=${prefix}/Applications \
                    --disable-flag-sanitization
        # sic!
        configure.args-append \
                    --with-mtree=${current_prefix}/bin/mtree
        if {[file exists /usr/libexec/openssl11/bin/openssl]} {
            configure.args-append \
                    --with-openssl=/usr/libexec/openssl11/bin/openssl
        }
        compiler.whitelist \
                    clang macports-clang
        post-configure {
            reinplace "s|.*undef HAVE_SETMODE.*|\#define HAVE_SETMODE 1|g" ${worksrcpath}/src/config.h
            reinplace "s|.*undef HAVE_STRLCAT.*|\#define HAVE_STRLCAT 1|g" ${worksrcpath}/src/config.h
            reinplace "s|LIBS+= \$\{CURL_LIBS\}|LIBS+= -lbsd \$\{CURL_LIBS\}|g" ${worksrcpath}/src/pextlib1.0/Makefile
        }
    }
    post-configure {
        if {${os.platform} eq "darwin"} {
            reinplace "s|-DHAVE_PTHREAD_ATTR_GET_NP=1|-UHAVE_PTHREAD_ATTR_GET_NP|g" \
                ${worksrcpath}/vendor/tcl8.5.19/unix/tclConfig.sh \
                ${worksrcpath}/vendor/tcl8.5.19/unix/dltest/Makefile \
                ${worksrcpath}/vendor/tcl8.5.19/unix/Makefile
            reinplace "s|-DATTRGETNP_NOT_DECLARED|-UATTRGETNP_NOT_DECLARED|g" \
                ${worksrcpath}/vendor/tcl8.5.19/unix/tclConfig.sh \
                ${worksrcpath}/vendor/tcl8.5.19/unix/dltest/Makefile \
                ${worksrcpath}/vendor/tcl8.5.19/unix/Makefile
            reinplace "s|-DHAVE_PTHREAD_GETATTR_NP=1|-UHAVE_PTHREAD_GETATTR_NP|g" \
                ${worksrcpath}/vendor/tcl8.5.19/unix/tclConfig.sh \
                ${worksrcpath}/vendor/tcl8.5.19/unix/dltest/Makefile \
                ${worksrcpath}/vendor/tcl8.5.19/unix/Makefile
        } elseif {${os.platform} eq "linux"} {
            # these get misdetected when building with link-time optimisation because the optimiser strips the code
            # that does the actual test...
            reinplace "s|-DHAVE_PTHREAD_ATTR_GET_NP=1 -DATTRGETNP_NOT_DECLARED=1|-DHAVE_PTHREAD_GETATTR_NP=1|g" \
                ${worksrcpath}/vendor/tcl8.5.19/unix/tclConfig.sh
            reinplace "s|-DHAVE_PTHREAD_ATTR_GET_NP=1 -DATTRGETNP_NOT_DECLARED=1|-UHAVE_PTHREAD_ATTR_GET_NP -UATTRGETNP_NOT_DECLARED -DHAVE_PTHREAD_GETATTR_NP=1|g" \
                ${worksrcpath}/vendor/tcl8.5.19/unix/dltest/Makefile \
                ${worksrcpath}/vendor/tcl8.5.19/unix/Makefile
        }
    }

    # add the `port environment` command
    patchfiles-append \
                    patch-port-environment-option.diff \
                    patch-macports.tcl-environment-option.diff
    # don't generate a .CC_PRINT_OPTIONS file, use tar's -J option for .txz archives
    patchfiles-append \
                    patch-no-CCPRINT.diff \
                    patch-tar-cJf.diff
#     # use HFS compression when activating ports from their "portimage" in ${prefix}/var/macports/software
#     patchfiles-append \
#                     patch-portimage-use-hfsCompression.diff
    # record successfully applied patchfiles in the statefile:
    patchfiles-append \
                    patch-record-patches-in-statefile.diff

    # don't force the use of an "altworkdir" under ~/.macports on users like me. The elegant
    # way would be to make this optional through macports.conf ...
    # mechanism no longer supported upstream.
#     patchfiles-append \
#                     patch-portmain-no-altworkdir.diff

#     # workaround to restore the error message no longer printed when a conflicting port is active
#     patchfiles-append \
#                     patch-workaround-missing-error-msgs.diff
    # do not os_arch=x86_64->i386 on Linux.
    patchfiles-append \
                    patch-os_arch-linux.diff
    # avoid converting an empty env. array to a string (raises error)
    patchfiles-append \
                    patch-ignore-empty-env_array.diff
    # a prototype implementation of a more generic `port info --var foo <port>` option
    patchfiles-append \
                    patch-port-info--var-prototype.diff
    # a prototype implementation of platform os version {} else {}
    patchfiles-append \
                    patch-platform-command.diff
    # make `port provides` support a symlinked prefix
    patchfiles-append \
                    patch-portprovides-support-symlinked-prefix.diff
    if {${os.platform} ne "darwin"} {
        pre-patch {
            ui_info "      Patching for ${os.platform}"
        }
        # Lamarck isn't Darwin :)
        patchfiles-append \
                    lamarck/patch-configure-libcurl.diff \
                    lamarck/patch-restore-dpkg+rpm.diff \
                    lamarck/patch-fileIsBinary-for-linux.diff \
                    lamarck/patch-no-enforced-universal-on-linux.diff \
                    lamarck/patch-machistawrap.diff \
                    lamarck/patch-pextlib-no-sip.diff \
                    lamarck/patch-pextlib-passwd-fields.diff \
                    lamarck/patch-no-arch-flag.diff \
                    lamarck/patch-vcs-from-macports.diff \
                    lamarck/patch_sysctlbyname_emu.diff
        if {${os.platform} eq "linux"} {
            patchfiles-append \
                    lamarck/patch-xinstall-have_setmode.diff
        } else {
            // for now this means freebsd
            patchfiles-append \
                    lamarck/patch-for-freebsd.diff
        }
    } else {
        # on Darwin we only restore `port dpkg`
        patchfiles-append \
                    patch-restore-dpkg.diff
    }

    # <RJVB personal patches
    patchfiles-append \
                    patch-no-update-nagging.diff \
                    patch-curl-fallback.diff \
                    patch-better-registry-error.diff \
                    port-o-option-default.diff \
                    patch-truncate-logfile.diff \
                    patch-silent-command-exec.diff \
                    patch-ui_info-in-info.diff \
                    patch-option-contains.diff \
                    patch-port-force-edit.diff \
                    patch-allow-clazy-and-gcclibcxx.diff \
                    patch-xinstall-mkdirchmod-warning.diff \
                    patch-action_history.diff \
                    patch-allow-reactivation.diff \
                    patch-headerpaths,pad.diff \
                    patch-hierarchical-portgroup-search.diff \
                    patch-conditional-ccachedir-creation.diff \
                    patch-nowarn-unsigned-source.diff \
                    patch-wrong_stdlib-no-error-and-not-on-linux.diff \
                    patch-macports-stdlibc-only-on-darwin.diff \
                    patch-parallel-xz.diff \
                    patch-linux-no-default-compdeps.diff \
                    patch-support-lto.diff \
                    patch-no-voodoo.diff \
                    patch-progressbar-tweaks.diff \
                    patch-export-logfilename.diff \
                    patch-fromHost_variant-and-call-devport_helper-PG.diff
    if {${os.platform} ne "darwin"} {
       # Skip the pre- and post- blocks if a stub port has been defined
       # using the LinuxPorts version of the stub-1.0 PG:
        patchfiles-append \
                    lamarck/patch-stubports-no-pre-or-post.diff
    }
    # RJVB personal patches>

    post-patch {
        # there must be a more elegant way to get everyone to use the right `ar` and `ranlib`
        # commands but that would require running autoreconf (and fails on the required
        # AM_PROG_AR macro).
        reinplace "s|@STLIB_LD@|${configure.ar} crs|g" ${worksrcpath}/src/cregistry/Makefile.in
        reinplace "s|@RANLIB@|${configure.ranlib}|g" ${worksrcpath}/src/cregistry/Makefile.in
    }

#     # set up for out-of-source build == not supported because of "vendor" contrib stuff.
#     build.dir       ${workpath}/build
#     configure.dir   ${build.dir}
#     configure.cmd   ../${worksrcdir}/configure
#     configure.pre_args-append \
#                     --srcdir=${worksrcpath}
    pre-build {
        # replace the version generated by autoconf with the port version, so that
        # `port version` returns the same value as `port info --version MacPorts-devel`.
        reinplace "s|macports_version .*|macports_version \"${version}\"|g" \
            ${worksrcpath}/src/macports1.0/macports_autoconf.tcl
        reinplace "s|MACPORTS_VERSION	= .*|MACPORTS_VERSION	= ${version}|g" \
            ${worksrcpath}/Mk/macports.autoconf.mk
    }
}

post-destroot {
    # Only install .default versions of config files.
    delete ${destroot}${prefix}/etc/macports/archive_sites.conf
    delete ${destroot}${prefix}/etc/macports/macports.conf
    delete ${destroot}${prefix}/etc/macports/pubkeys.conf
    delete ${destroot}${prefix}/etc/macports/sources.conf
    delete ${destroot}${prefix}/etc/macports/variants.conf
#     platform linux {
#         system -W ${destroot} "patch -Np0 -i ${filespath}/lamarck/patch-no-headerpad_max.diff"
#     }
}

if {!${package.flat}} {
    package.scripts   ${package.resources}
}
set resources_lang ${package.resources}/English.lproj

pre-pkg {
    file copy -force -- ${worksrcpath}/portmgr/dmg/ReadMe.rtf ${resources_lang}
    file copy -force -- ${worksrcpath}/portmgr/dmg/License.html ${resources_lang}
    file copy -force -- ${worksrcpath}/portmgr/dmg/postflight ${package.scripts}
    file copy -force -- ${worksrcpath}/src/upgrade_sources_conf_default.tcl ${package.scripts}
    file copy -force -- ${worksrcpath}/src/images_to_archives.tcl ${package.scripts}
    file copy -force -- ${worksrcpath}/src/dedup_portfiles.tcl ${package.scripts}
    file copy -force -- ${worksrcpath}/src/cxx_stdlib_overridden.tcl ${package.scripts}

    file attributes ${package.scripts}/postflight -permissions 0755
    file attributes ${package.scripts}/upgrade_sources_conf_default.tcl -permissions 0755
    file attributes ${package.scripts}/images_to_archives.tcl -permissions 0755
    file attributes ${package.scripts}/dedup_portfiles.tcl -permissions 0755
    file attributes ${package.scripts}/cxx_stdlib_overridden.tcl -permissions 0755
    file attributes ${resources_lang}/ReadMe.rtf -permissions 0644
    file attributes ${resources_lang}/License.html -permissions 0644

    reinplace "s|__PREFIX__|${prefix}|g" \
              ${resources_lang}/ReadMe.rtf
    if {${os.major} < 11} {
        reinplace "s|is built|contains a Universal installer|" ${resources_lang}/ReadMe.rtf
    }
    reinplace "s|__XVERS__|${macosx_deployment_target}|" ${resources_lang}/ReadMe.rtf
    if {${package.flat}} {
        file copy -force -- ${worksrcpath}/portmgr/dmg/Distribution ${workpath}
        file attributes ${workpath}/Distribution -permissions 0644
        reinplace "s|__PREFIX__|${prefix}|g" ${workpath}/Distribution
        switch $macosx_deployment_target {
            10.4    {set xcode_cli "Command Line Support"}
            10.5    -
            10.6    {set xcode_cli "UNIX Development"}
            default {set xcode_cli "Command Line Tools or UNIX Development"}
        }
        reinplace "s|__XCODECLITOOLS__|${xcode_cli}|g" ${workpath}/Distribution
        reinplace "s|__XVERS__|${macosx_deployment_target}|" ${workpath}/Distribution
        set next_major [lindex [split $macosx_deployment_target .] 0].[expr [lindex [split $macosx_deployment_target .] 1] + 1]
        reinplace "s|__NEXT_XVERS__|$next_major|" ${workpath}/Distribution
        reinplace "s|__VERSION__|${version}|" ${workpath}/Distribution
        move ${package.scripts}/postflight ${package.scripts}/postinstall
    } else {
        file copy -force -- ${worksrcpath}/portmgr/dmg/InstallationCheck ${package.resources}
        file copy -force -- ${worksrcpath}/portmgr/dmg/InstallationCheck.strings ${resources_lang}
        file attributes ${package.resources}/InstallationCheck -permissions 0755
        file attributes ${resources_lang}/InstallationCheck.strings -permissions 0644
        reinplace "s|__PREFIX__|${prefix}|g" \
              ${package.resources}/InstallationCheck
        reinplace "s|__DARWINVERS__|${os.major}|" ${package.resources}/InstallationCheck
        reinplace "s|__XVERS__|${macosx_deployment_target}|" \
            ${resources_lang}/InstallationCheck.strings
    }

    reinplace "s|or newer ||" ${resources_lang}/Welcome.html
    if {${os.major} > 8} {
        reinplace "s|10\\.4|${macosx_deployment_target}|" ${resources_lang}/Welcome.html
    }
}

platform darwin 8 {
    # has ${prefix}/include ahead of /usr/include in default search path
    compiler.blacklist apple-gcc-4.2
}

platform darwin 8 powerpc {
    pre-configure {
        set sdkrootpath /Developer/SDKs/MacOSX10.4u.sdk
        if {[file exists ${sdkrootpath}]} {
            # User has SDK installed.
            set tclstubpath /System/Library/Frameworks/Tcl.framework/Versions/8.4/libtclstub8.4.a
            if {![file exists ${sdkrootpath}${tclstubpath}]} {
                ui_msg "Fixing your MacOSX10.4u installation by copying libtclstub8.4.a to ${sdkrootpath}${tclstubpath}"
                xinstall -p ${tclstubpath} ${sdkrootpath}${tclstubpath}
            }
            # Supply architecture and sysroot flags to build MacPorts universal.
            configure.cflags-append -isysroot ${sdkrootpath} -arch ppc -arch i386
            if {[vercmp [macports_version] 2.5.99] >= 0} {
                configure.env-append "SHLIB_LDFLAGS=-Wl,-syslibroot,${sdkrootpath} -arch ppc -arch i386"
            } else {
                configure.env-append SHLIB_LDFLAGS='-Wl,-syslibroot,${sdkrootpath} -arch ppc -arch i386'
            }
        }
    }
}

platform darwin 8 i386 {
    # Supply architecture flags to build MacPorts universal.
    configure.cflags-append -arch ppc -arch i386
    configure.args-append SHLIB_LDFLAGS='-arch ppc -arch i386'
}

platform darwin 9 {
    # Supply architecture flags to build MacPorts universal.
    configure.cflags-append -arch ppc -arch i386
    configure.args-append SHLIB_LDFLAGS='-arch ppc -arch i386'
}

platform darwin {
    if {${os.major} >= 11} {
        # Lion and above only run on x86_64.
        configure.cflags-append -arch x86_64
        configure.args-append SHLIB_LDFLAGS='-arch x86_64'
    } elseif {${os.major} == 10} {
        # Supply architecture flags to build MacPorts universal.
        configure.cflags-append -arch x86_64 -arch i386
        configure.args-append SHLIB_LDFLAGS='-arch x86_64 -arch i386'
    }
}

destroot.violate_mtree yes
destroot.keepdirs    ${destroot}${prefix}/include \
                     ${destroot}${prefix}/lib \
                     ${destroot}${prefix}/libexec \
                     ${destroot}${prefix}/sbin \
                     ${destroot}${prefix}/share/doc \
                     ${destroot}${prefix}/share/info \
                     ${destroot}${prefix}/share/man/cat1 \
                     ${destroot}${prefix}/share/man/cat2 \
                     ${destroot}${prefix}/share/man/cat3 \
                     ${destroot}${prefix}/share/man/cat4 \
                     ${destroot}${prefix}/share/man/cat5 \
                     ${destroot}${prefix}/share/man/cat6 \
                     ${destroot}${prefix}/share/man/cat7 \
                     ${destroot}${prefix}/share/man/cat8 \
                     ${destroot}${prefix}/share/man/cat9 \
                     ${destroot}${prefix}/share/man/catl \
                     ${destroot}${prefix}/share/man/catn \
                     ${destroot}${prefix}/share/man/man1 \
                     ${destroot}${prefix}/share/man/man2 \
                     ${destroot}${prefix}/share/man/man3 \
                     ${destroot}${prefix}/share/man/man4 \
                     ${destroot}${prefix}/share/man/man5 \
                     ${destroot}${prefix}/share/man/man6 \
                     ${destroot}${prefix}/share/man/man7 \
                     ${destroot}${prefix}/share/man/man8 \
                     ${destroot}${prefix}/share/man/man9 \
                     ${destroot}${prefix}/share/man/manl \
                     ${destroot}${prefix}/share/man/mann \
                     ${destroot}${prefix}/share/nls/C \
                     ${destroot}${prefix}/share/nls/af_ZA.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/af_ZA.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/bg_BG.CP1251 \
                     ${destroot}${prefix}/share/nls/cs_CZ.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/da_DK.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/da_DK.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/de_AT.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/de_AT.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/de_CH.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/de_CH.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/de_DE.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/de_DE.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/el_GR.ISO8859-7 \
                     ${destroot}${prefix}/share/nls/en_AU.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/en_AU.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/en_AU.US-ASCII \
                     ${destroot}${prefix}/share/nls/en_CA.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/en_CA.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/en_CA.US-ASCII \
                     ${destroot}${prefix}/share/nls/en_GB.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/en_GB.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/en_GB.US-ASCII \
                     ${destroot}${prefix}/share/nls/en_NZ.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/en_NZ.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/en_NZ.US-ASCII \
                     ${destroot}${prefix}/share/nls/en_US.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/en_US.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/es_ES.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/es_ES.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/et_EE.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/fi_FI.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/fi_FI.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/fr_BE.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/fr_BE.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/fr_CA.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/fr_CA.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/fr_CH.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/fr_CH.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/fr_FR.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/fr_FR.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/hi_IN.ISCII-DEV \
                     ${destroot}${prefix}/share/nls/hr_HR.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/hu_HU.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/is_IS.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/is_IS.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/it_CH.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/it_CH.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/it_IT.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/it_IT.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/ja_JP.SJIS \
                     ${destroot}${prefix}/share/nls/ja_JP.eucJP \
                     ${destroot}${prefix}/share/nls/ko_KR.eucKR \
                     ${destroot}${prefix}/share/nls/la_LN.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/la_LN.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/la_LN.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/la_LN.ISO8859-4 \
                     ${destroot}${prefix}/share/nls/la_LN.US-ASCII \
                     ${destroot}${prefix}/share/nls/lt_LT.ISO8859-4 \
                     ${destroot}${prefix}/share/nls/nl_BE.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/nl_BE.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/nl_NL.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/nl_NL.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/no_NO.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/no_NO.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/pl_PL.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/pt_BR.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/pt_PT.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/pt_PT.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/ro_RO.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/ru_RU.CP866 \
                     ${destroot}${prefix}/share/nls/ru_RU.ISO8859-5 \
                     ${destroot}${prefix}/share/nls/ru_RU.KOI8-R \
                     ${destroot}${prefix}/share/nls/sk_SK.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/sl_SI.ISO8859-2 \
                     ${destroot}${prefix}/share/nls/sv_SE.ISO8859-1 \
                     ${destroot}${prefix}/share/nls/sv_SE.ISO8859-15 \
                     ${destroot}${prefix}/share/nls/tr_TR.ISO8859-9 \
                     ${destroot}${prefix}/share/nls/uk_UA.ISO8859-5 \
                     ${destroot}${prefix}/share/nls/uk_UA.KOI8-U \
                     ${destroot}${prefix}/share/nls/zh_CN.eucCN \
                     ${destroot}${prefix}/share/nls/zh_TW.Big5 \
                     ${destroot}${prefix}/share/skel \
                     ${destroot}${prefix}/var/cache \
                     ${destroot}${prefix}/var/db \
                     ${destroot}${prefix}/var/macports/build \
                     ${destroot}${prefix}/var/macports/distfiles \
                     ${destroot}${prefix}/var/macports/registry \
                     ${destroot}${prefix}/var/macports/sip-workaround \
                     ${destroot}${prefix}/var/run \
                     ${destroot}${prefix}/var/spool

# (new options should be tested and not assumed so the version introducing them
# can be built from the Portfile!)
if {[info commands known_fail] ne ""} {
    known_fail yes
}

pre-activate {
    ui_error ""
    ui_error "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    ui_error "!! DO NOT INSTALL THE MACPORTS PORT !!"
    ui_error "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
    ui_error "The MacPorts port is only used to build the installers you can download from"
    ui_error "macports.org It is not intended for installation by a user, and doing so will"
    ui_error "overwrite your MacPorts installation and render it unusable when removed."
    ui_error ""
    error "Installation aborted"
}

github.livecheck.regex  {([0-9.]+)}

if {[info commands pre-dpkg] ne ""} {
    pre-dpkg {
        ui_debug "Debian package will be created using PATH=$env(PATH)"
    }
}
