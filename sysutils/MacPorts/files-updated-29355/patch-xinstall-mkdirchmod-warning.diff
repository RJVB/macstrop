commit 4e429edb1eddc199bf7e54876779be55cfee15e3
Author: Ren√© Bertin <rjvbertin@gmail.com>
Date:   Wed May 29 22:52:46 2024 +0200

    patch-xinstall-mkdirchmod-warning.diff

diff --git a/src/pextlib1.0/xinstall.c b/src/pextlib1.0/xinstall.c
index 372f6b17d..6ab7213d2 100644
--- a/src/pextlib1.0/xinstall.c
+++ b/src/pextlib1.0/xinstall.c
@@ -155,7 +155,7 @@ InstallCmd(ClientData clientData UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *
 	char *curdir;
 	const char *group, *owner, *cp;
 	Tcl_Obj *to_name;
-	int dodir = 0;
+	int dodir = 0, verbose = 0;
 
 	suffix = BACKUP_SUFFIX;
 	mode = S_IRWXU | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH;
@@ -178,14 +178,23 @@ InstallCmd(ClientData clientData UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *
 				return TCL_ERROR;
 			}
 			suffix = Tcl_GetString(*(++objv));
+			if (verbose) {
+				ui_debug(interp, "%s: suffix=%s", funcname, suffix);
+			}
 			objv++, objc -= 2;
 			/* FALLTHROUGH */
 		case 'b':
 			dobackup = 1;
+			if (verbose) {
+				ui_debug(interp, "%s: backup=true", funcname);
+			}
 			objv++, objc--;
 			break;
 		case 'C':
 			docompare = 1;
+			if (verbose) {
+				ui_debug(interp, "%s: docompare=true", funcname);
+			}
 			objv++, objc--;
 			break;
 		case 'c':
@@ -207,6 +216,9 @@ InstallCmd(ClientData clientData UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *
 				Tcl_SetResult(interp, "invalid flags for -f", TCL_STATIC);
 				return TCL_ERROR;
 			}
+			if (verbose) {
+				ui_debug(interp, "%s: flags=%s fset=0x%lx", funcname, flags, fset);
+			}
 			iflags |= SETFLAGS;
 			objv++, objc -= 2;
 #endif
@@ -217,35 +229,46 @@ InstallCmd(ClientData clientData UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *
 				return TCL_ERROR;
 			}
 			group = Tcl_GetString(*(++objv));
+			if (verbose) {
+				ui_debug(interp, "%s: group=%s", funcname, group);
+			}
 			objv++, objc -= 2;
 			break;
 		case 'M':
 			nommap = 1;
 			objv++, objc--;
 			break;
-		case 'm':
+		case 'm': {
 			if (!objc) {
 				Tcl_WrongNumArgs(interp, 1, objv, "-m");
 				return TCL_ERROR;
 			}
-			if (!(set = setmode(Tcl_GetString(*(++objv))))) {
+			const char *modeString = Tcl_GetString(*(++objv));
+			if (!(set = setmode(modeString))) {
 				char errmsg[255];
 
 				snprintf(errmsg, sizeof errmsg, "%s: Invalid file mode: %s",
-					 funcname, Tcl_GetString(*objv));
+					 funcname, modeString);
 				Tcl_SetResult(interp, errmsg, TCL_VOLATILE);
 				return TCL_ERROR;
 			}
 			mode = getmode(set, 0);
+			if (verbose) {
+				ui_debug(interp, "%s: mode=%s umask=0%o", funcname, modeString, mode);
+			}
 			free(set);
 			objv++, objc -= 2;
 			break;
+		}
 		case 'o':
 			if (!objc) {
 				Tcl_WrongNumArgs(interp, 1, objv, "-o");
 				return TCL_ERROR;
 			}
 			owner = Tcl_GetString(*(++objv));
+			if (verbose) {
+				ui_debug(interp, "%s: owner=%s", funcname, owner);
+			}
 			objv++, objc -= 2;
 			break;
 		case 'p':
@@ -262,6 +285,7 @@ InstallCmd(ClientData clientData UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *
 			break;
 		case 'v':
 			/* provided only for compatibility with install(1) */
+			verbose += 1;
 			objv++, objc--;
 			break;
 		case 'W':
@@ -270,6 +294,9 @@ InstallCmd(ClientData clientData UNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *
 				return TCL_ERROR;
 			}
 			curdir = Tcl_GetString(*(++objv));
+			if (verbose) {
+				ui_debug(interp, "%s: workingdir=%s", funcname, curdir);
+			}
 			objv++, objc -= 2;
 			break;
 		case '?':
@@ -1072,7 +1099,14 @@ install_dir(Tcl_Interp *interp, char *path)
 	if ((gid != (gid_t)-1 || uid != (uid_t)-1) && chown(path, uid, gid))
 		{ /* Don't bother to warn */ };
 	if (chmod(path, mode))
-		{ /* Don't bother to warn */ };
+		{
+			char errmsg[255];
+
+			snprintf(errmsg, sizeof errmsg, "%s: chmod(%s,0%o), %s",
+				 funcname, path, mode, strerror(errno));
+			Tcl_SetResult(interp, errmsg, TCL_VOLATILE);
+			return TCL_ERROR;
+		}
 	return TCL_OK;
 }
 
