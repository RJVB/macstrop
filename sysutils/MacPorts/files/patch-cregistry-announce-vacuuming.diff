diff --git a/src/cregistry/registry.c b/src/cregistry/registry.c
index 2b24642f4..563231f40 100644
--- a/src/cregistry/registry.c
+++ b/src/cregistry/registry.c
@@ -531,6 +531,7 @@ int reg_vacuum(char *db_path) {
 
     sqlite3_busy_timeout(db, 25);
 
+    fprintf(stderr, "Determining registry stats ..."); fflush(stderr);
     /* Get db size & size of unused space */
     if (sqlite3_prepare_v2(db, "SELECT page_count * page_size AS dbsize,"
             " freelist_count * page_size AS freesize FROM pragma_page_count(),"
@@ -546,20 +547,43 @@ int reg_vacuum(char *db_path) {
     if (stmt) {
         sqlite3_finalize(stmt);
     }
+    if (result) {
+        fprintf(stderr, " size=%gMB, free space = %gMB (%g%%)\n",
+            dbsize / 1.048576e06,
+            freesize / 1.048576e06, ((double)freesize / (double)dbsize) * 100);
+    } else {
+        fprintf(stderr, " failed (%s)\n", sqlite3_errmsg(db));
+    }
 
     /* Don't vacuum unless free space is at least 1 MB and also at
        least 1% of the total db size. */
-    if (result && freesize >= 1000000 && dbsize > 0 && ((double)freesize / (double)dbsize) >= 0.01) {
+    if (result && freesize >= 1048576 && dbsize > 0 && ((double)freesize / (double)dbsize) >= 0.01) {
         result = 0;
+        fprintf(stderr, "Vacuuming the registry"); fflush(stderr);
         if (sqlite3_prepare_v2(db, "VACUUM", -1, &stmt, NULL) == SQLITE_OK) {
-            sqlite3_step(stmt);
+            char *e;
+            fprintf(stderr, " ..."); fflush(stderr);
+            if (sqlite3_step(stmt) != SQLITE_OK && (e = sqlite3_errmsg(db))) {
+                fprintf(stderr, " (step: %s)"); fflush(stderr);
+            }
+            fprintf(stderr, " ..."); fflush(stderr);
             r = sqlite3_reset(stmt);
             if (r == SQLITE_OK) {
                 result = 1;
+            } else if (e = sqlite3_errmsg(db)) {
+                fprintf(stderr, " (reset: %s)"); fflush(stderr);
+            }
+        } else {
+            const char *e = sqlite3_errmsg(db);
+            if (e) {
+                fprintf(stderr, " (prepare: %s)", e);
             }
         }
         if (stmt) {
             sqlite3_finalize(stmt);
+            fprintf(stderr, result ? " done\n" : " failed\n");
+        } else {
+            fprintf(stderr, " failed\n");
         }
     }
 
