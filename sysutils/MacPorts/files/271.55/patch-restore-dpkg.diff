diff --git a/doc/port.1 b/doc/port.1
index 35ee52552..1c7644a34 100644
--- a/doc/port.1
+++ b/doc/port.1
@@ -1297,6 +1297,12 @@ Creates an Internet\-enabled disk image containing a macOS metapackage of
 \fIportname\fR
 and its dependencies\&.
 .RE
+.PP
+dpkg
+.RS 4
+Creates a DEB binary package of
+\fIportname\fR\&. Takes an optional "hackers' delight" option \fI--no-deps\fR to omit recording any dependencies in the package.
+.RE
 .SH "EXAMPLES"
 .sp
 The following demonstrates invoking port with the extract action on portdir \(lqtextproc/figlet\(rq and extract\&.suffix set to \(lq\&.tgz\(rq:
diff --git a/doc/port.1.txt b/doc/port.1.txt
index e60858519..5da2e9456 100644
--- a/doc/port.1.txt
+++ b/doc/port.1.txt
@@ -670,6 +670,9 @@ mdmg::
     Creates an Internet-enabled disk image containing a macOS metapackage of
     'portname' and its dependencies.
 
+dpkg::
+    Creates a DEB binary package of 'portname'.
+
 
 EXAMPLES
 --------
diff --git a/doc/prefix.mtree.in b/doc/prefix.mtree.in
index 104ce59a7..f6d62dfa6 100644
--- a/doc/prefix.mtree.in
+++ b/doc/prefix.mtree.in
@@ -236,6 +236,8 @@
         skel
         ..
     ..
+    src
+    ..
     var
         cache
         ..
diff --git a/portmgr/packaging/buildall.sh b/portmgr/packaging/buildall.sh
index e4b065684..3fbf6f3a5 100755
--- a/portmgr/packaging/buildall.sh
+++ b/portmgr/packaging/buildall.sh
@@ -97,6 +97,9 @@ make clean
 echo "file:///darwinports/dports" > /opt/local/etc/ports/sources.conf
 echo "BatchMode yes" >> /etc/ssh_config
 EOF
+	if [ "$PKGTYPE" = "dpkg" ]; then
+	    echo "/opt/local/bin/port install dpkg" >> $dir/bootstrap.sh
+	fi
 	chmod 755 $dir/bootstrap.sh
 	echo "Bootstrapping darwinports in chroot"
 	/sbin/mount_devfs devfs ${dir}/dev
@@ -204,6 +207,8 @@ for pkg in `cat $TGTPORTS`; do
 		echo $pkg >> outputdir/summary/portspackaged
 		if [ "$PKGTYPE" = "mpkg" ]; then
 		    mv $DIR/Package/*.mpkg outputdir/Packages/
+		elif [ "$PKGTYPE" = "dpkg" ]; then
+		    mv $DIR/Package/*.deb outputdir/Packages/
 		fi
 		type="succeeded"
 	fi
diff --git a/src/macports1.0/macports.tcl b/src/macports1.0/macports.tcl
index dadda9b2c..72057a447 100644
--- a/src/macports1.0/macports.tcl
+++ b/src/macports1.0/macports.tcl
@@ -3821,7 +3821,8 @@ proc macports::_target_needs_deps {target} {
         dmg -
         mdmg -
         pkg -
-        mpkg {return 1}
+        mpkg -
+        dpkg {return 1}
         default {return 0}
     }
 }
diff --git a/src/package1.0/Makefile.in b/src/package1.0/Makefile.in
index b784e4f2f..6ec9055f0 100644
--- a/src/package1.0/Makefile.in
+++ b/src/package1.0/Makefile.in
@@ -6,7 +6,7 @@ include ../../Mk/macports.autoconf.mk
 INSTALLDIR=	${TCL_PACKAGE_PATH}/package1.0
 
 SRCS=	package.tcl portdmg.tcl portmdmg.tcl portmpkg.tcl portpkg.tcl \
-	portunarchive.tcl \
+	portdpkg.tcl portunarchive.tcl \
 	portarchivefetch.tcl
 
 all:: pkgIndex.tcl
diff --git a/src/package1.0/package.tcl b/src/package1.0/package.tcl
index 36d5dc7ea..e48db1c9d 100644
--- a/src/package1.0/package.tcl
+++ b/src/package1.0/package.tcl
@@ -36,5 +36,6 @@ package require portpkg 1.0
 package require portmpkg 1.0
 package require portdmg 1.0
 package require portmdmg 1.0
+package require portdpkg 1.0
 package require portarchivefetch 1.0
 package require portunarchive 1.0
diff --git a/src/package1.0/portdpkg.tcl b/src/package1.0/portdpkg.tcl
new file mode 100644
index 000000000..226f762bf
--- /dev/null
+++ b/src/package1.0/portdpkg.tcl
@@ -0,0 +1,229 @@
+# et:ts=4
+# portdpkg.tcl
+# $Id$
+#
+# Copyright (c) 2005, 2007, 2009, 2011 The MacPorts Project
+# Copyright (c) 2004 Landon Fuller <landonf@macports.org>
+# Copyright (c) 2002 - 2003 Apple Inc.
+# All rights reserved.
+#
+# Redistribution and use in source and binary forms, with or without
+# modification, are permitted provided that the following conditions
+# are met:
+# 1. Redistributions of source code must retain the above copyright
+#    notice, this list of conditions and the following disclaimer.
+# 2. Redistributions in binary form must reproduce the above copyright
+#    notice, this list of conditions and the following disclaimer in the
+#    documentation and/or other materials provided with the distribution.
+# 3. Neither the name of Apple Inc. nor the names of its contributors
+#    may be used to endorse or promote products derived from this software
+#    without specific prior written permission.
+#
+# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+# POSSIBILITY OF SUCH DAMAGE.
+#
+
+package provide portdpkg 1.0
+package require portutil 1.0
+
+set org.macports.dpkg [target_new org.macports.dpkg portdpkg::main]
+target_runtype ${org.macports.dpkg} always
+target_provides ${org.macports.dpkg} dpkg
+target_requires ${org.macports.dpkg} archivefetch unarchive destroot
+
+namespace eval portdpkg {
+}
+
+# Options
+options dpkg.asroot \
+        package.destpath
+
+# Set up defaults
+default dpkg.asroot yes
+
+set_ui_prefix
+
+proc portdpkg::main {args} {
+	global UI_PREFIX destpath os.arch os.platform supported_archs configure.build_arch
+	global portvariants user_options
+
+	ui_msg "$UI_PREFIX [format [msgcat::mc "Creating dpkg for %s-%s"] [option subport] [option version]]"
+
+	switch ${os.platform} {
+	    linux { set project "LinuxPorts" }
+	    default { set project "MacPorts" }
+	}
+
+	if {![info exists user_options(ports_dpkg_no-deps)]} {
+        	# get deplist
+        	set deps [make_dependency_list [option subport]]
+        	set deps [lsort -unique $deps]
+        	foreach dep $deps {
+        		set name [lindex [split $dep /] 0]
+        		set vers [lindex [split $dep /] 1]
+        		# don't re-package ourself
+        		if {$name != [option subport]} {
+        			lappend dependencies "${project}.${name} (>= ${vers})"
+        		}
+        	}
+        
+        	if {[info exists dependencies]} {
+        		ui_debug $dependencies
+        	}
+	} else {
+	    ui_warn "The package will be generated without dependency information!"
+	}
+
+	set controlpath [file join ${destpath} DEBIAN]
+	if {[file exists ${controlpath}]} {
+		if {![file isdirectory ${controlpath}]} {
+			return -code error [format [msgcat::mc "Can not create dpkg control directory. %s not a directory."] ${controlpath}]
+		} else {
+			ui_info [msgcat::mc "Removing stale dpkg control directory."]
+			delete "${controlpath}"
+		}
+	}
+	file mkdir ${controlpath}
+
+	set controlfd [open [file join ${controlpath} control] w+]
+
+	# Size, in kilobytes, of ${destpath}
+   	set pkg_installed-size [expr {[dirSize ${destpath}] / 1024}]
+
+	# Create debian dependency list
+	if {[info exists dependencies]} {
+		if {[llength ${dependencies}] != 0} {
+			set pkg_depends [join ${dependencies} ", "]
+		}
+	}
+
+	# Create dpkg version number
+	if {[option epoch] != 0} {
+		set pkg_version "[option epoch]:[option version]"
+	} else {
+		set pkg_version "[option version]"
+	}
+	if {[option revision] != 0} {
+		append pkg_version "-[option revision]"
+	}
+	# append the port variants string to the revision bit of the Debian version string
+	# there is no more appropriate place and this appears to be acceptable (and useful).
+	if {[option portvariants] ne ""} {
+		append pkg_version "[string map {"_" "~"} [option portvariants]]"
+	}
+
+	# Set dpkg category to first (main) category
+	set pkg_category [lindex [option categories] 0]
+
+	# Format the long description. Add a homepage if possible.
+	if {[exists long_description]} {
+		set pkg_long_description " [option long_description]\n"
+	} elseif {[exists description]} {
+		set pkg_long_description " [option description]\n"
+	} else {
+		set pkg_long_description " [option subport]\n"
+	}
+
+     if {[option portvariants] ne ""} {
+		append pkg_long_description " .\n"
+		append pkg_long_description " This package contains the [option portvariants] variant of port:[option subport]\n"
+	}
+
+	# Discern correct architecture
+	# From http://www.debian.org/doc/debian-policy/ch-customized-programs.html#fr55:
+	# The following architectures and operating systems are currently recognised
+	# by dpkg-archictecture. The architecture, arch, is one of the following:
+	# alpha, arm, hppa, i386, ia64, m68k, mips, mipsel, powerpc, s390, sh, sheb,
+	# sparc and sparc64. The operating system, os, is one of: linux, gnu,
+	# freebsd and openbsd. Use of gnu in this string is reserved for the
+	# GNU/Hurd operating system.
+	switch -regex ${configure.build_arch} {
+		i[3-9]86 { set pkg_arch "i386" }
+		x86_64 { set pkg_arch "x86_64" }
+		default { set pkg_arch ${os.arch} }
+	}
+
+	# On systems other than Linux, the Architecture must contain
+	# the operating system name
+	if {${os.platform} != "linux"} {
+		set pkg_arch "${os.platform}-${pkg_arch}"
+	} elseif {${pkg_arch} == "x86_64"} {
+		set pkg_arch "amd64"
+	}
+
+	# An architecture-independent package
+	if {$supported_archs eq "noarch"} {
+		set pkg_arch "all"
+	}
+
+	puts $controlfd "Package: ${project}.[option subport]"
+	puts $controlfd "Architecture: ${pkg_arch}"
+	puts $controlfd "Version: ${pkg_version}"
+	puts $controlfd "Section: ${pkg_category}"
+	puts $controlfd "Maintainer: [option maintainers]"
+	if {[info exists pkg_depends]} {
+		puts $controlfd "Depends: ${pkg_depends}"
+	}
+	puts $controlfd "Installed-Size: ${pkg_installed-size}"
+	puts $controlfd "Provides: [option subport]"
+	puts $controlfd "Replaces: [option subport]"
+
+	puts $controlfd "Description: [option description]"
+	# pkg_long_description is pre-formatted. Do not add a newline
+	puts -nonewline $controlfd "$pkg_long_description"
+	if {[exists homepage]} {
+		puts $controlfd "Homepage: [option homepage]"
+	}
+	close $controlfd
+
+	# Build debian package in package.destpath
+	system "dpkg-deb -v -b \"${destpath}\" \"[option package.destpath]\""
+
+	ui_info [msgcat::mc "Removing dpkg control directory."]
+	delete "${controlpath}"
+}
+
+proc portdpkg::make_dependency_list {portname} {
+	set result {}
+	if {[catch {set res [mport_lookup $portname]} error]} {
+		global errorInfo
+		ui_debug "$errorInfo"
+		ui_error "port lookup failed: $error"
+		return 1
+	}
+	foreach {name array} $res {
+		array set portinfo $array
+
+		if {[info exists portinfo(depends_run)] || [info exists portinfo(depends_lib)]} {
+			# get the union of depends_run and depends_lib
+			# xxx: only examines the portfile component of the depspec
+			set depends {}
+			if {[info exists portinfo(depends_run)]} {
+				ui_debug "${name} depends_run=$portinfo(depends_run)"
+				eval "lappend depends $portinfo(depends_run)"
+			}
+			if {[info exists portinfo(depends_lib)]} {
+				ui_debug "${name} depends_lib=$portinfo(depends_lib)"
+				eval "lappend depends $portinfo(depends_lib)"
+			}
+
+			foreach depspec $depends {
+				set dep [lindex [split $depspec :] end]
+				eval "lappend result [make_dependency_list $dep]"
+			}
+		}
+				ui_debug "${name} : $portinfo(name) / $portinfo(version)"
+				lappend result $portinfo(name)/$portinfo(version)
+				unset portinfo
+	}
+	return $result
+}
diff --git a/src/port/port.tcl b/src/port/port.tcl
index 91f3fe637..4ba663e15 100755
--- a/src/port/port.tcl
+++ b/src/port/port.tcl
@@ -4410,6 +4410,7 @@ array set action_array [list \
     mdmg        [list action_target         [ACTION_ARGS_PORTS]] \
     mpkg        [list action_target         [ACTION_ARGS_PORTS]] \
     pkg         [list action_target         [ACTION_ARGS_PORTS]] \
+    dpkg        [list action_target         [ACTION_ARGS_PORTS]] \
     \
     quit        [list action_exit           [ACTION_ARGS_NONE]] \
     exit        [list action_exit           [ACTION_ARGS_NONE]] \
@@ -4510,6 +4511,7 @@ array set cmd_opts_array {
     reclaim     {enable-reminders disable-reminders}
     fetch       {no-mirrors}
     bump        {patch}
+    dpkg        {no-deps}
 }
 
 ##
diff --git a/src/port1.0/portutil.tcl b/src/port1.0/portutil.tcl
index 8069199c4..49372b5f2 100644
--- a/src/port1.0/portutil.tcl
+++ b/src/port1.0/portutil.tcl
@@ -1491,6 +1491,7 @@ proc target_run {ditem} {
                         pkg         -
                         portpkg     -
                         mpkg        -
+                        dpkg        -
                         mdmg        -
                         ""          { set deptypes "depends_fetch depends_extract depends_patch depends_lib depends_build depends_run" }
 
