diff --git a/src/cregistry/registry.c b/src/cregistry/registry.c
index ac3d2e16f..b05eeb2d4 100644
--- a/src/cregistry/registry.c
+++ b/src/cregistry/registry.c
@@ -504,6 +504,8 @@ int reg_rollback(reg_registry* reg, reg_error* errPtr) {
     }
 }
 
+int force_vacuum = 0;
+
 /**
  * Runs VACUUM (compact/defragment) on the given db file.
  * Works on a path rather than an open db pointer because you can't vacuum an
@@ -531,6 +533,7 @@ int reg_vacuum(char *db_path) {
 
     sqlite3_busy_timeout(db, 25);
 
+    fprintf(stderr, "Determining registry stats ..."); fflush(stderr);
     /* Get db size & size of unused space */
     if (sqlite3_prepare_v2(db, "SELECT page_count * page_size AS dbsize,"
             " freelist_count * page_size AS freesize FROM pragma_page_count(),"
@@ -546,21 +549,45 @@ int reg_vacuum(char *db_path) {
     if (stmt) {
         sqlite3_finalize(stmt);
     }
+    if (result) {
+        fprintf(stderr, " size=%gMB, free space = %gMB (%g%%)\n",
+            dbsize / 1.048576e06,
+            freesize / 1.048576e06, ((double)freesize / (double)dbsize) * 100);
+    } else {
+        fprintf(stderr, " failed (%s)\n", sqlite3_errmsg(db));
+    }
 
     /* Don't vacuum unless free space is at least 1 MB and also at
        least 1% of the total db size. */
-    if (result && freesize >= 1000000 && dbsize > 0 && ((double)freesize / (double)dbsize) >= 0.01) {
+    if (result && (force_vacuum || (freesize >= 1048576 && dbsize > 0 && ((double)freesize / (double)dbsize) >= 0.01))) {
         result = 0;
+        fprintf(stderr, "Vacuuming the registry"); fflush(stderr);
         if (sqlite3_prepare_v2(db, "VACUUM", -1, &stmt, NULL) == SQLITE_OK) {
-            sqlite3_step(stmt);
+            char *e;
+            fprintf(stderr, " ..."); fflush(stderr);
+            if (sqlite3_step(stmt) != SQLITE_OK && (e = sqlite3_errmsg(db))) {
+                fprintf(stderr, " (step: %s)"); fflush(stderr);
+            }
+            fprintf(stderr, " ..."); fflush(stderr);
             r = sqlite3_reset(stmt);
             if (r == SQLITE_OK) {
                 result = 1;
+            } else if (e = sqlite3_errmsg(db)) {
+                fprintf(stderr, " (reset: %s)"); fflush(stderr);
+            }
+        } else {
+            const char *e = sqlite3_errmsg(db);
+            if (e) {
+                fprintf(stderr, " (prepare: %s)", e);
             }
         }
         if (stmt) {
             sqlite3_finalize(stmt);
+            fprintf(stderr, result ? " done\n" : " failed\n");
+        } else {
+            fprintf(stderr, " failed\n");
         }
+        force_vacuum = 0;
     }
 
     sqlite3_close(db);
diff --git a/src/registry2.0/registry.c b/src/registry2.0/registry.c
index 64a0b5ce7..ed2b187dd 100644
--- a/src/registry2.0/registry.c
+++ b/src/registry2.0/registry.c
@@ -406,11 +407,13 @@ int metadata_cmd(ClientData clientData UNUSED, Tcl_Interp* interp, int objc,
 /* Allow setting the needs_vacuum flag from scripts. */
 int set_needs_vacuum_cmd(ClientData clientData UNUSED, Tcl_Interp* interp, int objc,
         Tcl_Obj* const objv[]) {
+    extern int force_vacuum;
     if (objc != 1) {
         Tcl_WrongNumArgs(interp, 1, objv, "cmd");
         return TCL_ERROR;
     }
     Tcl_SetAssocData(interp, "registry::needs_vacuum", NULL, (ClientData)1);
+    force_vacuum = 1;
     return TCL_OK;
 }
 
