diff --git libclamav/orig.CMakeLists.txt libclamav/CMakeLists.txt
index 6bc426f..3f38f8a 100644
--- libclamav/orig.CMakeLists.txt
+++ libclamav/CMakeLists.txt
@@ -270,8 +270,9 @@ if(LLVM_FOUND)
             bytecode_priv.h
             bytecode.h )
     set_target_properties( bytecode_runtime PROPERTIES
-        COMPILE_FLAGS "${WARNCXXFLAGS} ${CXX1XCXXFLAGS}" )
-    target_compile_definitions( bytecode_runtime PRIVATE -D LLVM_VERSION=${LLVM_VERSION} )
+        COMPILE_FLAGS "${WARNCXXFLAGS} ${CXX1XCXXFLAGS} ${LLVM_CXXFLAGS}" )
+    # our FindLLVM.cmake sets -fno-rtti in LLVM_CXXFLAGS!
+    target_compile_definitions( bytecode_runtime PRIVATE -D LLVM_VERSION=${LLVM_VERSION} -D LLVM_NORTTI)
     target_include_directories( bytecode_runtime PRIVATE ${LLVM_INCLUDE_DIRS} )
 else()
     target_sources( bytecode_runtime
diff --git libclamav/c++/orig.bytecode2llvm.cpp libclamav/c++/bytecode2llvm.cpp
index 4834498..9098b39 100644
--- libclamav/c++/orig.bytecode2llvm.cpp
+++ libclamav/c++/bytecode2llvm.cpp
@@ -2134,7 +2134,10 @@ cl_error_t cli_bytecode_prepare_jit(struct cli_all_bc *bcs)
     HANDLER_TRY(handler)
     {
         // LLVM itself never throws exceptions, but operator new may throw bad_alloc
-        try {
+#ifndef LLVM_NORTTI
+        try
+#endif
+        {
             Module *M = new Module("ClamAV jit module", bcs->engine->Context);
             {
                 // Create the JIT.
@@ -2312,7 +2315,9 @@ cl_error_t cli_bytecode_prepare_jit(struct cli_all_bc *bcs)
                 delete[] Functions;
             }
             return CL_SUCCESS;
-        } catch (std::bad_alloc &badalloc) {
+        }
+#ifndef LLVM_NORTTI
+        catch (std::bad_alloc &badalloc) {
             cli_errmsg("[Bytecode JIT]: bad_alloc: %s\n",
                        badalloc.what());
             return CL_EMEM;
@@ -2320,6 +2325,7 @@ cl_error_t cli_bytecode_prepare_jit(struct cli_all_bc *bcs)
             cli_errmsg("[Bytecode JIT]: Unexpected unknown exception occurred\n");
             return CL_EBYTECODE;
         }
+#endif
         return CL_SUCCESS;
     }
     HANDLER_END(handler);
