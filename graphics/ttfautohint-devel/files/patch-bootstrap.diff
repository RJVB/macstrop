diff --git a/bootstrap b/bootstrap
index ed3b0a4b70a1f5b957e0a9abc5f06d0857b3ac52..97728f17dcdb647d2591a00b5a80c6c683421d8e 100755
--- a/bootstrap
+++ b/bootstrap
@@ -653,13 +653,14 @@ if $use_gnulib; then
   # Get gnulib files.  Populate $GNULIB_SRCDIR, possibly updating a
   # submodule, for use in the rest of the script.
 
+  set -x
   case ${GNULIB_SRCDIR--} in
   -)
     # Note that $use_git is necessarily true in this case.
     if git_modules_config submodule.gnulib.url >/dev/null; then
       echo "$0: getting gnulib files..."
       git submodule init -- "$gnulib_path" || exit $?
-      git submodule update -- "$gnulib_path" || exit $?
+      git submodule update --depth 460 -- "$gnulib_path" || exit $?
 
     elif [ ! -d "$gnulib_path" ]; then
       echo "$0: getting gnulib files..."
@@ -667,9 +668,10 @@ if $use_gnulib; then
       trap cleanup_gnulib 1 2 13 15
 
       shallow=
-      if test -z "$GNULIB_REVISION"; then
-        git clone -h 2>&1 | grep -- --depth > /dev/null && shallow='--depth 2'
-      fi
+#       if test -z "$GNULIB_REVISION"; then
+#         git clone -h 2>&1 | grep -- --depth > /dev/null && shallow='--depth 2'
+#       fi
+      shallow='--depth 100'
       git clone $shallow ${GNULIB_URL:-$default_gnulib_url} "$gnulib_path" \
         || cleanup_gnulib
 
@@ -684,20 +686,20 @@ if $use_gnulib; then
       echo "$0: getting gnulib files..."
       if git submodule -h|grep -- --reference > /dev/null; then
         # Prefer the one-liner available in git 1.6.4 or newer.
-        git submodule update --init --reference "$GNULIB_SRCDIR" \
+        git submodule update --init --depth 460 --reference "$GNULIB_SRCDIR" \
           "$gnulib_path" || exit $?
       else
         # This fallback allows at least git 1.5.5.
         if test -f "$gnulib_path"/gnulib-tool; then
           # Since file already exists, assume submodule init already complete.
-          git submodule update -- "$gnulib_path" || exit $?
+          git submodule update --depth 100 -- "$gnulib_path" || exit $?
         else
           # Older git can't clone into an empty directory.
           rmdir "$gnulib_path" 2>/dev/null
-          git clone --reference "$GNULIB_SRCDIR" \
+          git clone --depth 100 --reference "$GNULIB_SRCDIR" \
             "$(git_modules_config submodule.gnulib.url)" "$gnulib_path" \
             && git submodule init -- "$gnulib_path" \
-            && git submodule update -- "$gnulib_path" \
+            && git submodule update --depth 460 -- "$gnulib_path" \
             || exit $?
         fi
       fi
@@ -710,6 +712,7 @@ if $use_gnulib; then
      && ! git_modules_config submodule.gnulib.url >/dev/null; then
     (cd "$GNULIB_SRCDIR" && git checkout "$GNULIB_REVISION") || cleanup_gnulib
   fi
+  set +x
 
   # $GNULIB_SRCDIR now points to the version of gnulib to use, and
   # we no longer need to use git or $gnulib_path below here.

