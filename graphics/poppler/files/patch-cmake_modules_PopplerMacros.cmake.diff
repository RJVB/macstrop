diff --git cmake/modules/orig.PopplerMacros.cmake cmake/modules/PopplerMacros.cmake
index 2aed028..0225b0f 100644
--- cmake/modules/orig.PopplerMacros.cmake
+++ cmake/modules/PopplerMacros.cmake
@@ -80,13 +80,16 @@ if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
 endif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
 
 string(TOUPPER "${CMAKE_BUILD_TYPE}" _CMAKE_BUILD_TYPE_UPPER)
-set(_known_build_types RELWITHDEBINFO;RELEASE;DEBUG;DEBUGFULL;PROFILE)
+set(_known_build_types RELWITHDEBINFO;RELEASE;DEBUG;DEBUGFULL;PROFILE;MACPORTS)
 # We override CMAKE_CXX_FLAGS_${_CMAKE_BUILD_TYPE_UPPER} below. If the user
 # selects a CMAKE_BUILD_TYPE that is not handled by the logic below, we will
 # end up dropping the previous flags (e.g. those set in a cross-compilation
 # CMake toolchain file). To avoid surprising compilation errors, we emit an
 # error in that case, so that the user can handle the  passed CMAKE_BUILD_TYPE
 # in the compiler flags logic below.
+## RJVB : the whole point of the MacPorts CMAKE_BUILD_TYPE is that CMake does
+## NOT add its own compiler options AFTER ours but simply uses CMAKE_CXX_FLAGS . 
+## Hence no dedicated handling of CMAKE_CXX_FLAGS_MACPORTS should be required below.
 if (NOT "${_CMAKE_BUILD_TYPE_UPPER}" IN_LIST _known_build_types)
   message(FATAL_ERROR "Unsupported CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
 endif()
@@ -139,7 +142,7 @@ if(CMAKE_COMPILER_IS_GNUCXX)
   set(_compiler_flags_changed 1)
 endif (CMAKE_COMPILER_IS_GNUCXX)
 
-if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
 # set the default compile warnings
   set(_warn "-Wall -Wextra -Wpedantic")
   set(_warn "${_warn} -Wno-unused-parameter")
