diff --git cmake/OpenCVDetectOpenCL.cmake cmake/new.OpenCVDetectOpenCL.cmake
index 0a1d06d..64b2acb 100644
--- cmake/OpenCVDetectOpenCL.cmake
+++ cmake/new.OpenCVDetectOpenCL.cmake
@@ -1,5 +1,6 @@
 set(OPENCL_FOUND ON CACHE BOOL "OpenCL library is found")
-if(APPLE)
+option(OPENCL_USE_ALTERNATIVE "Don't use Apple's OpenCL.framework but an alternative" TRUE)
+if(APPLE AND NOT OPENCL_USE_ALTERNATIVE)
   set(OPENCL_LIBRARY "-framework OpenCL" CACHE STRING "OpenCL library")
   set(OPENCL_INCLUDE_DIR "" CACHE PATH "OpenCL include directory")
 else()
@@ -28,6 +29,8 @@ if(OPENCL_FOUND)
     if(NOT TRY_OUT MATCHES "OpenCL is valid")
       message(ERROR "Can't use OpenCL")
       return()
+    else()
+      message(WARNING "OpenCL seems to work")
     endif()
   endif()
 
diff --git modules/core/CMakeLists.txt modules/core/new.CMakeLists.txt
index a84d7fc..84d882b 100644
--- modules/core/CMakeLists.txt
+++ modules/core/new.CMakeLists.txt
@@ -77,6 +77,9 @@ endif()
 if(HAVE_MEMALIGN)
   ocv_append_source_file_compile_definitions(${CMAKE_CURRENT_SOURCE_DIR}/src/alloc.cpp "HAVE_MEMALIGN=1")
 endif()
+if(APPLE AND HAVE_OPENCL AND OPENCL_USE_ALTERNATIVE)
+  ocv_append_source_file_compile_definitions(${CMAKE_CURRENT_SOURCE_DIR}/src/opencl/runtime/opencl_core.cpp "OPENCL_USE_ALTERNATIVE=1")
+endif()
 
 option(OPENCV_ENABLE_ALLOCATOR_STATS "Enable Allocator metrics" ON)
 
diff --git modules/core/src/opencl/runtime/opencl_core.cpp modules/core/src/opencl/runtime/new.opencl_core.cpp
index db2385a..1138144 100644
--- modules/core/src/opencl/runtime/opencl_core.cpp
+++ modules/core/src/opencl/runtime/new.opencl_core.cpp
@@ -78,7 +78,7 @@ static const char* getRuntimePath(const char* defaultPath)
     return defaultPath;
 }
 
-#if defined(__APPLE__)
+#if defined(__APPLE__) && !defined(OPENCL_USE_ALTERNATIVE)
 #include <dlfcn.h>
 
 static void* AppleCLGetProcAddress(const char* name)
@@ -155,7 +155,7 @@ static void* WinGetProcAddress(const char* name)
 #define CV_CL_GET_PROC_ADDRESS(name) WinGetProcAddress(name)
 #endif // _WIN32
 
-#if defined(__linux__) || defined(__FreeBSD__)
+#if defined(__linux__) || defined(__FreeBSD__) || (defined(__APPLE__) && defined(OPENCL_USE_ALTERNATIVE))
 #include <dlfcn.h>
 #include <stdio.h>
 
@@ -186,7 +186,11 @@ static void* GetProcAddress(const char* name)
         cv::AutoLock lock(cv::getInitializationMutex());
         if (!initialized)
         {
+#ifdef __APPLE__
+            const char* defaultPath = "libOpenCL.dylib";
+#else
             const char* defaultPath = "libOpenCL.so";
+#endif
             const char* path = getRuntimePath(defaultPath);
             if (path)
             {
@@ -194,7 +198,11 @@ static void* GetProcAddress(const char* name)
                 if (!handle)
                 {
                     if (path == defaultPath)
+#ifdef __APPLE__
+                        handle = GetHandle("libOpenCL.1.dylib");
+#else
                         handle = GetHandle("libOpenCL.so.1");
+#endif
                     else
                         fprintf(stderr, ERROR_MSG_CANT_LOAD);
                 }
@@ -322,6 +330,7 @@ static void* opencl_check_fn(int ID)
     void* func = CV_CL_GET_PROC_ADDRESS(e->fnName);
     if (!func)
     {
+        fprintf(stderr, "OpenCL function \"%s\" is not available\n", e->fnName);
         throw cv::Exception(cv::Error::OpenCLApiCallError,
                 cv::format("OpenCL function is not available: [%s]", e->fnName),
                 CV_Func, __FILE__, __LINE__);
@@ -335,7 +344,7 @@ static void* opencl_check_fn(int ID)
 
 #if defined(HAVE_OPENCL_STATIC)
 
-#if defined __APPLE__
+#if defined(__APPLE__) && !defined(OPENCL_USE_ALTERNATIVE)
 #include <OpenCL/cl_gl.h>
 #else
 #include <CL/cl_gl.h>
