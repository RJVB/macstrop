diff --git a/CMakeLists.txt b/CMakeLists.txt
index a05c556862ada2c4ae5a423c79a3274ecebf0a90..ad53f2c14b5e342f11d7ed9507b9e3a7ccf7b5cc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -94,7 +94,7 @@ if( APPLE )
    set( MACOS_ARCHITECTURE "${HOST_SYSTEM_PROCESSOR}" CACHE STRING "Target architecture for macOS builds. One of x86_64/arm64" )
 
    if( MACOS_ARCHITECTURE STREQUAL "x86_64" )
-      set( MIN_MACOS_VERSION 10.9 )
+      set( MIN_MACOS_VERSION 10.7 )
       set( TARGET_MACOS_VERSION 10.13 )
       set( CMAKE_OSX_ARCHITECTURES x86_64 CACHE INTERNAL "" )
    elseif( MACOS_ARCHITECTURE STREQUAL "arm64" )
@@ -109,13 +109,13 @@ if( APPLE )
 
    # Define the OSX compatibility parameters
    set( CMAKE_OSX_DEPLOYMENT_TARGET ${MIN_MACOS_VERSION} CACHE INTERNAL "" )
-   set( CMAKE_OSX_SYSROOT macosx CACHE INTERNAL "" )
+#    set( CMAKE_OSX_SYSROOT macosx CACHE INTERNAL "" )
 
    # This prevents a link error when building with the 10.9 or older SDKs
    set( CMAKE_XCODE_ATTRIBUTE_CLANG_LINK_OBJC_RUNTIME OFF )
 
    # Shouldn't cmake do this???
-   string( APPEND CMAKE_CXX_FLAGS " -stdlib=libc++" )
+#    string( APPEND CMAKE_CXX_FLAGS " -stdlib=libc++" )
 endif()
 
 # Add our module path
@@ -140,12 +140,14 @@ set( CMAKE_PREFIX_PATH
 set( CMAKE_CXX_STANDARD 17 )
 set( CMAKE_CXX_STANDARD_REQUIRED ON )
 
-# Use ccache if available
-find_program( CCACHE_PROGRAM ccache )
-mark_as_advanced( FORCE CCACHE_PROGRAM )
+# Use ccache if requested
+if( ${CMAKE_CXX_COMPILER_LAUNCHER} MATCHES "ccache" )
+    set( CCACHE_PROGRAM "${CMAKE_CXX_COMPILER_LAUNCHER}" )
+    mark_as_advanced( FORCE CCACHE_PROGRAM )
 
-if( CCACHE_PROGRAM )
-   set_property( GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}" )
+#     if( CCACHE_PROGRAM )
+#        set_property( GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}" )
+#     endif()
 endif()
 
 # Define option() prefix
@@ -401,6 +403,7 @@ if( CMAKE_CONFIGURATION_TYPES )
 else()
    set( _DESTDIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CMAKE_BUILD_TYPE}" )
 endif()
+set( _DESTDIR "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}" )
 
 set( _DEST "${_DESTDIR}" )
 set( INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}" )
@@ -414,9 +417,12 @@ set( _EXEDIR "${CMAKE_INSTALL_BINDIR}" )
 
 # Setup RPATH handling
 set( CMAKE_BUILD_RPATH "$ORIGIN/../${_PKGLIB}" )
-set( CMAKE_BUILD_WITH_INSTALL_RPATH FALSE )
-set( CMAKE_INSTALL_RPATH "$ORIGIN/../${_PKGLIB}" )
-set( CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE )
+set( CMAKE_BUILD_WITH_INSTALL_RPATH TRUE )
+if (NOT CMAKE_INSTALL_RPATH)
+    set( CMAKE_INSTALL_RPATH "$ORIGIN/../${_PKGLIB}" )
+endif()
+message(STATUS "CMAKE_INSTALL_RPATH=${CMAKE_INSTALL_RPATH}")
+# set( CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE )
 
 # Adjust them for the Mac
 if( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
diff --git a/cmake-proxies/lv2/CMakeLists.txt b/cmake-proxies/lv2/CMakeLists.txt
index a52a62f431ab925b75c991fce3500341ec98f897..d68398c0d8499bc29b2f3560cf648067c7ec726d 100644
--- a/cmake-proxies/lv2/CMakeLists.txt
+++ b/cmake-proxies/lv2/CMakeLists.txt
@@ -169,6 +169,9 @@ macro( bld name packages define sources )
             "PkgConfig::${pkg}"
       )
    endforeach()
+   if( ${name} STREQUAL "suil_qt5_in_cocoa")
+       list( APPEND libs PRIVATE "-framework Cocoa" )
+   endif()
 
    if( NOT missing )
       list( APPEND DEFINES
@@ -206,7 +209,7 @@ if( WIN32 )
 elseif( APPLE )
    set( LILV_PATH_SEP ":" )
    set( LILV_DIR_SEP "/" )
-   set( LILV_DEFAULT_LV2_PATH "~/Library/Audio/Plug-Ins/LV2:~/.lv2:/usr/local/lib/lv2:/usr/lib/lv2:/Library/Audio/Plug-Ins/LV2" )
+   set( LILV_DEFAULT_LV2_PATH "~/Library/Audio/Plug-Ins/LV2:~/.lv2:@PREFIX@/lib/lv2:/Library/Audio/Plug-Ins/LV2" )
 
    set( SUIL_MODULE_DIR "" )
    set( SUIL_DIR_SEP "" )
@@ -214,10 +217,18 @@ elseif( APPLE )
    set( SUIL_GTK3_LIB_NAME "libgtk-x11-3.0.so.0" )
    set( SUIL_MODULE_PREFIX "lib" )
    set( SUIL_MODULE_EXT ".dylib" )
+   option(audacity_use_suil_qt5 "Whether to build the suil_qt5_in_cocoa GUI library for LV2 plugins" OFF)
+   if( audacity_use_suil_qt5 )
+       pkg_check_modules( QT5 IMPORTED_TARGET "Qt5Widgets >= 5.1.0" )
+       bld( "suil_qt5_in_cocoa"
+            "QT5"
+            "SUIL_WITH_COCOA_IN_QT5"
+            "${TARGET_ROOT}/suil/src/cocoa_in_qt5.mm" )
+   endif()
 elseif( UNIX )
    set( LILV_PATH_SEP ":" )
    set( LILV_DIR_SEP "/" )
-   set( LILV_DEFAULT_LV2_PATH "~/.lv2:/usr/lib/lv2:/usr/local/lib/lv2" )
+   set( LILV_DEFAULT_LV2_PATH "~/.lv2:@PREFIX@/lib/lv2:/usr/lib/lv2:/usr/local/lib/lv2" )
 
    set( SUIL_MODULE_DIR "" )
    set( SUIL_DIR_SEP "" )
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index e5d696bea669cdfb89e32942246aa5c0318caafb..1af04f94046a3cc85901bc5da7012209dc6f0759 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1202,7 +1202,7 @@ list( APPEND DEFINES
 # If we have cmake 3.16 or higher, we can use precompiled headers, but
 # only use them if ccache is not available and the user hasn't disabled
 # it.
-if( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16" AND NOT CCACHE_PROGRAM )
+if( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16"  )
    cmd_option(
       ${_OPT}use_pch
       "Use precompiled headers [yes, no]"
@@ -1257,6 +1257,11 @@ set( LIBRARIES
       $<$<PLATFORM_ID:Linux,FreeBSD,OpenBSD,NetBSD,CYGWIN>:z>
       $<$<PLATFORM_ID:Linux,FreeBSD,OpenBSD,NetBSD,CYGWIN>:pthread>
 )
+if( CMAKE_SYSTEM_NAME MATCHES "Linux" )
+    list( APPEND LIBRARIES
+       PRIVATE
+        $<$<CXX_COMPILER_ID:Clang>:atomic>)
+endif()
 
 set( BUILDING_AUDACITY YES )
 set( PKGLIBDIR "${_PKGLIBDIR}" )
@@ -1381,6 +1386,9 @@ elseif( CMAKE_SYSTEM_NAME MATCHES "Darwin" )
          "-framework AudioUnit"
          "-framework CoreAudio"
          "-framework CoreAudioKit"
+         "-framework AudioToolbox"
+         "-framework Cocoa"
+         "-framework Carbon"
    )
 
    # Define the Wrapper target
@@ -1569,13 +1577,20 @@ propagate_interesting_dependencies( ${TARGET} "${AUDACITY_LIBRARIES}" )
 
 target_sources( ${TARGET} PRIVATE ${HEADERS} ${SOURCES} ${RESOURCES} ${MAC_RESOURCES} ${WIN_RESOURCES} )
 target_compile_definitions( ${TARGET} PRIVATE ${DEFINES} )
+
+set_property(SOURCE effects/VST/VSTEffect.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/ladspa/LadspaEffect.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/lv2/LoadLV2.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+set_property(SOURCE effects/lv2/LoadLV2.cpp APPEND PROPERTY COMPILE_DEFINITIONS PKGLIBDIR="${PKGLIBDIR}")
+set_property(SOURCE export/ExportMP3.cpp APPEND PROPERTY COMPILE_DEFINITIONS LIBDIR="${CMAKE_INSTALL_FULL_LIBDIR}")
+
 target_compile_options( ${TARGET} PRIVATE ${OPTIONS} )
 target_include_directories( ${TARGET} PRIVATE ${INCLUDES} )
 target_link_options( ${TARGET} PRIVATE ${LDFLAGS} )
 target_link_libraries( ${TARGET} PUBLIC ${AUDACITY_LIBRARIES} )
 target_link_libraries( ${TARGET} ${LIBRARIES} )
 
-if( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16" AND NOT CCACHE_PROGRAM )
+if( CMAKE_VERSION VERSION_GREATER_EQUAL "3.16" )
    if( ${_OPT}use_pch )
       message( STATUS "Using precompiled headers" )
       target_precompile_headers( ${TARGET} PRIVATE
