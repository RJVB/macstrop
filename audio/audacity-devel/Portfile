# -*- coding: utf-8; mode: tcl; tab-width: 4; truncate-lines: t; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:et:sw=4:ts=4:sts=4

PortSystem          1.0

PortGroup           github 1.0

name                audacity
conflicts           audacity-gtk
categories          audio
maintainers         {gmail.com:rjvbertin @RJVB} openmaintainer
platforms           darwin
license             GPL-2+
universal_variant   no

# PortGroups for the main ports
PortGroup           active_variants 1.1
PortGroup           cmake 1.1
#>> RJVB
PortGroup           compress_workdir 1.0
PortGroup           LTO 1.0
#<< RJVB

description         A Free, Cross-Platform Digital Audio Editor.
long_description    Audacity is a free, easy-to-use, multi-track audio editor and recorder \
                    for Windows, Mac OS X, GNU/Linux and other operating systems. The interface is translated \
                    into many languages. You can use Audacity to: \n\
                    Record live audio. \n\
                    Record computer playback on any Windows Vista or later machine. \n\
                    Convert tapes and records into digital recordings or CDs. \n\
                    Edit WAV, AIFF, FLAC, MP2, MP3 or Ogg Vorbis sound files. \n\
                    AC3, M4A/M4R (AAC), WMA and other formats supported using optional libraries. \n\
                    Cut, copy, splice or mix sounds together. \n\
                    Numerous effects including change the speed or pitch of a recording. \n\
                    And more!

    conflicts       "audacity2-legacy" audacity
    ## 576b7e66 looks like possibly the last commit before the takeover by the new project owner:
    github.setup    audacity audacity a3856938a167b97f3c03f23d56a0ff7cdf33af5b
    name            audacity-devel
    version         3.2.4.440
    # this port is intended to facilitate development efforts shared with "upstreams"
    # so using git instead of a tarball fetch type is more appropriate for the current maintainer
    fetch.type      git
    distname        audacity-git
    set PPREFIX     3.2.4/
    set conanWxVersion 3.1.3.4-audacity

livecheck.type      none

##>> RJVB : set this to 15 (10.11) for upstream!
set min_OS_for_wx32 13
##<< RJVB

platform darwin {
    if {${os.major} < 13} {
        replaced_by audacity
        PortGroup   obsolete 1.0
        return      0
    } else {
        if {${os.major} >= ${min_OS_for_wx32}} {
            variant wxsystem description {Depend on wxWidgets from MacPorts} {}
            default_variants +wxsystem
        }
    }
}

if {![variant_exists wxsystem] || [variant_isset wxsystem]} {
    PortGroup       wxWidgets 1.0
}

supported_archs     x86_64 arm64
compiler.cxx_standard 2014
build.post_args-append -k
cmake.generator     Ninja

#>> RJVB
cmake.save_configure_cmd "log too"
#<< RJVB

proc add_patchfile_ifexists {args} {
    global PPREFIX filespath
    foreach fname ${args} {
        if {[file exists ${filespath}/${fname}]} {
            patchfiles-append ${fname}
        }
    }
}

homepage            https://www.audacityteam.org/

## Audacity's build depends on a python3 interpreter but it will find a suitable one from the installed versions
## itself - and at least one must be installed because it's an indirect dependency of port:git .

if {[variant_isset wxsystem]} {
    wxWidgets.use   wxWidgets-3.2

    require_active_variants ${wxWidgets.port} "" stdlib

    depends_lib-append  port:${wxWidgets.port}
} else {
    depends_lib-append \
                    path:include/turbojpeg.h:libjpeg-turbo \
                    port:tiff \
                    port:libpng \
                    port:zlib \
                    port:libiconv
}

depends_build-append \
                    port:pkgconfig \
                    port:cctools

depends_lib-append  port:freetype \
                    path:lib/pkgconfig/harfbuzz.pc:harfbuzz \
                    port:soundtouch \
                    port:soxr \
                    port:twolame \
                    port:expat \
                    path:lib/libavcodec.dylib:ffmpeg \
                    port:flac \
                    port:lame \
                    port:libogg \
                    port:libsndfile \
                    port:libvorbis
# platform linux {
#     depends_lib-append \
#                     path:lib/libuuid.so:ossp-uuid
# }
if {${os.arch} ne "arm"} {
    depends_lib-append \
                    port:libid3tag \
                    port:libmad
}
depends_lib-append  port:mpg123 \
                    port:wavpack
# audacity could use port:lv2 and port:lilv but would also require a port:suil for that to be possible.

patch.pre_args      -Np1

# among other things, we add frameworks AudioToolbox, Cocoa and Carbon because somewhere after wxW 3.1.3
# the wx build system no longer exports private libraries. Carbon could be temporary because wxW
# dropped Carbon usage somewhere around 3.1.4 but drops support for 10.9- earlier. This is not
# required when building against port:wxWidgets-3.1 but it won't hurt either.
patchfiles-append   ${PPREFIX}patch-cmakefiles-@prefix@.diff \
                    ${PPREFIX}patch-build-preparations.diff \
                    ${PPREFIX}patch-fix_bundlepy-@prefix@.diff \
                    ${PPREFIX}patch-build-pre-1014.diff

if {[variant_isset wxsystem]} {
    # make certain we're not embedding any wxWidgets libraries
    add_patchfile_ifexists \
                ${PPREFIX}patch-no-embedded-wxW.diff
} else {
    # make certain we're embedding our wxWidgets libraries
    add_patchfile_ifexists \
                ${PPREFIX}patch-embed-wxW.diff
}

patchfiles-append   patch-aboutdlg.diff \
                    add_enGB_translation.diff \
                    patch-libnyquist-symbol-visibility.diff \
                    ${PPREFIX}patch-ffmpeg-functions.diff

platform darwin {
    depends_build-append \
                    port:nasm

    # use lame from MacPorts (partial revert of ae431bc5)
    patchfiles-append \
                    patch-more-decent-font-sizes.diff \
                    patch-use-MPlame.diff
    # load ffmpeg libs from MacPorts (reverts of 1d40f33e)
#                     patch-use-MPffmpeg.diff
    # work around a missing implementation in wxCocoa's wxSound class
    patchfiles-append \
                    patch-implement-progdial=beep.diff
    add_patchfile_ifexists \
                    ${PPREFIX}patch-no-sdk1013.diff
}
patchfiles-append   patch-enable-compact-menu.diff
add_patchfile_ifexists \
                    ${PPREFIX}patch-temp-fixes.diff
if {[variant_isset wxsystem] && ${wxWidgets.use} ne "wxWidgets-3.2"} {
    add_patchfile_ifexists \
                    ${PPREFIX}patch-wxw-31x.diff
}

platform darwin {
    variant suil description {Build the GUI library for LV2 plugins\; requires Qt5} {
        PortGroup   qt5 1.0
    }
}

# if {${subport} eq "${name}"} {
# #>> RJVB
#     ## uncomment only when intending to regenerate the patchfiles
#     ## Prerequisites:
#     ## - git-unpatch
#     ## - checkout -b <some scratch branch>
#     patch {
#         foreach p ${patchfiles} {
#             set pf [file join ${filespath} ${p}]
#             ui_info "--> applying patch ${p} (${pf})"
#             system -W ${worksrcpath} "${patch.cmd} ${patch.pre_args} -i ${pf}"
#             if {${p} eq "add_enGB_translation.diff"} {
#                 system -W ${worksrcpath} "git add locale/en_GB.po"
#             }
#             system -W ${worksrcpath} "git diff --no-ext-diff HEAD -- . > ${pf}"
#             system -W ${worksrcpath} "git commit -v -a -m \"${pf}\""
#         }
#     }
# #<< RJVB
# }

set aud_app_path    ${applications_dir}/Audacity.app

if {${os.platform} eq "darwin"} {
    if {${os.major} >= 17} {
        # Audacity builds "normally" from 10.7 to 10.13, but will request the 10.13 SDK
        # on 10.14 and newer to "prevent high CPU usage and slow drawing". Linking will
        # fail if MacPort lets source be compiled against the platform SDK, so we handle
        # SDK selection ourselves entirely. MP builds aren't required to support anything
        # but the OS version they were built for. On 11.x we just build as if there are
        # no OS specifics.
        if {${os.major} < 20} {
            macosx_deployment_target 10.13
            patchfiles-delete ${PPREFIX}patch-no-sdk1013.diff
            configure.sdkroot
        }
    } elseif {${os.major} == 13} {
        macosx_deployment_target 10.9
        configure.sdkroot \
                    ${developer_dir}/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk
    }
}

# quelch a huge number of warnings
configure.cxxflags-append \
                    -Wno-inconsistent-missing-override \
                    -Wno-overloaded-virtual

platform darwin {
    # set the install_rpath first
    cmake.install_rpath-append \
                    ${prefix}/lib/audacity \
                    ${aud_app_path}/Contents/Frameworks
    if {[variant_isset wxsystem]} {
        cmake.install_rpath-append \
                    ${wxWidgets.prefix}/lib
    } else {
        configure.ldflags-append \
                    -Wl,-rpath,${prefix}/lib/audacity \
                    -Wl,-rpath,${aud_app_path}/Contents/Frameworks
    }
    if {${subport} eq "${name}"} {
        # now change the prefix
        cmake.install_prefix ${applications_dir}
    }
    configure.pre_args-replace \
                    -DCMAKE_INSTALL_NAME_DIR="${cmake.install_prefix}/lib" \
                    -DCMAKE_INSTALL_NAME_DIR="${aud_app_path}/Contents/Frameworks"
}

set _OPT "audacity_"
configure.args-append \
                    -DCMAKE_MACOSX_RPATH=ON \
                    -D${_OPT}lib_preference=system \
                    -D${_OPT}has_tests=off \
                    -D${_OPT}has_sentry_reporting=off \
                    -D${_OPT}has_crashreports=off \
                    -D${_OPT}has_updates_check=off \
                    -D${_OPT}conan_allow_prebuilt_binaries=off \
                    -D${_OPT}use_audio_units=on \
                    -D${_OPT}use_ffmpeg=loaded \
                    -D${_OPT}use_soxr=system \
                    -D${_OPT}use_vamp=local \
                    -D${_OPT}use_lv2=local \
                    -D${_OPT}use_suil_qt5=OFF \
                    -D${_OPT}use_sbsms=local \
                    -D${_OPT}use_soundtouch=system \
                    -D${_OPT}use_twolame=system \
                    -D${_OPT}use_midi=system \
                    -D${_OPT}has_vst3=off \
                    -D${_OPT}use_pch=on \
                    -DCMAKE_DISABLE_FIND_PACKAGE_JACK=On
## Is this automatic nowadays?
# if {${os.arch} eq "arm"} {
#     configure.args-append \
#                     -D${_OPT}use_mad=off \
#                     -D${_OPT}use_id3tag=off
# }
# if {${subport} eq ${name}} {
    # using port:sqlite3 leads to unstable behaviour?!
    configure.args-append \
                    -D${_OPT}use_sqlite=system
# } else {
    depends_lib-append \
                    port:sqlite3
# }
if {[variant_isset wxsystem]} {
    configure.args-append \
                    -DwxWidgets_CONFIG_EXECUTABLE=${wxWidgets.wxconfig} \
                    -D${_OPT}use_wxwidgets=system
    configure.env-append \
                    WX_CONFIG=${wxWidgets.wxconfig}
} else {
    configure.args-append \
                    -D${_OPT}use_wxwidgets=local
    platform darwin {
        # this shouldn't be necessary but apparently it is:
        set xy [join [lrange [split ${conanWxVersion} .] 0 1] .]
        configure.cppflags-append \
                        -I${build.dir}/.wxincludes/wx-${xy} \
                        -I${build.dir}/.wxincludes/osx_cocoa-unicode-${xy} \
                        -D__WXOSX_COCOA__
        post-configure {
            # (re)initialise the .wxinclude directory:
            file delete -force ${build.dir}/.wxincludes
            xinstall -m 755 -d ${build.dir}/.wxincludes
            set incdir [glob ${build.dir}/.conan/data/wxwidgets/${conanWxVersion}/_/_/package/*/include/wx-${xy}]
            ln -s ${incdir} ${build.dir}/.wxincludes/
            # we also need the osx_cocoa-unicode-3.1 include dir which somehow doesn't get "installed"
            set incdir [glob ${build.dir}/.conan/data/wxwidgets/${conanWxVersion}/_/_/package/*/lib/wx/include/osx_cocoa-unicode-${xy}]
            if {[file exists ${incdir}/wx/setup.h]} {
                ln -s ${incdir} ${build.dir}/.wxincludes/
            }
        }
    }
}

# ensure pre-compiled headers and the possible use of ccache can co-exist
configure.env-append \
                    "CCACHE_SLOPPINESS=pch_defines,time_macros"
build.env-append    "CCACHE_SLOPPINESS=pch_defines,time_macros"

if {[variant_isset suil]} {
    configure.args-replace \
                    -D${_OPT}use_suil_qt5=OFF \
                    -D${_OPT}use_suil_qt5=ON
}
# platform darwin {
#     # Since version 2.2.0 we need to use the embedded (modified) Portaudio version.
#     # (this has actually become the only option despite my patch for 3.0.2; the
#     # buildsystem derails if we try to use the system portaudio.)
#     configure.args-append \
#                     -Daudacity_use_portaudio=local
# }

# make sure the C++ stdlib argument is added to the LDFLAGS too
if {${configure.cxx_stdlib} ne "" && [string match *clang* ${configure.cxx}]} {
    configure.ldflags-append \
                    -stdlib=${configure.cxx_stdlib}
}

post-configure {
    reinplace -q "s|compiler.libcxx=libstdc++|compiler.libcxx=libc++|g" ${build.dir}/.conan/profiles/default
}

if {${build.cmd} ne "ninja"} {
    build.args-append   V=1 VERBOSE=1
} else {
    build.pre_args-prepend -k 0
}

# with everything defined/declared as intended we can now
# handle the post-patch step with its reinplace statements.
post-patch {
    reinplace -W ${worksrcpath} "s|/usr/local|${prefix}|g" \
                                src/effects/ladspa/LadspaEffect.cpp \
                                src/effects/VST/VSTEffect.cpp \
                                src/export/ExportMP3.cpp \
                                lib-src/lv2/lilv/wscript \
                                lib-src/lv2/lilv/test/lilv_test.c
    reinplace -W ${worksrcpath} "s|/Library/Audio/Plug-Ins/Vamp|/Library/Audio/Plug-Ins/Vamp:${prefix}/lib/vamp|g" \
                                lib-src/libvamp/src/vamp-hostsdk/PluginHostAdapter.cpp
    reinplace -W ${worksrcpath} "s|/Library/Application Support/audacity/libs|${prefix}/lib|g" \
                                src/FFmpeg.h
    reinplace -W ${worksrcpath} "s|@PREFIX@|/opt/local|g" \
                                cmake-proxies/lv2/CMakeLists.txt \
                                scripts/build/macOS/fix_bundle.py \
                                libraries/lib-ffmpeg-support/FFmpegFunctions.cpp
}

pre-build {
    # register the exact source version in the build:
    if {[file exists ${worksrcpath}/mac/scripts/get_gitident.sh]} {
        system -W ${worksrcpath}/mac "scripts/get_gitident.sh"
        system "echo '#define GIT_DESC \"${version}\"' >> ${worksrcpath}/src/RevisionIdent.h"
    } else {
        system "echo '#define GIT_DESC \"${version}\"' > ${worksrcpath}/src/GitDesc.h"
    }
#     if {[file exists ${build.dir}/build.ninja]} {
#         # work around a (probable) cmake error; note this doesn't catch "recmake" actions triggered during the build!
#         reinplace "s|-framework QtWidgets QtGui QtCore||g" ${build.dir}/build.ninja
#     }
}

platform darwin {
    proc fixup_wx_libraries {} {
        global destroot aud_app_path wxWidgets.prefix
        if {[variant_isset wxsystem]} {
            # replace the embedded libraries with symlinks, so they're found via
            # the @executable_path rpath.
            foreach lwx [glob -nocomplain ${destroot}${aud_app_path}/Contents/Frameworks/libwx*] {
                file delete ${lwx}
                ln -s "${wxWidgets.prefix}/lib/[file tail ${lwx}]" ${lwx}
            }
        }
    }

    if {${subport} eq "${name}" && ![variant_isset wxsystem]} {
        destroot {
            # replace the destroot'ed app bundle with the one in ${build.dir}/bin that contains
            # the right install_name settings in most of the wxWidgets libraries
            file delete -force ${destroot}${aud_app_path}
            system "ditto --rsrc ${build.dir}/bin/Audacity.app ${destroot}${aud_app_path}"
        }
    }
    post-destroot {
        fixup_wx_libraries
        xinstall -m 755 -d ${destroot}${prefix}/share/audacity
        ln -s ${aud_app_path}/Contents/plug-ins ${destroot}${prefix}/share/audacity/
        xinstall -m 755 -d ${destroot}${prefix}/share/mime/packages
        xinstall -m 644 ${worksrcpath}/src/audacity.xml ${destroot}${prefix}/share/mime/packages/
        xinstall -m 755 -d ${destroot}${prefix}/share/appdata
        xinstall -m 644 ${worksrcpath}/help/audacity.appdata.xml ${destroot}${prefix}/share/appdata/
        xinstall -m 755 -d ${destroot}${prefix}/share/doc/Audacity
        xinstall -m 644 ${worksrcpath}/README.md ${worksrcpath}/LICENSE.txt ${destroot}${prefix}/share/doc/Audacity
        xinstall -m 755 -d ${destroot}${prefix}/share/man/man1
        xinstall -m 644 ${worksrcpath}/help/audacity.1 ${destroot}${prefix}/share/man/man1/
        xinstall -m 755 -d ${destroot}${prefix}/share/icons/hicolor/scalable/apps
        xinstall -m 644 ${worksrcpath}/images/audacity.svg ${destroot}${prefix}/share/icons/hicolor/scalable/apps/
        foreach s {16 22 24 32 48} {
            xinstall -m 755 -d ${destroot}${prefix}/share/icons/hicolor/${s}x${s}
            xinstall -m 644 ${worksrcpath}/images/icons/${s}x${s}/audacity.png ${destroot}${prefix}/share/icons/hicolor/${s}x${s}
        }
        if {[variant_isset suil]} {
            file rename ${destroot}${aud_app_path}/Contents/Audacity.app/Contents/Frameworks/libsuil_qt5_in_cocoa.so \
                ${destroot}${aud_app_path}/Contents/Frameworks/
            ln -s libsuil_qt5_in_cocoa.so ${destroot}${aud_app_path}/Contents/Frameworks/libsuil_qt5_in_cocoa.dylib
        }
        if {[variant_isset wxsystem]} {
            foreach l [glob -nocomplain ${wxWidgets.prefix}/share/locale/*] {
                set lang [file tail ${l}]
                xinstall -m 755 -d ${destroot}${aud_app_path}/Contents/Resources/${lang}.lproj
                ln -s ${l}/LC_MESSAGES/wxstd.mo ${destroot}${aud_app_path}/Contents/Resources/${lang}.lproj/
            }
        }
        # allow the application to find certain things where it expects them on OS X (= inside the app bundle)
        foreach r [glob -nocomplain ${destroot}${prefix}/share/audacity/*] {
            set f [file tail ${r}]
            if {![file exists ${destroot}${aud_app_path}/Contents/Resources/${f}]} {
                ln -s ${prefix}/share/audacity/${f} ${destroot}${aud_app_path}/Contents/Resources/
            }
        }
        # install a wrapper script in ${prefix}/bin
        system "echo \"#!/bin/sh\nexec \\\"${aud_app_path}/Contents/MacOS/Wrapper\\\" \\\"\\\$\@\\\"\" > ${destroot}${prefix}/bin/audacity"
        system "chmod 755 ${destroot}${prefix}/bin/audacity"
    }
}

post-destroot {
    xinstall -m 755 ${filespath}/vocalremover.ny ${destroot}${aud_app_path}/Contents/plug-ins/
}

notes "
    In case Audacity complains about finding FFmpeg or Lame, please locate these libraries\
    under ${prefix}/lib in the Libraries section of the Preferences dialog (see\
    https://manual.audacityteam.org/man/installing_and_updating_audacity_on_mac_os_x.html#locate)
"

# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;
#>> RJVB
PortGroup           locale_select 1.0
platform darwin {
    langselect_lproj_dir-append \
                    ${destroot}${aud_app_path}/Contents/Resources
}
#<< RJVB
