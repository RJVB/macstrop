diff --git a/LayoutTests/http/tests/navigation/qt/redirect-from-url-with-anchor-expected.txt b/LayoutTests/http/tests/navigation/qt/redirect-from-url-with-anchor-expected.txt
new file mode 100644
index 000000000000..4e2b94e4a749
--- /dev/null
+++ b/LayoutTests/http/tests/navigation/qt/redirect-from-url-with-anchor-expected.txt
@@ -0,0 +1,39 @@
+This is test page that we navigate to as part of testing various navigation styles. It includes a form so that we can test saving and restoring of form data, and it needs to be long enough that we can test saving and restoring of scroll position. 
+
+
+
+
+Here are some form elements
+that we can use for testing
+ Male
+ Female
+ option #1
+ option #2
+
+
+Now
+
+some
+
+filler
+
+so
+
+the
+
+doc
+
+is
+
+long
+
+enough
+
+to scroll.
+
+This is an anchor point named "anchor1".
+
+============== Back Forward List ==============
+        http://127.0.0.1:8000/navigation/qt/redirect-from-url-with-anchor.html  **nav target**
+curr->  http://127.0.0.1:8000/navigation/resources/success200.html#anchor1  **nav target**
+===============================================
diff --git a/LayoutTests/http/tests/navigation/qt/redirect-from-url-with-anchor.html b/LayoutTests/http/tests/navigation/qt/redirect-from-url-with-anchor.html
new file mode 100644
index 000000000000..f9c6df97aa0c
--- /dev/null
+++ b/LayoutTests/http/tests/navigation/qt/redirect-from-url-with-anchor.html
@@ -0,0 +1,8 @@
+<script type="text/javascript" src="../resources/testcode.js"></script>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+    runBasicTest("../resources/redirect302.pl#anchor1", "none");
+</script>
+This page just kicks off a test, and should not appear in the expected test output.
+The files in the resources dir have comments about the tests.
diff --git a/LayoutTests/http/tests/navigation/qt/redirect-with-anchor-in-location-expected.txt b/LayoutTests/http/tests/navigation/qt/redirect-with-anchor-in-location-expected.txt
new file mode 100644
index 000000000000..fc384940c486
--- /dev/null
+++ b/LayoutTests/http/tests/navigation/qt/redirect-with-anchor-in-location-expected.txt
@@ -0,0 +1,39 @@
+This is test page that we navigate to as part of testing various navigation styles. It includes a form so that we can test saving and restoring of form data, and it needs to be long enough that we can test saving and restoring of scroll position. 
+
+
+
+
+Here are some form elements
+that we can use for testing
+ Male
+ Female
+ option #1
+ option #2
+
+
+Now
+
+some
+
+filler
+
+so
+
+the
+
+doc
+
+is
+
+long
+
+enough
+
+to scroll.
+
+This is an anchor point named "anchor1".
+
+============== Back Forward List ==============
+        http://127.0.0.1:8000/navigation/qt/redirect-with-anchor-in-location.html  **nav target**
+curr->  http://127.0.0.1:8000/navigation/resources/success200.html#anchor2  **nav target**
+===============================================
diff --git a/LayoutTests/http/tests/navigation/qt/redirect-with-anchor-in-location.html b/LayoutTests/http/tests/navigation/qt/redirect-with-anchor-in-location.html
new file mode 100644
index 000000000000..3f7b567278c2
--- /dev/null
+++ b/LayoutTests/http/tests/navigation/qt/redirect-with-anchor-in-location.html
@@ -0,0 +1,8 @@
+<script type="text/javascript" src="../resources/testcode.js"></script>
+<script>
+    if (window.testRunner)
+        testRunner.dumpAsText();
+    runBasicTest("resources/redirect302-with-anchor.pl#anchor1", "none");
+</script>
+This page just kicks off a test, and should not appear in the expected test output.
+The files in the resources dir have comments about the tests.
diff --git a/LayoutTests/http/tests/navigation/qt/resources/redirect302-with-anchor.pl b/LayoutTests/http/tests/navigation/qt/resources/redirect302-with-anchor.pl
new file mode 100755
index 000000000000..1f46a442f7fa
--- /dev/null
+++ b/LayoutTests/http/tests/navigation/qt/resources/redirect302-with-anchor.pl
@@ -0,0 +1,16 @@
+#!/usr/bin/perl
+# Simple script to generate a 302 HTTP redirect
+
+print "Status: 302 Moved Temporarily\r\n";
+print "Location: ../../resources/success200.html#anchor2\r\n";
+print "Content-type: text/html\r\n";
+print "\r\n";
+
+print <<HERE_DOC_END
+<html><body>
+This page should not be seen - it is a 302 redirect to another page.
+The key aspect is that this page should not wind up in the back/forward
+list, since there should only be one entry for the navigation through
+this page to the eventual target.
+</body></html>
+HERE_DOC_END
diff --git a/Source/WTF/wtf/CMakeLists.txt b/Source/WTF/wtf/CMakeLists.txt
index 09b848c7a2a0..297589b90297 100644
--- a/Source/WTF/wtf/CMakeLists.txt
+++ b/Source/WTF/wtf/CMakeLists.txt
@@ -241,15 +241,6 @@ set(WTF_LIBRARIES
     ${CMAKE_DL_LIBS}
 )
 
-if (CMAKE_SYSTEM_NAME MATCHES "Darwin")
-    list(APPEND WTF_HEADERS
-        spi/darwin/CommonCryptoSPI.h
-    )
-    list(APPEND WTF_INCLUDE_DIRECTORIES
-        "${WTF_DIR}/wtf/spi/darwin"
-    )
-endif ()
-
 if (NOT USE_SYSTEM_MALLOC)
     list(APPEND WTF_LIBRARIES bmalloc)
 endif ()
diff --git a/Source/WTF/wtf/OSRandomSource.cpp b/Source/WTF/wtf/OSRandomSource.cpp
index 378795dc7780..529acf71405c 100644
--- a/Source/WTF/wtf/OSRandomSource.cpp
+++ b/Source/WTF/wtf/OSRandomSource.cpp
@@ -41,7 +41,8 @@
 #endif
 
 #if OS(DARWIN)
-#include "CommonCryptoSPI.h"
+#include <CommonCrypto/CommonCryptoError.h>
+#include <CommonCrypto/CommonRandom.h>
 #endif
 
 namespace WTF {
@@ -61,7 +62,7 @@ NEVER_INLINE NO_RETURN_DUE_TO_CRASH static void crashUnableToReadFromURandom()
 void cryptographicallyRandomValuesFromOS(unsigned char* buffer, size_t length)
 {
 #if OS(DARWIN)
-    RELEASE_ASSERT(!CCRandomCopyBytes(kCCRandomDefault, buffer, length));
+    RELEASE_ASSERT(!CCRandomGenerateBytes(buffer, length));
 #elif OS(UNIX)
     int fd = open("/dev/urandom", O_RDONLY, 0);
     if (fd < 0)
diff --git a/Source/WTF/wtf/Platform.h b/Source/WTF/wtf/Platform.h
index f563e382063c..6a86a8c6ee83 100644
--- a/Source/WTF/wtf/Platform.h
+++ b/Source/WTF/wtf/Platform.h
@@ -1033,7 +1033,7 @@
 #define USE_VIDEOTOOLBOX 1
 #endif
 
-#if PLATFORM(COCOA) || PLATFORM(GTK) || (PLATFORM(WIN) && !USE(WINGDI))
+#if PLATFORM(COCOA) || PLATFORM(GTK) || PLATFORM(QT) || (PLATFORM(WIN) && !USE(WINGDI))
 #define USE_REQUEST_ANIMATION_FRAME_TIMER 1
 #endif
 
diff --git a/Source/WTF/wtf/PlatformQt.cmake b/Source/WTF/wtf/PlatformQt.cmake
index 684119455b36..b7f4149f2367 100644
--- a/Source/WTF/wtf/PlatformQt.cmake
+++ b/Source/WTF/wtf/PlatformQt.cmake
@@ -27,7 +27,13 @@ if (QT_STATIC_BUILD)
     )
 endif ()
 
-if (UNIX AND NOT APPLE)
+if (USE_MACH_PORTS)
+    list(APPEND WTF_SOURCES
+        cocoa/WorkQueueCocoa.cpp
+    )
+endif ()
+
+if (USE_UNIX_DOMAIN_SOCKETS)
     list(APPEND WTF_SOURCES
         UniStdExtras.cpp
 
@@ -66,8 +72,6 @@ endif ()
 
 if (APPLE)
     list(APPEND WTF_SOURCES
-        cocoa/WorkQueueCocoa.cpp
-
         text/cf/AtomicStringImplCF.cpp
         text/cf/StringCF.cpp
         text/cf/StringImplCF.cpp
@@ -77,3 +81,14 @@ if (APPLE)
         ${COREFOUNDATION_LIBRARY}
     )
 endif ()
+
+if (UNIX AND NOT APPLE)
+    check_function_exists(clock_gettime CLOCK_GETTIME_EXISTS)
+    if (NOT CLOCK_GETTIME_EXISTS)
+        set(CMAKE_REQUIRED_LIBRARIES rt)
+        check_function_exists(clock_gettime CLOCK_GETTIME_REQUIRES_LIBRT)
+        if (CLOCK_GETTIME_REQUIRES_LIBRT)
+            list(APPEND WTF_LIBRARIES rt)
+        endif ()
+    endif ()
+endif ()
diff --git a/Source/WTF/wtf/WorkQueue.cpp b/Source/WTF/wtf/WorkQueue.cpp
index e26ae3bf2a30..3624d3902fc8 100644
--- a/Source/WTF/wtf/WorkQueue.cpp
+++ b/Source/WTF/wtf/WorkQueue.cpp
@@ -52,7 +52,7 @@ WorkQueue::~WorkQueue()
     platformInvalidate();
 }
 
-#if !PLATFORM(COCOA) && !(PLATFORM(QT) && OS(DARWIN))
+#if !PLATFORM(COCOA) && !(PLATFORM(QT) && USE(MACH_PORTS))
 void WorkQueue::concurrentApply(size_t iterations, const std::function<void (size_t index)>& function)
 {
     if (!iterations)
diff --git a/Source/WTF/wtf/spi/darwin/CommonCryptoSPI.h b/Source/WTF/wtf/spi/darwin/CommonCryptoSPI.h
deleted file mode 100644
index 325cbe81bf22..000000000000
--- a/Source/WTF/wtf/spi/darwin/CommonCryptoSPI.h
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2015 Apple Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
- * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef CommonCryptoSPI_h
-#define CommonCryptoSPI_h
-
-#if OS(DARWIN)
-
-#if USE(APPLE_INTERNAL_SDK)
-#include <CommonCrypto/CommonRandomSPI.h>
-#endif
-
-typedef struct __CCRandom* CCRandomRef;
-extern const CCRandomRef kCCRandomDefault;
-extern "C" int CCRandomCopyBytes(CCRandomRef rnd, void *bytes, size_t count);
-
-#endif // OS(DARWIN)
-
-#endif /* CommonCryptoSPI_h */
diff --git a/Source/WTF/wtf/text/WTFString.cpp b/Source/WTF/wtf/text/WTFString.cpp
index 958fd2069ce0..ce376e23a095 100644
--- a/Source/WTF/wtf/text/WTFString.cpp
+++ b/Source/WTF/wtf/text/WTFString.cpp
@@ -460,21 +460,6 @@ Vector<UChar> String::charactersWithNullTermination() const
 
 String String::format(const char *format, ...)
 {
-#if PLATFORM(QT)
-    // Use QString::vsprintf to avoid the locale dependent formatting of vsnprintf.
-    // https://bugs.webkit.org/show_bug.cgi?id=18994
-    va_list args;
-    va_start(args, format);
-
-    QString buffer;
-    buffer.vsprintf(format, args);
-
-    va_end(args);
-
-    QByteArray ba = buffer.toUtf8();
-    return StringImpl::create(reinterpret_cast<const LChar*>(ba.constData()), ba.length());
-
-#else
     va_list args;
     va_start(args, format);
 
@@ -503,7 +488,6 @@ String String::format(const char *format, ...)
     va_end(args);
     
     return StringImpl::create(reinterpret_cast<const LChar*>(buffer.data()), len);
-#endif
 }
 
 String String::number(int number)
diff --git a/Source/WebCore/PlatformQt.cmake b/Source/WebCore/PlatformQt.cmake
index 8414d21e50f1..cd2e79d5db3c 100644
--- a/Source/WebCore/PlatformQt.cmake
+++ b/Source/WebCore/PlatformQt.cmake
@@ -2,6 +2,12 @@ include(platform/ImageDecoders.cmake)
 include(platform/Linux.cmake)
 include(platform/TextureMapper.cmake)
 
+if (NOT USE_LIBJPEG)
+    list(REMOVE_ITEM WebCore_SOURCES
+        platform/image-decoders/jpeg/JPEGImageDecoder.cpp
+    )
+endif ()
+
 if (JPEG_DEFINITIONS)
     add_definitions(${JPEG_DEFINITIONS})
 endif ()
diff --git a/Source/WebCore/crypto/CommonCryptoUtilities.h b/Source/WebCore/crypto/CommonCryptoUtilities.h
index 61d82c873a11..32419ecc4194 100644
--- a/Source/WebCore/crypto/CommonCryptoUtilities.h
+++ b/Source/WebCore/crypto/CommonCryptoUtilities.h
@@ -30,11 +30,11 @@
 
 #include "CryptoAlgorithmIdentifier.h"
 #include <CommonCrypto/CommonCryptor.h>
+#include <CommonCrypto/CommonRandom.h>
 #include <wtf/Vector.h>
 
 #if USE(APPLE_INTERNAL_SDK)
 #include <CommonCrypto/CommonRSACryptor.h>
-#include <CommonCrypto/CommonRandomSPI.h>
 #endif
 
 #ifndef _CC_RSACRYPTOR_H_
@@ -67,10 +67,6 @@ enum {
 
 typedef struct _CCBigNumRef *CCBigNumRef;
 
-typedef struct __CCRandom *CCRandomRef;
-extern const CCRandomRef kCCRandomDefault;
-extern "C" int CCRandomCopyBytes(CCRandomRef rnd, void *bytes, size_t count);
-
 typedef struct _CCRSACryptor *CCRSACryptorRef;
 extern "C" CCCryptorStatus CCRSACryptorEncrypt(CCRSACryptorRef publicKey, CCAsymmetricPadding padding, const void *plainText, size_t plainTextLen, void *cipherText, size_t *cipherTextLen, const void *tagData, size_t tagDataLen, CCDigestAlgorithm digestType);
 extern "C" CCCryptorStatus CCRSACryptorDecrypt(CCRSACryptorRef privateKey, CCAsymmetricPadding padding, const void *cipherText, size_t cipherTextLen, void *plainText, size_t *plainTextLen, const void *tagData, size_t tagDataLen, CCDigestAlgorithm digestType);
# diff --git a/Source/WebCore/crypto/mac/CryptoKeyMac.cpp b/Source/WebCore/crypto/mac/CryptoKeyMac.cpp
# index 13e2e574b2c2..292c1a77b251 100644
# --- a/Source/WebCore/crypto/mac/CryptoKeyMac.cpp
# +++ b/Source/WebCore/crypto/mac/CryptoKeyMac.cpp
# @@ -35,7 +35,7 @@ namespace WebCore {
#  Vector<uint8_t> CryptoKey::randomData(size_t size)
#  {
#      Vector<uint8_t> result(size);
# -    int rc = CCRandomCopyBytes(kCCRandomDefault, result.data(), result.size());
# +    auto rc = CCRandomGenerateBytes(result.data(), result.size());
#      RELEASE_ASSERT(rc == kCCSuccess);
#      return result;
#  }
# diff --git a/Source/WebCore/crypto/mac/SerializedCryptoKeyWrapMac.mm b/Source/WebCore/crypto/mac/SerializedCryptoKeyWrapMac.mm
# index 87ff3e465dab..e1f841137826 100644
# --- a/Source/WebCore/crypto/mac/SerializedCryptoKeyWrapMac.mm
# +++ b/Source/WebCore/crypto/mac/SerializedCryptoKeyWrapMac.mm
# @@ -72,7 +72,7 @@
#  static bool createAndStoreMasterKey(Vector<uint8_t>& masterKeyData)
#  {
#      masterKeyData.resize(masterKeySizeInBytes);
# -    int rc = CCRandomCopyBytes(kCCRandomDefault, masterKeyData.data(), masterKeyData.size());
# +    auto rc = CCRandomGenerateBytes(masterKeyData.data(), masterKeyData.size());
#      RELEASE_ASSERT(rc == kCCSuccess);
#  
#  #if PLATFORM(IOS)
# @@ -172,7 +172,7 @@ bool getDefaultWebCryptoMasterKey(Vector<uint8_t>& masterKey)
#  bool wrapSerializedCryptoKey(const Vector<uint8_t>& masterKey, const Vector<uint8_t>& key, Vector<uint8_t>& result)
#  {
#      Vector<uint8_t> kek(16);
# -    int rc = CCRandomCopyBytes(kCCRandomDefault, kek.data(), kek.size());
# +    auto rc = CCRandomGenerateBytes(kek.data(), kek.size());
#      RELEASE_ASSERT(rc == kCCSuccess);
#  
#      Vector<uint8_t> wrappedKEK(CCSymmetricWrappedSize(kCCWRAPAES, kek.size()));
diff --git a/Source/WebCore/page/qt/EventHandlerQt.cpp b/Source/WebCore/page/qt/EventHandlerQt.cpp
index b717b1f54d03..6aed3f43fb81 100644
--- a/Source/WebCore/page/qt/EventHandlerQt.cpp
+++ b/Source/WebCore/page/qt/EventHandlerQt.cpp
@@ -54,7 +54,7 @@
 namespace WebCore {
 
 #if ENABLE(DRAG_SUPPORT)
-#if defined(Q_OS_OSX)
+#if defined(Q_OS_MACOS)
 const double EventHandler::TextDragDelay = 0.15;
 #else
 const double EventHandler::TextDragDelay = 0.0;
diff --git a/Source/WebCore/platform/Cursor.cpp b/Source/WebCore/platform/Cursor.cpp
index 60a619acda13..014efa5f584b 100644
--- a/Source/WebCore/platform/Cursor.cpp
+++ b/Source/WebCore/platform/Cursor.cpp
@@ -154,7 +154,7 @@ Cursor::Cursor(Image* image, const IntPoint& hotSpot)
 #if ENABLE(MOUSE_CURSOR_SCALE)
     , m_imageScaleFactor(1)
 #endif
-    , m_platformCursor(0)
+    , m_platformCursor(nullptr)
 {
 }
 
@@ -174,11 +174,17 @@ Cursor::Cursor(Type type)
 #if ENABLE(MOUSE_CURSOR_SCALE)
     , m_imageScaleFactor(1)
 #endif
-    , m_platformCursor(0)
+    , m_platformCursor(nullptr)
 {
 }
 
-#if !PLATFORM(COCOA)
+#if PLATFORM(QT)
+PlatformCursor Cursor::platformCursor() const
+{
+    ensurePlatformCursor();
+    return m_platformCursor.get();
+}
+#elif !PLATFORM(COCOA)
 
 PlatformCursor Cursor::platformCursor() const
 {
diff --git a/Source/WebCore/platform/Cursor.h b/Source/WebCore/platform/Cursor.h
index d06ad7d475be..86d714903afa 100644
--- a/Source/WebCore/platform/Cursor.h
+++ b/Source/WebCore/platform/Cursor.h
@@ -140,7 +140,7 @@ namespace WebCore {
 #if ENABLE(MOUSE_CURSOR_SCALE)
             , m_imageScaleFactor(1)
 #endif
-            , m_platformCursor(0)
+            , m_platformCursor(nullptr)
 #endif // !PLATFORM(IOS)
         {
         }
@@ -181,7 +181,9 @@ namespace WebCore {
         float m_imageScaleFactor;
 #endif
 
-#if !USE(APPKIT)
+#if PLATFORM(QT)
+        mutable std::unique_ptr<QCursor> m_platformCursor;
+#elif !USE(APPKIT)
         mutable PlatformCursor m_platformCursor;
 #else
         mutable RetainPtr<NSCursor> m_platformCursor;
diff --git a/Source/WebCore/platform/FileSystem.h b/Source/WebCore/platform/FileSystem.h
index 2c46e4da061d..4ee276da4da6 100644
--- a/Source/WebCore/platform/FileSystem.h
+++ b/Source/WebCore/platform/FileSystem.h
@@ -49,7 +49,7 @@
 #endif
 #endif
 
-#if USE(CF) || (PLATFORM(QT) && defined(Q_OS_MAC))
+#if USE(CF) || (PLATFORM(QT) && defined(Q_OS_MACOS))
 typedef struct __CFBundle* CFBundleRef;
 typedef const struct __CFData* CFDataRef;
 #endif
@@ -75,7 +75,7 @@ typedef HMODULE PlatformModule;
 #elif PLATFORM(EFL)
 typedef Eina_Module* PlatformModule;
 #elif PLATFORM(QT)
-#if defined(Q_OS_MAC)
+#if defined(Q_OS_MACOS)
 typedef CFBundleRef PlatformModule;
 #elif !defined(QT_NO_LIBRARY)
 typedef QLibrary* PlatformModule;
diff --git a/Source/WebCore/platform/graphics/qt/MediaPlayerPrivateQt.cpp b/Source/WebCore/platform/graphics/qt/MediaPlayerPrivateQt.cpp
index 9091fdc72605..cef4750edc0a 100644
--- a/Source/WebCore/platform/graphics/qt/MediaPlayerPrivateQt.cpp
+++ b/Source/WebCore/platform/graphics/qt/MediaPlayerPrivateQt.cpp
@@ -80,7 +80,7 @@ MediaPlayer::SupportsType MediaPlayerPrivateQt::supportsType(const MediaEngineSu
     if (parameters.isMediaStream || parameters.isMediaSource)
         return MediaPlayer::IsNotSupported;
 
-    if (!parameters.type.startsWith("audio/") && !parameters.type.startsWith("video/"))
+    if (!parameters.type.startsWithIgnoringASCIICase("audio/") && !parameters.type.startsWithIgnoringASCIICase("video/"))
         return MediaPlayer::IsNotSupported;
 
     // Parse and trim codecs.
diff --git a/Source/WebCore/platform/image-decoders/ImageDecoder.cpp b/Source/WebCore/platform/image-decoders/ImageDecoder.cpp
index 46366823f830..0273dd3c2d87 100644
--- a/Source/WebCore/platform/image-decoders/ImageDecoder.cpp
+++ b/Source/WebCore/platform/image-decoders/ImageDecoder.cpp
@@ -28,7 +28,9 @@
 #if PLATFORM(QT)
 #include "ImageDecoderQt.h"
 #endif
+#if !PLATFORM(QT) || USE(LIBJPEG)
 #include "JPEGImageDecoder.h"
+#endif
 #include "PNGImageDecoder.h"
 #include "SharedBuffer.h"
 #if USE(WEBP)
@@ -115,8 +117,10 @@ ImageDecoder* ImageDecoder::create(const SharedBuffer& data, ImageSource::AlphaO
     if (matchesICOSignature(contents) || matchesCURSignature(contents))
         return new ICOImageDecoder(alphaOption, gammaAndColorProfileOption);
 
+#if !PLATFORM(QT) || USE(LIBJPEG)
     if (matchesJPEGSignature(contents))
         return new JPEGImageDecoder(alphaOption, gammaAndColorProfileOption);
+#endif
 
 #if USE(WEBP)
     if (matchesWebPSignature(contents))
diff --git a/Source/WebCore/platform/network/NetworkingContext.h b/Source/WebCore/platform/network/NetworkingContext.h
index 3de432e42c8e..582bca6473b8 100644
--- a/Source/WebCore/platform/network/NetworkingContext.h
+++ b/Source/WebCore/platform/network/NetworkingContext.h
@@ -28,10 +28,6 @@
 #include <wtf/SchedulePair.h>
 #endif
 
-#if PLATFORM(QT)
-#include <qglobal.h>
-#endif
-
 #if PLATFORM(COCOA)
 OBJC_CLASS NSOperationQueue;
 #endif
diff --git a/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp b/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp
index 1b60c5131757..0ce68838ed2e 100644
--- a/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp
+++ b/Source/WebCore/platform/network/qt/QNetworkReplyHandler.cpp
@@ -488,12 +488,15 @@ QNetworkReply* QNetworkReplyHandler::release()
 
 static bool shouldIgnoreHttpError(QNetworkReply* reply, bool receivedData)
 {
+    int httpStatusCode = reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt();
+    // Don't ignore error if we haven't received HTTP status code
+    if (httpStatusCode == 0)
+        return false;
+
     // An HEAD XmlHTTPRequest shouldn't be marked as failure for HTTP errors.
     if (reply->operation() == QNetworkAccessManager::HeadOperation)
         return true;
 
-    int httpStatusCode = reply->attribute(QNetworkRequest::HttpStatusCodeAttribute).toInt();
-
     if (httpStatusCode == 401 || httpStatusCode == 407)
         return true;
 
@@ -606,6 +609,7 @@ void QNetworkReplyHandler::sendResponseIfNeeded()
             response.setHTTPHeaderField(String(pair.first.constData(), pair.first.size()), String(pair.second.constData(), pair.second.size()));
     }
 
+    // Note: Qt sets RedirectionTargetAttribute only for 3xx responses, so Location header in 201 responce won't affect this code
     QUrl redirection = m_replyWrapper->reply()->attribute(QNetworkRequest::RedirectionTargetAttribute).toUrl();
     if (redirection.isValid()) {
         redirect(response, redirection);
@@ -648,8 +652,10 @@ void QNetworkReplyHandler::redirect(ResourceResponse& response, const QUrl& redi
     ASSERT(!m_queue.deferSignals());
 
     QUrl currentUrl = m_replyWrapper->reply()->url();
+
+    // RFC7231 section 7.1.2
     QUrl newUrl = currentUrl.resolved(redirection);
-    if (currentUrl.hasFragment())
+    if (!newUrl.hasFragment() && currentUrl.hasFragment())
         newUrl.setFragment(currentUrl.fragment());
 
     ResourceHandleClient* client = m_resourceHandle->client();
diff --git a/Source/WebCore/platform/network/qt/ResourceRequestQt.cpp b/Source/WebCore/platform/network/qt/ResourceRequestQt.cpp
index c54a8115bca6..694e2a7648f2 100644
--- a/Source/WebCore/platform/network/qt/ResourceRequestQt.cpp
+++ b/Source/WebCore/platform/network/qt/ResourceRequestQt.cpp
@@ -27,16 +27,20 @@
 #include <QNetworkRequest>
 #include <QUrl>
 
-// HTTP/2 is implemented since Qt 5.8, but QTBUG-64359 makes it unusable in browser
-#if QT_VERSION >= QT_VERSION_CHECK(5, 9, 4)
+// HTTP/2 is implemented since Qt 5.8, but various QtNetwork bugs make it unusable in browser with Qt < 5.10.1
+// We also don't enable HTTP/2 for unencrypted connections because of possible compatibility issues; it can be
+// enabled manually by user application via custom QNAM subclass
+#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 1)
+#include <QSslSocket>
 #define USE_HTTP2 1
-#endif
 
-// HTTP2AllowedAttribute enforces HTTP/2 instead of negotiating, see QTBUG-61397
-#if QT_VERSION < QT_VERSION_CHECK(5, 10, 0)
-#define HTTP2_IS_BUGGY_WITHOUT_HTTPS 1
-#else
-#define HTTP2_IS_BUGGY_WITHOUT_HTTPS 0
+// Don't enable HTTP/2 when ALPN support status is unknown
+// Before QTBUG-65903 is implemented there is no better way than to check OpenSSL version
+static bool alpnIsSupported()
+{
+    return QSslSocket::sslLibraryVersionNumber() > 0x10002000L &&
+        QSslSocket::sslLibraryVersionString().startsWith(QLatin1String("OpenSSL"));
+}
 #endif
 
 namespace WebCore {
@@ -74,15 +78,11 @@ QNetworkRequest ResourceRequest::toNetworkRequest(NetworkingContext *context) co
     request.setOriginatingObject(context ? context->originatingObject() : 0);
 
 #if USE(HTTP2)
-#if HTTP2_IS_BUGGY_WITHOUT_HTTPS
-    if (originalUrl.protocolIs("https"))
-#endif
-    {
+    static const bool NegotiateHttp2ForHttps = alpnIsSupported();
+    if (originalUrl.protocolIs("https") && NegotiateHttp2ForHttps)
         request.setAttribute(QNetworkRequest::HTTP2AllowedAttribute, true);
-    }
 #endif // USE(HTTP2)
 
-
     const HTTPHeaderMap &headers = httpHeaderFields();
     for (HTTPHeaderMap::const_iterator it = headers.begin(), end = headers.end();
          it != end; ++it) {
diff --git a/Source/WebCore/platform/qt/CursorQt.cpp b/Source/WebCore/platform/qt/CursorQt.cpp
index ffec6715ac65..4a62cec829dc 100644
--- a/Source/WebCore/platform/qt/CursorQt.cpp
+++ b/Source/WebCore/platform/qt/CursorQt.cpp
@@ -49,17 +49,12 @@ Cursor::Cursor(const Cursor& other)
     , m_image(other.m_image)
     , m_hotSpot(other.m_hotSpot)
 #ifndef QT_NO_CURSOR
-    , m_platformCursor(other.m_platformCursor ? new QCursor(*other.m_platformCursor)  : 0)
+    , m_platformCursor(other.m_platformCursor ? std::make_unique<QCursor>(*other.m_platformCursor)  : nullptr)
 #endif
 {
 }
 
-Cursor::~Cursor()
-{
-#ifndef QT_NO_CURSOR
-    delete m_platformCursor;
-#endif
-}
+Cursor::~Cursor() = default;
 
 Cursor& Cursor::operator=(const Cursor& other)
 {
@@ -67,18 +62,18 @@ Cursor& Cursor::operator=(const Cursor& other)
     m_image = other.m_image;
     m_hotSpot = other.m_hotSpot;
 #ifndef QT_NO_CURSOR
-    m_platformCursor = other.m_platformCursor ? new QCursor(*other.m_platformCursor)  : 0;
+    m_platformCursor = other.m_platformCursor ? std::make_unique<QCursor>(*other.m_platformCursor) : nullptr;
 #endif
     return *this;
 }
 
 #ifndef QT_NO_CURSOR
-static QCursor* createCustomCursor(Image* image, const IntPoint& hotSpot)
+static std::unique_ptr<QCursor> createCustomCursor(Image* image, const IntPoint& hotSpot)
 {
     if (!image->nativeImageForCurrentFrame())
-        return 0;
+        return nullptr;
     IntPoint effectiveHotSpot = determineHotSpot(image, hotSpot);
-    return new QCursor(*(image->nativeImageForCurrentFrame()), effectiveHotSpot.x(), effectiveHotSpot.y());
+    return std::make_unique<QCursor>(*(image->nativeImageForCurrentFrame()), effectiveHotSpot.x(), effectiveHotSpot.y());
 }
 #endif
 
@@ -90,117 +85,117 @@ void Cursor::ensurePlatformCursor() const
 
     switch (m_type) {
     case Pointer:
-        m_platformCursor = new QCursor(Qt::ArrowCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::ArrowCursor);
         break;
     case Cross:
-        m_platformCursor = new QCursor(Qt::CrossCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::CrossCursor);
         break;
     case Hand:
-        m_platformCursor = new QCursor(Qt::PointingHandCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::PointingHandCursor);
         break;
     case IBeam:
-        m_platformCursor = new QCursor(Qt::IBeamCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::IBeamCursor);
         break;
     case Wait:
-        m_platformCursor = new QCursor(Qt::WaitCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::WaitCursor);
         break;
     case Help:
-        m_platformCursor = new QCursor(Qt::WhatsThisCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::WhatsThisCursor);
         break;
     case EastResize:
     case EastPanning:
-        m_platformCursor = new QCursor(Qt::SizeHorCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeHorCursor);
         break;
     case NorthResize:
     case NorthPanning:
-        m_platformCursor = new QCursor(Qt::SizeVerCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeVerCursor);
         break;
     case NorthEastResize:
     case NorthEastPanning:
-        m_platformCursor = new QCursor(Qt::SizeBDiagCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeBDiagCursor);
         break;
     case NorthWestResize:
     case NorthWestPanning:
-        m_platformCursor = new QCursor(Qt::SizeFDiagCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeFDiagCursor);
         break;
     case SouthResize:
     case SouthPanning:
-        m_platformCursor = new QCursor(Qt::SizeVerCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeVerCursor);
         break;
     case SouthEastResize:
     case SouthEastPanning:
-        m_platformCursor = new QCursor(Qt::SizeFDiagCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeFDiagCursor);
         break;
     case SouthWestResize:
     case SouthWestPanning:
-        m_platformCursor = new QCursor(Qt::SizeBDiagCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeBDiagCursor);
         break;
     case WestResize:
     case WestPanning:
-        m_platformCursor = new QCursor(Qt::SizeHorCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeHorCursor);
         break;
     case NorthSouthResize:
-        m_platformCursor = new QCursor(Qt::SizeVerCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeVerCursor);
         break;
     case EastWestResize:
-        m_platformCursor = new QCursor(Qt::SizeHorCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeHorCursor);
         break;
     case NorthEastSouthWestResize:
-        m_platformCursor = new QCursor(Qt::SizeBDiagCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeBDiagCursor);
         break;
     case NorthWestSouthEastResize:
-        m_platformCursor = new QCursor(Qt::SizeFDiagCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeFDiagCursor);
         break;
     case ColumnResize:
-        m_platformCursor = new QCursor(Qt::SplitHCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SplitHCursor);
         break;
     case RowResize:
-        m_platformCursor = new QCursor(Qt::SplitVCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SplitVCursor);
         break;
     case MiddlePanning:
     case Move:
-        m_platformCursor = new QCursor(Qt::SizeAllCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::SizeAllCursor);
         break;
     case None:
-        m_platformCursor = new QCursor(Qt::BlankCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::BlankCursor);
         break;
     case NoDrop:
     case NotAllowed:
-        m_platformCursor = new QCursor(Qt::ForbiddenCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::ForbiddenCursor);
         break;
     case Grab:
     case Grabbing:
         notImplemented();
-        m_platformCursor = new QCursor(Qt::ArrowCursor);
+        m_platformCursor = std::make_unique<QCursor>(Qt::ArrowCursor);
         break;
     case VerticalText:
-        m_platformCursor = new QCursor(QPixmap(QStringLiteral(":/webkit/resources/verticalTextCursor.png")), 7, 7);
+        m_platformCursor = std::make_unique<QCursor>(QPixmap(QStringLiteral(":/webkit/resources/verticalTextCursor.png")), 7, 7);
         break;
     case Cell:
-        m_platformCursor = new QCursor(QPixmap(QStringLiteral(":/webkit/resources/cellCursor.png")), 7, 7);
+        m_platformCursor = std::make_unique<QCursor>(QPixmap(QStringLiteral(":/webkit/resources/cellCursor.png")), 7, 7);
         break;
     case ContextMenu:
-        m_platformCursor = new QCursor(QPixmap(QStringLiteral(":/webkit/resources/contextMenuCursor.png")), 3, 2);
+        m_platformCursor = std::make_unique<QCursor>(QPixmap(QStringLiteral(":/webkit/resources/contextMenuCursor.png")), 3, 2);
         break;
     case Alias:
-        m_platformCursor = new QCursor(QPixmap(QStringLiteral(":/webkit/resources/aliasCursor.png")), 11, 3);
+        m_platformCursor = std::make_unique<QCursor>(QPixmap(QStringLiteral(":/webkit/resources/aliasCursor.png")), 11, 3);
         break;
     case Progress:
-        m_platformCursor = new QCursor(QPixmap(QStringLiteral(":/webkit/resources/progressCursor.png")), 3, 2);
+        m_platformCursor = std::make_unique<QCursor>(QPixmap(QStringLiteral(":/webkit/resources/progressCursor.png")), 3, 2);
         break;
     case Copy:
-        m_platformCursor = new QCursor(QPixmap(QStringLiteral(":/webkit/resources/copyCursor.png")), 3, 2);
+        m_platformCursor = std::make_unique<QCursor>(QPixmap(QStringLiteral(":/webkit/resources/copyCursor.png")), 3, 2);
         break;
     case ZoomIn:
-        m_platformCursor = new QCursor(QPixmap(QStringLiteral(":/webkit/resources/zoomInCursor.png")), 7, 7);
+        m_platformCursor = std::make_unique<QCursor>(QPixmap(QStringLiteral(":/webkit/resources/zoomInCursor.png")), 7, 7);
         break;
     case ZoomOut:
-        m_platformCursor = new QCursor(QPixmap(QStringLiteral(":/webkit/resources/zoomOutCursor.png")), 7, 7);
+        m_platformCursor = std::make_unique<QCursor>(QPixmap(QStringLiteral(":/webkit/resources/zoomOutCursor.png")), 7, 7);
         break;
     case Custom:
         m_platformCursor = createCustomCursor(m_image.get(), m_hotSpot);
         if (!m_platformCursor)
-            m_platformCursor = new QCursor(Qt::ArrowCursor);
+            m_platformCursor = std::make_unique<QCursor>(Qt::ArrowCursor);
         break;
     default:
         ASSERT_NOT_REACHED();
diff --git a/Source/WebCore/platform/qt/FileSystemQt.cpp b/Source/WebCore/platform/qt/FileSystemQt.cpp
index 167ff8354c46..7f62d0e1f3f1 100644
--- a/Source/WebCore/platform/qt/FileSystemQt.cpp
+++ b/Source/WebCore/platform/qt/FileSystemQt.cpp
@@ -257,7 +257,7 @@ int writeToFile(PlatformFileHandle handle, const char* data, int length)
 
 bool unloadModule(PlatformModule module)
 {
-#if defined(Q_OS_MAC)
+#if defined(Q_OS_MACOS)
     CFRelease(module);
     return true;
 
diff --git a/Source/WebCore/platform/qt/PasteboardQt.cpp b/Source/WebCore/platform/qt/PasteboardQt.cpp
index 2bc766782af9..2b4a2220cc73 100644
--- a/Source/WebCore/platform/qt/PasteboardQt.cpp
+++ b/Source/WebCore/platform/qt/PasteboardQt.cpp
@@ -131,7 +131,7 @@ void Pasteboard::writeSelection(Range& selectedRange, bool canSmartCopyOrDelete,
     m_writableData->setText(text);
 
     QString markup = createMarkup(selectedRange, 0, AnnotateForInterchange, false, ResolveNonLocalURLs);
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
     markup.prepend(QLatin1String("<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /></head><body>"));
     markup.append(QLatin1String("</body></html>"));
     m_writableData->setData(QLatin1String("text/html"), markup.toUtf8());
diff --git a/Source/WebCore/platform/qt/RenderThemeQStyle.cpp b/Source/WebCore/platform/qt/RenderThemeQStyle.cpp
index 706570399a58..8c6bbba032f8 100644
--- a/Source/WebCore/platform/qt/RenderThemeQStyle.cpp
+++ b/Source/WebCore/platform/qt/RenderThemeQStyle.cpp
@@ -130,7 +130,7 @@ RenderThemeQStyle::RenderThemeQStyle(Page* page)
 {
     int buttonPixelSize = 0;
     m_qStyle->getButtonMetrics(&m_buttonFontFamily, &buttonPixelSize);
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
     m_buttonFontPixelSize = buttonPixelSize;
 #endif
 }
@@ -288,7 +288,7 @@ void RenderThemeQStyle::adjustButtonStyle(StyleResolver& styleResolver, RenderSt
     // Ditch the border.
     style.resetBorder();
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
     if (style.appearance() == PushButtonPart) {
         // The Mac ports ignore the specified height for <input type="button"> elements
         // unless a border and/or background CSS property is also specified.
@@ -299,7 +299,7 @@ void RenderThemeQStyle::adjustButtonStyle(StyleResolver& styleResolver, RenderSt
     FontCascadeDescription fontDescription = style.fontDescription();
     fontDescription.setIsAbsoluteSize(true);
 
-#ifdef Q_OS_MAC // Use fixed font size and family on Mac (like Safari does)
+#ifdef Q_OS_MACOS // Use fixed font size and family on Mac (like Safari does)
     fontDescription.setSpecifiedSize(m_buttonFontPixelSize);
     fontDescription.setComputedSize(m_buttonFontPixelSize);
 #else
@@ -601,7 +601,7 @@ ControlPart RenderThemeQStyle::initializeCommonQStyleOptions(QStyleFacadeOption
     option.state &= ~(QStyleFacade::State_HasFocus | QStyleFacade::State_MouseOver);
     option.state |= QStyleFacade::State_Enabled;
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
     // to render controls in correct positions we also should set the State_Active flag
     option.state |= QStyleFacade::State_Active;
 #endif
diff --git a/Source/WebCore/platform/qt/RenderThemeQStyle.h b/Source/WebCore/platform/qt/RenderThemeQStyle.h
index 665eee0059c8..463404b7d76d 100644
--- a/Source/WebCore/platform/qt/RenderThemeQStyle.h
+++ b/Source/WebCore/platform/qt/RenderThemeQStyle.h
@@ -110,7 +110,7 @@ class RenderThemeQStyle final : public RenderThemeQt {
 
     QRect indicatorRect(QStyleFacade::ButtonType part, const QRect& originalRect) const;
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
     int m_buttonFontPixelSize;
 #endif
 
diff --git a/Source/WebKit/PlatformQt.cmake b/Source/WebKit/PlatformQt.cmake
index 6ab441b98d29..2bd6342bec94 100644
--- a/Source/WebKit/PlatformQt.cmake
+++ b/Source/WebKit/PlatformQt.cmake
@@ -5,7 +5,7 @@ include(ECMGeneratePriFile)
 macro(generate_header _file _var _content)
     file(GENERATE OUTPUT ${_file} CONTENT ${_content})
     list(APPEND ${_var} ${_file})
-    set_source_files_properties(${_file} PROPERTIES GENERATED TRUE)
+    set_source_files_properties(${_file} PROPERTIES GENERATED TRUE SKIP_AUTOMOC TRUE)
 endmacro()
 
 macro(generate_version_header _file _var _prefix)
@@ -13,7 +13,7 @@ macro(generate_version_header _file _var _prefix)
     configure_file(VersionHeader.h.in ${_file} @ONLY)
     unset(HEADER_PREFIX)
     list(APPEND ${_var} ${_file})
-    set_source_files_properties(${_file} PROPERTIES GENERATED TRUE)
+    set_source_files_properties(${_file} PROPERTIES GENERATED TRUE SKIP_AUTOMOC TRUE)
 endmacro()
 
 macro(append_lib_names_to_list _lib_names_list)
@@ -353,6 +353,7 @@ if (NOT SHARED_CORE)
         list(APPEND WebKit_SOURCES
             "${DERIVED_SOURCES_WEBINSPECTORUI_DIR}/qrc_WebInspector.cpp"
         )
+        set_property(SOURCE "${DERIVED_SOURCES_WEBINSPECTORUI_DIR}/qrc_WebInspector.cpp" PROPERTY SKIP_AUTOMOC ON)
     endif ()
 endif ()
 
diff --git a/Source/WebKit/qt/README b/Source/WebKit/qt/README
new file mode 100644
index 000000000000..6b6a411ceccc
--- /dev/null
+++ b/Source/WebKit/qt/README
@@ -0,0 +1,26 @@
+# Qt Port of WebKit
+
+WebKit is an open source web browser engine. WebKit's HTML and JavaScript code began as a branch of the KHTML and KJS libraries from KDE. As part of KDE framework KHTML was based on Qt but during their porting efforts Apple's engineers made WebKit toolkit independent. QtWebKit is a project aiming at porting this fabulous engine back to Qt.
+
+The Qt port of WebKit currently compiles and runs on Linux, *BSD, Windows and macOS.
+
+# Building
+
+You can build and install QtWebKit with these commands:
+
+mkdir build
+cd build
+cmake -G Ninja -DPORT=Qt -DCMAKE_BUILD_TYPE=Release ..
+ninja
+sudo ninja install
+
+See https://github.com/annulen/webkit/wiki for more detailed instuctions
+
+After QtWebKit is installed, you can use it as described in
+https://github.com/annulen/webkit/wiki/Using-QtWebKit-in-your-project
+
+# Contacts
+
+* Mailing list: webkit-qt@lists.webkit.org
+* IRC: #qtwebkit on irc.freenode.net
+* Blog: http://qtwebkit.blogspot.com
diff --git a/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp b/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp
index f7316f71790e..b91c306f4059 100644
--- a/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp
+++ b/Source/WebKit/qt/WebCoreSupport/EditorClientQt.cpp
@@ -469,7 +469,7 @@ void EditorClientQt::handleKeyboardEvent(KeyboardEvent* event)
                     if (kevent->altKey())
                         shouldInsertText = true;
                 } else {
-#ifndef Q_OS_MAC
+#ifndef Q_OS_MACOS
                 // We need to exclude checking for Alt because it is just a different Shift
                 if (!kevent->altKey())
 #endif
diff --git a/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp b/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp
index b3209a572a85..9634e6d51072 100644
--- a/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp
+++ b/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.cpp
@@ -213,6 +213,8 @@ FrameLoaderClientQt::FrameLoaderClientQt()
     , m_pluginView(0)
     , m_hasSentResponseToPlugin(false)
     , m_isOriginatingLoad(false)
+    , m_isDisplayingErrorPage(false)
+    , m_shouldSuppressLoadStarted(false)
 {
 }
 
@@ -1089,6 +1091,9 @@ bool FrameLoaderClientQt::callErrorPageExtension(const WebCore::ResourceError& e
     if (!page->errorPageExtension(&option, &output))
         return false;
 
+    m_isDisplayingErrorPage = true;
+    m_shouldSuppressLoadStarted = true;
+
     URL baseUrl(output.baseUrl);
     URL failingUrl(option.url);
 
@@ -1098,6 +1103,9 @@ bool FrameLoaderClientQt::callErrorPageExtension(const WebCore::ResourceError& e
     // FIXME: visibility?
     WebCore::SubstituteData substituteData(buffer, failingUrl, response, SubstituteData::SessionHistoryVisibility::Hidden);
     m_frame->loader().load(WebCore::FrameLoadRequest(m_frame, request, ShouldOpenExternalURLsPolicy::ShouldNotAllow /*FIXME*/, substituteData));
+
+    m_shouldSuppressLoadStarted = false;
+
     return true;
 }
 
@@ -1107,8 +1115,7 @@ void FrameLoaderClientQt::dispatchDidFailProvisionalLoad(const WebCore::Resource
         printf("%s - didFailProvisionalLoadWithError\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
 
     if (!error.isNull() && !error.isCancellation()) {
-        if (callErrorPageExtension(error))
-            return;
+        callErrorPageExtension(error);
     }
 
     if (m_webFrame)
@@ -1121,8 +1128,7 @@ void FrameLoaderClientQt::dispatchDidFailLoad(const WebCore::ResourceError& erro
         printf("%s - didFailLoadWithError\n", qPrintable(drtDescriptionSuitableForTestResult(m_frame)));
 
     if (!error.isNull() && !error.isCancellation()) {
-        if (callErrorPageExtension(error))
-            return;
+        callErrorPageExtension(error);
     }
 
     if (m_webFrame)
@@ -1534,11 +1540,19 @@ QWebFrameAdapter* FrameLoaderClientQt::webFrame() const
 
 void FrameLoaderClientQt::emitLoadStarted()
 {
+    if (m_shouldSuppressLoadStarted)
+        return;
+
+    m_isDisplayingErrorPage = false;
+
     m_webFrame->emitLoadStarted(m_isOriginatingLoad);
 }
 
 void FrameLoaderClientQt::emitLoadFinished(bool ok)
 {
+    if (ok && m_isDisplayingErrorPage)
+        return;
+
     // Signal handlers can lead to a new load, that will use the member again.
     const bool wasOriginatingLoad = m_isOriginatingLoad;
     m_isOriginatingLoad = false;
diff --git a/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.h b/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.h
index a20364f76522..8465db721f46 100644
--- a/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.h
+++ b/Source/WebKit/qt/WebCoreSupport/FrameLoaderClientQt.h
@@ -254,6 +254,10 @@ private Q_SLOTS:
 
     URL m_lastRequestedUrl;
     bool m_isOriginatingLoad;
+
+    // QTFIXME: consider introducing some sort of flags for storing state
+    bool m_isDisplayingErrorPage;
+    bool m_shouldSuppressLoadStarted;
 };
 
 }
diff --git a/Source/WebKit/qt/WebCoreSupport/QWebPageAdapter.cpp b/Source/WebKit/qt/WebCoreSupport/QWebPageAdapter.cpp
index 00dc0c48841c..1c14fcd07aea 100644
--- a/Source/WebKit/qt/WebCoreSupport/QWebPageAdapter.cpp
+++ b/Source/WebKit/qt/WebCoreSupport/QWebPageAdapter.cpp
@@ -206,7 +206,11 @@ static void openNewWindow(const QUrl& url, Frame* frame)
 }
 
 // FIXME: Find a better place
-Ref<UserContentController> s_userContentProvider = UserContentController::create();
+static UserContentController& userContentProvider()
+{
+    static NeverDestroyed<Ref<UserContentController>> s_userContentProvider(UserContentController::create());
+    return s_userContentProvider.get();
+}
 
 QWebPageAdapter::QWebPageAdapter()
     : settings(0)
@@ -242,7 +246,7 @@ void QWebPageAdapter::initializeWebCorePage()
     pageConfiguration.databaseProvider = &WebDatabaseProvider::singleton();
     pageConfiguration.storageNamespaceProvider = WebStorageNamespaceProvider::create(
         QWebSettings::globalSettings()->localStoragePath());
-    pageConfiguration.userContentController = &s_userContentProvider.get();
+    pageConfiguration.userContentController = &userContentProvider();
     pageConfiguration.visitedLinkStore = &VisitedLinkStoreQt::singleton();
     page = new Page(pageConfiguration);
 
diff --git a/Source/WebKit/qt/WidgetSupport/QStyleFacadeImp.cpp b/Source/WebKit/qt/WidgetSupport/QStyleFacadeImp.cpp
index b35545674b36..53582f8218b4 100644
--- a/Source/WebKit/qt/WidgetSupport/QStyleFacadeImp.cpp
+++ b/Source/WebKit/qt/WidgetSupport/QStyleFacadeImp.cpp
@@ -224,7 +224,7 @@ void QStyleFacadeImp::getButtonMetrics(QString *buttonFontFamily, int *buttonFon
     QFont defaultButtonFont = QApplication::font(&button);
     *buttonFontFamily = defaultButtonFont.family();
     *buttonFontPixelSize = 0;
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
     button.setAttribute(Qt::WA_MacSmallSize);
     QFontInfo fontInfo(defaultButtonFont);
     *buttonFontPixelSize = fontInfo.pixelSize();
@@ -281,7 +281,7 @@ void QStyleFacadeImp::paintComboBox(QPainter *painter, const QStyleFacadeOption
 
     QRect rect = opt.rect;
 
-#if defined(Q_OS_MAC) && !defined(QT_NO_STYLE_MAC)
+#if defined(Q_OS_MACOS) && !defined(QT_NO_STYLE_MAC)
     // QMacStyle makes the combo boxes a little bit smaller to leave space for the focus rect.
     // Because of it, the combo button is drawn at a point to the left of where it was expect to be and may end up
     // overlapped with the text. This will force QMacStyle to draw the combo box with the expected width.
@@ -366,7 +366,7 @@ void QStyleFacadeImp::paintInnerSpinButton(QPainter* painter, const QStyleFacade
     // Default to moving the buttons a little bit within the editor frame.
     int inflateX = -2;
     int inflateY = -2;
-#if defined(Q_OS_MAC) && !defined(QT_NO_STYLE_MAC)
+#if defined(Q_OS_MACOS) && !defined(QT_NO_STYLE_MAC)
     // QMacStyle will position the aqua buttons flush to the right.
     // This will move them more within the control for better style, a la
     // Chromium look & feel.
diff --git a/Source/WebKit/qt/tests/qwebframe/tst_qwebframe.cpp b/Source/WebKit/qt/tests/qwebframe/tst_qwebframe.cpp
index 17bc703fcbce..ab15c6315d72 100644
--- a/Source/WebKit/qt/tests/qwebframe/tst_qwebframe.cpp
+++ b/Source/WebKit/qt/tests/qwebframe/tst_qwebframe.cpp
@@ -94,6 +94,7 @@ private Q_SLOTS:
     void setUrlThenLoads_data();
     void setUrlThenLoads();
     void loadFinishedAfterNotFoundError();
+    void signalsDuringErrorHandling();
     void loadInSignalHandlers_data();
     void loadInSignalHandlers();
 
@@ -1472,6 +1473,30 @@ void tst_QWebFrame::loadFinishedAfterNotFoundError()
     QVERIFY(!wasLoadOk);
 }
 
+void tst_QWebFrame::signalsDuringErrorHandling()
+{
+    QWebPage page;
+    QWebFrame* frame = page.mainFrame();
+
+    QSignalSpy loadStartedSpy(frame, &QWebFrame::loadStarted);
+    QSignalSpy loadFinishedSpy(frame, &QWebFrame::loadFinished);
+    FakeNetworkManager* networkManager = new FakeNetworkManager(&page);
+    page.setNetworkAccessManager(networkManager);
+
+    frame->setUrl(FakeReply::urlFor404ErrorWithoutContents);
+    QTRY_COMPARE(loadStartedSpy.count(), 1);
+    QTRY_COMPARE(loadFinishedSpy.count(), 1);
+    bool wasLoadOk = loadFinishedSpy.at(0).at(0).toBool();
+    QVERIFY(!wasLoadOk);
+
+    frame->load(QUrl("http://example.com"));
+    waitForSignal(frame, SIGNAL(loadFinished(bool)));
+    QCOMPARE(loadStartedSpy.count(), 2);
+    QCOMPARE(loadFinishedSpy.count(), 2);
+    wasLoadOk = loadFinishedSpy.at(1).at(0).toBool();
+    QVERIFY(wasLoadOk);
+}
+
 class URLSetter : public QObject {
     Q_OBJECT
 
diff --git a/Source/WebKit/qt/tests/qwebpage/tst_qwebpage.cpp b/Source/WebKit/qt/tests/qwebpage/tst_qwebpage.cpp
index e545c5c0fbf0..73427cb4bacc 100644
--- a/Source/WebKit/qt/tests/qwebpage/tst_qwebpage.cpp
+++ b/Source/WebKit/qt/tests/qwebpage/tst_qwebpage.cpp
@@ -212,7 +212,7 @@ private Q_SLOTS:
     void cssMediaTypeGlobalSetting();
     void cssMediaTypePageSetting();
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
     void macCopyUnicodeToClipboard();
 #endif
 
@@ -3194,7 +3194,7 @@ void tst_QWebPage::thirdPartyCookiePolicy()
 }
 #endif
 
-#ifdef Q_OS_MAC
+#ifdef Q_OS_MACOS
 void tst_QWebPage::macCopyUnicodeToClipboard()
 {
     QString unicodeText = QString::fromUtf8("αβγδεζηθικλμπ");
diff --git a/Source/WebKit2/Shared/qt/ChildProcessMainQt.cpp b/Source/WebKit2/Shared/qt/ChildProcessMainQt.cpp
index 2db152766755..85dc2a5ca3b1 100644
--- a/Source/WebKit2/Shared/qt/ChildProcessMainQt.cpp
+++ b/Source/WebKit2/Shared/qt/ChildProcessMainQt.cpp
@@ -45,7 +45,7 @@ bool ChildProcessMainBase::parseCommandLine(int argc, char** argv)
     if (argc < 2)
         return false;
 
-#if OS(DARWIN)
+#if USE(MACH_PORTS)
     QByteArray serviceName(argv[1]);
 
     // Get the server port.
diff --git a/Source/WebKit2/UIProcess/API/qt/qquickwebview.cpp b/Source/WebKit2/UIProcess/API/qt/qquickwebview.cpp
index b894d73387dd..7e4b3701210c 100644
--- a/Source/WebKit2/UIProcess/API/qt/qquickwebview.cpp
+++ b/Source/WebKit2/UIProcess/API/qt/qquickwebview.cpp
@@ -385,8 +385,10 @@ void QQuickWebViewPrivate::initialize(WKPageConfigurationRef configurationRef)
         loadClient.didChangeProgress = didChangeProgress;
         loadClient.didFinishProgress = didFinishProgress;
         loadClient.didChangeBackForwardList = didChangeBackForwardList;
+        // FIXME: These three functions should not be part of this client.
         loadClient.processDidBecomeUnresponsive = processDidBecomeUnresponsive;
         loadClient.processDidBecomeResponsive = processDidBecomeResponsive;
+        loadClient.processDidCrash = processDidCrash;
         WKPageSetPageLoaderClient(webPage.get(), &loadClient.base);
     }
 
@@ -605,20 +607,21 @@ void QQuickWebViewPrivate::didRenderFrame()
     }
 }
 
-void QQuickWebViewPrivate::processDidCrash()
+void QQuickWebViewPrivate::processDidCrash(WKPageRef, const void* clientInfo)
 {
-    Q_Q(QQuickWebView);
+    QQuickWebViewPrivate* d = toQQuickWebViewPrivate(clientInfo);
+    QQuickWebView* q = d->q_ptr;
 
-    QUrl url(URL(WebCore::ParsedURLString, webPageProxy->urlAtProcessExit()));
+    QUrl url(URL(WebCore::ParsedURLString, d->webPageProxy->urlAtProcessExit()));
     qWarning("WARNING: The web process experienced a crash on '%s'.", qPrintable(url.toString(QUrl::RemoveUserInfo)));
 
-    pageEventHandler->resetGestureRecognizers();
+    d->pageEventHandler->resetGestureRecognizers();
 
     // Check if loading was ongoing, when process crashed.
-    if (m_loadProgress > 0 && m_loadProgress < 100) {
+    if (d->m_loadProgress > 0 && d->m_loadProgress < 100) {
         QWebLoadRequest loadRequest(url, QQuickWebView::LoadFailedStatus, QStringLiteral("The web process crashed."), QQuickWebView::InternalErrorDomain, 0);
 
-        loadProgressDidChange(100);
+        d->loadProgressDidChange(100);
         emit q->loadingChanged(&loadRequest);
     }
 
diff --git a/Source/WebKit2/UIProcess/API/qt/qquickwebview_p_p.h b/Source/WebKit2/UIProcess/API/qt/qquickwebview_p_p.h
index cca489582c76..dba68e792180 100644
--- a/Source/WebKit2/UIProcess/API/qt/qquickwebview_p_p.h
+++ b/Source/WebKit2/UIProcess/API/qt/qquickwebview_p_p.h
@@ -128,7 +128,6 @@ class QQuickWebViewPrivate {
     // PageClient.
     WebCore::IntSize viewSize() const;
     virtual void pageDidRequestScroll(const QPoint& pos) { }
-    void processDidCrash();
     void didRelaunchProcess();
     std::unique_ptr<WebKit::DrawingAreaProxy> createDrawingAreaProxy();
     void handleDownloadRequest(WebKit::DownloadProxy*);
@@ -176,6 +175,7 @@ class QQuickWebViewPrivate {
     static void didChangeBackForwardList(WKPageRef, WKBackForwardListItemRef, WKArrayRef, const void *clientInfo);
     static void processDidBecomeUnresponsive(WKPageRef, const void* clientInfo);
     static void processDidBecomeResponsive(WKPageRef, const void* clientInfo);
+    static void processDidCrash(WKPageRef, const void* clientInfo);
 
     QQuickWebViewPrivate(QQuickWebView* viewport);
     RefPtr<WebKit::WebPageProxy> webPageProxy;
diff --git a/Source/WebKit2/UIProcess/API/qt/qwebpreferences.cpp b/Source/WebKit2/UIProcess/API/qt/qwebpreferences.cpp
index c781a97ca9cb..82a3db9520fd 100644
--- a/Source/WebKit2/UIProcess/API/qt/qwebpreferences.cpp
+++ b/Source/WebKit2/UIProcess/API/qt/qwebpreferences.cpp
@@ -83,6 +83,10 @@ bool QWebPreferencesPrivate::testAttribute(QWebPreferencesPrivate::WebAttribute
         return WKPreferencesGetUniversalAccessFromFileURLsAllowed(preferencesRef);
     case FileAccessFromFileURLsAllowed:
         return WKPreferencesGetFileAccessFromFileURLsAllowed(preferencesRef);
+    case LogsPageMessagesToSystemConsoleEnabled:
+        return WKPreferencesGetLogsPageMessagesToSystemConsoleEnabled(preferencesRef);
+    case WebSecurityEnabled:
+        return WKPreferencesGetWebSecurityEnabled(preferencesRef);
     default:
         ASSERT_NOT_REACHED();
         return false;
@@ -156,6 +160,12 @@ void QWebPreferencesPrivate::setAttribute(QWebPreferencesPrivate::WebAttribute a
     case FileAccessFromFileURLsAllowed:
         WKPreferencesSetFileAccessFromFileURLsAllowed(preferencesRef, enable);
         break;
+    case LogsPageMessagesToSystemConsoleEnabled:
+        WKPreferencesSetLogsPageMessagesToSystemConsoleEnabled(preferencesRef, enable);
+        break;
+    case WebSecurityEnabled:
+        WKPreferencesSetWebSecurityEnabled(preferencesRef, enable);
+        break;
     default:
         ASSERT_NOT_REACHED();
     }
@@ -631,6 +641,32 @@ void QWebPreferences::setLinksIncludedInFocusChain(bool enable)
     emit linksIncludedInFocusChainChanged();
 }
 
+bool QWebPreferences::logsPageMessagesToSystemConsoleEnabled() const
+{
+    return d->testAttribute(QWebPreferencesPrivate::LogsPageMessagesToSystemConsoleEnabled);
+}
+
+void QWebPreferences::setLogsPageMessagesToSystemConsoleEnabled(bool enable)
+{
+    if (logsPageMessagesToSystemConsoleEnabled() == enable)
+        return;
+    d->setAttribute(QWebPreferencesPrivate::LogsPageMessagesToSystemConsoleEnabled, enable);
+    emit logsPageMessagesToSystemConsoleEnabledChanged();
+}
+
+bool QWebPreferences::webSecurityEnabled() const
+{
+    return d->testAttribute(QWebPreferencesPrivate::WebSecurityEnabled);
+}
+
+void QWebPreferences::setWebSecurityEnabled(bool enable)
+{
+    if (webSecurityEnabled() == enable)
+        return;
+    d->setAttribute(QWebPreferencesPrivate::WebSecurityEnabled, enable);
+    emit webSecurityEnabledChanged();
+}
+
 QWebPreferencesPrivate* QWebPreferencesPrivate::get(QWebPreferences* preferences)
 {
     return preferences->d;
diff --git a/Source/WebKit2/UIProcess/API/qt/qwebpreferences_p.h b/Source/WebKit2/UIProcess/API/qt/qwebpreferences_p.h
index 08c4df2d8a39..702146c388c0 100644
--- a/Source/WebKit2/UIProcess/API/qt/qwebpreferences_p.h
+++ b/Source/WebKit2/UIProcess/API/qt/qwebpreferences_p.h
@@ -51,6 +51,8 @@ class QWEBKIT_EXPORT QWebPreferences : public QObject {
     Q_PROPERTY(bool fileAccessFromFileURLsAllowed READ fileAccessFromFileURLsAllowed WRITE setFileAccessFromFileURLsAllowed NOTIFY fileAccessFromFileURLsAllowedChanged FINAL)
     Q_PROPERTY(bool spatialNavigationEnabled READ spatialNavigationEnabled WRITE setSpatialNavigationEnabled NOTIFY spatialNavigationEnabledChanged FINAL)
     Q_PROPERTY(bool linksIncludedInFocusChain READ linksIncludedInFocusChain WRITE setLinksIncludedInFocusChain NOTIFY linksIncludedInFocusChainChanged FINAL)
+    Q_PROPERTY(bool logsPageMessagesToSystemConsoleEnabled READ logsPageMessagesToSystemConsoleEnabled WRITE setLogsPageMessagesToSystemConsoleEnabled NOTIFY logsPageMessagesToSystemConsoleEnabledChanged FINAL)
+    Q_PROPERTY(bool webSecurityEnabled READ webSecurityEnabled WRITE setWebSecurityEnabled NOTIFY webSecurityEnabledChanged FINAL)
 
     Q_PROPERTY(QString standardFontFamily READ standardFontFamily WRITE setStandardFontFamily NOTIFY standardFontFamilyChanged FINAL)
     Q_PROPERTY(QString fixedFontFamily READ fixedFontFamily WRITE setFixedFontFamily NOTIFY fixedFontFamilyChanged FINAL)
@@ -123,6 +125,12 @@ class QWEBKIT_EXPORT QWebPreferences : public QObject {
     bool linksIncludedInFocusChain() const;
     void setLinksIncludedInFocusChain(bool enable);
 
+    bool logsPageMessagesToSystemConsoleEnabled() const;
+    void setLogsPageMessagesToSystemConsoleEnabled(bool);
+
+    bool webSecurityEnabled() const;
+    void setWebSecurityEnabled(bool);
+
     QString standardFontFamily() const;
     void setStandardFontFamily(const QString& family);
 
@@ -171,6 +179,8 @@ class QWEBKIT_EXPORT QWebPreferences : public QObject {
     void linksIncludedInFocusChainChanged();
     void universalAccessFromFileURLsAllowedChanged();
     void fileAccessFromFileURLsAllowedChanged();
+    void logsPageMessagesToSystemConsoleEnabledChanged();
+    void webSecurityEnabledChanged();
 
     void standardFontFamilyChanged();
     void fixedFontFamilyChanged();
diff --git a/Source/WebKit2/UIProcess/API/qt/qwebpreferences_p_p.h b/Source/WebKit2/UIProcess/API/qt/qwebpreferences_p_p.h
index 2b4c804ff179..a5395c3c820a 100644
--- a/Source/WebKit2/UIProcess/API/qt/qwebpreferences_p_p.h
+++ b/Source/WebKit2/UIProcess/API/qt/qwebpreferences_p_p.h
@@ -44,7 +44,9 @@ class QWebPreferencesPrivate {
         UniversalAccessFromFileURLsAllowed,
         FileAccessFromFileURLsAllowed,
         SpatialNavigationEnabled,
-        LinksIncludedInFocusChain
+        LinksIncludedInFocusChain,
+        LogsPageMessagesToSystemConsoleEnabled,
+        WebSecurityEnabled
     };
 
     enum FontFamily {
diff --git a/Source/WebKit2/UIProcess/Launcher/ProcessLauncher.cpp b/Source/WebKit2/UIProcess/Launcher/ProcessLauncher.cpp
index e62e18d030cb..f5b66cd5fdba 100644
--- a/Source/WebKit2/UIProcess/Launcher/ProcessLauncher.cpp
+++ b/Source/WebKit2/UIProcess/Launcher/ProcessLauncher.cpp
@@ -58,8 +58,7 @@ void ProcessLauncher::didFinishLaunchingProcess(PlatformProcessIdentifier proces
     
     if (!m_client) {
         // FIXME: Make Identifier a move-only object and release port rights/connections in the destructor.
-#if OS(DARWIN) && !PLATFORM(GTK)
-        // FIXME: Should really be something like USE(MACH)
+#if USE(MACH_PORTS)
         if (identifier.port)
             mach_port_mod_refs(mach_task_self(), identifier.port, MACH_PORT_RIGHT_RECEIVE, -1);
 #endif
diff --git a/Source/WebKit2/UIProcess/Launcher/qt/ProcessLauncherQt.cpp b/Source/WebKit2/UIProcess/Launcher/qt/ProcessLauncherQt.cpp
index 97c48b73d3fc..694a759e6733 100644
--- a/Source/WebKit2/UIProcess/Launcher/qt/ProcessLauncherQt.cpp
+++ b/Source/WebKit2/UIProcess/Launcher/qt/ProcessLauncherQt.cpp
@@ -62,7 +62,7 @@
 #include <QCoreApplication>
 #endif
 
-#if OS(DARWIN)
+#if USE(MACH_PORTS)
 #include <mach/mach_init.h>
 #include <servers/bootstrap.h>
 
@@ -70,7 +70,7 @@ extern "C" kern_return_t bootstrap_register2(mach_port_t, name_t, mach_port_t, u
 #endif
 
 // for QNX we need SOCK_DGRAM, see https://bugs.webkit.org/show_bug.cgi?id=95553
-#if defined(SOCK_SEQPACKET) && !defined(Q_OS_MACX) && !OS(QNX)
+#if defined(SOCK_SEQPACKET) && !defined(Q_OS_MACOS) && !OS(QNX)
 #define SOCKET_TYPE SOCK_SEQPACKET
 #else
 #define SOCKET_TYPE SOCK_DGRAM
@@ -101,7 +101,7 @@ void QtWebProcess::setupChildProcess()
 #endif
     prctl(PR_SET_PDEATHSIG, SIGKILL);
 #endif
-#if defined(Q_OS_MACX)
+#if defined(Q_OS_MACOS)
     qputenv("QT_MAC_DISABLE_FOREGROUND_APPLICATION_TRANSFORM", QByteArray("1"));
 #endif
 }
@@ -134,7 +134,7 @@ void ProcessLauncher::launchProcess()
         ASSERT_NOT_REACHED();
     }
 
-#if OS(DARWIN)
+#if USE(MACH_PORTS)
     // Create the listening port.
     mach_port_t connector;
     mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &connector);
@@ -216,7 +216,7 @@ void ProcessLauncher::launchProcess()
     if (!webProcessOrSUIDHelper->waitForStarted()) {
         qDebug() << "Failed to start" << commandLine;
         ASSERT_NOT_REACHED();
-#if OS(DARWIN)
+#if USE(MACH_PORTS)
         mach_port_deallocate(mach_task_self(), connector);
         mach_port_mod_refs(mach_task_self(), connector, MACH_PORT_RIGHT_RECEIVE, -1);
 #endif
diff --git a/Source/WebKit2/UIProcess/qt/QtPageClient.cpp b/Source/WebKit2/UIProcess/qt/QtPageClient.cpp
index 53faa7647bdb..fd410ffdd8d6 100644
--- a/Source/WebKit2/UIProcess/qt/QtPageClient.cpp
+++ b/Source/WebKit2/UIProcess/qt/QtPageClient.cpp
@@ -90,7 +90,8 @@ void QtPageClient::pageDidRequestScroll(const IntPoint& pos)
 
 void QtPageClient::processDidExit()
 {
-    QQuickWebViewPrivate::get(m_webView)->processDidCrash();
+    // TODO: Do we need this signal?
+    // QQuickWebViewPrivate::get(m_webView)->processDidExit();
 }
 
 void QtPageClient::didRelaunchProcess()
diff --git a/Source/WebKit2/WebProcess/qt/WebProcessMainQt.cpp b/Source/WebKit2/WebProcess/qt/WebProcessMainQt.cpp
index 2d0d7df10e7a..ec271b5bd929 100644
--- a/Source/WebKit2/WebProcess/qt/WebProcessMainQt.cpp
+++ b/Source/WebKit2/WebProcess/qt/WebProcessMainQt.cpp
@@ -45,7 +45,7 @@
 #endif
 #endif
 
-#if OS(DARWIN) && !USE(UNIX_DOMAIN_SOCKETS)
+#if USE(MACH_PORTS)
 #include <servers/bootstrap.h>
 
 extern "C" kern_return_t bootstrap_look_up2(mach_port_t, const name_t, mach_port_t*, pid_t, uint64_t);
@@ -139,7 +139,7 @@ Q_DECL_EXPORT int WebProcessMainQt(QGuiApplication* app)
         return 1;
     }
 
-#if OS(DARWIN)
+#if USE(MACH_PORTS)
     QString serviceName = app->arguments().value(1);
 
     // Get the server port.
diff --git a/Source/WebKit2/WebProcess/qt/WebProcessQt.cpp b/Source/WebKit2/WebProcess/qt/WebProcessQt.cpp
index d4864af5b8d2..e687966dbde6 100644
--- a/Source/WebKit2/WebProcess/qt/WebProcessQt.cpp
+++ b/Source/WebKit2/WebProcess/qt/WebProcessQt.cpp
@@ -39,7 +39,7 @@
 #include <WebCore/RuntimeEnabledFeatures.h>
 #include <wtf/RAMSize.h>
 
-#if defined(Q_OS_MACX)
+#if defined(Q_OS_MACOS)
 #include <dispatch/dispatch.h>
 #include <mach/host_info.h>
 #include <mach/mach.h>
@@ -99,7 +99,7 @@ void WebProcess::platformClearResourceCaches(ResourceCachesToClear)
 {
 }
 
-#if defined(Q_OS_MACX)
+#if defined(Q_OS_MACOS)
 static void parentProcessDiedCallback(void*)
 {
     QCoreApplication::quit();
@@ -134,7 +134,7 @@ void WebProcess::platformInitializeWebProcess(WebProcessCreationParameters&& par
     }
 #endif
 
-#if defined(Q_OS_MACX)
+#if defined(Q_OS_MACOS)
     pid_t ppid = getppid();
     dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
     dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_PROC, ppid, DISPATCH_PROC_EXIT, queue);
diff --git a/Source/cmake/OptionsQt.cmake b/Source/cmake/OptionsQt.cmake
index 47dc9d05855b..529dadae8586 100644
--- a/Source/cmake/OptionsQt.cmake
+++ b/Source/cmake/OptionsQt.cmake
@@ -259,6 +259,7 @@ option(USE_STATIC_RUNTIME "Use static runtime (MSVC only)" OFF)
 # Private options specific to the Qt port. Changing these options is
 # completely unsupported. They are intended for use only by WebKit developers.
 WEBKIT_OPTION_DEFINE(ENABLE_TOUCH_ADJUSTMENT "Whether to use touch adjustment" PRIVATE ON)
+WEBKIT_OPTION_DEFINE(USE_LIBJPEG "Support JPEG format directly. If it is disabled, QImageReader will be used with possible degradation of user experience" PUBLIC ON)
 
 
 # Public options shared with other WebKit ports. There must be strong reason
@@ -439,23 +440,13 @@ endif ()
 
 find_package(Threads REQUIRED)
 
-if (NOT QT_BUNDLED_JPEG)
-    find_package(JPEG REQUIRED)
+if (USE_LIBJPEG)
+    find_package(JPEG)
+    if (NOT JPEG_FOUND)
+        message(FATAL_ERROR "libjpeg not found. Please make sure that CMake can find its header files and libraries, or build with -DUSE_LIBJPEG=OFF with possible degradation of user experience")
+    endif ()
 else ()
-    set(JPEG_FOUND 1)
-    # As of Qt 5.10, libjpeg-turbo shipped as a part of Qt requires using a few macro definitions
-    # WARNING: Keep in sync with libjpeg.pri
-    # FIXME: Change Qt so we can avoid this
-    include(CheckTypeSize)
-    check_type_size(size_t _SIZEOF_SIZE_T)
-    set(JPEG_DEFINITIONS
-        -DC_ARITH_CODING_SUPPORTED=1
-        -DD_ARITH_CODING_SUPPORTED=1
-        -DBITS_IN_JSAMPLE=8
-        -DJPEG_LIB_VERSION=80
-        -DSIZEOF_SIZE_T=${_SIZEOF_SIZE_T}
-    )
-    unset(_SIZEOF_SIZE_T)
+    message(WARNING "USE_LIBJPEG is disabled, will attempt using QImageReader to decode JPEG with possible degradation of user experience")
 endif ()
 
 if (NOT QT_BUNDLED_PNG)
diff --git a/Source/cmake/WebKitCommon.cmake b/Source/cmake/WebKitCommon.cmake
index e617c7cc4759..1ba7b58ea284 100644
--- a/Source/cmake/WebKitCommon.cmake
+++ b/Source/cmake/WebKitCommon.cmake
@@ -38,6 +38,9 @@ if (NOT HAS_RUN_WEBKIT_COMMON)
     # Helper macros and feature defines
     # -----------------------------------------------------------------------------
 
+    # To prevent multiple inclusion, most modules should be included once here.
+    include(CheckFunctionExists)
+
     include(WebKitMacros)
     include(WebKitFS)
     include(WebKitHelpers)
diff --git a/Source/cmake/WebKitMacros.cmake b/Source/cmake/WebKitMacros.cmake
index 858e2e47d8d5..a3e95cd28eb3 100644
--- a/Source/cmake/WebKitMacros.cmake
+++ b/Source/cmake/WebKitMacros.cmake
@@ -373,6 +373,10 @@ macro(GENERATE_WEBKIT2_MESSAGE_SOURCES _output_source _input_files)
             WORKING_DIRECTORY ${WEBKIT2_DIR}
             VERBATIM)
 
+        if (${PORT} STREQUAL "Qt")
+            set_property(SOURCE ${DERIVED_SOURCES_WEBKIT2_DIR}/${_name}MessageReceiver.cpp PROPERTY SKIP_AUTOMOC ON)
+        endif ()
+
         list(APPEND ${_output_source} ${DERIVED_SOURCES_WEBKIT2_DIR}/${_name}MessageReceiver.cpp)
     endforeach ()
 endmacro()
diff --git a/Source/qtwebkit.qdocconf b/Source/qtwebkit.qdocconf
index 8e4edbd755b8..0d963a7fb2f4 100644
--- a/Source/qtwebkit.qdocconf
+++ b/Source/qtwebkit.qdocconf
@@ -30,7 +30,7 @@ qhp.QtWebKit.subprojects.qmltypes.selectors = qmlclass
 qhp.QtWebKit.subprojects.qmltypes.sortPages = true
 
 headerdirs = WebKit/qt/Api WebKit/qt/WidgetApi WebKit2/UIProcess/API/qt
-sourcedirs = WebKit/qt/Api WebKit/qt/WidgetApi WebKit/qt/docs Source/JavaScriptCore/qt/api WebKit2/UIProcess/API/qt
+sourcedirs = WebKit/qt/Api WebKit/qt/WidgetApi WebKit/qt/docs WebKit2/UIProcess/API/qt
 exampledirs = WebKit/qt/docs
 imagedirs = WebKit/qt/docs
 
diff --git a/Tools/QtTestBrowser/launcherwindow.cpp b/Tools/QtTestBrowser/launcherwindow.cpp
index 716a6e3e8f15..6e9d388e9c43 100644
--- a/Tools/QtTestBrowser/launcherwindow.cpp
+++ b/Tools/QtTestBrowser/launcherwindow.cpp
@@ -106,6 +106,8 @@ LauncherWindow::LauncherWindow(WindowOptions* data, QGraphicsScene* sharedScene)
     createChrome();
 #if !defined(QT_NO_FILEDIALOG) && !defined(QT_NO_MESSAGEBOX)
     connect(page(), SIGNAL(downloadRequested(const QNetworkRequest&)), this, SLOT(downloadRequest(const QNetworkRequest&)));
+    connect(page()->networkAccessManager(), SIGNAL(sslErrors(QNetworkReply*, const QList<QSslError>&)),
+            this, SLOT(showSSLErrorConfirmation(QNetworkReply*, const QList<QSslError>&)));
 #endif
 }
 
@@ -222,6 +224,7 @@ void LauncherWindow::applyPrefs()
     settings->setAttribute(QWebSettings::TiledBackingStoreEnabled, m_windowOptions.useTiledBackingStore);
     settings->setAttribute(QWebSettings::FrameFlatteningEnabled, m_windowOptions.useFrameFlattening);
     settings->setAttribute(QWebSettings::WebGLEnabled, m_windowOptions.useWebGL);
+    settings->setAttribute(QWebSettings::MediaEnabled, m_windowOptions.useMedia);
     m_windowOptions.useWebAudio = settings->testAttribute(QWebSettings::WebAudioEnabled);
     m_windowOptions.useMediaSource = settings->testAttribute(QWebSettings::MediaSourceEnabled);
 
@@ -326,6 +329,15 @@ void LauncherWindow::createChrome()
     toggleWebGL->setEnabled(false);
 #endif
 
+    QAction* toggleMedia = toolsMenu->addAction("Toggle Media", this, SLOT(toggleMedia(bool)));
+    toggleMedia->setCheckable(true);
+#if ENABLE(VIDEO)
+    toggleMedia->setChecked(settings->testAttribute(QWebSettings::MediaEnabled));
+#else
+    toggleMedia->setChecked(false);
+    toggleMedia->setEnabled(false);
+#endif
+
     QAction* toggleWebAudio = toolsMenu->addAction("Toggle WebAudio", this, SLOT(toggleWebAudio(bool)));
     toggleWebAudio->setCheckable(true);
 #if ENABLE(WEB_AUDIO)
@@ -336,7 +348,7 @@ void LauncherWindow::createChrome()
 
     QAction* toggleMediaSource = toolsMenu->addAction("Toggle MediaSource", this, SLOT(toggleMediaSource(bool)));
     toggleMediaSource->setCheckable(true);
-    toggleWebGL->setChecked(settings->testAttribute(QWebSettings::MediaSourceEnabled));
+    toggleMediaSource->setChecked(settings->testAttribute(QWebSettings::MediaSourceEnabled));
 #if !ENABLE(MEDIA_SOURCE)
     toggleMediaSource->setEnabled(false);
 #endif
@@ -948,6 +960,12 @@ void LauncherWindow::toggleWebGL(bool toggle)
     page()->settings()->setAttribute(QWebSettings::WebGLEnabled, toggle);
 }
 
+void LauncherWindow::toggleMedia(bool toggle)
+{
+    m_windowOptions.useMedia = toggle;
+    page()->settings()->setAttribute(QWebSettings::MediaEnabled, toggle);
+}
+
 void LauncherWindow::toggleWebAudio(bool toggle)
 {
     m_windowOptions.useWebAudio = toggle;
@@ -1142,6 +1160,23 @@ void LauncherWindow::showUserAgentDialog()
     delete dialog;
 }
 
+void LauncherWindow::showSSLErrorConfirmation(QNetworkReply* reply, const QList<QSslError>& errors)
+{
+    QString errorStrings = "<ul>";
+    for (const QSslError& error : errors)
+        errorStrings += "<li>" + error.errorString() + "</li>";
+    errorStrings += "</ul>";
+
+    QMessageBox sslWarningBox;
+    sslWarningBox.setText("TLS handshake problem");
+    sslWarningBox.setInformativeText(errorStrings);
+    sslWarningBox.setStandardButtons(QMessageBox::Abort | QMessageBox::Ignore);
+    sslWarningBox.setDefaultButton(QMessageBox::Abort);
+    sslWarningBox.setIcon(QMessageBox::Warning);
+    if (sslWarningBox.exec() == QMessageBox::Ignore)
+        reply->ignoreSslErrors();
+}
+
 void LauncherWindow::loadURLListFromFile()
 {
     QString selectedFile;
diff --git a/Tools/QtTestBrowser/launcherwindow.h b/Tools/QtTestBrowser/launcherwindow.h
index e475a8022cdb..8a8baeedabba 100644
--- a/Tools/QtTestBrowser/launcherwindow.h
+++ b/Tools/QtTestBrowser/launcherwindow.h
@@ -72,6 +72,7 @@ class WindowOptions {
     bool useCompositing { false };
     bool useTiledBackingStore { false };
     bool useWebGL { false };
+    bool useMedia { true };
     bool useWebAudio { false };
     bool useMediaSource { false };
     bool useFrameFlattening { false };
@@ -134,6 +135,7 @@ protected Q_SLOTS:
     void toggleTiledBackingStore(bool toggle);
     void toggleResizesToContents(bool toggle);
     void toggleWebGL(bool toggle);
+    void toggleMedia(bool toggle);
     void toggleWebAudio(bool toggle);
     void toggleMediaSource(bool toggle);
     void toggleSpatialNavigation(bool enable);
@@ -170,6 +172,8 @@ protected Q_SLOTS:
     void clearSelection();
     void showFPS(bool enable);
     void showUserAgentDialog();
+    void showSSLErrorConfirmation(QNetworkReply*, const QList<QSslError>&);
+
 
     void printURL(const QUrl&);
 #if !defined(QT_NO_FILEDIALOG) && !defined(QT_NO_MESSAGEBOX)
diff --git a/Tools/QtTestBrowser/mainwindow.cpp b/Tools/QtTestBrowser/mainwindow.cpp
index d2f634654640..573bc77c95b1 100644
--- a/Tools/QtTestBrowser/mainwindow.cpp
+++ b/Tools/QtTestBrowser/mainwindow.cpp
@@ -44,7 +44,6 @@
 #endif
 #include <QMenuBar>
 #include <QMessageBox>
-#include <QNetworkReply>
 
 MainWindow::MainWindow()
     : m_page(new WebPage(this))
@@ -87,7 +86,6 @@ void MainWindow::buildUI()
     connect(page()->mainFrame(), SIGNAL(loadStarted()), this, SLOT(onLoadStarted()));
     connect(page()->mainFrame(), SIGNAL(iconChanged()), this, SLOT(onIconChanged()));
     connect(page()->mainFrame(), SIGNAL(titleChanged(QString)), this, SLOT(onTitleChanged(QString)));
-    connect(page()->networkAccessManager(), SIGNAL(sslErrors(QNetworkReply*, const QList<QSslError>&)), this, SLOT(onSSLErrors(QNetworkReply*, const QList<QSslError>&)));
     connect(page(), SIGNAL(windowCloseRequested()), this, SLOT(close()));
 
 #ifndef QT_NO_SHORTCUT
@@ -252,20 +250,3 @@ void MainWindow::onTitleChanged(const QString& title)
     else
         setWindowTitle(QString::fromLatin1("%1 - %2").arg(title).arg(QCoreApplication::applicationName()));
 }
-
-void MainWindow::onSSLErrors(QNetworkReply* reply,const QList<QSslError>& errors)
-{
-    QString errorStrings = "<ul>";
-    for (const QSslError& error : errors)
-        errorStrings += "<li>" + error.errorString() + "</li>";
-    errorStrings += "</ul>";
-
-    QMessageBox sslWarningBox;
-    sslWarningBox.setText("SSL handshake problem");
-    sslWarningBox.setInformativeText(errorStrings);
-    sslWarningBox.setStandardButtons(QMessageBox::Abort | QMessageBox::Ignore);
-    sslWarningBox.setDefaultButton(QMessageBox::Abort);
-    sslWarningBox.setIcon(QMessageBox::Warning);
-    if (sslWarningBox.exec() == QMessageBox::Ignore)
-        reply->ignoreSslErrors();
-}
diff --git a/Tools/QtTestBrowser/mainwindow.h b/Tools/QtTestBrowser/mainwindow.h
index 7ce1483e24ff..6e978576e606 100644
--- a/Tools/QtTestBrowser/mainwindow.h
+++ b/Tools/QtTestBrowser/mainwindow.h
@@ -66,7 +66,6 @@ protected Q_SLOTS:
     void onIconChanged();
     void onLoadStarted();
     void onTitleChanged(const QString&);
-    void onSSLErrors(QNetworkReply*, const QList<QSslError>&);
 
 protected:
     QString addressUrl() const;
diff --git a/Tools/qmake/projects/qtjpeg/qtjpeg.pro b/Tools/qmake/projects/qtjpeg/qtjpeg.pro
deleted file mode 100644
index 33aa665d34b9..000000000000
--- a/Tools/qmake/projects/qtjpeg/qtjpeg.pro
+++ /dev/null
@@ -1,14 +0,0 @@
-load(functions)
-
-TARGET = qtjpeg
-
-CONFIG += \
-    static \
-    hide_symbols \
-    exceptions_off rtti_off warn_off
-
-load(qt_helper_lib)
-
-DESTDIR = $$ROOT_BUILD_DIR/lib
-
-include($$QTBASE_DIR/src/3rdparty/libjpeg.pri)
diff --git a/Tools/qmake/projects/run_cmake.pro b/Tools/qmake/projects/run_cmake.pro
index b9d0f08a2906..ff6d1d5624b2 100644
--- a/Tools/qmake/projects/run_cmake.pro
+++ b/Tools/qmake/projects/run_cmake.pro
@@ -35,15 +35,9 @@ build_pass|!debug_and_release {
     static_runtime: CMAKE_CONFIG += USE_STATIC_RUNTIME=ON
 
     QT_FOR_CONFIG += gui-private
-    !qtConfig(system-jpeg):exists($$QTBASE_DIR) {
-        CMAKE_CONFIG += \
-            QT_BUNDLED_JPEG=1 \
-            JPEG_LIBRARIES=$$staticLibPath(qtjpeg)
-
-        exists($$QTBASE_DIR/src/3rdparty/libjpeg/src/jpeglib.h): \
-            CMAKE_CONFIG += JPEG_INCLUDE_DIR=$$QTBASE_DIR/src/3rdparty/libjpeg/src
-        else: \
-            CMAKE_CONFIG += JPEG_INCLUDE_DIR=$$QTBASE_DIR/src/3rdparty/libjpeg
+    !qtConfig(system-jpeg):qtConfig(jpeg) {
+        # Use QImageReader for JPEG
+        CMAKE_CONFIG += USE_LIBJPEG=OFF
     }
 
     !qtConfig(system-png):qtConfig(png):exists($$QTBASE_DIR) {
diff --git a/Tools/qt/manifest.txt b/Tools/qt/manifest.txt
index 6fe3e9546ea6..39414cc5f914 100644
--- a/Tools/qt/manifest.txt
+++ b/Tools/qt/manifest.txt
@@ -99,8 +99,9 @@ file Source/WebKit/win/Plugins
 # Version
 file Source/WebKit/mac/Configurations/Version.xcconfig
 
-# Move LICENSE.LGPLv21 to the root
+# Move LICENSE.LGPLv21 and README to the root
 file Source/WebKit/qt/LICENSE.LGPLv21 LICENSE.LGPLv21
+file Source/WebKit/qt/README README
 
 directory Source/WebInspectorUI/UserInterface/Images
 exclude Source/WebInspectorUI/UserInterface/Images/.*
diff --git a/WebKit.pro b/WebKit.pro
index ca3b009aa275..09debf18297e 100644
--- a/WebKit.pro
+++ b/WebKit.pro
@@ -9,9 +9,6 @@ isPlatformSupported() {
     !qtConfig(system-png):qtConfig(png):exists($$QTBASE_DIR): \
         SUBDIRS += $$PROJECTS_DIR/qtpng
 
-    !qtConfig(system-jpeg):exists($$QTBASE_DIR): \
-        SUBDIRS += $$PROJECTS_DIR/qtjpeg
-
     SUBDIRS += \
         $$PROJECTS_DIR/generate_cmake_toolchain_file.pro \
         $$PROJECTS_DIR/generate_forwarding_pris.pro \
