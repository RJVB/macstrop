diff --git a/Source/WTF/wtf/OSObjectPtr.h b/Source/WTF/wtf/OSObjectPtr.h
index ed7eceb92c4d445767cff2379b1ab9539f38692b..3bfd1edf1ea7fca1519bb29070b9822b683ee84f 100644
--- a/Source/WTF/wtf/OSObjectPtr.h
+++ b/Source/WTF/wtf/OSObjectPtr.h
@@ -30,6 +30,11 @@
 #include <wtf/Assertions.h>
 #include <wtf/StdLibExtras.h>
 
+#if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101000) \
+        || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 80000)
+#include <CoreFoundation/CoreFoundation.h>
+#endif
+
 namespace WTF {
 
 template<typename T> class OSObjectPtr;
@@ -38,13 +43,25 @@ template<typename T> OSObjectPtr<T> adoptOSObject(T);
 template<typename T>
 static inline void retainOSObject(T ptr)
 {
+#if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101000) \
+        || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 80000)
+    if (ptr)
+        CFRetain(ptr);
+#else
     os_retain(ptr);
+#endif
 }
 
 template<typename T>
 static inline void releaseOSObject(T ptr)
 {
+#if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101000) \
+        || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 80000)
+    if (ptr)
+        CFRelease(ptr);
+#else
     os_release(ptr);
+#endif
 }
 
 template<typename T> class OSObjectPtr {
diff --git qtwebkit-5.212.0-alpha2/Source/cmake/OptionsQt.cmake qtwebkit-5.212.0-alpha2/Source/cmake/OptionsQt.cmake
--- qtwebkit-5.212.0-alpha2/Source/cmake/orig.OptionsQt.cmake	2017-06-16 01:36:48.000000000 +0200
+++ qtwebkit-5.212.0-alpha2/Source/cmake/OptionsQt.cmake	2017-11-12 02:37:35.000000000 +0100
@@ -317,9 +317,9 @@
     message(FATAL_ERROR "MSVC 2015 is required to build QtWebKit, use a newer MSVC version")
 endif ()
 
-if (APPLE AND CMAKE_SYSTEM_VERSION VERSION_LESS 14.0.0)
-    message(FATAL_ERROR "macOS 10.10 or higher is required to build and run QtWebKit")
-endif ()
+# if (APPLE AND CMAKE_SYSTEM_VERSION VERSION_LESS 14.0.0)
+#     message(FATAL_ERROR "macOS 10.10 or higher is required to build and run QtWebKit")
+# endif ()
 
 set(ENABLE_WEBKIT ON)
 set(WTF_USE_UDIS86 1)
#@@ -505,7 +504,7 @@
# 
# # Mach ports and Unix sockets are currently used by WK2, but their USE() values
# # affect building WorkQueue
#-if (APPLE)
#+if (APPLE AND NOT USE_UNIX_DOMAIN_SOCKETS)
#     SET_AND_EXPOSE_TO_BUILD(USE_MACH_PORTS 1) # Qt-specific
# elseif (UNIX)
#     SET_AND_EXPOSE_TO_BUILD(USE_UNIX_DOMAIN_SOCKETS 1)
@@ -578,8 +577,10 @@
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-keep-inline-dllexport")
 endif ()
 
-if (APPLE)
+if (APPLE AND CMAKE_SYSTEM_VERSION VERSION_GREATER_EQUAL 14.0.0)
     SET_AND_EXPOSE_TO_BUILD(HAVE_QOS_CLASSES 1)
+else ()
+    SET_AND_EXPOSE_TO_BUILD(HAVE_QOS_CLASSES 0)
 endif ()
 
 if (ENABLE_MATHML)
diff --git qtwebkit-5.212.0-alpha2/Tools/qmake/mkspecs/features/functions.prf qtwebkit-5.212.0-alpha2/Tools/qmake/mkspecs/features/functions.prf
--- qtwebkit-5.212.0-alpha2/Tools/qmake/mkspecs/features/orig.functions.prf	2017-11-12 10:42:34.000000000 +0100
+++ qtwebkit-5.212.0-alpha2/Tools/qmake/mkspecs/features/functions.prf	2017-11-13 22:22:05.000000000 +0100
@@ -84,14 +84,14 @@
         }
     } else: macos {
         # We require macOS 10.10 (darwin version 14.0.0) or newer
-        darwin_major_version = $$section(QMAKE_HOST.version, ., 0, 0)
-        lessThan(darwin_major_version, 14) {
-            skipBuild("QtWebKit requires macOS version 10.10 or newer.")
-        }
-        sdk_version = $$appleSdkVersion()
-        !isVersionAtLeast($$sdk_version, "10.10") {
-            skipBuild("QtWebKit requires an macOS SDK version of 10.10 or newer. Current version is $${sdk_version}.")
-        }
+        # darwin_major_version = $$section(QMAKE_HOST.version, ., 0, 0)
+        # lessThan(darwin_major_version, 14) {
+        #     skipBuild("QtWebKit requires macOS version 10.10 or newer.")
+        # }
+        # sdk_version = $$appleSdkVersion()
+        # !isVersionAtLeast($$sdk_version, "10.10") {
+        #     skipBuild("QtWebKit requires an macOS SDK version of 10.10 or newer. Current version is $${sdk_version}.")
+        # }
     } else {
         android: skipBuild("Android is not supported.")
         uikit: skipBuild("UIKit platforms are not supported.")
diff --git a/Source/WTF/wtf/spi/darwin/CommonCryptoSPI.h b/Source/WTF/wtf/spi/darwin/CommonCryptoSPI.h
new file mode 100644
--- /dev/null	2019-06-27 17:43:26.311998000 +0200
+++ b/Source/WTF/wtf/spi/darwin/CommonCryptoSPI.h	2019-06-27 17:35:56.000000000 +0200
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2015 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef CommonCryptoSPI_h
+#define CommonCryptoSPI_h
+
+#if OS(DARWIN)
+
+#if USE(APPLE_INTERNAL_SDK)
+#include <CommonCrypto/CommonRandomSPI.h>
+#endif
+
+typedef struct __CCRandom* CCRandomRef;
+extern const CCRandomRef kCCRandomDefault;
+extern "C" int CCRandomCopyBytes(CCRandomRef rnd, void *bytes, size_t count);
+
+#endif // OS(DARWIN)
+
+#endif /* CommonCryptoSPI_h */
diff --git a/Source/WTF/wtf/OSRandomSource.cpp b/Source/WTF/wtf/OSRandomSource.cpp
--- a/Source/WTF/wtf/OSRandomSource.cpp	2019-06-27 12:07:27.000000000 +0200
+++ b/Source/WTF/wtf/OSRandomSource.cpp	2019-06-27 17:46:39.000000000 +0200
@@ -41,8 +41,13 @@
 #endif
 
 #if OS(DARWIN)
-#include <CommonCrypto/CommonCryptoError.h>
-#include <CommonCrypto/CommonRandom.h>
+#if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101000) \
+        || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 80000)
+    #include "wtf/spi/darwin/CommonCryptoSPI.h"
+#else
+    #include <CommonCrypto/CommonCryptoError.h>
+    #include <CommonCrypto/CommonRandom.h>
+#endif
 #endif
 
 namespace WTF {
@@ -62,7 +67,12 @@
 void cryptographicallyRandomValuesFromOS(unsigned char* buffer, size_t length)
 {
 #if OS(DARWIN)
+#if (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED < 101000) \
+        || (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) && __IPHONE_OS_VERSION_MIN_REQUIRED < 80000)
+    RELEASE_ASSERT(!CCRandomCopyBytes(kCCRandomDefault, buffer, length));
+#else
     RELEASE_ASSERT(!CCRandomGenerateBytes(buffer, length));
+#endif // MAC_OS_X_VERSION
 #elif OS(UNIX)
     int fd = open("/dev/urandom", O_RDONLY, 0);
     if (fd < 0)
