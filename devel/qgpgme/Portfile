# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
if {${os.major} < 13} {
    PortGroup       cxx11 1.1
}
# qgpgme is mostly used as a KDE dependency, so prefer qt5-kde
set qt5.prefer_kde  1
PortGroup           qt5 1.0

name                qgpgme
version             1.10.0
categories          devel security crypto
license             GPL-2+
maintainers         gmail.com:rjvbertin mk openmaintainer
description         Qt5 wrapper for the gpgme library for easy acces to GnuPG.
long_description    QGpgME is the Qt5 wrapper for GnuPG Made Easy (GPGME).

platforms           darwin linux

homepage            http://www.gnupg.org/related_software/gpgme/
master_sites        gnupg:gpgme
use_bzip2           yes

distname            gpgme-${version}
# we use the same distfiles as port:gpgme:
dist_subdir         gpgme
checksums           rmd160  9e6d0cef086b47f697a17384082f0c9f2f95c412 \
                    sha256  1a8fed1197c3b99c35f403066bb344a26224d292afc048cfdfc4ccd5690a0693

# either gnupg2 (the default) or gnupg21 is needed for running the unit tests
# and at runtime but nothing from gnupg2 links directly with qgpgme
depends_build       port:pkgconfig \
                    path:bin/gpg2:gnupg2

# this is not actually how things work currently, we actually build
# much of gpgme again. However, depending on port:gpgme will ensure
# that all dependencies are there, and simplifies the depspec (maintenance).
depends_lib         port:gpgme

depends_run         path:bin/gpg2:gnupg2

use_parallel_build  yes

# we have to build everything, but we can do the install (destroot) step from the lang/qt subdir
destroot.dir        ${worksrcpath}/lang/qt

patchfiles          patch-configure.ac.diff \
                    patch-tests-gpg-Makefile.am.diff \
                    patch-lang_qt_src_qgpgmeencryptjob.diff

platform darwin {
    pre-patch {
        # use /bin/echo to avoid garbling the C++ headers
        reinplace -W ${worksrcpath} "s|echo -n|/bin/echo -n|g" lang/qt/src/Makefile.am lang/qt/src/Makefile.in
    }
}
post-patch {
    reinplace "s|thread_modules=\"\"|thread_modules=\"pthread\"|" ${worksrcpath}/src/gpgme-config.in
    reinplace "s|@GPG@|${prefix}/bin/gpg2|" ${worksrcpath}/src/gpgme-config.in
    reinplace "s|@GPGSM@|${prefix}/bin/gpgsm|" ${worksrcpath}/src/gpgme-config.in
}

lappend languages   qt

platform darwin {
    # cpp bindings require C++11 (thus libc++), which we can rely on having thanks to the cxx11 portgroup
    if {${configure.cxx_stdlib} eq "libc++"} {
        lappend languages cpp
    }

    if {![file exists ${worksrcpath}/config.log]} {
        use_autoreconf  yes
        autoreconf.args -fvi
    }

    post-configure {
        reinplace "s|CC -dynamiclib|CC -dynamiclib [get_canonical_archflags]|g" ${worksrcpath}/libtool
    }
}

# rename libqgpgme to libq5gpgme to avoid conflicts with port:kdepimlibs4
# The library is found through CMake files (also modified), so well behaved
# software (presumably KF5) won't have issues with the non-standard name.
patchfiles-append   patch-libqgpgme-name.diff


# gpg regression tests run during build repeatedly fail with error
# gpg: can't connect to the agent: File name too long
# disable for now to avoid build error
patchfiles-append   patch-disable-qt-tests.diff

configure.args      --disable-dependency-tracking \
                    --enable-languages="${languages}" \
                    --disable-gpg-test \
                    --disable-gpgconf-test

# test.run            yes
# test.target         check
# test.dir            ${destroot.dir}
# pre-test {
#     ui_warn "enter \"abc\" when a passphrase is requested"
# }

post-destroot {
    xinstall -m 755 -d ${destroot}${prefix}/share/doc/${name}
    ln -s ../gpgme  ${destroot}${prefix}/share/doc/${name}
    xinstall -m 644 -W ${worksrcpath} lang/qt/README \
        ${destroot}${prefix}/share/doc/${name}
}

livecheck.type      regex
livecheck.url       ftp://ftp.gnupg.org/gcrypt/gpgme/
livecheck.regex     "gpgme-(\\d+(?:\\.\\d+)*)${extract.suffix}"
