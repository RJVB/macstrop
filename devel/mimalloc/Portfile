# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
PortGroup           cmake 1.1
set LTO.allow_ThinLTO no
set LTO.LTO.maybe_ForceLD yes
PortGroup           LTO 1.0


# github.setup        microsoft mimalloc 2.1.2 v
# github.tarball_from archive
github.setup        microsoft mimalloc 1d8348b4117d3536a0e1c30126961f7ed6eb62fa
fetch.type          git

subport ${name}-bench {}

categories          devel
license             MIT

if {${subport} eq ${name}} {
    distname        ${subport}-git
    version         2.1.9.20
    maintainers     {outlook.com:mohd.akram @mohd-akram} openmaintainer

    description     mimalloc is a compact general purpose allocator with \
                    excellent performance

    long_description \
                    mimalloc is a general purpose allocator with excellent \
                    performance characteristics.

    checksums       rmd160  362b6ba6270889af10af46e41e469847a42b99a0 \
                    sha256  2b1bff6f717f9725c70bf8d79e4786da13de8a270059e4ba0bdd262ae7be46eb
#                 size    1163868

    patch.pre_args  -Np1
    patchfiles      patch-cmake.diff

    cmake.save_configure_cmd "install log"

    universal_variant no

    post-destroot {
        if {${os.platform} eq "darwin"} {
            xinstall -m 755 ${filespath}/mimalloc-darwin.sh ${destroot}${prefix}/bin/mimalloc.sh
        } else {
            xinstall -m 755 ${filespath}/mimalloc.sh ${destroot}${prefix}/bin
        }
        reinplace "s|@PREFIX@|${prefix}|g" ${destroot}${prefix}/bin/mimalloc.sh
    }

    test.run        yes
} else {
    platform darwin {
        PortGroup   legacysupport 1.1 
        legacysupport.newest_darwin_requires_legacy 15
    }

    github.setup    daanx mimalloc-bench 4efabd07da55e21ff336b0031fe531a34d05d0ff
    distname        ${subport}-git
    version         1.0.0.320

    description     benchmarks for port:mimalloc
    long_description \
                    This port contains a benchmark suite for port:mimalloc, comparing \
                    its performance to the system allocator and potentially to the \
                    allocators provided by port:jemalloc, port:hoard and port:onetbb \
                    Timing is obtained through port:gtime . \n\
                    NB: this port is not supposed to be installed\; run the benchmarks \
                    via `port -v test ${subport}`. This will raise a bogus error in case \
                    of succesfull completion\; this is so the test phase can be executed \
                    multiple times.
    cmake.source_dir \
                    ${worksrcpath}/bench
    depends_lib     port:mimalloc \
                    port:gtime
    platform darwin {
        depends_lib-append \
                    port:afsctool \
                    port:gzip
    }
    test.run        yes

    set pdfdoc      large.pdf

    variant gs description {run a benchmark using port:ghostscript} {
        depends_lib-append \
                    port:ghostscript
    }

    variant sqlite description {run a native SQLite benchmark (github:nurpax/db-bench)} {
        depends_lib-append \
                    bin:python2.7:python27
    }

    variant jemalloc description {compare with the jemalloc allocator} {
        depends_lib-append \
                    port:jemalloc
    }

    variant tbbmalloc description {compare with the tbbmalloc allocator} {
        depends_lib-append \
                    port:onetbb
    }

    variant hoard description {compare with the hoard allocator} {
        depends_lib-append \
                    port:hoard
    }

    if {${os.platform} eq "darwin"} {
        set INSERT DYLD_INSERT_LIBRARIES
        set lext "dylib"
    } else {
        set INSERT LD_PRELOAD
        set lext "so"
    }

    proc output {{allocator "malloc"}} {
        return "-v -o ../out/${allocator}.log -a"
    }

    proc bench {command} {
        global build.dir prefix os.platform INSERT lext
        ui_msg "--->   Timing command: gtime ${command}"
        # set bname [file tail [lindex [split ${command}] 0]]
        # set output "-v -o ${bname}.log"
        system -W ${build.dir} "gtime [output malloc] ${command} | tee -a malloc.log"
        ui_msg "--->   Timing command using mimalloc: gtime env ${INSERT}=${prefix}/lib/libmimalloc.${lext} ${command}"
        system -W ${build.dir} "gtime [output mimalloc] env ${INSERT}=${prefix}/lib/libmimalloc.${lext} ${command} | tee -a mimalloc.log"

        if {[variant_isset jemalloc]} {
            ui_msg "--->   Timing command using jemalloc: gtime env ${INSERT}=${prefix}/lib/libjemalloc.${lext} ${command}"
            system -W ${build.dir} "gtime [output jemalloc] env ${INSERT}=${prefix}/lib/libjemalloc.${lext} ${command}| tee -a jemalloc.log"
        }

        if {[variant_isset tbbmalloc]} {
            ui_msg "--->   Timing command using tbbmalloc: gtime env ${INSERT}=${prefix}/libexec/onetbb/lib/libtbbmalloc.${lext} ${command}"
            system -W ${build.dir} "gtime [output tbbmalloc] env ${INSERT}=${prefix}/libexec/onetbb/lib/libtbbmalloc.${lext} ${command} | tee -a tbbmalloc.log"
        }

        if {[variant_isset hoard]} {
            ui_msg "--->   Timing command using hoard: gtime env ${INSERT}=${prefix}/lib/libhoard.${lext} ${command}"
            system -W ${build.dir} "gtime [output hoard] env ${INSERT}=${prefix}/lib/libhoard.${lext} ${command} | tee -a hoard.log"
        }

        # puts "------------------- ${bname}.log ----------------------"
        # system -W ${build.dir} "cat ${bname}.log"
        puts "-------------------------------------------------------"
    }

    pre-test {
        set tclinterp_mp [lindex [glob ${prefix}/libexec/macports/bin/tclsh*] 0]

        set outdir ${build.dir}/../out

        xinstall -m 755 -d ${outdir}

        if {[variant_isset gs] && ![file exists ${build.dir}/${pdfdoc}]} {
            curl fetch --remote-time --progress ui_progress_download \
                "https://raw.githubusercontent.com/geekaaron/Resources/master/resources/Writing_a_Simple_Operating_System--from_Scratch.pdf" \
                ${build.dir}/${pdfdoc}
        }
        ui_msg "Pre-heating the rev-upgrade benchmark"
        system -W ${build.dir} "${filespath}/bench/port-silent.sh rev-upgrade"
        ui_msg "Pre-heating git benchmark"
        system -W ${worksrcpath} "${prefix}/bin/git gc --aggressive --prune=now"
        platform darwin {
            if {![file exists ${build.dir}/aclImdb_v1.tar]} {
                ui_msg "Pre-heating HFS compression benchmark"
                # get the "IMDB Large Movie Review Dataset"
                # See http://ai.stanford.edu/~amaas/data/sentiment/ for reference and publication
                curl fetch --remote-time --progress ui_progress_download \
                    "http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz" \
                    ${build.dir}/aclImdb_v1.tar.gz
                system -W ${build.dir} \
                    "gunzip aclImdb_v1.tar.gz"
            }
        }

        file delete -force ${outdir}/malloc.log
        file delete -force ${outdir}/mimalloc.log
        ui_msg "Timing results will be available in malloc.log and mimalloc.log"
        foreach J {jemalloc tbbmalloc hoard} {
            if {[variant_isset ${J}]} {
                file delete -force ${outdir}/${J}.log
                ui_msg "Additional timings: ${J}.log"
            } elseif {[file exists ${outdir}/${J}.log]} {
                ui_warn "Variant ${J} not set; preserving ${J}.log"
            }
        }
    }

    test {
        bench "./glibc-simple 16"
        bench "./glibc-thread 512"
        bench "./cfrac 17545186520507317056371138836327483792789528"
        if {[variant_isset gs]} {
            bench "${prefix}/bin/gs -q -dBATCH -dNODISPLAY ${pdfdoc} ${pdfdoc} ${pdfdoc}"
        }
        bench "${filespath}/bench/port-silent.sh rev-upgrade"
        bench "${tclinterp_mp} ${filespath}/bench/tclbench.tcl"
        bench "${prefix}/bin/git -C ${worksrcpath} gc --quiet --aggressive --prune=now"
        if {[variant_isset sqlite]} {
            bench "python2.7 -OO ${filespath}/bench/sqlite_benchmarks.py"
        }
        platform darwin {
            bench "${filespath}/bench/afscompress.sh ${build.jobs}"
        }

        bench "./cache-thrash 1 2000 1 2000000 ${build.jobs}"
        if {${build.jobs} > 1} {
            bench "./cache-thrash ${build.jobs} 2000 1 2000000 ${build.jobs}"
        }
        bench "./cache-scratch 1 3000 1 2000000 ${build.jobs}"
        if {${build.jobs} > 1} {
            bench "./cache-scratch ${build.jobs} 3000 1 2000000 ${build.jobs}"
        }
        bench "./espresso ../${distname}/bench/espresso/largest.espresso"
        bench "./larson 5 8 2000 5000 100 4141 ${build.jobs}"
        bench "./larson-sized 5 8 2000 5000 100 4141 ${build.jobs}"
        bench "./xmalloc-test -w ${build.jobs} -t 5 -s 64"
        bench "./malloc-large"
        bench "./mleak 50"
        bench "./rptest ${build.jobs} 0 1 2 500 1000 100 8 16000"
        bench "./mstress ${build.jobs} 50 100"

        foreach J {malloc mimalloc jemalloc tbbmalloc hoard} {
            if {[file exists ${outdir}/${J}.log]} {
                puts "------------------- ${J}.log ----------------------"
                system -W ${outdir} "cat ${J}.log"
                puts "-------------------------------------------------------"
            }
        }

    }

    post-test {
        ui_error "No error occurred!"
        return -code error "The error return is just so you can launch the benchmark as often as you wish"
    }
}
