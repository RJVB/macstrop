--- lang/cpp/src/orig.decryptionresult.cpp	2016-10-18 19:22:02.000000000 +0200
+++ lang/cpp/src/decryptionresult.cpp	2016-12-20 21:01:02.000000000 +0100
@@ -37,6 +37,11 @@
 #include <istream>
 
 #include <string.h>
+// string.h only declares strdup() if __DARWIN_C_LEVEL >= 200112L. 
+// Don't mess with that macro, just provide the prototype:
+extern "C" {
+extern char *strdup(const char *);
+}
 
 class GpgME::DecryptionResult::Private
 {
--- lang/cpp/src/orig.encryptionresult.cpp	2016-10-18 19:22:02.000000000 +0200
+++ lang/cpp/src/encryptionresult.cpp	2016-12-20 21:02:46.000000000 +0100
@@ -37,6 +37,11 @@
 #include <iterator>
 
 #include <string.h>
+// string.h only declares strdup() if __DARWIN_C_LEVEL >= 200112L. 
+// Don't mess with that macro, just provide the prototype:
+extern "C" {
+extern char *strdup(const char *);
+}
 
 class GpgME::EncryptionResult::Private
 {
--- lang/cpp/src/orig.importresult.cpp	2016-10-18 19:22:02.000000000 +0200
+++ lang/cpp/src/importresult.cpp	2016-12-20 21:00:26.000000000 +0100
@@ -33,6 +33,11 @@
 #include <cstring>
 
 #include <string.h>
+// string.h only declares strdup() if __DARWIN_C_LEVEL >= 200112L. 
+// Don't mess with that macro, just provide the prototype:
+extern "C" {
+extern char *strdup(const char *);
+}
 
 class GpgME::ImportResult::Private
 {
--- lang/cpp/src/orig.keygenerationresult.cpp	2016-10-18 19:22:02.000000000 +0200
+++ lang/cpp/src/keygenerationresult.cpp	2016-12-20 20:59:41.000000000 +0100
@@ -33,6 +33,11 @@
 #include <cstdlib>
 
 #include <string.h>
+// string.h only declares strdup() if __DARWIN_C_LEVEL >= 200112L. 
+// Don't mess with that macro, just provide the prototype:
+extern "C" {
+extern char *strdup(const char *);
+}
 
 class GpgME::KeyGenerationResult::Private
 {
--- lang/cpp/src/orig.signingresult.cpp	2016-10-18 19:22:02.000000000 +0200
+++ lang/cpp/src/signingresult.cpp	2016-12-20 21:02:12.000000000 +0100
@@ -37,6 +37,11 @@
 #include <iterator>
 
 #include <string.h>
+// string.h only declares strdup() if __DARWIN_C_LEVEL >= 200112L. 
+// Don't mess with that macro, just provide the prototype:
+extern "C" {
+extern char *strdup(const char *);
+}
 
 class GpgME::SigningResult::Private
 {
--- lang/cpp/src/orig.swdbresult.cpp	2016-11-09 08:34:15.000000000 +0100
+++ lang/cpp/src/swdbresult.cpp	2016-12-20 21:04:40.000000000 +0100
@@ -31,6 +31,13 @@
 
 #include "gpgme.h"
 
+#include <string.h>
+// string.h only declares strdup() if __DARWIN_C_LEVEL >= 200112L. 
+// Don't mess with that macro, just provide the prototype:
+extern "C" {
+extern char *strdup(const char *);
+}
+
 class GpgME::SwdbResult::Private
 {
 public:
--- lang/cpp/src/orig.tofuinfo.cpp	2016-10-18 19:22:02.000000000 +0200
+++ lang/cpp/src/tofuinfo.cpp	2016-12-20 21:04:06.000000000 +0100
@@ -28,6 +28,13 @@
 #include <istream>
 #include "util.h"
 
+#include <string.h>
+// string.h only declares strdup() if __DARWIN_C_LEVEL >= 200112L. 
+// Don't mess with that macro, just provide the prototype:
+extern "C" {
+extern char *strdup(const char *);
+}
+
 class GpgME::TofuInfo::Private
 {
 public:
--- lang/cpp/src/orig.verificationresult.cpp	2016-12-20 21:01:38.000000000 +0100
+++ lang/cpp/src/verificationresult.cpp	2016-12-20 21:01:43.000000000 +0100
@@ -41,6 +41,11 @@
 #include <cstdlib>
 
 #include <string.h>
+// string.h only declares strdup() if __DARWIN_C_LEVEL >= 200112L. 
+// Don't mess with that macro, just provide the prototype:
+extern "C" {
+extern char *strdup(const char *);
+}
 
 class GpgME::VerificationResult::Private
 {
--- lang/cpp/src/orig.vfsmountresult.cpp	2016-10-18 19:22:02.000000000 +0200
+++ lang/cpp/src/vfsmountresult.cpp	2016-12-20 21:03:24.000000000 +0100
@@ -32,6 +32,11 @@
 
 #include <istream>
 #include <string.h>
+// string.h only declares strdup() if __DARWIN_C_LEVEL >= 200112L. 
+// Don't mess with that macro, just provide the prototype:
+extern "C" {
+extern char *strdup(const char *);
+}
 
 using namespace GpgME;
 
--- lang/qt/src/orig.dn.cpp	2016-11-03 08:55:36.000000000 +0100
+++ lang/qt/src/dn.cpp	2016-12-20 21:21:17.000000000 +0100
@@ -37,6 +37,8 @@
 
 #include "dn.h"
 
+#include <strings.h>
+
 static const struct {
     const char *name;
     const char *oid;
@@ -165,7 +167,7 @@
     for (unsigned int i = 0; i < numOidMaps; ++i)
         if (!strcasecmp((char *)p, oidmap[i].oid)) {
             free(p);
-            p = strdup(oidmap[i].name);
+            p = qstrdup(oidmap[i].name);
             break;
         }
     array->key = p;
--- lang/qt/tests/orig.t-support.h	2016-10-18 19:22:02.000000000 +0200
+++ lang/qt/tests/t-support.h	2016-12-20 21:20:47.000000000 +0100
@@ -42,7 +42,7 @@
     char *getPassphrase(const char * /*useridHint*/, const char * /*description*/,
                         bool /*previousWasBad*/, bool &/*canceled*/) Q_DECL_OVERRIDE
     {
-        return strdup("abc");
+        return qstrdup("abc");
     }
 };
 } // namespace GpgME
