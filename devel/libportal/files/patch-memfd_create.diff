diff --git a/libportal/notification.c b/libportal/notification.c
index 1cd67b2..8faaff9 100644
--- a/libportal/notification.c
+++ b/libportal/notification.c
@@ -35,6 +35,42 @@
 #include "notification.h"
 #include "portal-private.h"
 
+#ifdef linux
+/* memfd_create was introduced in glibc 2.27 */
+#if !defined(__GLIBC__) || (__GLIBC__ >= 2 && __GLIBC_MINOR__ >= 27)
+// all good
+#else
+#include <sys/syscall.h>
+
+// we wrap memfd_create(2) but only if it is not provided by the local glibc library!
+int memfd_create(const char *__name, unsigned int __flags)
+{
+    return syscall(__NR_memfd_create, __name, __flags);
+}
+#endif
+
+#else
+
+#define MFD_ALLOW_SEALING	0
+
+#define memfd_create memfd_create_emu
+
+int memfd_create(const char *__name, unsigned int )
+{
+  errno = 0;
+  int fd = open(__name, O_RDWR|O_NONBLOCK|O_CREAT|O_TRUNC);
+  if (fd == -1) {
+    return fd;
+  }
+  // now make the file anonymous
+  unlink(__name);
+}
+#endif
+
+#define STR(name) # name
+#define memfd_create_name STR(memfd_create)
+
+
 static void
 action_invoked (GDBusConnection *bus,
                 const char *sender_name,
@@ -90,7 +126,7 @@ bytes_to_memfd (const gchar  *name,
       g_set_error (error,
                    G_IO_ERROR,
                    g_io_error_from_errno (saved_errno),
-                   "memfd_create: %s", g_strerror (saved_errno));
+                   "%s: %s", memfd_create_name, g_strerror (saved_errno));
       return -1;
     }
 
@@ -336,7 +372,7 @@ parse_media (GVariant            *media,
               g_task_return_new_error (task,
                                        G_IO_ERROR,
                                        g_io_error_from_errno (saved_errno),
-                                       "memfd_create: %s", g_strerror (saved_errno));
+                                       "%s: %s", memfd_create_name, g_strerror (saved_errno));
               return;
             }
 
