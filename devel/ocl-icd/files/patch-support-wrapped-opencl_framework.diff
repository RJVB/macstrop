diff --git a/ocl_icd_loader.c b/ocl_icd_loader.c
index 12e0182..0f84d03 100644
--- a/ocl_icd_loader.c
+++ b/ocl_icd_loader.c
@@ -474,6 +474,16 @@ static inline void _find_and_check_platforms(cl_uint num_icds) {
 		    break;
 	    }
     }
+#ifdef __APPLE__
+    int isAppleCL = false;
+    {
+      Dl_info info;
+      // check what library provides clGetPlatformInfo():
+      if (dladdr(plt_info_ptr, &info) && info.dli_fname) {
+        isAppleCL = strstr(info.dli_fname, "/System/Library/Frameworks/OpenCL.framework") != NULL;
+      }
+    }
+#endif
     cl_uint num_platforms=0;
     cl_int error;
     error = (*plt_fn_ptr)(0, NULL, &num_platforms);
@@ -504,12 +514,22 @@ static inline void _find_and_check_platforms(cl_uint num_icds) {
       p->vicd=&_icds[i];
       p->pid=platforms[j];
 
+#ifdef __APPLE__
+      // If we're trying to work with Apple's OpenCL framework we'll need
+      // to get a wrapped clGetPlatformInfo() function because Apple's version
+      // will expect a pointer to the actual platform instead of to the dispatch
+      // table (on my system that pointer is always 0x7fff0000).
+      if (isAppleCL)
+#else
       /* If clGetPlatformInfo is not exported and we are here, it
        * means that OCL_ICD_ASSUME_ICD_EXTENSION. Si we try to take it
        * from the dispatch * table. If that fails too, we have to
        * bail.
        */
-      if (plt_info_ptr == NULL) {
+      if (plt_info_ptr == NULL)
+#endif
+	 {
+        debug(D_LOG, "Getting clGetPlatformInfo from dispatch table!");
         plt_info_ptr = p->pid->dispatch->clGetPlatformInfo;
         if (plt_info_ptr == NULL) {
           debug(D_WARN, "Missing clGetPlatformInfo even in ICD dispatch table, skipping it");
