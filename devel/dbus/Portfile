# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem      1.0
PortGroup       muniversal 1.0
PortGroup       LTO 1.0
PortGroup       locale_select 1.0

name            dbus
version         1.14.6
platform linux {
    revision    1
}

checksums       rmd160  802226399454544eb5d5e0d778dbf2a437dce7b5 \
                sha256  fd2bdf1bb89dc365a46531bff631536f22b0d1c6d5ce2c5c5e59b55265b3d66b
#                 size    1370540

maintainers     {mcalhoun @MarcusCalhoun-Lopez} openmaintainer
categories      devel
platforms       darwin linux
license         {AFL-2.1 GPL-2+}
description     A message bus system, a simple way for applications to talk to one another.

long_description \
                {*}${description}

homepage        https://www.freedesktop.org/wiki/Software/dbus/
master_sites    https://dbus.freedesktop.org/releases/dbus/

use_xz          yes

platform darwin {
# See r68276
# For configure
# see https://trac.macports.org/ticket/47741#comment:12 for EXTERNAL authentication
patchfiles      darwin/patch-bus-system.conf.in.diff \
                darwin/patch-configure.diff \
                darwin/patch-dbus-server-launchd.diff

# see https://bugs.freedesktop.org/show_bug.cgi?id=9449
if {$macosx_deployment_target eq "10.4"} {
    patchfiles-append darwin/patch-tiger-org.freedesktop.dbus-session.plist.in.diff
} else {
    patchfiles-append darwin/patch-org.freedesktop.dbus-session.plist.in.diff
}
## RJVB
patchfiles-append \
                darwin/patch-improve-systembus.diff \
                darwin/patch-autogen.diff \
                darwin/patch-enable-standard-launch2.diff
}
platform linux {
    patchfiles-append \
                ubuntu/aa-get-connection-apparmor-security-context.patch \
                ubuntu/dont-stop-dbus.patch
}

depends_build       \
    port:pkgconfig

## RJVB
patchfiles-append \
                patch-dbuslaunch-@suffix@.diff
if {${os.platform} eq "darwin"} {
    set program_suffix ""
    depends_build-append \
                port:autoconf \
                port:autoconf-archive \
                port:automake \
                port:libtool
    configure.cmd ./autogen.sh
} else {
    set program_suffix "-mp"
}
post-patch {
    reinplace "s|@SUFFIX@|${program_suffix}|g" ${worksrcpath}/tools/dbus-launch.c
}

platform darwin {
## RJVB
    PortGroup active_variants 1.1
    variant legacy_install description {Use legacy build variants `no_root` and `underscore`} {}
    if {![catch {set installed [lindex [registry_active ${subport}] 0]}]} {
        # get the version of the currently active port:dbus to see if it is the
        # version previously in MacStrop (1.10.12) and thus a priori the customised
        # "RJVB version". If so, make the legacy_install variant the default.
        set _version [lindex ${installed} 1]
    } else {
        set _version 0.0.0
    }
    if {[vercmp ${_version} 1.10.12] == 0 || [active_variants port:dbus no_root] || [active_variants port:dbus underscore]} {
        default_variants +legacy_install
    }
    if {[variant_isset legacy_install]} {
        variant no_root conflicts underscore description {Run the DBUS daemon as MacPorts install user.} {}

        variant underscore conflicts no_root description {Put underscore in front of DBUS daemon user} {
            # For darwin ${os.major} > 8, daemon users have an underscore in front of the usernames and groups.
            # This variant allows the user to follow that convention.
        }
        if {[variant_isset no_root]} {
            set dbus_user  ${install.user}
            set dbus_group ${install.group}
        } else {
            if {[variant_isset underscore]} {
                set dbus_user _messagebus
            } else {
                set dbus_user messagebus
            }
            set dbus_group ${dbus_user}
            add_users      ${dbus_user} group=${dbus_group} realname=Message\ Bus
        }
    } else {
## !legacy_install
if {[getuid] != 0} {
    set dbus_user     ${install.user}
    set dbus_group    ${install.group}
} else {
    if {${os.major} >= 9} {
        set dbus_user     _messagebus
    } else {
        set dbus_user     messagebus
    }
    set dbus_group    ${dbus_user}
    add_users         ${dbus_user} group=${dbus_group} realname=Message\ Bus
}
## !legacy_install
}
set daemon_uniquename   org.freedesktop.dbus-system
set agent_uniquename    org.freedesktop.dbus-session

startupitem.type    launchd
startupitem.create  no
startupitems        name        dbus-system \
                    location    LaunchDaemons \
                    uniquename  ${daemon_uniquename} \
                    plist       ${daemon_uniquename}.plist \
                    name        dbus-session \
                    location    LaunchAgents \
                    uniquename  ${agent_uniquename} \
                    plist       ${agent_uniquename}.plist
## darwin
}
platform linux {
    set dbus_user     root
    set dbus_group    messagebus
}

depends_lib     port:expat

if {${os.platform} eq "darwin"} {
configure.args  --disable-doxygen-docs \
                --disable-xml-docs \
                --disable-ducktype-docs \
                --without-x \
                --enable-launchd \
                --with-launchd-agent-dir=${prefix}/etc/LaunchAgents/${agent_uniquename} \
                --with-dbus-user=${dbus_user} \
                --disable-tests

variant x11 description {Build with support for X11 (*experimental* on OS X!), \
        for running a session dbus when working on a remote X11 display} {
    # we *can* enable X11 autolaunch, but I have some doubts that's a good idea on OS X
    configure.args-replace \
                --without-x --with-x
    depends_lib-append \
                port:xorg-libsm port:xorg-libX11
}

post-patch {
if {![variant_isset legacy_install]} {
    # Make agent initially disabled.
    reinplace "s|</array>|</array>\\\n\\\n\\\t<key>Disabled</key>\\\n\\\t<true/>|" \
        ${worksrcpath}/bus/org.freedesktop.dbus-session.plist.in
}
}
} else {
    configure.args \
                --disable-silent-rules \
                --disable-doxygen-docs \
                --disable-xml-docs \
                --disable-ducktype-docs \
                --disable-tests \
                --disable-static \
                --disable-x11-autolaunch \
                --enable-user-session
# we aim to provide a newer/controlled version of the libraries that
# fit in optimally with the host dbus stuff. That means we need to point
# the build to host paths and resources.
    configure.args-append \
                --program-suffix=${program_suffix} \
                --datadir=/usr/share \
                --localstatedir=/var \
                --with-session-socket-dir=/tmp \
                --with-dbus-session-bus-listen-address=unix:tmpdir=/tmp
#                 --runstatedir=/var/run
}

use_parallel_build  yes

test.run        yes
test.target     check

pre-test {
    if {![variant_isset test]} {
        ui_error "test variant must be activated to enable test support."
        error "Please enable test variant."
    }
}

if {${os.platform} eq "darwin"} {
destroot.keepdirs \
    ${destroot}${prefix}/share/dbus-1/services \
    ${destroot}${prefix}/var/run/dbus \
    ${destroot}${prefix}/etc/dbus-1/system.d \
    ${destroot}${prefix}/etc/dbus-1/session.d
} else {
    destroot.violate_mtree yes
    destroot.keepdirs \
        ${destroot}${prefix}/share/dbus-1/services \
        /var/run/dbus
}

# universal_archs_to_use might not be set before pre-fetch.
pre-destroot {
    global merger_dont_diff merger_configure_env

    # PortGroup muniversal has difficulty merging three files.
    if {[info exists universal_archs_to_use] && [llength ${universal_archs_to_use}] == 3} {
        set merger_dont_diff "${prefix}/lib/dbus-1.0/include/dbus/dbus-arch-deps.h"
    }
    platform linux {
        # work around a bug:
        xinstall -d -m 755 ${destroot}${prefix}/libexec
        ln -s dbus-daemon-launch-helper-mp ${destroot}${prefix}/libexec/dbus-daemon-launch-helper
    }
}

post-destroot {
    if {${os.platform} eq "darwin"} {
    # Simplify startup script over startupitem.install.
    # See #15081
    xinstall -d -m 0755 ${destroot}${prefix}/etc/LaunchDaemons/${daemon_uniquename}
        if {![file exists ${destroot}/Library/LaunchDaemons/${daemon_uniquename}.plist]} {
    set plist [open "${destroot}${prefix}/etc/LaunchDaemons/${daemon_uniquename}/${daemon_uniquename}.plist" w 0644]

    puts ${plist} "<?xml version='1.0' encoding='UTF-8'?>"
    puts ${plist} "<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\""
    puts ${plist} "\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\" >"
    puts ${plist} "<plist version='1.0'>"
    puts ${plist} "<dict>"

    puts ${plist} "<key>Label</key><string>${daemon_uniquename}</string>"

    puts ${plist} "<key>ProgramArguments</key>"
    puts ${plist} "<array>"
    puts ${plist} "\t<string>${prefix}/bin/dbus-daemon</string>"
    puts ${plist} "\t<string>--system</string>"
    puts ${plist} "\t<string>--nofork</string>"
    puts ${plist} "</array>"
    if {$macosx_deployment_target eq "10.4"} {
        puts ${plist} "<key>OnDemand</key><false/>"
    } else {
        puts ${plist} "<key>KeepAlive</key><true/>"
    }

    puts ${plist} "<key>Disabled</key><true/>"

    puts ${plist} "</dict>"
    puts ${plist} "</plist>"

    close ${plist}
        } else {
            file rename ${destroot}/Library/LaunchDaemons/${daemon_uniquename}.plist \
                "${destroot}${prefix}/etc/LaunchDaemons/${daemon_uniquename}/${daemon_uniquename}.plist"
        }

    if {(${startupitem.install} && [geteuid] == 0) \
        || ([variant_isset legacy_install] && ![variant_isset no_root])} {
        xinstall -d -m 0755 ${destroot}/Library/LaunchDaemons
        xinstall -d -m 0755 ${destroot}/Library/LaunchAgents
        ln -s ${prefix}/etc/LaunchDaemons/${daemon_uniquename}/${daemon_uniquename}.plist ${destroot}/Library/LaunchDaemons
        ln -s ${prefix}/etc/LaunchAgents/${agent_uniquename}/${agent_uniquename}.plist ${destroot}/Library/LaunchAgents
    } else {
        ln -sf ${prefix}/etc/LaunchDaemons/${daemon_uniquename}/${daemon_uniquename}.plist ${destroot}${prefix}/etc/LaunchDaemons
        ln -sf ${prefix}/etc/LaunchAgents/${agent_uniquename}/${agent_uniquename}.plist ${destroot}${prefix}/etc/LaunchAgents
    }
    if {[variant_isset legacy_install]} {
        xinstall -d -m 0755 ${destroot}${prefix}/Library/LaunchDaemons
        xinstall -d -m 0755 ${destroot}${prefix}/Library/LaunchAgents
        ln -s ${prefix}/etc/LaunchDaemons/${daemon_uniquename}/${daemon_uniquename}.plist ${destroot}${prefix}/Library/LaunchDaemons
        ln -s ${prefix}/etc/LaunchAgents/${agent_uniquename}/${agent_uniquename}.plist ${destroot}${prefix}/Library/LaunchAgents
    }

    ## RJVB: don't change the existing machine-id!
    if {[file exists ${prefix}/var/lib/dbus/machine-id]} {
        xinstall -m 755 -d ${destroot}${prefix}/var/lib/dbus
        file copy ${prefix}/var/lib/dbus/machine-id ${destroot}${prefix}/var/lib/dbus/
    }
    system "env DYLD_LIBRARY_PATH=${destroot}${prefix}/lib ${destroot}${prefix}/bin/dbus-uuidgen --ensure=${destroot}${prefix}/var/lib/dbus/machine-id"
    } else {
        # clean up the workaround from the pre-destroot:
        ln -f ${destroot}${prefix}/libexec/dbus-daemon-launch-helper-mp ${destroot}${prefix}/libexec/dbus-daemon-launch-helper

        # it's probably very unwise to replace the host dbus on Linux so we only provide link-time things
        # like libraries and the privileged helper. A suffix is added to the executables so it should be
        # safe to leave most; we just remove the launch tool
        # file delete ${destroot}${prefix}/bin/dbus-launch-mp

        # Also remove any items that are already installed by the host dbus install.
        file delete ${destroot}/usr/share/dbus-1/system.conf ${destroot}/usr/share/dbus-1/session.conf
        # no longer needed:
        file delete -force ${destroot}${prefix}/etc/dbus-1
    }
}

post-activate {
    if {${os.platform} eq "darwin"} {
    file attributes ${prefix}/var/run/dbus -group ${dbus_group} -owner ${dbus_user}
    file attributes ${prefix}/libexec/dbus-daemon-launch-helper -group ${dbus_group}

        if {(${startupitem.install} && [geteuid] == 0) \
            || ([variant_isset legacy_install] && ![variant_isset no_root])} {
            file attributes ${prefix}/libexec/dbus-daemon-launch-helper -owner root
            system "chmod u+s ${prefix}/libexec/dbus-daemon-launch-helper"
            file attributes ${prefix}/Library/LaunchAgents/${agent_uniquename}.plist -owner root -group wheel
            file attributes ${prefix}/Library/LaunchDaemons/${daemon_uniquename}.plist -owner root -group wheel
        }
    } else {
        # it's not certain we'd ever be using the privileged helper instead of the one already
        # installed in the system, but let's just make certain it's set up correctly:
        if {[file exists ${prefix}/libexec/dbus-daemon-launch-helper-mp]} {
            file attributes ${prefix}/libexec/dbus-daemon-launch-helper-mp -group ${dbus_group}
            system "chmod u+s ${prefix}/libexec/dbus-daemon-launch-helper-mp"
            ln -f ${prefix}/libexec/dbus-daemon-launch-helper-mp ${prefix}/libexec/dbus-daemon-launch-helper
        }
        if {![file exists /usr/share/dbus-1/system.conf] && [file exists /etc/dbus-1/system.conf]} {
            ln -s /etc/dbus-1/system.conf /usr/share/dbus-1
        }
        if {![file exists /usr/share/dbus-1/session.conf] && [file exists /etc/dbus-1/session.conf]} {
            ln -s /etc/dbus-1/session.conf /usr/share/dbus-1
        }
    }
}

# XXX Building with tests enabled causes dbus to link with dbus-glib,
# which it shouldn't do because that port depends on this one: see #30088
variant test description {enable tests (Only Works if dbus is Already Installed)} {
    ui_warn "This variant requires circular dependencies and only works if ${name} is already installed"

    configure.args-replace  --disable-tests \
                            --enable-tests
    configure.args-append   --without-dbus-glib
    depends_build-append    path:lib/pkgconfig/glib-2.0.pc:glib2
    depends_build-append    port:python27 port:dbus-python27 port:py27-gobject3 port:dbus-python
    configure.python        ${prefix}/bin/python2.7
}

platform darwin {
set cross_opts  "ac_cv_have_abstract_sockets=no"
if {${os.arch} eq "i386"} {
    if { ${os.major} >= 10 } {
        set merger_configure_env(ppc) ${cross_opts}
    }
    set merger_configure_env(ppc64)   ${cross_opts}
} else {
    set merger_configure_env(i386)    ${cross_opts}
    set merger_configure_env(x86_64)  ${cross_opts}
}

# see https://trac.macports.org/ticket/50619
# see https://trac.macports.org/ticket/58436
if {${os.major} < 9} {
    depends_build-append port:gmake
    configure.env-append MAKE=${prefix}/bin/gmake
    build.cmd ${prefix}/bin/gmake
}
}

if {[variant_isset legacy_install] && ![variant_isset no_root]} {
    notes-append "############################################################################
# To load ${name} manually as in older port versions, run
#
# launchctl load -w ${prefix}/Library/LaunchDaemons/${daemon_uniquename}.plist
# launchctl load ${prefix}/Library/LaunchAgents/${agent_uniquename}.plist
############################################################################"
}

livecheck.type  regex
livecheck.url   [lindex ${master_sites} 0]
livecheck.regex {dbus-(\d+\.\d*[02468](\.\d+)*)\.tar}
