diff --git configure.ac configure.ac
index 8772abb..6038a10 100644
--- configure.ac
+++ configure.ac
@@ -1675,10 +1675,13 @@ elif test x$dbus_win = xyes; then
         # branch of the conditional because the default might conceivably
         # change (see #38201)
         DBUS_SESSION_BUS_CONNECT_ADDRESS="autolaunch:"
+elif test x$dbus_darwin = xyes; then
+        # Mac OS X autolaunching is a bit different too
+        # in that it relies on launchd
+        DBUS_SESSION_BUS_CONNECT_ADDRESS="launchd:env=DBUS_LAUNCHD_SESSION_BUS_SOCKET"
 else
         # The default on all other Unix platforms (notably Linux)
-        # is to use auto-launching - this works a bit differently on Mac OS X
-        # but comes out basically the same in the end
+        # is to use auto-launching.
         DBUS_SESSION_BUS_CONNECT_ADDRESS="autolaunch:"
 fi
 AC_SUBST([DBUS_SESSION_BUS_CONNECT_ADDRESS])
diff --git dbus/dbus-server-unix.c dbus/dbus-server-unix.c
index 87cb53a..ed6e3a2 100644
--- dbus/dbus-server-unix.c
+++ dbus/dbus-server-unix.c
@@ -263,23 +263,46 @@ _dbus_server_listen_platform_specific (DBusAddressEntry *entry,
       const char *launchd_env_var = dbus_address_entry_get_value (entry, "env");
       if (launchd_env_var == NULL)
         {
+#if 0
           _dbus_set_bad_address (error, "launchd", "env", NULL);
           return DBUS_SERVER_LISTEN_DID_NOT_CONNECT;
+#endif
         }
-      *server_p = _dbus_server_new_for_launchd (launchd_env_var, error);
-
-      if (*server_p != NULL)
-        {
-          _DBUS_ASSERT_ERROR_IS_CLEAR(error);
-          return DBUS_SERVER_LISTEN_OK;
-        }
-      else
+      if (launchd_env_var)
         {
-          _DBUS_ASSERT_ERROR_IS_SET(error);
-          return DBUS_SERVER_LISTEN_DID_NOT_CONNECT;
+          *server_p = _dbus_server_new_for_launchd (launchd_env_var, error);
+
+          if (*server_p != NULL)
+            {
+              _DBUS_ASSERT_ERROR_IS_CLEAR(error);
+              return DBUS_SERVER_LISTEN_OK;
+            }
+#if 0
+          else
+            {
+              _DBUS_ASSERT_ERROR_IS_SET(error);
+              return DBUS_SERVER_LISTEN_DID_NOT_CONNECT;
+            }
+#endif
         }
-    }
+      // try a hardcoded traditional address as a fallback
+      {
+        DBusAddressEntry **altEntry;
+        int altLen;
+        DBusServerListenResult retval;
+        if (dbus_parse_address ("unix:tmpdir="DBUS_SESSION_SOCKET_DIR, &altEntry, &altLen, error) && altLen > 0)
+          {
+            retval = _dbus_server_listen_platform_specific (altEntry[0], server_p, error);
+            dbus_address_entries_free (altEntry);
+          }
+        else
+          {
+            retval = DBUS_SERVER_LISTEN_DID_NOT_CONNECT;
+          }
+        return retval;
+      }
 #endif
+    }
   else
     {
       /* If we don't handle the method, we return NULL with the
diff --git dbus/dbus-sysdeps-unix.c dbus/dbus-sysdeps-unix.c
index 6b32df6..0e99168 100644
--- dbus/dbus-sysdeps-unix.c
+++ dbus/dbus-sysdeps-unix.c
@@ -4521,22 +4521,35 @@ _dbus_lookup_session_address (dbus_bool_t *supported,
 {
 #ifdef DBUS_ENABLE_LAUNCHD
   *supported = TRUE;
-  return _dbus_lookup_session_address_launchd (address, error);
-#else
+  if (_dbus_lookup_session_address_launchd (address, error))
+    {
+      // success, no need to attempt anything else
+      return TRUE;
+    }
+// dbus can function without launchd like it does on other Unix versions, even when
+// it will use launchd by default (on Mac). So there is no need to disable the
+// non-launchd code path below.
+#endif
   *supported = FALSE;
 
   if (!_dbus_lookup_user_bus (supported, address, error))
     return FALSE;
-  else if (*supported)
+#ifdef DBUS_ENABLE_LAUNCHD
+  {
+    const char *c = _dbus_string_get_const_data (address);
+    _dbus_verbose ("traditional session bus lookup yielded address \"%s\"",
+              c ? c : "NULL");
+  }
+#endif
+  if (*supported)
     return TRUE;
 
-  /* On non-Mac Unix platforms, if the session address isn't already
+  /* On Unix platforms, if the session address isn't already
    * set in DBUS_SESSION_BUS_ADDRESS environment variable and the
    * $XDG_RUNTIME_DIR/bus can't be used, we punt and fall back to the
    * autolaunch: global default; see init_session_address in
    * dbus/dbus-bus.c. */
   return TRUE;
-#endif
 }
 
 /**
diff --git tools/dbus-launch-x11.c tools/dbus-launch-x11.c
index 0b5d292..e186f69 100644
--- tools/dbus-launch-x11.c
+++ tools/dbus-launch-x11.c
@@ -310,10 +310,10 @@ x11_get_address (char **paddress, pid_t *pid, long *wid)
 
   /* locate the selection owner */
   owner = XGetSelectionOwner (xdisplay, selection_atom);
-  if (owner == None)
-    return TRUE;                /* no owner */
   if (wid != NULL)
     *wid = (long) owner;
+  if (owner == None)
+    return TRUE;                /* no owner */
 
   /* get the bus address */
   result = XGetWindowProperty (xdisplay, owner, address_atom, 0, 1024, False,
