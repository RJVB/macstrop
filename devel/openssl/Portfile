# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           openssl 1.0
PortGroup           LTO 1.0

name                openssl
epoch               2
version             [openssl::default_branch]
revision            17

categories          devel security
platforms           darwin
license             MIT
maintainers         {larryv @larryv} {cal @neverpanic}

description         Shim port installing symbolic links in primary prefix pointing to \
                    the [openssl::depends_portname] installation.
long_description    {*}${description}
homepage            https://www.openssl.org/

conflicts           libressl libressl-devel

####################
if {${os.platform} ne "darwin"} {
    PortGroup devport 1.0

    create_devport port:${name}

    if {${subport} eq "${name}-dev"} {
        depends_lib-append \
                    port:[openssl::depends_portname]-dev
        # openssl-dev doesn't care about anything that follows,
        # return here to avoid having to add more subport checks.
        return
    }
}
####################
variant docs description {install (html) documentation} {}

distfiles
use_configure       no
build               {}

openssl::set_openssl_dependency
openssl.configure

# https://trac.macports.org/ticket/63616
compiler.cxx_standard

# proc resolve_sym_link {fname} {
#     set rc [catch {file readlink ${fname}} result]
#     if { ${rc} eq 0 } {
#         return ${result}
#     } else {
#         return ${fname}
#     }
# }

destroot {
    # Install symlinks from isolated libexec install area to primary ${prefix}
    ln -s [openssl::include_dir]/openssl  ${destroot}${prefix}/include/
    xinstall -d ${destroot}${prefix}/etc/openssl/
    foreach f [glob -tails -directory [openssl::install_area]/etc/openssl/ *] {
        # explicitly veto cert.pem as this is provided by curl-ca-bundle, and
        # in fact the file in opensslX is just a sym-link to it...
        if { ${f} ne "cert.pem" } {
            ln -s [openssl::install_area]/etc/openssl/${f} ${destroot}${prefix}/etc/openssl/
        }
    }
    if {[variant_isset docs]} {
        ln -s [openssl::install_area]/share/doc/openssl ${destroot}${prefix}/share/doc/
    }
    foreach man [glob -tails -directory [openssl::install_area]/share/man/ *] {
        foreach m [glob -nocomplain [openssl::install_area]/share/man/${man}/*] {
            ln -s ${m} ${destroot}${prefix}/share/man/${man}/
        }
    }
    foreach b [glob [openssl::bin_dir]/*] {
        ln -s ${b} ${destroot}/${prefix}/bin/
    }
    fs-traverse f [openssl::lib_dir] {
        set lf [string map "[openssl::install_area] ${prefix}" $f]
        if { [file isdirectory ${f}] } {
            xinstall -d ${destroot}${lf}
        } elseif { [file isfile ${f}] } {
            ln -s [string map [list ${destroot} ""] ${f}] ${destroot}${lf}
        }
    }
}

##RJVB
post-destroot {
    # we should never need these (and besides, the RJVB/MacStrop port:opensslXY already install them):
    foreach v {1.0 1.1 3} {
        file delete -force ${destroot}${prefix}/lib/libssl.${v}.dylib
        file delete -force ${destroot}${prefix}/lib/libcrypto.${v}.dylib
        file delete -force ${destroot}${prefix}/lib/libssl.so.${v}
        file delete -force ${destroot}${prefix}/lib/libcrypto.so.${v}
    }
    if {[info procs create_devport_content_archive] ne ""} {
        register_devport_standard_content
        create_devport_content_archive
    }
}

universal_variant    yes

livecheck.type      none
