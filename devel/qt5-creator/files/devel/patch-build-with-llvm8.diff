diff --git src/tools/clangrefactoringbackend/source/findcursorusr.h src/tools/clangrefactoringbackend/source/findcursorusr.h
index 549086cd3aa78576eef572a4decd3f0488d25206..0ca7ef078b7e5c822fc9b54a8f6f4c961c43b21c 100644
--- src/tools/clangrefactoringbackend/source/findcursorusr.h
+++ src/tools/clangrefactoringbackend/source/findcursorusr.h
@@ -161,7 +161,7 @@ std::vector<const clang::NamedDecl *> namedDeclarationsAt(const clang::ASTContex
 
     auto declarations = Context.getTranslationUnitDecl()->decls();
     for (auto &currentDeclation : declarations) {
-        const auto &fileLocation = currentDeclation->getLocStart();
+        const auto &fileLocation = currentDeclation->getBeginLoc();
         const auto &fileName = sourceManager.getFilename(fileLocation);
         if (fileName == currentFile) {
             visitor.TraverseDecl(currentDeclation);
diff --git src/tools/clangrefactoringbackend/source/symbolscollector.cpp src/tools/clangrefactoringbackend/source/symbolscollector.cpp
index 1ceb4a14ce6abce7ff9aea1914a2be691520e57a..d2047f6828125000501a3114f47ab7fcb500d845 100644
--- src/tools/clangrefactoringbackend/source/symbolscollector.cpp
+++ src/tools/clangrefactoringbackend/source/symbolscollector.cpp
@@ -92,7 +92,7 @@ newFrontendActionFactory(Factory *consumerFactory,
             {}
 
             std::unique_ptr<clang::ASTConsumer>
-                    CreateASTConsumer(clang::CompilerInstance &instance, StringRef inFile) override {
+                    CreateASTConsumer(clang::CompilerInstance &instance, llvm::StringRef inFile) {
                 return m_consumerFactory->newASTConsumer(instance, inFile);
             }
 

