--- src/orig.connection.c	2016-11-18 01:40:37.000000000 +0100
+++ src/connection.c	2017-05-01 22:58:28.000000000 +0200
@@ -298,7 +298,7 @@
 
 		do {
 			len = sendmsg(connection->fd, &msg,
-				      MSG_NOSIGNAL | MSG_DONTWAIT);
+				      0);
 		} while (len == -1 && errno == EINTR);
 
 		if (len == -1)
@@ -1176,8 +1176,8 @@
 	struct timespec tp;
 	unsigned int time;
 
-	clock_gettime(CLOCK_REALTIME, &tp);
-	time = (tp.tv_sec * 1000000L) + (tp.tv_nsec / 1000);
+// 	clock_gettime(CLOCK_REALTIME, &tp);
+	time = 0;
 
 	fprintf(stderr, "[%10.3f] %s%s@%u.%s(",
 		time / 1000.0,
--- src/orig.event-loop.c	2017-05-01 22:51:41.000000000 +0200
+++ src/event-loop.c	2017-05-01 22:51:48.000000000 +0200
@@ -33,9 +33,9 @@
 #include <fcntl.h>
 #include <sys/socket.h>
 #include <sys/un.h>
-#include <sys/epoll.h>
-#include <sys/signalfd.h>
-#include <sys/timerfd.h>
+// #include <sys/epoll.h>
+// #include <sys/signalfd.h>
+// #include <sys/timerfd.h>
 #include <unistd.h>
 #include "wayland-util.h"
 #include "wayland-private.h"
@@ -78,14 +78,14 @@
 	uint32_t mask;
 
 	mask = 0;
-	if (ep->events & EPOLLIN)
-		mask |= WL_EVENT_READABLE;
-	if (ep->events & EPOLLOUT)
-		mask |= WL_EVENT_WRITABLE;
-	if (ep->events & EPOLLHUP)
-		mask |= WL_EVENT_HANGUP;
-	if (ep->events & EPOLLERR)
-		mask |= WL_EVENT_ERROR;
+// 	if (ep->events & EPOLLIN)
+// 		mask |= WL_EVENT_READABLE;
+// 	if (ep->events & EPOLLOUT)
+// 		mask |= WL_EVENT_WRITABLE;
+// 	if (ep->events & EPOLLHUP)
+// 		mask |= WL_EVENT_HANGUP;
+// 	if (ep->events & EPOLLERR)
+// 		mask |= WL_EVENT_ERROR;
 
 	return fd_source->func(fd_source->fd, mask, source->data);
 }
@@ -98,7 +98,7 @@
 add_source(struct wl_event_loop *loop,
 	   struct wl_event_source *source, uint32_t mask, void *data)
 {
-	struct epoll_event ep;
+// 	struct epoll_event ep;
 
 	if (source->fd < 0) {
 		free(source);
@@ -109,18 +109,18 @@
 	source->data = data;
 	wl_list_init(&source->link);
 
-	memset(&ep, 0, sizeof ep);
-	if (mask & WL_EVENT_READABLE)
-		ep.events |= EPOLLIN;
-	if (mask & WL_EVENT_WRITABLE)
-		ep.events |= EPOLLOUT;
-	ep.data.ptr = source;
-
-	if (epoll_ctl(loop->epoll_fd, EPOLL_CTL_ADD, source->fd, &ep) < 0) {
-		close(source->fd);
-		free(source);
-		return NULL;
-	}
+// 	memset(&ep, 0, sizeof ep);
+// 	if (mask & WL_EVENT_READABLE)
+// 		ep.events |= EPOLLIN;
+// 	if (mask & WL_EVENT_WRITABLE)
+// 		ep.events |= EPOLLOUT;
+// 	ep.data.ptr = source;
+// 
+// 	if (epoll_ctl(loop->epoll_fd, EPOLL_CTL_ADD, source->fd, &ep) < 0) {
+// 		close(source->fd);
+// 		free(source);
+// 		return NULL;
+// 	}
 
 	return source;
 }
@@ -149,16 +149,18 @@
 wl_event_source_fd_update(struct wl_event_source *source, uint32_t mask)
 {
 	struct wl_event_loop *loop = source->loop;
-	struct epoll_event ep;
+// 	struct epoll_event ep;
 
-	memset(&ep, 0, sizeof ep);
-	if (mask & WL_EVENT_READABLE)
-		ep.events |= EPOLLIN;
-	if (mask & WL_EVENT_WRITABLE)
-		ep.events |= EPOLLOUT;
-	ep.data.ptr = source;
-
-	return epoll_ctl(loop->epoll_fd, EPOLL_CTL_MOD, source->fd, &ep);
+// 	memset(&ep, 0, sizeof ep);
+// 	if (mask & WL_EVENT_READABLE)
+// 		ep.events |= EPOLLIN;
+// 	if (mask & WL_EVENT_WRITABLE)
+// 		ep.events |= EPOLLOUT;
+// 	ep.data.ptr = source;
+// 
+// 	return epoll_ctl(loop->epoll_fd, EPOLL_CTL_MOD, source->fd, &ep);
+    errno = EPERM;
+    return -1;
 }
 
 struct wl_event_source_timer {
@@ -194,13 +196,13 @@
 {
 	struct wl_event_source_timer *source;
 
-	source = malloc(sizeof *source);
+    source = malloc(sizeof *source);
 	if (source == NULL)
 		return NULL;
 
-	source->base.interface = &timer_source_interface;
-	source->base.fd = timerfd_create(CLOCK_MONOTONIC,
-					 TFD_CLOEXEC | TFD_NONBLOCK);
+// 	source->base.interface = &timer_source_interface;
+// 	source->base.fd = timerfd_create(CLOCK_MONOTONIC,
+// 					 TFD_CLOEXEC | TFD_NONBLOCK);
 	source->func = func;
 
 	return add_source(loop, &source->base, WL_EVENT_READABLE, data);
@@ -209,13 +211,13 @@
 WL_EXPORT int
 wl_event_source_timer_update(struct wl_event_source *source, int ms_delay)
 {
-	struct itimerspec its;
-
-	its.it_interval.tv_sec = 0;
-	its.it_interval.tv_nsec = 0;
-	its.it_value.tv_sec = ms_delay / 1000;
-	its.it_value.tv_nsec = (ms_delay % 1000) * 1000 * 1000;
-	if (timerfd_settime(source->fd, 0, &its, NULL) < 0)
+// 	struct itimerspec its;
+// 
+// 	its.it_interval.tv_sec = 0;
+// 	its.it_interval.tv_nsec = 0;
+// 	its.it_value.tv_sec = ms_delay / 1000;
+// 	its.it_value.tv_nsec = (ms_delay % 1000) * 1000 * 1000;
+// 	if (timerfd_settime(source->fd, 0, &its, NULL) < 0)
 		return -1;
 
 	return 0;
@@ -233,13 +235,13 @@
 {
 	struct wl_event_source_signal *signal_source =
 		(struct wl_event_source_signal *) source;
-	struct signalfd_siginfo signal_info;
+// 	struct signalfd_siginfo signal_info;
 	int len;
 
-	len = read(source->fd, &signal_info, sizeof signal_info);
-	if (!(len == -1 && errno == EAGAIN) && len != sizeof signal_info)
-		/* Is there anything we can do here?  Will this ever happen? */
-		wl_log("signalfd read error: %m\n");
+// 	len = read(source->fd, &signal_info, sizeof signal_info);
+// 	if (!(len == -1 && errno == EAGAIN) && len != sizeof signal_info)
+// 		/* Is there anything we can do here?  Will this ever happen? */
+// 		wl_log("signalfd read error: %m\n");
 
 	return signal_source->func(signal_source->signal_number,
 				   signal_source->base.data);
@@ -267,8 +269,8 @@
 
 	sigemptyset(&mask);
 	sigaddset(&mask, signal_number);
-	source->base.fd = signalfd(-1, &mask, SFD_CLOEXEC | SFD_NONBLOCK);
-	sigprocmask(SIG_BLOCK, &mask, NULL);
+// 	source->base.fd = signalfd(-1, &mask, SFD_CLOEXEC | SFD_NONBLOCK);
+// 	sigprocmask(SIG_BLOCK, &mask, NULL);
 
 	source->func = func;
 
@@ -321,7 +323,7 @@
 	/* We need to explicitly remove the fd, since closing the fd
 	 * isn't enough in case we've dup'ed the fd. */
 	if (source->fd >= 0) {
-		epoll_ctl(loop->epoll_fd, EPOLL_CTL_DEL, source->fd, NULL);
+// 		epoll_ctl(loop->epoll_fd, EPOLL_CTL_DEL, source->fd, NULL);
 		close(source->fd);
 		source->fd = -1;
 	}
@@ -379,14 +381,14 @@
 static int
 post_dispatch_check(struct wl_event_loop *loop)
 {
-	struct epoll_event ep;
+// 	struct epoll_event ep;
 	struct wl_event_source *source, *next;
 	int n;
 
-	ep.events = 0;
+// 	ep.events = 0;
 	n = 0;
-	wl_list_for_each_safe(source, next, &loop->check_list, link)
-		n += source->interface->dispatch(source, &ep);
+// 	wl_list_for_each_safe(source, next, &loop->check_list, link)
+// 		n += source->interface->dispatch(source, &ep);
 
 	return n;
 }
@@ -407,21 +409,21 @@
 WL_EXPORT int
 wl_event_loop_dispatch(struct wl_event_loop *loop, int timeout)
 {
-	struct epoll_event ep[32];
+// 	struct epoll_event ep[32];
 	struct wl_event_source *source;
 	int i, count, n;
 
 	wl_event_loop_dispatch_idle(loop);
 
-	count = epoll_wait(loop->epoll_fd, ep, ARRAY_LENGTH(ep), timeout);
-	if (count < 0)
+// 	count = epoll_wait(loop->epoll_fd, ep, ARRAY_LENGTH(ep), timeout);
+// 	if (count < 0)
 		return -1;
 
-	for (i = 0; i < count; i++) {
-		source = ep[i].data.ptr;
-		if (source->fd != -1)
-			source->interface->dispatch(source, &ep[i]);
-	}
+// 	for (i = 0; i < count; i++) {
+// 		source = ep[i].data.ptr;
+// 		if (source->fd != -1)
+// 			source->interface->dispatch(source, &ep[i]);
+// 	}
 
 	wl_event_loop_process_destroy_list(loop);
 
--- src/orig.wayland-server.c	2017-02-07 23:59:06.000000000 +0100
+++ src/wayland-server.c	2017-05-01 22:47:05.000000000 +0200
@@ -79,7 +79,7 @@
 	struct wl_list link;
 	struct wl_map objects;
 	struct wl_priv_signal destroy_signal;
-	struct ucred ucred;
+// 	struct ucred ucred;
 	int error;
 	struct wl_priv_signal resource_created_signal;
 };
@@ -503,10 +503,10 @@
 	if (!client->source)
 		goto err_client;
 
-	len = sizeof client->ucred;
-	if (getsockopt(fd, SOL_SOCKET, SO_PEERCRED,
-		       &client->ucred, &len) < 0)
-		goto err_source;
+// 	len = sizeof client->ucred;
+// 	if (getsockopt(fd, SOL_SOCKET, SO_PEERCRED,
+// 		       &client->ucred, &len) < 0)
+// 		goto err_source;
 
 	client->connection = wl_connection_create(fd);
 	if (client->connection == NULL)
@@ -560,12 +560,12 @@
 wl_client_get_credentials(struct wl_client *client,
 			  pid_t *pid, uid_t *uid, gid_t *gid)
 {
-	if (pid)
-		*pid = client->ucred.pid;
-	if (uid)
-		*uid = client->ucred.uid;
-	if (gid)
-		*gid = client->ucred.gid;
+// 	if (pid)
+// 		*pid = client->ucred.pid;
+// 	if (uid)
+// 		*uid = client->ucred.uid;
+// 	if (gid)
+// 		*gid = client->ucred.gid;
 }
 
 /** Get the file descriptor for the client
--- src/orig.wayland-shm.c	2016-11-18 01:32:40.000000000 +0100
+++ src/wayland-shm.c	2017-05-01 22:50:20.000000000 +0200
@@ -84,7 +84,8 @@
 	if (pool->size == pool->new_size)
 		return;
 
-	data = mremap(pool->data, pool->size, pool->new_size, MREMAP_MAYMOVE);
+// 	data = mremap(pool->data, pool->size, pool->new_size, MREMAP_MAYMOVE);
+    data = MAP_FAILED;
 	if (data == MAP_FAILED) {
 		wl_resource_post_error(pool->resource,
 				       WL_SHM_ERROR_INVALID_FD,
@@ -497,7 +498,7 @@
 	/* This should replace the previous mapping */
 	if (mmap(pool->data, pool->size,
 		 PROT_READ | PROT_WRITE,
-		 MAP_PRIVATE | MAP_FIXED | MAP_ANONYMOUS,
+		 MAP_PRIVATE | MAP_FIXED | MAP_ANON,
 		 0, 0) == (void *) -1) {
 		reraise_sigbus();
 		return;
--- src/orig.wayland-os.c	2015-07-06 21:38:51.000000000 +0200
+++ src/wayland-os.c	2017-05-26 17:10:28.000000000 +0200
@@ -30,7 +30,7 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <errno.h>
-#include <sys/epoll.h>
+// #include <sys/epoll.h>
 
 #include "../config.h"
 #include "wayland-os.h"
@@ -62,7 +62,7 @@
 {
 	int fd;
 
-	fd = socket(domain, type | SOCK_CLOEXEC, protocol);
+	fd = socket(domain, type | FD_CLOEXEC, protocol);
 	if (fd >= 0)
 		return fd;
 	if (errno != EINVAL)
@@ -123,7 +123,7 @@
 {
 	ssize_t len;
 
-	len = recvmsg(sockfd, msg, flags | MSG_CMSG_CLOEXEC);
+	len = recvmsg(sockfd, msg, flags);
 	if (len >= 0)
 		return len;
 	if (errno != EINVAL)
@@ -145,7 +145,8 @@
 		return -1;
 #endif
 
-	fd = epoll_create(1);
+// 	fd = epoll_create(1);
+	fd = -1;
 	return set_cloexec_or_close(fd);
 }
 
