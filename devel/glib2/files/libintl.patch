Ensure libintl.h can be found even if -I/opt/local/include is not in CPPFLAGS.
--- glib/gi18n-lib.h.orig	2017-07-13 18:03:39.000000000 -0500
+++ glib/gi18n-lib.h	2018-01-31 18:18:52.000000000 -0600
@@ -20,7 +20,7 @@
 
 #include <glib.h>
 
-#include <libintl.h>
+#include <@PREFIX@/include/libintl.h>
 #include <string.h>
 
 #ifndef GETTEXT_PACKAGE
--- glib/gi18n.h.orig	2017-07-13 18:03:39.000000000 -0500
+++ glib/gi18n.h	2018-01-31 18:18:56.000000000 -0600
@@ -20,7 +20,7 @@
 
 #include <glib.h>
 
-#include <libintl.h>
+#include <@PREFIX@/include/libintl.h>
 #include <string.h>
 
 #define  _(String) gettext (String)
--- orig.meson.build	2022-07-12 13:59:09.000000000 +0200
+++ meson.build	2022-07-12 14:03:43.876360740 +0200
@@ -1921,10 +1921,11 @@
 # proxy-libintl subproject.
 # FIXME: glib-gettext.m4 has much more checks to detect broken/uncompatible
 # implementations. This could be extended if issues are found in some platforms.
-if cc.has_function('ngettext')
-  libintl = []
-  have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset')
-else
+# force use of libintl from port:gettext:
+# if cc.has_function('ngettext')
+#   libintl = []
+#   have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset')
+# else
   libintl = cc.find_library('intl', required : false)
   if not libintl.found()
     libintl = subproject('proxy-libintl').get_variable('intl_dep')
@@ -1933,7 +1934,7 @@
     have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset',
                                                    dependencies : libintl)
   endif
-endif
+# endif
 
 glib_conf.set('HAVE_BIND_TEXTDOMAIN_CODESET', have_bind_textdomain_codeset)
 
