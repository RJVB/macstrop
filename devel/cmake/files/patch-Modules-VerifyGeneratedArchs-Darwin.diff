diff --git Modules/CMakeDetermineCompilerABI.cmake Modules/CMakeDetermineCompilerABI.cmake
index 012a87cafc..92351ff13f 100644
--- Modules/CMakeDetermineCompilerABI.cmake
+++ Modules/CMakeDetermineCompilerABI.cmake
@@ -89,6 +89,62 @@ function(CMAKE_DETERMINE_COMPILER_ABI lang src)
     # Load the resulting information strings.
     if(CMAKE_${lang}_ABI_COMPILED)
       message(CHECK_PASS "done")
+      if(APPLE)
+        message(CHECK_START "Verifying ${lang} compiler target architectures")
+        execute_process(
+          COMMAND lipo -info ${BIN}
+          OUTPUT_VARIABLE lipo_output
+          OUTPUT_STRIP_TRAILING_WHITESPACE
+          ERROR_VARIABLE _stderr
+          RESULT_VARIABLE _failed)
+        message(CONFIGURE_LOG
+          "Checking the architectures in the generated ABI info binary: `lipo -info ${BIN}`\n"
+          "${lipo_output}\n")
+        if(_failed OR NOT lipo_output OR NOT lipo_output MATCHES "(Non-fat file:|Architectures in the fat file:)")
+          message(CHECK_FAIL "Cannot determine architectures in the binaries the compiler generates")
+          set(arch_list "unknown")
+        else()
+          # The lipo output looks like the following:
+          # Non-fat file: <path> is architecture: i386
+          # Architectures in the fat file: <path> are: i386 x86_64
+          string(REGEX REPLACE
+                 "^(.+)is architecture:(.+)" "\\2" arches_space_separated "${lipo_output}")
+          string(REGEX REPLACE
+                  "^(.+)are:(.+)" "\\2" arches_space_separated "${arches_space_separated}")
+          # Need to clean up the arches, with Xcode 4.6.3 the output of lipo -info contains some
+          # additional info, e.g.
+          # Architectures in the fat file: <path> are: armv7 (cputype (12) cpusubtype (11))
+          string(REGEX REPLACE
+                  "\\(.+\\)" "" arches_space_separated "${arches_space_separated}")
+          # The output is space separated.
+          string(STRIP "${arches_space_separated}" arches_space_separated)
+          string(REPLACE " " ";" arch_list "${arches_space_separated}")
+          # sort and prune the list of found architectures
+          set(arch_list_sorted ${arch_list})
+          list(SORT arch_list_sorted)
+          list(REMOVE_DUPLICATES arch_list_sorted)
+          # sort and prune the list of requested architectures
+          set(requested_arch_list ${CMAKE_OSX_ARCHITECTURES})
+          list(SORT requested_arch_list)
+          list(REMOVE_DUPLICATES requested_arch_list)
+          message(CONFIGURE_LOG
+            "Effective list of requested architectures (possibly empty)  : \"${requested_arch_list}\"\n"
+            "Effective list of architectures found in the ABI info binary: \"${arch_list_sorted}\"\n")
+          # compare requested and found:
+          # - if no architecture(s) were requested explicitly, just check if lipo returned
+          #   an architecture for the ABI info binary.
+          # - otherwise, check if the requested and found lists are equal
+          if((NOT requested_arch_list AND arch_list_sorted)
+              OR "${requested_arch_list}" STREQUAL "${arch_list_sorted}")
+            # confirm success by printing the unsorted list of found architectures
+            message(CHECK_PASS "${arch_list}")
+          else()
+            message(CHECK_FAIL "failed")
+            # inform the user of the mismatch but show the raw input and output lists
+            message(SEND_ERROR "Generated architectures: \"${arch_list}\" but CMAKE_OSX_ARCHITECTURES=\"${CMAKE_OSX_ARCHITECTURES}\"")
+          endif()
+        endif()
+      endif()
       file(STRINGS "${BIN}" ABI_STRINGS LIMIT_COUNT 32 REGEX "INFO:[A-Za-z0-9_]+\\[[^]]*\\]")
       set(ABI_SIZEOF_DPTR "NOTFOUND")
       set(ABI_BYTE_ORDER "NOTFOUND")
diff --git Source/cmMachO.cxx Source/cmMachO.cxx
index 91a7b8404f..78caa687e7 100644
--- Source/cmMachO.cxx
+++ Source/cmMachO.cxx
@@ -4,7 +4,6 @@
 
 #include <cstddef>
 #include <string>
-#include <vector>
 
 #include <cm/memory>
 
@@ -115,12 +114,18 @@ public:
     return v;
   }
 
+  struct cmMachO::MachHeader mach_header() const
+  {
+    return MachHeader;
+  }
+
 protected:
   bool read_load_commands(uint32_t ncmds, uint32_t sizeofcmds,
                           cmsys::ifstream& fin);
 
   bool Swap;
   std::vector<RawLoadCommand> LoadCommands;
+  struct cmMachO::MachHeader MachHeader;
 };
 
 // Implementation for reading Mach-O header and load commands.
@@ -138,9 +143,10 @@ public:
     if (!read(fin, this->Header)) {
       return false;
     }
-    this->Header.cputype = swap(this->Header.cputype);
-    this->Header.cpusubtype = swap(this->Header.cpusubtype);
-    this->Header.filetype = swap(this->Header.filetype);
+    // swap the header data and export a (potentially) useful subset via the parent class.
+    this->MachHeader.CpuType = swap(this->Header.cputype);
+    this->MachHeader.CpuSubType = swap(this->Header.cpusubtype);
+    this->MachHeader.FileType = swap(this->Header.filetype);
     this->Header.ncmds = swap(this->Header.ncmds);
     this->Header.sizeofcmds = swap(this->Header.sizeofcmds);
     this->Header.flags = swap(this->Header.flags);
@@ -311,6 +317,9 @@ bool cmMachOInternal::read_mach_o(uint32_t file_offset)
 cmMachO::cmMachO(const char* fname)
   : Internal(cm::make_unique<cmMachOInternal>(fname))
 {
+  for (const auto& m : this->Internal->MachOList) {
+    Headers.push_back(m->mach_header());
+  }
 }
 
 cmMachO::~cmMachO() = default;
diff --git Source/cmMachO.h Source/cmMachO.h
index ec7d54c44d..09590e4e55 100644
--- Source/cmMachO.h
+++ Source/cmMachO.h
@@ -7,6 +7,8 @@
 #include <iosfwd>
 #include <memory>
 #include <string>
+#include <vector>
+#include <mach/machine.h>
 
 #if !defined(CMake_USE_MACH_PARSER)
 #  error "This file may be included only if CMake_USE_MACH_PARSER is enabled."
@@ -20,6 +22,12 @@ class cmMachOInternal;
 class cmMachO
 {
 public:
+  struct MachHeader {
+    cpu_type_t CpuType;
+    cpu_subtype_t CpuSubType;
+    uint32_t FileType;
+  };
+
   /** Construct with the name of the Mach-O input file to parse.  */
   cmMachO(const char* fname);
 
@@ -38,8 +46,11 @@ public:
   /** Print human-readable information about the Mach-O file.  */
   void PrintInfo(std::ostream& os) const;
 
+  std::vector<struct MachHeader> GetHeaders() const { return this->Headers; }
+
 private:
   friend class cmMachOInternal;
   bool Valid() const;
   std::unique_ptr<cmMachOInternal> Internal;
+  std::vector<struct MachHeader> Headers;
 };
