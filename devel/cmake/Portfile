# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

# cmake does not build universal on BigSur Intel
if { ${os.platform} eq "darwin" && ${os.major} >= 20 && ${build_arch} eq "x86_64"} {
    universal_variant no
} else {
    PortGroup       muniversal 1.0

}

PortGroup           gitlab 1.0
PortGroup           legacysupport 1.1

# we end up building at least 4 binaries "simultaneously" at the end
# so when using GCC and LTO, the default -flto=${build.jobs} would lead
# to the square of the number of requested parallel jobs. So let GCC
# use gmake's jobserver:
set LTO.gcc_lto_jobs auto
PortGroup           LTO 1.0

# CMake is a dependency of clang
PortGroup           clang_dependency 1.0
PortGroup           save_configure_cmd 1.0
PortGroup           compress_workdir 1.0

name                cmake
conflicts           cmake-devel
set my_name         cmake

categories          devel
license             BSD
installs_libs       no
maintainers         {michaelld @michaelld} {mascguy @mascguy}

description         Cross-platform make
set base_long_description \
    "An extensible, open-source system that manages the build\
    process in an operating system and compiler independent manner.\
    Unlike many cross-platform systems, CMake is designed to be\
    used in conjunction with the native build environment."

homepage            https://cmake.org
platforms           darwin freebsd linux
gitlab.instance     https://gitlab.kitware.com

gitlab.setup        cmake   cmake 3.29.2 v
checksums           rmd160  b5b16afbf7df7213ea52179dcc0ea123b1ebe2f4 \
                    sha256  250b1ff470814cc3babdfab864e639d5a0d84270a5b67f0e3fc3cf637fc35468
#                     size    8606672
platform darwin {
    # for patch-Modules-Compiler-GNU.cmake.diff
    revision        1
}

dist_subdir         ${my_name}
# The compressed help document (.qch) is built with the "sans dots" version in the name;
# rename it to something that includes only the branch plus a non-numeric token that
# might be bumped if ever a 3.x release introduces major changes. This should address
# the issue that QCH readers like Qt's Assistant drop the document at every CMake upgrade.
set qch_version 3292
set qch_suffix  329a

compiler.cxx_standard \
                    2017

build.cmd           ${prefix}/bin/gmake
depends_build-append port:gmake

platform darwin {
    # detect the cases where we need to use our libc++ :
    if {!((${os.major} < 9) || ${build_arch} eq "ppc" || ${build_arch} eq "ppc64")
            && !([string match macports-gcc* ${configure.compiler}] && ${configure.cxx_stdlib} eq "libstdc++")
            && !(${configure.cxx_stdlib} eq "macports-libstdc++" || ${configure.cxx_stdlib} eq "libstdc++_macports")} {
        depends_lib-append port:libcxx
        depends_build-append port:libcxx-dev
        configure.cxx_stdlib libc++
    }
}

# OSX <= 10.11 does not provide "clock_gettime"
legacysupport.newest_darwin_requires_legacy 15

# see https://trac.macports.org/ticket/59832
# see https://trac.macports.org/ticket/60885
## No need to do this on systems that don't have a system libstdc++
## This should essentially be the inverse of the architecture test for using libc++ above.
if {${os.major} < 9 || ${build_arch} eq "ppc" || ${build_arch} eq "ppc64"} {
    legacysupport.redirect_bins cmake ccmake cpack ctest
}

long_description ${base_long_description} \
    The ${subport} release port is updated roughly every few months.

patchfiles-append \
    patch-CMakeFindFrameworks.cmake.diff \
    patch-Source_Modules_FindLibUV.cmake.diff \
    patch-fix_cxx14_17_checks.diff \
    patch-fix-system-prefix-path.diff \
    patch-cmake-leopard-tiger.diff \
    patch-fix-clock_gettime-test.diff \
    patch-qt5gui.diff \
    patch-cmake-cmInstallRuntime-initializer-fix.diff \
    patch-libuv-legacy-systems.diff \
    patch-cmakeroot-with-app.diff \
    patch-remove-homebrew-references.diff \
    patch-Modules-Compiler-GNU.cmake.diff \
    patch-9483-Xarch_flag.diff
# https://gitlab.kitware.com/cmake/cmake/-/merge_requests/9492
patchfiles-append \
    patch-Modules-VerifyGeneratedArchs-Darwin.diff

platform darwin 8 {
    # Tiger doesn't have _DARWIN_C_SOURCE macro so have to disable _POSIX_C_SOURCE instead
    patchfiles-append patch-cmake-3290-posixcsource.diff
}

## RJVB
patchfiles-append \
    patch-Modules-IgnorePolicy25.diff \
    patch-appbundle-plist-props.diff
# RJVB: use the pre-existing cmake when we're upgrading instead of installing from scratch
patchfiles-append \
    patch-bootstrap.diff
if {${os.platform} eq "darwin" && ${os.major} <= 15} {
    ## RJVB - why is this one not required anymore? pre 10.12 still doesn't have std::shared_mutex ...
#         patchfiles-append patch-build-pre-1012.diff
}

if {${os.platform} ne "darwin"} {
depends_build-append \
    port:ncurses-dev
}
depends_lib-append \
    port:curl \
    port:expat \
    port:zlib \
    port:bzip2 \
    port:libarchive \
    port:ncurses
# configure is just a shell script that passes directly to bootstrap
configure.cmd ./bootstrap

# bootstrap takes cmake-style args for the build of the cmake to
# be installed.  the args are passed as usual for cmake, after
# "--", so we pass them as post_args
configure.post_args --

configure.env-append \
    CMAKE_PREFIX_PATH=${prefix} \
    CMAKE_INCLUDE_PATH=${prefix}/include/ncurses \
    CMAKE_LIBRARY_PATH=${prefix}/lib

# Check if the default compiler has yet to be installed. Used to
# prevent circular deps involving variants. Has to be tested here
# before our blacklisting and whitelisting is applied.
if {${os.platform} eq "darwin" && ${os.major} <= 10 &&
    ${cxx_stdlib} eq "libc++" && ![file exists ${configure.cxx}]} {
    set cmake_bootstrapping yes
    ui_error "This port:cmake version doesn't support bootstrapping"
    ui_error "Please install the mainstream port:cmake first,"
    ui_error "and then re-run `portindex` in [file normalize ${portpath}/../..]"
    return -code error "Port not yet supported!"
}

# On Lion, Clang 3.3 produces bad stream reading code when using
# libc++.  See https://trac.macports.org/ticket/44129 . Clang 3.4
# works. But Clang 3.7 doesn't work.
if {${os.platform} eq "darwin" && ${os.major} == 11 &&
    ${configure.cxx_stdlib} eq "libc++"} {
    compiler.whitelist macports-clang-3.4
}

# clang 3.4 can't build certain parts of the
# cmake self-testing infrastructure
# https://trac.macports.org/ticket/59782
if {${configure.compiler} eq "macports-clang-3.4"} {
    configure.post_args-append -DBUILD_TESTING=OFF
}

# We're keeping this; I can't remember if it was ever in the mainstream port.
# Clang 3.8 and later require cmake; avoid circular dependency.
# Such dependencies would occur only when installing both ourselves and the concerned
# compiler from source and from scratch. We could check if we're installing from source
# by using a pre-fetch block; checking for installing from scratch (= upgrading) is trivial:
if {![file exists ${prefix}/bin/cmake]} {
    foreach cv {3.8 3.9 4.0 5.0 6.0} {
        ui_debug "blacklisting macports-clang-${cv} because it might need us for installation"
        compiler.blacklist-append macports-clang-${cv}
    }
}

if {${os.platform} ne "darwin"} {
    variant libcxx description {highly experimental option to build against libc++. \
            Requires using clang (or port:gcc7+libcxx) and an independently provided libc++ installation.} {}
    if {[string match *clang* ${configure.cxx}]} {
        if {[variant_isset libcxx]} {
            configure.cxx_stdlib libc++
            depends_lib-append port:libcxx
            depends_build-append port:libcxx-dev
        }
    } elseif {[string match *g*-mp-* ${configure.cxx}]} {
        if {[variant_isset libcxx]} {
            configure.cxx_stdlib libc++
            configure.ldflags-append -stdlib=libc++
            depends_lib-append port:libcxx
            depends_build-append port:libcxx-dev
        }
    } elseif {[variant_isset libcxx]} {
        pre-fetch {
            ui_error "The libcxx variant requires building with clang++ or port:gcc7+libcxx"
            return -code error "Unsupported compiler for +libcxx variant"
        }
    }
}

platform darwin {
    configure.env-append \
        CMAKE_OSX_DEPLOYMENT_TARGET=${macosx_deployment_target}

    if {${configure.sdkroot} eq ""} {
        configure.env-append \
            SDKROOT=/
        configure.env-append \
            CMAKE_OSX_SYSROOT=/
    } else {
        configure.env-append \
            CMAKE_OSX_SYSROOT=${configure.sdkroot}
    }

    if {${os.arch} eq "i386" && ${os.major} <= 9} {
        # The old system headers do some bit shifting on Intel about which
        # newer compilers throw errors:
        # SecKeychain.h:102:46: error: shift expression '(1853123693 << 8)' overflows [-fpermissive]
        configure.cflags-append \
            -fpermissive
        configure.cxxflags-append \
            -fpermissive
    }

    if {${os.major} >= 11 && ${os.major} <= 12} {
        # some functions in xlocale.h are hidden without this define
        # https://trac.macports.org/ticket/60885
        configure.cxxflags-append \
            -D_DARWIN_C_SOURCE
    }

    if { ${os.major} == 8 } {
        # prevent conflicting opentransport header from being pulled in
        configure.cxxflags-append -D__OPENTRANSPORTPROVIDERS__
    }

    # https://trac.macports.org/ticket/67943
    if {[string match *gcc* ${configure.compiler}]} {
        configure.ldflags-append \
            -latomic
    }
}

# do an out-of-source build
configure.dir   ${workpath}/build
build.dir       ${workpath}/build
configure.cmd   ../${worksrcdir}/bootstrap

# jsoncpp 1.0+ requires CMake for building; circular dependencies
# are not possible in MacPorts. In addition, jsoncpp uses C++, so
# it would not be possible for CMake, which uses libc++ on
# 10.6-10.8, to link with a MacPorts copy of jsoncpp, which would
# usually use libstdc++ on those systems. Fortunately CMake comes
# bundled with its own internal copy of jsoncpp, so we use that.

configure.args-append \
    --docdir=share/doc/cmake \
    --parallel=${build.jobs} --verbose \
    --init=${worksrcpath}/macports.cmake \
    --system-libs \
    --no-qt-gui \
    --no-system-jsoncpp \
    --no-system-librhash \
    --no-system-libuv \
    --no-system-cppdap

if {[tbool configure.ccache]} {
    configure.args-append \
        --enable-ccache
    pre-configure {
        # we use --enable-ccache so we shouldn't prepend $prefix/bin/ccache to CC and CXX!
        configure.ccache no
    }
    post-configure {
        configure.ccache yes
    }
}

# run the configure/bootstrap in parallel
configure.args-append \
    --parallel=${build.jobs}

configure.universal_args

# CMake's configure script doesn't recognize `--host`.
array set merger_host {i386 {} x86_64 {} ppc {} ppc64 {} arm64 {}}

platform darwin 8 {
    configure.ldflags-append \
        -Wl,-framework -Wl,ApplicationServices
}

# Leopard's Rosetta has some difficulties configuring the ppc slice
platform darwin 9 {
    global universal_archs_supported
    if {${build_arch} eq "i386" || ${build_arch} eq "x86_64"} {
        supported_archs i386 x86_64
    } elseif {${build_arch} eq "ppc" || ${build_arch} eq "ppc64"} {
        supported_archs ppc ppc64
    }
    set universal_archs_supported ${supported_archs}
}

build.post_args VERBOSE=ON

post-patch {
    # copy cmake init file, ready to be patched below
    file delete -force ${worksrcpath}/macports.cmake 
    copy ${filespath}/macports.cmake ${worksrcpath}

    # patch PREFIX
    reinplace "s|__PREFIX__|${prefix}|g" \
        ${worksrcpath}/macports.cmake \
        ${worksrcpath}/Modules/Platform/Darwin.cmake \
        ${worksrcpath}/Source/cmSystemTools.cxx

    # patch FRAMEWORKS
    reinplace "s|__FRAMEWORKS_DIR__|${frameworks_dir}|g" \
        ${worksrcpath}/Modules/CMakeFindFrameworks.cmake

    # patch APPLICATIONS_DIR
    reinplace "s|__APPLICATIONS_DIR__|${applications_dir}|g" \
        ${worksrcpath}/macports.cmake
}

post-destroot {
    xinstall -d -m 0755 ${destroot}${prefix}/share/emacs/site-lisp
    xinstall -m 0644 ${worksrcpath}/Auxiliary/cmake-mode.el \
        ${destroot}${prefix}/share/emacs/site-lisp
    foreach type {syntax indent} {
        xinstall -d -m 0755 ${destroot}${prefix}/share/vim/vimfiles/${type}
        xinstall -m 0644 -W ${worksrcpath}/Auxiliary/vim/${type} cmake.vim \
            ${destroot}${prefix}/share/vim/vimfiles/${type}
    }
    if ([variant_isset qt5]) {
        if {[file exists ${destroot}${prefix}/share/doc/cmake/CMake.qch]} {
            file rename ${destroot}${prefix}/share/doc/cmake/CMake.qch \
                ${destroot}${prefix}/share/doc/cmake/CMake-${qch_suffix}.qch
            file delete -force ${destroot}${prefix}/share/doc/cmake/html
            xinstall -m 755 -d  ${destroot}${prefix}/share/doc/qch
            ln -s ../cmake/CMake-${qch_suffix}.qch ${destroot}${prefix}/share/doc/qch
        }
    }
}

variant qt5 description {Build Qt GUI using Qt5} {
    PortGroup qt5 1.0
#         ## RJVB: this patchfile had mods to build the documentation as a qch file?!
#         patchfiles-append patch-qt5gui.diff
    configure.args-delete \
        --no-qt-gui
    configure.args-append \
        --qt-gui --qt-qmake=${qt_qmake_cmd}
}

if {![variant_isset qt5]} {
    configure.args-append --no-qt-gui
}

# Supported pythons
set python_versions {38 39 310 311 312}

# declare all +python* variants, with conflicts
foreach pyver ${python_versions} {
    # Conflicting python versions
    set other_python_versions {}
    foreach other_pyver ${python_versions} {
        if {${other_pyver} ne ${pyver}} {
            if {${other_pyver} ni ${other_python_versions}} {
                lappend other_python_versions python${other_pyver}
            }
        }
    }

    set python_branch "[string index ${pyver} 0].[string range ${pyver} 1 end]"

    variant python${pyver} conflicts {*}${other_python_versions} requires docs description "Build documentation using ${python_branch} sphinx" {}
}

# +docs requires one +python* variant
if {[variant_isset docs]} {

    set python_isset false
    foreach pyver ${python_versions} {
        if {!${python_isset}} {
            set python_isset [variant_isset python${pyver}]
            set python_isset_ver_no_dot ${pyver}
        }
# "base" already has a variant conflict mechanism
#             elseif {[variant_isset python${pyver}]} {
#                 ui_error "\n\nDetected multiple +python* variants: +python${python_isset_ver_no_dot} and +python${pyver}.\nCannot have multiple +python* variants set.\n"
#                 return -code error "Invalid variant selection"
#             }
    }

    # set default +python* variant if none were already selected
    if {!${python_isset}} {
        set python_isset true
        default_variants +python39
    }

    # make sure one of the +python* variants is set
    set python_isset false
    foreach pyver ${python_versions} {
        if {!${python_isset}} {
            set python_isset [variant_isset python${pyver}]
            set python_branch "[string index ${pyver} 0].[string range ${pyver} 1 end]"
            set PYTHON_VERSION_NO_DOT ${pyver}
        }
    }

    if {!${python_isset}} {
        ui_error "\n\nYou must select one of the python variants when using variant +docs.\n"
        return -code error "Invalid variant selection"
    }

    set PYTHON_VERSION_WITH_DOT \
        ${python_branch}
}

if {[variant_isset qt5]} {
    variant docs requires qt5 description {Build documentation: Qt help file and manpages} {}
} else {
    variant docs description {Build documentation: HTML and manpages} {}
}
if {[variant_isset docs]} {
    ## RJVB
    patchfiles-append patch-use-classic-theme.diff
    configure.args-append \
        --mandir=share/man \
        --sphinx-man \
        --sphinx-build=${prefix}/bin/sphinx-build-${PYTHON_VERSION_WITH_DOT}
    if {[variant_isset qt5]} {
        configure.args-append \
            --sphinx-qthelp
    } else {
        configure.args-append \
            --sphinx-html
    }

    depends_build-append \
        port:py${PYTHON_VERSION_NO_DOT}-sphinx

    # these are required for Py3X, but not Py27
    if {${PYTHON_VERSION_NO_DOT} ne "27"} {
        depends_build-append \
            port:py${PYTHON_VERSION_NO_DOT}-sphinxcontrib-applehelp \
            port:py${PYTHON_VERSION_NO_DOT}-sphinxcontrib-devhelp \
            port:py${PYTHON_VERSION_NO_DOT}-sphinxcontrib-htmlhelp \
            port:py${PYTHON_VERSION_NO_DOT}-sphinxcontrib-jsmath \
            port:py${PYTHON_VERSION_NO_DOT}-sphinxcontrib-qthelp \
            port:py${PYTHON_VERSION_NO_DOT}-sphinxcontrib-serializinghtml \
            port:py${PYTHON_VERSION_NO_DOT}-sphinxcontrib-websupport
    }
    post-patch {
        reinplace "s|__PYTHON_VERSION_WITH_DOT__|${PYTHON_VERSION_WITH_DOT}|g" ${worksrcpath}/macports.cmake
    }
}

if {[info exists configure.ar] && [info exists configure.nm] && [info exists configure.ranlib]} {
    if {[option LTO.use_archive_helpers]} {
        if {[string first "DCMAKE_AR=" ${configure.post_args}] eq -1} {
            configure.post_args-append \
                            -DCMAKE_AR="${configure.ar}"
        }
        if {[string first "DCMAKE_NM=" ${configure.post_args}] eq -1} {
            configure.post_args-append \
                            -DCMAKE_NM="${configure.nm}"
        }
        if {[string first "DCMAKE_RANLIB=" ${configure.post_args}] eq -1} {
            configure.post_args-append \
                            -DCMAKE_RANLIB="${configure.ranlib}"
        }
    }
} elseif {[string match *clang++-mp* ${configure.cxx}]} {
    if {[string first "DCMAKE_AR=" ${configure.post_args}] eq -1} {
        configure.post_args-append \
                            -DCMAKE_AR=[string map {"clang++" "llvm-ar"} ${configure.cxx}]
    }
    if {[string first "DCMAKE_NM=" ${configure.post_args}] eq -1} {
        configure.post_args-append \
                            -DCMAKE_NM=[string map {"clang++" "llvm-nm"} ${configure.cxx}]
    }
    if {[string first "DCMAKE_RANLIB=" ${configure.post_args}] eq -1} {
        configure.post_args-append \
                            -DCMAKE_RANLIB=[string map {"clang++" "llvm-ranlib"} ${configure.cxx}]
    }
} elseif {[string match *clang-mp* ${configure.cc}]} {
    if {[string first "DCMAKE_AR=" ${configure.post_args}] eq -1} {
        configure.post_args-append \
                            -DCMAKE_AR=[string map {"clang" "llvm-ar"} ${configure.cc}]
    }
    if {[string first "DCMAKE_NM=" ${configure.post_args}] eq -1} {
        configure.post_args-append \
                            -DCMAKE_NM=[string map {"clang" "llvm-nm"} ${configure.cc}]
    }
    if {[string first "DCMAKE_RANLIB=" ${configure.post_args}] eq -1} {
        configure.post_args-append \
                            -DCMAKE_RANLIB=[string map {"clang" "llvm-ranlib"} ${configure.cc}]
    }
}

# pre-configure {
#     set cmd [join "${configure.cmd} ${configure.pre_args} ${configure.args} ${configure.post_args}"]
#     configure.post_args-append "|& tee -a ${workpath}/.macports.${subport}.configure.log'"
#     configure.pre_args-prepend "-cf '${configure.cmd} "
#     configure.cmd "/bin/csh"
#     ui_debug "configure command set to `${configure.cmd} ${configure.pre_args} ${configure.args} ${configure.post_args}`"
#     system "echo '## ${cmd}' > ${workpath}/.macports.${subport}.configure.log"
# }
configure.save_configure_cmd "install log"

build.post_args-append      -k
destroot.target             install/fast

set subport_gui \
    ${name}-gui
set subport_docs \
    ${name}-docs

subport ${subport_gui} {
    PortGroup       stub 1.0
    PortGroup       active_variants 1.1
    platforms       any
    supported_archs noarch
    depends_build
    depends_lib
    conflicts
    depends_run port:${name}
    ui_debug "port:${subport} requires port:${name}+qt5"
    require_active_variants ${name} qt5
    description CMake GUI
    long_description Stub port that requires port:cmake to be installed with the GUI variant active
    revision 0
}

subport ${subport_docs} {
    PortGroup       stub 1.0
    PortGroup       active_variants 1.1
    platforms       any
    supported_archs noarch
    depends_build
    depends_lib
    conflicts
    depends_run port:${name}
    ui_debug "port:${subport} requires port:${name}+qt5+docs"
    require_active_variants ${name} {qt5 docs}
    description CMake documentation
    long_description Stub port that requires port:cmake to be installed with the docs variant active
    revision 0
}

if {${subport} eq ${name}} {
#     notes "\
#         The CMake GUI and Docs are now provided as subports '${subport_gui}' and '${subport_docs}', respectively.
#     "

    test.run                yes
    test.target             test

    # Ignore RC versions
    gitlab.livecheck.regex  {([0-9.]+)}
} else {
    livecheck.type          none
}
