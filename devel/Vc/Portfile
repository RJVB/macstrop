# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           cmake 1.1
PortGroup           muniversal 1.0
PortGroup           github 1.1 ;# sic!
set LTO.fat_LTO_Objects yes
set LTO.require_fat_LTO_Objects yes
PortGroup           LTO 1.0

github.setup        VcDevel Vc 1.4.5
github.tarball_from archive
categories          math devel
license             BSD
maintainers         gmail.com:rjvbertin openmaintainer
description         Portable, zero-overhead SIMD library for C++
long_description    Vc is a free software library to ease explicit vectorisation of \
                    C++ code. It has an intuitive API and provides portability \
                    between different compilers and compiler versions as well as \
                    portability between different vector instruction sets. Thus an \
                    application written with Vc can be compiled for \n\
                    AVX and AVX2 \n\
                    SSE2 up to SSE4.2 \n\
                    SSE4a, XOP, FMA4, and FMA \n\
                    Scalar (fallback which works everywhere)
platforms           darwin linux
checksums           rmd160  b7151fbc53efa71ac585585cdec9adfa6462cca5 \
                    sha256  eb734ef4827933fcd67d4c74aef54211b841c350a867c681c73003eb6d511a48
#                     size    645302


installs_libs       yes

variant docs description {Create API docs using the KF5 doc generator} {}
if {[variant_isset docs]} {
    set kf5.allow_apidocs_generation yes
    set kf5.dont_use_xz yes
    PortGroup       kf5 1.1
    if {[info exists qt5_dependency]} {
        depends_lib-delete ${qt5_dependency}
    }
    set kf5.docs_dir \
                    ${prefix}/share/doc/Vc
}

compiler.cxx_standard 2014

configure.args-append \
                    -DBUILD_TESTING=OFF \
                    -DBUILD_EXAMPLES=OFF

variant tests description {build the tests} {
    configure.args-replace \
                    -DBUILD_TESTING=OFF \
                    -DBUILD_TESTING=ON
    test.run        yes
}
if {[variant_isset tests]} {
    fetch.type      git
    git.shallow_since \
                    "01-10-2023"
    distname        ${name}-${version}
#     post-extract {
#         if {![string match *gitfetch_stock [info proc portfetch::gitfetch_stock]]} {
#             ui_msg " --->  fetching submodules"
#             system -W ${worksrcpath} "git submodule update --init --recursive"
#         }
#     }
}

if {${os.platform} ne "darwin" || ![string match *gcc* ${configure.compiler}]} {
    variant examples description {build the examples} {
        PortGroup   qt4 1.0
        configure.args-replace \
                    -DBUILD_EXAMPLES=OFF \
                    -DBUILD_EXAMPLES=ON
        post-destroot {
            xinstall -m 755 -d ${destroot}${prefix}/libexec/Vc
            # unreadable syntax: copy all matching files returned by glob to libexec/Vc
            xinstall -m 755 {*}[glob ${build.dir}/examples/*/example_*] \
                    ${destroot}${prefix}/libexec/Vc
        }
    }
}

# make the build a bit less resource-hungry:
# cmake.generator     Ninja
