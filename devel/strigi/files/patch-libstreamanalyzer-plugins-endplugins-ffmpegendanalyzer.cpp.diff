--- libstreamanalyzer/plugins/endplugins/ffmpegendanalyzer.cpp.orig
+++ libstreamanalyzer/plugins/endplugins/ffmpegendanalyzer.cpp
@@ -56,22 +56,22 @@
     signed char analyze(AnalysisResult& idx, ::InputStream* in);
 };
 
-STRIGI_MUTEX_DEFINE(mutex);
+STRIGI_MUTEX_DEFINE(strigi_mutex);
 
 static int
 lockmgr(void **mtx, enum AVLockOp op) {
   // pre-allocating a single mutex is the only way to get it to work without changing strigi_thread.h
-  assert( (*mtx == &mutex) || (op == AV_LOCK_CREATE) );
+  assert( (*mtx == &strigi_mutex) || (op == AV_LOCK_CREATE) );
   switch(op) {
   case AV_LOCK_CREATE:
-    *mtx = &mutex;
-    return !!STRIGI_MUTEX_INIT(&mutex);
+    *mtx = &strigi_mutex;
+    return !!STRIGI_MUTEX_INIT(&strigi_mutex);
   case AV_LOCK_OBTAIN:
-    return !!STRIGI_MUTEX_LOCK(&mutex);
+    return !!STRIGI_MUTEX_LOCK(&strigi_mutex);
   case AV_LOCK_RELEASE:
-    return !!STRIGI_MUTEX_UNLOCK(&mutex);
+    return !!STRIGI_MUTEX_UNLOCK(&strigi_mutex);
   case AV_LOCK_DESTROY:
-    STRIGI_MUTEX_DESTROY(&mutex);
+    STRIGI_MUTEX_DESTROY(&strigi_mutex);
     return 0;
   }
   return 1;
@@ -355,7 +355,7 @@
 #endif
 
   if(fc->bit_rate)
-    ar.addValue(factory->bitrateProperty, fc->bit_rate);
+    ar.addValue(factory->bitrateProperty, (int32_t)fc->bit_rate);
   else if (fc->duration!= no_bitrate && fc->duration > 0) {
     cout<<"Trying to estimate bitrate\n";
     int64_t size;
@@ -486,7 +486,7 @@
           outs << stream.r_frame_rate.num / stream.r_frame_rate.den;
           ar.addTriplet(streamuri, frameRatePropertyName, outs.str());
         }
-        if (codec.pix_fmt != PIX_FMT_NONE) {}//FIXME pixel format
+        if (codec.pix_fmt != AV_PIX_FMT_NONE) {}//FIXME pixel format
       }
       
     }
