diff --git a/src/toolchain/toolchain.rs.stock b/src/toolchain/toolchain.rs
index 0207d85..9c0318f 100644
--- a/src/toolchain/toolchain.rs.stock
+++ b/src/toolchain/toolchain.rs
@@ -193,45 +193,49 @@ impl<'a> Toolchain<'a> {
         // TODO: use create_command instead of manual construction!
         let rustc_path = self.binary_file("rustc");
         if utils::is_file(&rustc_path) {
-            let mut cmd = Command::new(&rustc_path);
-            cmd.arg("--version");
-            cmd.stdin(Stdio::null());
-            cmd.stdout(Stdio::piped());
-            cmd.stderr(Stdio::piped());
-            self.set_ldpath(&mut cmd);
+		  if env::var("RUSTUP_DONT_CALL_RUSTC").is_ok() {
+                String::from("(RUSTUP_DONT_CALL_RUSTC set so not trying to read rustc version)")
+		  } else {
+			  let mut cmd = Command::new(&rustc_path);
+			  cmd.arg("--version");
+			  cmd.stdin(Stdio::null());
+			  cmd.stdout(Stdio::piped());
+			  cmd.stderr(Stdio::piped());
+			  self.set_ldpath(&mut cmd);
 
-            // some toolchains are faulty with some combinations of platforms and
-            // may fail to launch but also to timely terminate.
-            // (known cases include Rust 1.3.0 through 1.10.0 in recent macOS Sierra.)
-            // we guard against such cases by enforcing a reasonable timeout to read.
-            let mut line1 = None;
-            if let Ok(mut child) = cmd.spawn() {
-                let timeout = Duration::new(10, 0);
-                match child.wait_timeout(timeout) {
-                    Ok(Some(status)) if status.success() => {
-                        let out = child
-                            .stdout
-                            .expect("Child::stdout requested but not present");
-                        let mut line = String::new();
-                        if BufReader::new(out).read_line(&mut line).is_ok() {
-                            let lineend = line.trim_end_matches(&['\r', '\n'][..]).len();
-                            line.truncate(lineend);
-                            line1 = Some(line);
-                        }
-                    }
-                    Ok(None) => {
-                        let _ = child.kill();
-                        return String::from("(timeout reading rustc version)");
-                    }
-                    Ok(Some(_)) | Err(_) => {}
-                }
-            }
+			  // some toolchains are faulty with some combinations of platforms and
+			  // may fail to launch but also to timely terminate.
+			  // (known cases include Rust 1.3.0 through 1.10.0 in recent macOS Sierra.)
+			  // we guard against such cases by enforcing a reasonable timeout to read.
+			  let mut line1 = None;
+			  if let Ok(mut child) = cmd.spawn() {
+				 let timeout = Duration::new(10, 0);
+				 match child.wait_timeout(timeout) {
+					Ok(Some(status)) if status.success() => {
+					    let out = child
+						   .stdout
+						   .expect("Child::stdout requested but not present");
+					    let mut line = String::new();
+					    if BufReader::new(out).read_line(&mut line).is_ok() {
+						   let lineend = line.trim_end_matches(&['\r', '\n'][..]).len();
+						   line.truncate(lineend);
+						   line1 = Some(line);
+					    }
+					}
+					Ok(None) => {
+					    let _ = child.kill();
+					    return String::from("(timeout reading rustc version)");
+					}
+					Ok(Some(_)) | Err(_) => {}
+				 }
+			  }
 
-            if let Some(line1) = line1 {
-                line1
-            } else {
-                String::from("(error reading rustc version)")
-            }
+			  if let Some(line1) = line1 {
+				 line1
+			  } else {
+				 String::from("(error reading rustc version)")
+			  }
+		  }
         } else {
             String::from("(rustc does not exist)")
         }
