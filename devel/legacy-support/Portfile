# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           github 1.0
platform darwin {
    PortGroup       clang_dependency 1.0
}
PortGroup           makefile 1.0
PortGroup           muniversal 1.1
set LTO_needs_pre_build yes
set LTO.allow_ThinLTO   no
PortGroup           LTO 1.0
PortGroup           save_configure_cmd 1.0

name                legacy-support
categories          devel
platforms           darwin

maintainers         {mascguy @mascguy} \
                    {fwright.net:fw @fhgwright} \
                    openmaintainer
license             MIT BSD APSL-2

description         Installs wrapper headers and a runtime library to add \
                    missing functionality to legacy OSX versions.
long_description    {*}${description}

# Introduced to roll back to 1.0.13 release due to issues with 1.1.0.
# Must now stay.
epoch               1

# Primary release version
set release_ver     1.4.0

# Binary compatibility version
set compat_ver      1.0.0

subport ${name} {
    conflicts           ${name}-devel
    github.setup        macports macports-legacy-support ${release_ver} v
    # Change github.tarball_from to 'releases' or 'archive' next update
    # N.B.: That's a nice theory, but neither choice works correctly
    github.tarball_from tarball
    checksums           rmd160  7869ee1f847476a90364b00550006608d008d653 \
                        sha256  336e98b306fd3d928b43342664daa550953f8f25233467670486c62544c80f67
#                         size    163812
}

subport ${name}-devel {
    conflicts           ${name}
    github.setup        macports macports-legacy-support \
                        0dd04b1eb13ad86e1eebd97e05e07889fd03267e
    # Change github.tarball_from to 'releases' or 'archive' next update
    # N.B.: That's a nice theory, but neither choice works correctly
    github.tarball_from tarball
    version             1.4.0.9
    epoch               250323
    livecheck.type      none
    checksums           rmd160  687837ccb767c970c9ac9f1c4a74c422ec234474 \
                        sha256  0e40ba117d159107c3725557f184410e650f2f4869ff4e2e784f1e10b46677bd
#                         size    164027
    set v_split         [split ${release_ver} .]
    set release_ver     [lindex ${v_split} 0].[lindex ${v_split} 1].99
}

# The makefile PG brings in the unnecessary compiler_wrapper PG.
# Disable it to reduce logfile clutter and obfuscation.
#
compwrap.compilers_to_wrap

# This port doesn't use C++ at all, except for three obsolete tests that
# are now manual-only.  Disabling cxx_stdlib avoids unnessary compiler
# constraints on some platforms.
#
configure.cxx_stdlib

patch.pre_args      -Np1
patchfiles-append   patch-ARFLAGS.diff \
                    patch-ccrandomgeneratebytes-runtime-symbol.diff \
                    patch-clonefile-runtime-functions.diff

# for a newer lipo:
depends_build-append port:cctools

# set host_os_version ${macosx_deployment_target}
# variant sdk10.7 description {build as if on OS X 10.7} {}
# if {[variant_isset sdk10.7]} {
#     set macosx_deployment_target    10.7
#     configure.sdk_version           ${macosx_deployment_target}
#     set extraflags          -D__MPLS_TARGET_OSVER=1070
# }
# if {${host_os_version} ne ${macosx_deployment_target}} {
#     ui_warn "Building for ${configure.sdk_version}!"
#     configure.sdkroot       [portconfigure::configure_get_sdkroot ${configure.sdk_version}]
#     # somehow we need to invoke this twice?!
#     configure.sdkroot       [portconfigure::configure_get_sdkroot ${configure.sdk_version}]
#     set extraflags          "${extraflags} \
#                             -mmacosx-version-min=${macosx_deployment_target} \
#                             -isysroot${configure.sdkroot}"
#     configure.cflags-append   {*}${extraflags}
#     configure.cxxflags-append {*}${extraflags}
#     configure.ldflags-append  {*}${extraflags}
# }

if {[tbool configure.ccache]} {
    build.env-append \
                    "CXX=ccache ${configure.cxx}" \
                    "CC=ccache ${configure.cc}" \
} else {
    build.env-append \
                    CXX=${configure.cxx} \
                    CC=${configure.cc} \
}
build.env-append    PREFIX=${prefix} \
                    "LIPO=${prefix}/bin/lipo" \
                    AR=${configure.ar} \
                    LD=/opt/local/bin/ld \
                    PLATFORM=${os.major} \
                    SOCURVERSION=${release_ver} \
                    SOCOMPATVERSION=${compat_ver}

# build static library without LTO
# see https://trac.macports.org/ticket/69480
build.post_args-append \
                    SLIBCFLAGS=-fno-lto
destroot.env        PREFIX=${prefix}

LTO.configure.flags_append {cflags cxxflags ldflags} ${LTO.cpuflags}

# Include Tiger-specific additions
platform darwin 8 {
    build.target-append     tiger-bins
    destroot.target-append  install-tiger
}

# Include Leopard-specific additions
platform darwin 9 {
    build.target-append     leopard-bins
    destroot.target-append  install-leopard
}

if {${universal_possible} && [variant_isset universal]} {
    foreach arch ${muniversal.architectures} {
        build.env.${arch}-append    FORCE_ARCH=${arch}
    }
}

configure.save_build_cmd "install"

test.env            {*}${build.env}
test.run            yes
test.target         test

if {![file exists ${prefix}/libexec/mpstats]} {
    notes "
    To help make sure your system continues to be well-represented by\
    MacPorts, especially if your system is not one of the latest macOS\
    releases, please consider installing mpstats.  It will periodically\
    send an anonymous synopsis of your OS settings and installed ports.\
    The information provided by this is useful to help determine how\
    resources are allocated.

    You can install mpstats like this:    sudo port install mpstats
    "
}
