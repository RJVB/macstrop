diff --git a/include/MacportsLegacySupport.h b/include/MacportsLegacySupport.h
index eb3906d..e6035a3 100644
--- a/include/MacportsLegacySupport.h
+++ b/include/MacportsLegacySupport.h
@@ -386,4 +386,8 @@
 #define __MPLS_SDK_SUPPORT_CCRANDOMGENERATEBYTES__   (__MPLS_SDK_MAJOR < 101000)
 #define __MPLS_LIB_SUPPORT_CCRANDOMGENERATEBYTES__   (__MPLS_TARGET_OSVER < 101000)
 
+/* clonefile family */
+#define __MPLS_SDK_SUPPORT_CLONEFILE__   (__MPLS_SDK_MAJOR < 101200)
+#define __MPLS_LIB_SUPPORT_CLONEFILE__   (__MPLS_TARGET_OSVER < 101200)
+
 #endif /* _MACPORTS_LEGACYSUPPORTDEFS_H_ */
diff --git a/src/clonefile.c b/src/clonefile.c
new file mode 100644
index 0000000..6c32b29
--- /dev/null
+++ b/src/clonefile.c
@@ -0,0 +1,71 @@
+/* MP support header */
+#include "MacportsLegacySupport.h"
+
+#ifdef __MPLS_LIB_SUPPORT_CLONEFILE__
+#include <stdlib.h>
+#include <syslog.h>
+#include <sys/fcntl.h>
+#include <errno.h>
+
+// runtime shims for the clonefile(2) function family, on systems < 10.12
+//
+// These do relevant minimal argument checking, and then return ENOTSUP
+// to indicate that the underlying filesystem doesn't support the call.
+// (Only APFS does, and APFS can only be used from 10.12 onwards.)
+
+/* Options for clonefile calls */
+#define CLONE_NOFOLLOW      0x0001     /* Don't follow symbolic links */
+#define CLONE_NOOWNERCOPY   0x0002     /* Don't copy ownership information from source */
+
+static int debug = -1;
+
+static int check_debug()
+{
+	if (debug < 0) {
+		debug = getenv("CLONEFILE_DEBUG")? 1 : 0;
+	}
+	return debug;
+}
+
+static int implementation(int flags)
+{
+	// Check that the flags are valid.
+	// Upstream does this first too.
+	if (flags & ~(CLONE_NOFOLLOW | CLONE_NOOWNERCOPY)) {
+		errno = EINVAL;
+	} else {
+		// flags are valid but we're on an OS that doesn't support APFS
+		// so also cannot support clonefile & family. Set ENOTSUP .
+		errno = ENOTSUP;
+	}
+	return -1;
+}
+
+int clonefileat(int src_dirfd, const char * src, int dst_dirfd, const char * dst, int flags)
+{
+	if (check_debug()) {
+		syslog(LOG_NOTICE, "%s:%d::%s:\n\tsrc_dirfd=%d src=\"%s\" dst_dirfd=%d dst=\"%s\" flags=%x",
+			__FILE__, __LINE__, __FUNCTION__, src_dirfd, src, dst_dirfd, dst, flags);
+	}
+	return implementation(flags);
+}
+
+int fclonefileat(int srcfd, int dst_dirfd, const char * dst, int flags)
+{
+	if (check_debug()) {
+		syslog(LOG_NOTICE, "%s:%d::%s:\n\tsrcfd=%d dst_dirfd=%d dst=\"%s\" flags=%x",
+			__FILE__, __LINE__, __FUNCTION__, srcfd, dst_dirfd, dst, flags);
+	}
+	return implementation(flags);
+}
+
+int clonefile(const char * src, const char * dst, int flags)
+{
+	if (check_debug()) {
+		syslog(LOG_NOTICE, "%s:%d::%s:\n\tsrc=\"%s\" dst=\"%s\" flags=%x",
+			__FILE__, __LINE__, __FUNCTION__, src, dst, flags);
+	}
+	return implementation(flags);
+}
+
+#endif // __MPLS_LIB_SUPPORT_CLONEFILE__
