# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;

PortSystem          1.0
PortGroup           kde4   1.1
PortGroup           github 1.0

github.setup        kde kde-runtime c702d579125b77cda6356ad5df9760817ca3d908
fetch.type          git

name                kde4-runtime
# set vupstream       14.12.2
set vupstream       16.03.80.6
version             4.${vupstream} ; revision 1
worksrcdir          ${name}-4.git
distname            ${worksrcdir}
categories          kde kde4
maintainers         nicos
license             GPL-2+ LGPL-2.1+
description         Shared data needed by KDE4 programs
long_description    Provides data which is required by KDE4 applications. \
                    e.g. icons and mimetype data.
platforms           darwin
homepage            http://www.kde.org
master_sites        kde:stable/${version}/src/
# use_xz              yes
#distname            kde-runtime-${version}

test.run            yes

#Binaries do not link directly to openssl, nor use the ssl backend of kdelibs4,
#nor links to libkimap or libmailtransport from kdepimlibs4
license_noconflict  openssl

patchfiles          patch-support-for-lldb.diff \
                    patch-make-kioexec-agent.diff \
                    patch-phonon-cmakelists.diff \
                    patch-knotify-is-agent+icon.diff \
                    patch-find-icon-sources.diff

#Blacklist gcc42 and llvm-gcc-42 (does not build with gcc, ticket #37574)
compiler.blacklist  gcc-4.2 apple-gcc-4.2 llvm-gcc-4.2 macports-llvm-gcc-4.2

depends_lib-append  port:kdelibs4 \
                    path:lib/libkxmlrpcclient.4.dylib:kdepimlibs4 \
                    port:kactivities \
                    port:nepomuk-core \
                    port:libssh \
                    port:qimageblitz \
                    path:share/icons/oxygen/index.theme:oxygen-icons \
                    port:hicolor-icon-theme \
                    port:exiv2 \
                    path:include/turbojpeg.h:libjpeg-turbo \
                    port:openslp \
                    port:redland \
                    port:raptor2 \
                    port:webp \
                    port:bison \
                    port:samba3 \
                    port:shared-mime-info \
                    port:gpgme port:attica \
                    port:libgcrypt port:openexr \
                    port:xz port:zlib \
                    port:qca \
                    port:perl5

set configure.args.orig ${configure.args}

configure.args-append   -DXINE_INCLUDE_DIR=\"\" \
                        -DXINE_LIBRARY=\"\" \
                        -DWITH_ALSA=OFF \
                        -DWITH_QZeitgeist=OFF \
                        -DWITH_QNtrack=OFF \
                        -DWITH_Samba=ON \
                        -DKDEBASE_DISABLE_MULTIMEDIA=OFF \
                        -DKDERUNTIME_BUILD_NEPOMUK=OFF

variant nepomuk description {build support for nepomuk (deprecated by baloo)} {
    depends_run-append \
                    port:virtuoso
    #Virtuoso builds only on 64bit, but it is only a runtime dependency,
    #automatically deactivated if not available (ticket #41773)
    depends_skip_archcheck \
                    virtuoso
    configure.args-replace \
                    -DKDERUNTIME_BUILD_NEPOMUK=OFF \
                    -DKDERUNTIME_BUILD_NEPOMUK=ON
}

variant xine description "Enable xine support" {
# Unsupported. Don't report bugs, unless it comes with a patch :-)
    depends_lib-append      port:xine-lib
    configure.args-delete   -DXINE_INCLUDE_DIR=\"\" \
                            -DXINE_LIBRARY=\"\"
}
if {[variant_isset xine]} {
    # xine-lib is not universal
    universal_variant no
}

# configure.args-delete -DCMAKE_BUILD_TYPE=Release
# configure.args-append -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo -DCMAKE_STRIP:FILEPATH=/bin/echo

post-patch {
    reinplace "s|Exec=kuiserver|Exec=${applications_dir}/KDE4/kuiserver.app/Contents/MacOS/kuiserver|g" \
                    ${worksrcpath}/kuiserver/kuiserver.desktop
}

post-destroot {
# Remove this file as it conflicts with hicolor-icon-theme
    file delete ${destroot}${prefix}/share/icons/hicolor/index.theme
# Remove this file as it conflicts with kdelibs4
    file delete ${destroot}${prefix}/include/nepomuk/resourcewatcher.h

    set cmakewrappername "cmake-kde4-mp"
    set cmakewrapperfile "${destroot}${prefix}/bin/${cmakewrappername}"
    set fp [open ${cmakewrapperfile} "w"]
    puts ${fp} "#!/bin/sh\n"
    puts ${fp} "# This script wraps cmake with the arguments for building KDE4 software in MacPorts style"
    puts ${fp} "# Generated automatically by port:${subport} v${version}"
    puts ${fp} ""
    puts ${fp} "if \[ \"\$\{PREFIX\}\" = \"\" \] \;then"
    puts ${fp} "    PREFIX=@MPPREFIX@"
    puts ${fp} "fi"
    puts ${fp} ""
    puts ${fp} "if \[ \"\$\{CC\}\" = \"\" \] \;then"
    puts ${fp} "    export CC=${configure.cc}"
    puts ${fp} "fi"
    puts ${fp} "if \[ \"\$\{CXX\}\" = \"\" \] \;then"
    puts ${fp} "    export CXX=${configure.cxx}"
    puts ${fp} "fi\n"
    if {[file exists ${workpath}/.cppflags]} {
        close ${fp}
        system "cat ${workpath}/.cppflags >> ${cmakewrapperfile}"
        set fp [open ${cmakewrapperfile} "a"]
    }
    puts ${fp} "LDFLAGS=\"${configure.ldflags} \$\{LDFLAGS\}\""
    puts ${fp} ""

    puts ${fp} "if \[ \"\$\{1\}\" = \"-E\" \] \;then"
        puts ${fp} "    case \$2 in"
        puts ${fp} "        server|capabilities)"
        puts ${fp} "            if \[ \"\$2\" = \"server\" -a \"`basename \$0`\" = \"${cmakewrappername}_noserver\" \] \;then"
        puts ${fp} "                # emulate the error message from an older CMake version"
        puts ${fp} "                (   echo \"CMake Error: cmake version 3.0.1 (faked to avoid server mode)\""
        puts ${fp} "                    echo \"Usage: /opt/local/bin/cmake -E \[command\] \[arguments ...\]\""
        puts ${fp} "                ) 1>&2"
        puts ${fp} "                exit 1"
        puts ${fp} "            fi"
        puts ${fp} "            exec ${configure.cmd} \"\$@\""
        puts ${fp} "            \;\;"
        puts ${fp} "        *)"
        puts -nonewline ${fp} "            exec ${configure.cmd} \"\$@\""
        if {[info exists configure.pre_args]} {
            puts -nonewline ${fp} " [join ${configure.pre_args}]"
        }
        if {[info exists configure.args]} {
            puts -nonewline ${fp} " [join ${configure.args}]"
        }
        if {[info exists configure.post_args]} {
            puts -nonewline ${fp} " [string map [list ${worksrcpath} ""] [join ${configure.post_args}]]"
        }
        puts ${fp} ""
        puts ${fp} "    esac"
    puts ${fp} "else"
        puts -nonewline ${fp} "    exec ${configure.cmd}"
        if {[info exists configure.pre_args]} {
            puts -nonewline ${fp} " [join ${configure.pre_args}]"
        }
        if {[info exists configure.args.orig]} {
            puts -nonewline ${fp} " [join ${configure.args.orig}]"
        }
        if {[info exists configure.post_args]} {
            puts -nonewline ${fp} " [string map [list ${worksrcpath} ""] [join ${configure.post_args}]]"
        }
        puts ${fp} "\"\$@\""
    puts ${fp} "fi"
    close ${fp}
    reinplace "s|${prefix}|\$\{PREFIX\}|g" ${cmakewrapperfile}
    reinplace "s|@MPPREFIX@|${prefix}|g" ${cmakewrapperfile}
    system "chmod 755 ${cmakewrapperfile}"
    ln -s [file tail ${cmakewrapperfile}] ${cmakewrapperfile}_noserver
}

#livecheck.url       http://kde.mirrors.hoobly.com/stable/
#livecheck.regex     (\\d+(\\.\\d+)+)
