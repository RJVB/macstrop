diff --git qt5/style/qtcurve.cpp qt5/style/qtcurve.cpp
index 21a879aa80b39b6a970f6c97c68f2b163f648654..681d87dbc70019494f1b5111a71d60561dc6e15e 100644
--- qt5/style/qtcurve.cpp
+++ qt5/style/qtcurve.cpp
@@ -110,6 +110,16 @@ public:
         , m_dbusConnected(false)
     {}
     ~DBusHelper()
+    {
+        disconnect();
+    }
+    void init()
+    {
+        if(!m_dBus) {
+            m_dBus = new QDBusInterface("org.kde.kwin", "/QtCurve", "org.kde.QtCurve");
+        }
+    }
+    void disconnect()
     {
         if (m_dBus) {
             m_dBus->disconnect();
@@ -373,6 +383,7 @@ Style::Style() :
     m_blurHelper(new BlurHelper(this)),
     m_shortcutHandler(new ShortcutHandler(this))
 {
+    qtcInfo("New style instance %p\n", this);
     const char *env = getenv(QTCURVE_PREVIEW_CONFIG);
 #ifdef QTC_QT5_ENABLE_KDE
     m_configFile = KSharedConfig::openConfig();
@@ -420,9 +431,13 @@ void Style::init(bool initial)
             if (QCoreApplication::instance()) {
                 std::call_once(m_dBusHelper->m_aboutToQuitInit, [this] {
                     connect(QCoreApplication::instance(), &QCoreApplication::aboutToQuit, this, [this] () {
+                            if (getenv("QTCURVE_DEBUG")) {
+                                qWarning() << Q_FUNC_INFO << this << appName << "is about to quit";
+                            }
                             // disconnect from the session DBus. We're no longer interested in the
                             // information it might send when the app we're serving is shutting down.
                             disconnectDBus();
+                            m_dBusHelper->disconnect();
                             // Stop listening to select signals. We shouldn't stop emitting signals
                             // (like QObject::destroyed) but we can reduce the likelihood that pending
                             // signals will be sent to us post-mortem.
@@ -430,6 +445,7 @@ void Style::init(bool initial)
                             disconnect(KWindowSystem::self(), &KWindowSystem::compositingChanged,
                                        this, &Style::compositingToggled);
 #endif
+                            QCoreApplication::processEvents();
                         } );
                 } );
             }
@@ -704,9 +720,17 @@ void Style::init(bool initial)
 
 void Style::connectDBus()
 {
+// #ifndef Q_OS_MACOS
     if (m_dBusHelper->m_dbusConnected)
         return;
-    auto bus = QDBusConnection::sessionBus();
+    if (appName == QStringLiteral("rkward") || appName == QStringLiteral("mscore")
+        || qApp->applicationName() == QStringLiteral("Affinic Debugger")) {
+        // these have a way of juggling styles that interferes with our cleanup and can cause a hang just before exit;
+        // avoid that by not connecting to any DBus signals. The only thing they lose is runtime reflection of
+        // theming changes; a small price to pay.
+        return;
+    }
+    QDBusConnection bus(QDBusConnection::sessionBus());
     if (bus.isConnected()) {
         m_dBusHelper->m_dbusConnected = true;
         bus.connect(QString(), "/KGlobalSettings", "org.kde.KGlobalSettings",
@@ -733,18 +757,20 @@ void Style::connectDBus()
             }
         }
     }
+// #endif
 }
 
 void Style::disconnectDBus()
 {
+// #ifndef Q_OS_MACOS
     if (!m_dBusHelper->m_dbusConnected)
         return;
-    auto bus = QDBusConnection::sessionBus();
+    QDBusConnection bus(QDBusConnection::sessionBus());
     if (!bus.isConnected())
         return;
     m_dBusHelper->m_dbusConnected = false;
     if (getenv("QTCURVE_DEBUG")) {
-        qWarning() << Q_FUNC_INFO << this << "Disconnecting from" << bus.name() << "/" << bus.baseService();
+        qWarning() << Q_FUNC_INFO << this << appName << "disconnecting from" << bus.name() << "/" << bus.baseService();
         dumpObjectInfo();
     }
     bus.disconnect(QString(), "/KGlobalSettings", "org.kde.KGlobalSettings",
@@ -770,6 +796,7 @@ void Style::disconnectDBus()
                            this, SLOT(toggleStatusBar(unsigned int)));
         }
     }
+// #endif
 }
 
 Style::~Style()
@@ -4507,11 +4534,11 @@ void Style::emitMenuSize(QWidget *w, unsigned short size, bool force)
         if (oldSize != size) {
             w->setProperty(constMenuSizeProperty, size);
             qtcX11SetMenubarSize(wid, size);
-            if(!m_dBusHelper->m_dBus)
-                m_dBusHelper->m_dBus = new QDBusInterface("org.kde.kwin", "/QtCurve",
-                                             "org.kde.QtCurve");
+#ifndef Q_OS_MACOS
+            m_dBusHelper->init();
             m_dBusHelper->m_dBus->call(QDBus::NoBlock, "menuBarSize",
                           (unsigned int)wid, (int)size);
+#endif
         }
     }
 }
@@ -4519,12 +4546,12 @@ void Style::emitMenuSize(QWidget *w, unsigned short size, bool force)
 void Style::emitStatusBarState(QStatusBar *sb)
 {
     if (opts.statusbarHiding & HIDE_KWIN) {
-        if (!m_dBusHelper->m_dBus)
-            m_dBusHelper->m_dBus = new QDBusInterface("org.kde.kwin", "/QtCurve",
-                                        "org.kde.QtCurve");
+#ifndef Q_OS_MACOS
+        m_dBusHelper->init();
         m_dBusHelper->m_dBus->call(QDBus::NoBlock, "statusBarState",
                      (unsigned int)qtcGetWid(sb->window()),
                      sb->isVisible());
+#endif
     }
 }
 }
