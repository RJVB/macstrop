diff --git kdevplatform/project/abstractfilemanagerplugin.cpp kdevplatform/project/abstractfilemanagerplugin.cpp
index 8fe816e1413ed1027dfdde646b697b999b8b1f83..b6828e4af86345773463e25dbdfd44598c04ad02 100644
--- kdevplatform/project/abstractfilemanagerplugin.cpp
+++ kdevplatform/project/abstractfilemanagerplugin.cpp
@@ -115,7 +115,11 @@ void AbstractFileManagerPlugin::Private::projectClosing(IProject* project)
         }
         m_projectJobs.remove(project);
     }
-    delete m_watchers.take(project);
+    if (ICore::self()->projectController()->watchAllProjectDirectories()) {
+        if (m_watchers.contains(project)) {
+            delete m_watchers.take(project);
+        }
+    }
     m_filters.remove(project);
 }
 
@@ -381,9 +385,12 @@ void AbstractFileManagerPlugin::Private::stopWatcher(ProjectFolderItem* folder)
     if ( !folder->path().isLocalFile() ) {
         return;
     }
-    Q_ASSERT(m_watchers.contains(folder->project()));
     const QString path = folder->path().toLocalFile();
-    m_watchers[folder->project()]->stopDirScan(path);
+    if (ICore::self()->projectController()->watchAllProjectDirectories()) {
+        if (m_watchers.contains(folder->project())) {
+            m_watchers[folder->project()]->stopDirScan(path);
+        }
+    }
     m_stoppedFolders.append(path);
 }
 
@@ -392,9 +399,12 @@ void AbstractFileManagerPlugin::Private::continueWatcher(ProjectFolderItem* fold
     if ( !folder->path().isLocalFile() ) {
         return;
     }
-    Q_ASSERT(m_watchers.contains(folder->project()));
     const QString path = folder->path().toLocalFile();
-    m_watchers[folder->project()]->restartDirScan(path);
+    if (ICore::self()->projectController()->watchAllProjectDirectories()) {
+        if (m_watchers.contains(folder->project())) {
+            m_watchers[folder->project()]->restartDirScan(path);
+        }
+    }
     const int idx = m_stoppedFolders.indexOf(path);
     if (idx != -1) {
         m_stoppedFolders.remove(idx);
@@ -467,7 +477,8 @@ ProjectFolderItem *AbstractFileManagerPlugin::import( IProject *project )
     qCDebug(FILEMANAGER) << "imported new project" << project->name() << "at" << projectRoot->path();
 
     ///TODO: check if this works for remote files when something gets changed through another KDE app
-    if ( project->path().isLocalFile() ) {
+    if (ICore::self()->projectController()->watchAllProjectDirectories() && project->path().isLocalFile() ) {
+        qCDebug(FILEMANAGER) << "Project dir monitoring is enabled for project" << project->name();
         d->m_watchers[project] = new KDirWatch( project );
 
         connect(d->m_watchers[project], &KDirWatch::created,
diff --git kdevplatform/interfaces/iprojectcontroller.cpp kdevplatform/interfaces/iprojectcontroller.cpp
index 9c22e80a7aebd344f83dd77f1bf0c54707973ef6..2c062fdc53e305fc079082000dd7ad20ee9a02a5 100644
--- kdevplatform/interfaces/iprojectcontroller.cpp
+++ kdevplatform/interfaces/iprojectcontroller.cpp
@@ -42,5 +42,12 @@ bool IProjectController::parseAllProjectSources()
     return group.readEntry( "Parse All Project Sources", true );    
 }
 
+bool IProjectController::watchAllProjectDirectories()
+{
+    KConfigGroup group = ICore::self()->activeSession()->config()->group( "Project Manager" );
+    return group.readEntry( "Monitor All Project Directories", true );
+}
+
+
 }
 
diff --git kdevplatform/interfaces/iprojectcontroller.h kdevplatform/interfaces/iprojectcontroller.h
index 516ba79d593f2a92d3b526c267cd8e3a1ffbc031..e41b7d9bd280cf6a5ef08fb94528c842958f524f 100644
--- kdevplatform/interfaces/iprojectcontroller.h
+++ kdevplatform/interfaces/iprojectcontroller.h
@@ -119,6 +119,11 @@ public:
      */
     static bool parseAllProjectSources();
 
+    /**
+     * @returns whether project directories should be monitored for changes or not
+     */
+    virtual bool watchAllProjectDirectories();
+
 public Q_SLOTS:
     /**
      * Tries finding a project-file for the given source-url and opens it.
diff --git kdevplatform/shell/settings/projectconfig.kcfg kdevplatform/shell/settings/projectconfig.kcfg
index fb8cfffd1c698219e690d5f91afedac02649f1b3..e573362eacf145cc0e73bf921cf469470d907449 100644
--- kdevplatform/shell/settings/projectconfig.kcfg
+++ kdevplatform/shell/settings/projectconfig.kcfg
@@ -23,5 +23,10 @@
         <label>Save all open documents before building anything</label>
         <whatsthis>If this option is set all open documents will be automatically saved before any build is started.</whatsthis>
     </entry>
+    <entry name="watchAllProjectDirectories" key="Monitor All Project Directories" type="Bool" default="true">
+        <default>true</default>
+        <label>Monitor all directories of a project for changes</label>
+        <whatsthis>If this option is set, KDevelop will monitor all project directories for changes. This keeps the overview in the Projects toolview in sync with the directory on disk. It can also really slow down the import of very big projects and consume considerable resources.</whatsthis>
+    </entry>
   </group>
 </kcfg>
diff --git kdevplatform/shell/settings/projectpreferences.ui kdevplatform/shell/settings/projectpreferences.ui
index e986537d85b14ce087fba1d20826108225bf219b..a9ccb43a8a31be3aea5b29d93426ce9c5022f96a 100644
--- kdevplatform/shell/settings/projectpreferences.ui
+++ kdevplatform/shell/settings/projectpreferences.ui
@@ -59,6 +59,16 @@
     </widget>
    </item>
    <item>
+    <widget class="QCheckBox" name="kcfg_watchAllProjectDirectories">
+     <property name="toolTip">
+      <string>Monitor all directories of a project for changes.</string>
+     </property>
+     <property name="text">
+      <string>Monitor all project directories for changes</string>
+     </property>
+    </widget>
+   </item>
+   <item>
     <spacer name="verticalSpacer">
      <property name="orientation">
       <enum>Qt::Vertical</enum>
diff --git kdevplatform/shell/projectcontroller.cpp kdevplatform/shell/projectcontroller.cpp
index 5acf203fb9642a791916c22c5b554b2954d9ea6e..839946d5724d3bc61c6960ca4da502d2d1d7ecea 100644
--- kdevplatform/shell/projectcontroller.cpp
+++ kdevplatform/shell/projectcontroller.cpp
@@ -109,6 +109,7 @@ public:
     bool m_cleaningUp; //Temporary flag enabled while destroying the project-controller
     QPointer<ProjectChangesModel> m_changesModel;
     QHash< IProject*, QPointer<KJob> > m_parseJobs; // parse jobs that add files from the project to the background parser.
+    QList<IProject*> m_pendingParseProjectJobs; // project parse jobs waiting to be started
 
     ProjectControllerPrivate( ProjectController* p )
         : m_core(nullptr), model(nullptr), selectionModel(nullptr), dialog(nullptr), q(p), buildset(nullptr), m_foundProjectFile(false), m_cleaningUp(false)
@@ -887,7 +888,19 @@ void ProjectController::projectImportingFinished( IProject* project )
     d->m_currentlyOpening.removeAll(project->projectFile().toUrl());
     emit projectOpened( project );
 
-    reparseProject(project);
+    // don't call reparseProject immediately, defer until all currently opening
+    // projects have been imported. Parsing is done in the background but
+    // importing can block the UI so should be as fast as possible.
+    if (d->m_currentlyOpening.isEmpty()) {
+        reparseProject(project);
+        //qWarning() << "started parsing" << project->name();
+        foreach (const auto p, d->m_pendingParseProjectJobs) {
+            reparseProject(p);
+        }
+        d->m_pendingParseProjectJobs.clear();
+    } else {
+        d->m_pendingParseProjectJobs.append(project);
+    }
 }
 
 // helper method for closeProject()
