diff --git kdevplatform/shell/textdocument.cpp kdevplatform/shell/textdocument.cpp
index ae93e78d8654dbc67ddd91a8f99d314f29431f8f..41b503eefc5648c771fc52efca7bf49a3e1e1fbf 100644
--- kdevplatform/shell/textdocument.cpp
+++ kdevplatform/shell/textdocument.cpp
@@ -266,7 +266,7 @@ bool TextDocument::isTextDocument() const
     {
         /// @todo Somehow it can happen that d->document is zero, which makes
         /// code relying on "isTextDocument() == (bool)textDocument()" crash
-        qCWarning(SHELL) << "Broken text-document: " << url();
+        qCDebug(SHELL) << "Broken text-document: " << url();
         return false;
     }
 
diff --git kdevplatform/shell/filteredproblemstore.cpp kdevplatform/shell/filteredproblemstore.cpp
index 40962a6..e4b4a03 100644
--- kdevplatform/shell/filteredproblemstore.cpp
+++ kdevplatform/shell/filteredproblemstore.cpp
@@ -24,6 +24,8 @@
 
 #include <KLocalizedString>
 
+#include <QDebug>
+
 using namespace KDevelop;
 
 namespace
@@ -33,10 +35,14 @@ namespace
 void addDiagnostics(ProblemStoreNode *node, const QVector<IProblem::Ptr> &diagnostics)
 {
     foreach (const IProblem::Ptr &ptr, diagnostics) {
-        ProblemNode *child = new ProblemNode(node, ptr);
-        node->addChild(child);
+        if (ptr.data()) {
+            ProblemNode *child = new ProblemNode(node, ptr);
+            node->addChild(child);
 
-        addDiagnostics(child, ptr->diagnostics());
+            addDiagnostics(child, ptr->diagnostics());
+        } else {
+            qWarning() << Q_FUNC_INFO << "caught NULL ptr in" << diagnostics;
+        }
     }
 }
 
diff --git kdevplatform/vcs/dvcs/dvcsjob.cpp kdevplatform/vcs/dvcs/dvcsjob.cpp
index 481febf01dfb67907c5073b5c4f35bfd9e0a0527..7ca41a9cb64fe5bf08980ad78e780391c1dda1e9 100644
--- kdevplatform/vcs/dvcs/dvcsjob.cpp
+++ kdevplatform/vcs/dvcs/dvcsjob.cpp
@@ -158,6 +158,16 @@ QVariant DVcsJob::fetchResults()
 void DVcsJob::start()
 {
     Q_ASSERT_X(d->status != JobRunning, "DVCSjob::start", "Another proccess was started using this job class");
+    if( d->status == JobRunning ) {
+        QString error = i18n( "Another process was started using this job class" );
+        d->model->appendLine(error);
+        setError( 255 );
+        setErrorText(error);
+        d->status = JobFailed;
+        emitResult();
+        qCWarning(VCS) << "DVCSjob::start:" << error;
+        return;
+    }
 
     const QDir& workingdir = directory();
     if( !workingdir.exists() ) {
@@ -167,6 +177,7 @@ void DVcsJob::start()
         setErrorText(error);
         d->status = JobFailed;
         emitResult();
+        qCWarning(VCS) << "DVCSjob::start:" << error;
         return;
     }
     if( !workingdir.isAbsolute() ) {
@@ -176,6 +187,7 @@ void DVcsJob::start()
         setErrorText(error);
         d->status = JobFailed;
         emitResult();
+        qCWarning(VCS) << "DVCSjob::start:" << error;
         return;
     }
 
@@ -193,6 +205,17 @@ void DVcsJob::start()
     d->childproc->start();
 
     d->model->appendLine(directory().path() + "> " + commandDisplay);
+
+    if (!d->childproc->waitForStarted(1000)) {
+        QString error = i18n("DVCSJob::start: %1 failed to start after 1s: state=%2 %3",
+            commandDisplay, d->childproc->state(), d->childproc->errorString());
+        d->model->appendLine(error);
+        // don't raise the error (emitResult) and don't change the job's status
+        // just print a warning.
+//         setError( 255 );
+//         setErrorText(error);
+        qCWarning(VCS) << error;
+    }
 }
 
 void DVcsJob::setCommunicationMode(KProcess::OutputChannelMode comm)
@@ -212,9 +235,11 @@ void DVcsJob::slotProcessError( QProcess::ProcessError err )
     setError(OutputJob::FailedShownError); //we don't want to trigger a message box
 
     d->errorOutput = d->childproc->readAllStandardError();
+    QByteArray stdOut = d->childproc->readAllStandardOutput();
 
     QString displayCommand = KShell::joinArgs(dvcsCommand());
-    QString completeErrorText = i18n("Process '%1' exited with status %2\n%3", displayCommand, d->childproc->exitCode(), QString::fromLocal8Bit(d->errorOutput) );
+    QString completeErrorText = i18n("Process '%1' exited with status %2\n\"%3\"\n\"%4\"",
+        displayCommand, d->childproc->exitCode(), QString::fromLocal8Bit(stdOut), QString::fromLocal8Bit(d->errorOutput) );
     setErrorText( completeErrorText );
 
     QString errorValue;
@@ -241,11 +266,11 @@ void DVcsJob::slotProcessError( QProcess::ProcessError err )
         errorValue = QStringLiteral("UnknownError");
         break;
     }
-    qCDebug(VCS) << "Found an error while running" << displayCommand << ":" << errorValue
+    qCWarning(VCS) << "Found an error while running" << displayCommand << ":" << errorValue
                                                      << "Exit code is:" << d->childproc->exitCode();
-    qCDebug(VCS) << "Error:" << completeErrorText;
-    displayOutput(QString::fromLocal8Bit(d->errorOutput));
-    d->model->appendLine(i18n("Command finished with error %1.", errorValue));
+    qCWarning(VCS) << "Error:" << completeErrorText;
+//     displayOutput(QString::fromLocal8Bit(d->errorOutput));
+    d->model->appendLine(i18n("%1 (%2).", completeErrorText, errorValue));
 
     if(verbosity()==Silent) {
         setVerbosity(Verbose);
diff --git kdevplatform/language/duchain/duchainlock.cpp kdevplatform/language/duchain/duchainlock.cpp
index 27da289663b8ffd73ddafd33941eef5a8aa76116..76a3168977b7e6b7e0208650b7bbe665b5a15a49 100644
--- kdevplatform/language/duchain/duchainlock.cpp
+++ kdevplatform/language/duchain/duchainlock.cpp
@@ -101,6 +101,7 @@ bool DUChainLock::lockForRead(unsigned int timeout)
       } else {
         //Fail!
         d->changeOwnReaderRecursion(-1);
+        qWarning() << Q_FUNC_INFO << "timed out after" << t.elapsed()/1000.0 << "seconds";
         return false;
       }
     }
@@ -124,7 +125,9 @@ bool DUChainLock::lockForWrite(uint timeout)
   //It is not allowed to acquire a write-lock while holding read-lock
 
   Q_ASSERT(d->ownReaderRecursion() == 0);
-
+  if (d->ownReaderRecursion() != 0) {
+    return false;
+  }
   if (d->m_writer.load() == QThread::currentThread()) {
     //We already hold the write lock, just increase the recursion count and return
     d->m_writerRecursion.fetchAndAddRelaxed(1);
@@ -155,6 +158,7 @@ bool DUChainLock::lockForWrite(uint timeout)
       QThread::usleep(uSleepTime);
     } else {
       //Fail!
+      qWarning() << Q_FUNC_INFO << "timed out after" << t.elapsed()/1000.0 << "seconds";
       return false;
     }
   }
@@ -187,6 +191,11 @@ DUChainReadLocker::DUChainReadLocker(DUChainLock* duChainLock, uint timeout)
   , m_locked(false)
   , m_timeout(timeout)
 {
+  // 10-12 seconds is an eternity. Pick a random value in this range
+  // so if multiple candidates compete there's always 1 that waits the longest
+  if (!timeout) {
+    m_timeout = 10000 + 2000 * qrand() / RAND_MAX;
+  }
   lock();
 }
 
@@ -230,6 +239,11 @@ DUChainWriteLocker::DUChainWriteLocker(DUChainLock* duChainLock, uint timeout)
   , m_locked(false)
   , m_timeout(timeout)
 {
+  // 10-12 seconds is an eternity. Pick a random value in this range
+  // so if multiple candidates compete there's always 1 that waits the longest
+  if (!timeout) {
+    m_timeout = 10000 + 2000 * qrand() / RAND_MAX;
+  }
   lock();
 }
 
