# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;
# Copyright (c) 2015, 2016 R.J.V. Bertin

PortSystem          1.0


set basename        qt53-kde
set namesuffix      ""
name                ${basename}${namesuffix}

ui_debug "Port ${subport}, configure.optflags=${configure.optflags} configure.compiler=${configure.compiler}"

set is_stubport     no
# Qt 5.4 will not build on OS X 10.6, so we provide 5.3 on that OS.
# The just-release Qt 5.5 release should build on OS X 10.7 (to be confirmed)
if {!(${os.platform} eq "darwin" && ${os.major} <= 10)} {
    variant legacy description {Installs version 5.3.2 also on OS X 10.7+. Only for testing, please do not use.} {}
    default_variants +legacy
}
version             5.3.2
set QT53            yes

####

# set building_qt5 immediately, before including the Qt5 PortGroup!
set building_qt5    1
set qt5.prefer_kde  1
PortGroup           qt5 1.0

use_xcode           yes

if {${subport} ne "${name}-qtwebengine"} {
    PortGroup       muniversal 1.0
}

if {![info exists qt5.using_kde] || !${qt5.using_kde}} {
    ui_error "Using port ${subport} without the corresponding Qt5 PortGroup"
    return -code error "Qt5 PortGroup mismatch"
}

# a convenience procedure to register conflicts among the different Qt5 ports:
# for instance: [qt5_port_conflicts {qtbase x11}]
proc qt5_port_conflicts {components} {
    global namesuffix available_qt5_versions
    set cnfls {}
    if {${namesuffix} eq ""} {
        set suffix "-devel"
    } else {
        set suffix ""
    }
    foreach comp ${components} {
        foreach {v info} ${available_qt5_versions} {
            if {${comp} ne "" && ${comp} ne "qtbase"} {
                set cnfls [lappend cnfls ${v}-${comp}]
                set cnfls [lappend cnfls ${v}-kde${suffix}-${comp}]
            } else {
                set cnfls [lappend cnfls ${v}-qtbase]
                set cnfls [lappend cnfls ${v}-kde${suffix}]
            }
        }
    }
    return ${cnfls}
}

# convenience replacement for the PortGroup procedure which can be used
# to include the qmake5 PG without re-including the Qt5-kde PG.
proc use_PortGroup {name vers} {
    uplevel namespace eval qt5 {set dont_include_twice yes}
    ui_debug "Including PortGroup ${name} ${vers}"
    uplevel PortGroup          ${name} ${vers}
    # if ${name} eq "qmake5" then dont_include_twice will already have been unset!
    if {[info exists qt5::dont_include_twice]} {
        uplevel namespace eval qt5 {unset dont_include_twice}
    }
}

proc which_variant {args} {
    set vlist {}
    foreach v [join ${args}] {
        if {[variant_isset ${v}]} {
            set vlist [lappend vlist ${v}]
        }
    }
    return ${vlist}
}

proc switch_variant {args} {
    set code [lindex $args end]
    set variant [which_variant [lrange ${args} 0 end-1]]
    switch ${variant} ${code}
}

### nothing to be seen from here on, move along :)

# optional support for HFS-compression of the source and build dirs
if {[file exists ${qt5::currentportgroupdir}/compress_workdir-1.0.tcl]} {
    PortGroup       compress_workdir 1.0
}

set branch          [join [lrange [split ${version} .] 0 1] .]
# minimal version variables:
set QT58            no
set PF532           qt532/

categories          aqua
platforms           macosx linux
maintainers         gmail.com:rjvbertin mk
license             LGPL-3

homepage            http://qt.io
description         Qt Tool Kit ${branch}, tuned for an improved KF5 experience
long_description    Qt Tool Kit: A cross-platform framework \
                    (headers, data, and libraries) for writing \
                    cross-platform GUI-based applications. This port uses an installation layout \
                    and includes a number of patches \
                    aimed at improving the KF5 experience (by supporting the selected KDE theme for instance), \
                    and enables useful backtraces into Qt code for debugging.\
                    It provides most of Qt in a single port rather than using port:qt5's one-component-per-subport approach. \
                    It does provide the same subports port:qt5 provides, as stubs. Installs to ${qt_dir}.\n\
                    For license info, see http://doc-snapshots.qt.io/qt5-${branch}/licenses-used-in-qt.html

platform darwin {
    notes-append    "Install port:kf5-osx-integration-devel and set KDE_SESSION_VERSION to 4 or 5 in order to \
                    apply the theme/style selected for KF5 applications automatically in all Qt5 applications.\
                    What also should work (with any Qt5 version) is to set QT_QPA_PLATFORMTHEME=kde, but only osx-integration \
                    will provide support for icon themes in ${prefix}/share/icons."
}

distname            qt-everywhere-opensource-src-${version}

master_sites        http://download.qt.io/official_releases/qt/${branch}/${version}/single/

use_xz              yes

# Share the distfiles dir with port:qt5
dist_subdir         qt5

if {![file exists ${distpath}/${distname}${extract.suffix}]} {
    # Qt have retired the source tarball we want for this port, so we need to go through git
    git.url         https://code.qt.io/qt/qt5.git
    fetch {
        # do a bare fetch without history of the tag corresponding to ${version}
        system -W ${workpath} "git clone --progress -n -b v${version} --depth=1 ${git.url} ${distname}"

        # populate the skeleton tree, discarding the future:
        system -W ${worksrcpath} "git reset --hard v${version}"
        # hack the init-repository script so it checks out the version we want, only
        # of the components we know exist and without any git history:
        system -W ${worksrcpath} "patch -Np1 -i ${filespath}/patch-init-repository.diff"
        # populate the source tree
        ui_msg " -->  Populating the source tree. This will take some time!"
        system -W ${worksrcpath} "./init-repository -f"
        # cleanup:
        exec find ${worksrcpath} -name .git | xargs rm -rf
        foreach d {qtdocgallery qtenginio qtfeedback qtpim qtqa qtrepotools qtsystems qtwayland} {
            file delete -force ${worksrcpath}/${d}
        }
        ui_msg " -->  Generating our own source tarball. This will take even more time!"
        system -W ${workpath} "tar -c ${distname} | xz -v --threads=${build.jobs} > ${distpath}/${distname}${extract.suffix}"
        # create a checksum file
        exec echo "checksums rmd160 [rmd160 file ${distpath}/${distname}${extract.suffix}] \\\n\
                             size [file size ${distpath}/${distname}${extract.suffix}]" > ${distpath}/${distname}${extract.suffix}.sig
        # no point in removing ${worksrcpath} as the extract phase will overwrite it with its archived contents
        # On SSDs it might even be beneficial to leave the files in place.
    }
} else {
    # check for the presence of a checksum file and load it or dump one on the terminal"
    if {[file exists ${distpath}/${distname}${extract.suffix}.sig]} {
        source ${distpath}/${distname}${extract.suffix}.sig
    } else {
        ui_msg "Missing checksum file \"${distpath}/${distname}${extract.suffix}.sig !"
        ui_msg "Please create it for this port if you are certain about the provenance"
        ui_msg "of the archive (tarball) named below, containing the following text:"
        ui_msg "##---------------------------------------------------------"
        ui_msg "checksums rmd160 [rmd160 file ${distpath}/${distname}${extract.suffix}] \\"
        ui_msg "          size [file size ${distpath}/${distname}${extract.suffix}]"
        ui_msg "##---------------------------------------------------------"
        # return the designated error immediately:
        return -code error "No checksum set for ${distpath}/${distname}${extract.suffix}"
    }
}

# be neat and put all --exclude extract exclusions before any specified components to extract
options             do_not_extract \
                    extract_components
default do_not_extract      {}
default extract_components  {}
proc collect_extract_args {} {
    foreach comp [option do_not_extract] {
        extract.post_args-append --exclude ${comp}
    }
    foreach comp [option extract_components] {
        extract.post_args-append ${comp}
    }
    ui_info "Excluding components: [option do_not_extract]"
    ui_info "Exclusive components: [option extract_components]"
}
pre-extract {
    collect_extract_args
}
extract.pre_args-append     -T 0
platform linux {
    if {[file exists ${prefix}/bin/bsdtar]} {
        extract.post_args | ${prefix}/bin/bsdtar --no-same-owner -xf -
    }
}

if {${os.platform} ne "darwin"} {
    if {[variant_isset universal]} {
        return -code error "The universal variant only makes sense on Darwin/OS X"
    }
}

if { ${os.platform} ne "darwin" } {
    # probably linux, violate MacPorts premises by allowing a build fully dependent
    # on system/host libraries.
    pre-fetch {
        ui_msg "On \"${os.platform}\" most dependencies are obtained from the host, expect unforeseen issues!!"
    }
} elseif { ${os.major} < 10 } {
    pre-fetch {
        ui_error "OS X prior to 10.7 (Lion) is not a Reference Configuration for Qt."
        ui_error "OS X prior to 10.6 (Snow Leopard) is not even tested."
        ui_error "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
        return -code error "unsupported OS"
    }
} elseif { ${os.major} == 10 } {
    pre-fetch {
        ui_warn "OS X prior to 10.7 (Lion) is not a Reference Configuration for Qt."
        if { [variant_isset universal] } {
            ui_warn "OS X 10.6 (Snow Leopard) is \"occasionally tested\" but ONLY in 32-bit mode."
                ui_warn "OS X 10.6 (Snow Leopard) is deprecated and scheduled for removal in Qt 5.4."
        } else {
            if { ${build_arch} eq "i386" } {
                ui_warn "OS X 10.6 (Snow Leopard) is \"occasionally tested\"."
                    ui_warn "OS X 10.6 (Snow Leopard) is deprecated and scheduled for removal in Qt 5.4."
            } else {
                ui_warn "OS X 10.6 (Snow Leopard) is \"occasionally tested\" but ONLY in 32-bit mode."
                    ui_warn "OS X 10.6 (Snow Leopard) is deprecated and scheduled for removal in Qt 5.4."
            }
        }
        ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
        ui_warn "MacPorts applies patches to build Qt with a recent, non-Xcode clang version;"
        # remove if ever this changes:
        ui_warn "currently, these patches have been tested only in 64-bit mode."
    }
} elseif { ${os.major} > 16 } {
    pre-fetch {
        ui_warn "OS X subsequent to 10.12 (\"Sierra\") is not a Reference Configuration for Qt."
        ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
    }
} else {
    # 11 <= ${os.major} <= 13
    if { [variant_isset universal] } {
        pre-fetch {
            ui_warn "Multiple architectures is not a Reference Configuration for Qt."
            ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
        }
    } else {
        if { ${build_arch} eq "i386" } {
            pre-fetch {
                ui_warn "32-bit mode is not a Reference Configuration for Qt."
                ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
            }
        }
    }
}

if { ${subport} eq "${name}-zz-docs"  } {
    universal_variant   no
    installs_libs       no
} else {
    if { ![variant_isset universal] } {
        configure.args-append               "-platform ${qt_qmake_spec}"
    } else {
        set merger_configure_env(i386)      "QMAKESPEC=${qt_qmake_spec_32}"
        set merger_configure_env(x86_64)    "QMAKESPEC=${qt_qmake_spec_64}"
        set merger_configure_args(i386)     "-platform ${qt_qmake_spec_32}"
        set merger_configure_args(x86_64)   "-platform ${qt_qmake_spec_64}"
        set merger_arch_flag                yes
        set merger_arch_compiler            yes
    }
}


if {[info exists env(QTDIR)]} {
    ui_msg "unsetting \$QTDIR"
    unset env(QTDIR)
}

set clang_versions {4.0 3.9 3.8 3.7 3.6 3.5 3.4}
proc qt_cc {} {
    global prefix clang_versions
    foreach v ${clang_versions} {
        set cc "clang-mp-${v}"
        if {[file exists ${prefix}/bin/${cc}]} {
            return ${prefix}/bin/${cc}
        }
    }
    ui_error "\nNo compatible MacPorts clang compiler found. This is a bug, please report\n"
    return -code error "No compatible clang found in ${prefix}/bin"
}
proc qt_cxx {} {
    global prefix clang_versions
    foreach v ${clang_versions} {
        set cxx "clang++-mp-${v}"
        if {[file exists ${prefix}/bin/${cxx}]} {
            return ${prefix}/bin/${cxx}
        }
    }
    ui_error "\nNo compatible MacPorts clang++ compiler found. This is a bug, please report\n"
    return -code error "No compatible clang++ found in ${prefix}/bin"
}

# these are set only when building Qt 5.3.2 on 10.6, but configure.cxx c.s.
# have a habit of changing behind our backs if we set them just on the toplevel.
# Try using a proc that can be invoked in every relevant pre-phase.
proc setQt53Compilers {} {
    global workpath configure.cc configure.cxx configure.objc configure.objcxx configure.compiler
    if {[file exists ${workpath}/build/qtbase/bin/clang]} {
        configure.cc        ${workpath}/build/qtbase/bin/clang
        configure.objc      ${workpath}/build/qtbase/bin/clang
        ui_info "Found (Obj)C compiler ${configure.cc}"
    }
    if {[file exists ${workpath}/build/qtbase/bin/clang++]} {
        #configure.compiler  ${workpath}/build/qtbase/bin/clang++
        configure.cxx       ${workpath}/build/qtbase/bin/clang++
        configure.objcxx    ${workpath}/build/qtbase/bin/clang++
        ui_info "Found (Obj)C++ compiler ${configure.cxx}"
    }
}
setQt53Compilers

set qtwebkit_is_stub yes

if {${subport} eq ${name}} {
    if {${os.platform} eq "darwin"} {
        variant abort description {this variant provides qFatal's standard behaviour of calling abort(2) instead of quitting with an alert dialog} {}
    }
#     if {[info exists qtwebkit_is_stub]} {
#         snip
#     }
}

set CXX                     [file tail ${configure.cxx}]
set CXX_dir                 [file dirname ${configure.cxx}]
set CXX_parts               [split ${CXX} -]
set CXX_family              [lindex ${CXX_parts} 0]
set CXX_mp                  [expr {[lindex ${CXX_parts} 1] eq "mp"}]
set CXX_vsuffix             [join [lrange ${CXX_parts} 1 end] -]
unset CXX_parts

if { ${subport} eq ${name} || ${subport} eq "${name}-zz-docs" || ${subport} eq "${name}-x11"} {
    # use the qt5 group; set 'building_qt5' so that the portgroup
    # does not include certain parts
    conflicts-append    qt3 qt3-mac [qt5_port_conflicts {qtbase x11}]
    PortGroup           xcodeversion 1.0

    minimum_xcodeversions   {10 3.2}

    use_parallel_build  yes

    # as yet untested check copied from port:qt5
    if {${os.platform} eq "darwin" && ${configure.compiler} ne "clang"} {
        if {[string match macports-clang-* ${configure.compiler}] && [vercmp ${xcodeversion} "7.0"] >= 0} {
            # non-Xcode clang does not seem to be able to understand tbd files
            # for an explanation of tbd files, see
            #    http://stackoverflow.com/questions/31450690/why-xcode-7-shows-tbd-instead-of-dylib
            # see https://trac.macports.org/ticket/53151
            pre-fetch {
                ui_error "This configuration is known to fail"
                ui_error "See https://trac.macports.org/ticket/53151"
                ui_error "As a workaround, do not set configure.compiler manually"
                return -code error "incompatible configuration"
            }
        }
    }

    # header file QtCore/private/qmachparser_p.h is included only if "defined(QT_BUILD_INTERNAL) && defined(Q_OF_MACH_O)"
    #     code from header is used only "ifdef Q_OF_MACH_O"
    #     the two must be consistent
    #     assume the header include code is correct
    patchfiles-append qt532/patch-tst_qpluginloader.diff

    # When testing, ensure that a universal object file is not created inadvertently.
    patchfiles-append ${PF532}patch-machtest.diff

    # see http://stackoverflow.com/questions/14506151/invalid-symbol-redefinition-in-inline-asm-on-llvm
    patchfiles-append ${PF532}patch-tst_benchlibcallgrind.diff

    if {${subport} ne "${name}-x11"} {
        # see #44934 (and #35067 for the qt4-mac version)
        patchfiles-append ${PF532}patch-shared.diff
        # see https://bugreports.qt-project.org/browse/QTBUG-41136
        patchfiles-append qt532/patch-avfmediaplayersession.diff
    }

    # see https://bugreports.qt-project.org/browse/QTBUG-41367
    patchfiles-append   qt532/patch-qmacstyle_mac.diff
    patchfiles-append   qt532/fix-qsp_fontlocations.patch
    ## TODO : backport the qsp_xdg (qmake) / QspXDG (cmake) activators ##
    patchfiles-append   qt532/fix-qstandardpaths3.patch
    patchfiles-append   qt532/patch-missing-autoreleasepools.diff
    if {[variant_isset legacy]} {
        # this is probably not required on 10.6 (I can't remember it was)
        patchfiles-append \
                        qt532/patch-lalr.diff
    }

    # patches from Ubuntu 5.3.2+dfsg-4ubuntu8 (from Vivid Vervet)
    if {[variant_isset examples]} {
        patchfiles-append       ${PF532}remove_icon_from_example.patch
                                ${PF532}remove_google_adsense.patch
    }

    # patches remove_icon_from_example and remove_google_adsense are identical for Qt 5.4 and Qt 5.3.2
    patchfiles-append           qt532/gnukfreebsd.diff \
                                qt532/fix_bug_in_internal_comparison_operator.patch \
                                qt532/fix_sparc_atomics.patch \
                                qt532/load_testability_from_env_var.patch \
                                qt532/dbus_correct_signal_name_disconnect.patch \
                                qt532/Fix-crash-in-QNetworkAccessCacheBackend-closeDownstr.patch \
                                qt532/Don-t-always-chmod-the-XDG_RUNTIME_DIR.patch \
                                qt532/Report-the-system-error-on-why-chmod-2-failed-in-XDG.patch \
                                qt532/disable-generic-plugin-when-others-available.patch \
                                qt532/update-QtBearer-NetworkManager-backend-API.patch \
                                qt532/Reset-QNAM-s-NetworkConfiguration-when-state-changes.patch \
                                qt532/Use-a-property-cache-to-cut-down-on-blocking-calls.patch \
                                qt532/QtBearer-networkmanager-make-sure-to-set-flag-Active.patch \
                                qt532/Always-lock-the-DBus-dispatcher-before-dbus_connecti.patch \
                                qt532/QDBusConnection-Merge-the-dispatch-and-the-watch-and.patch \
                                qt532/Partially-revert-Fix-a-deadlock-introduced-by-the-ra.patch \
                                qt532/Break-after-handling-the-read-write.patch

    if {${subport} eq ${name} && ${os.platform} eq "darwin"} {
        if {![variant_isset abort]} {
            patchfiles-append   qt532/patch-qFatal-no-abort.diff
        }
    }

    patchfiles-append           qt532/patch-improve-fontweight-support8.diff \
                                qt532/patch-fontpanel.diff

    # --prefix is not recognised.
    configure.pre_args-delete   --prefix=${prefix}

    # --disable-dependency-tracking is not recognised.
    configure.universal_args-delete --disable-dependency-tracking

    # taken from the qt4-mac Portfile:
    global OSX_MINOR
    set OSX_MINOR ""
    # hopefully the MACOSX_DEPLOYMENT_TARGET exists and is set by now.  if
    # not, last resort (which is not desirable) is to use the os.version.
    if {${macosx_deployment_target} ne ""} {
        set OSX_MINOR [lindex [split ${macosx_deployment_target} "."] 1]
    } else {
        set OSX_MINOR [expr ${os.major} - 4]
    }

    if {${os.platform} eq "darwin"} {
        if {${configure.sdkroot} ne ""} {
            ui_debug "Using SDK from configure.sdkroot= ${configure.sdkroot}"
            configure.args-append \
                -sdk [string tolower [join [lrange [split [lindex [split ${configure.sdkroot} "/"] end] "."] 0 end-1] "."]]
        } else {
            # default: build for the current OS version, requesting the corresponding SDK explicitly
            if {[catch {exec xcrun --show-sdk-path -sdk macosx10.${OSX_MINOR}} result]} {
                ui_debug "Couldn't find preferred SDK macosx10.${OSX_MINOR}: ${result}"
                # the preferred matching SDK isn't available; check if the default SDK is
                set SDK [exec xcrun -show-sdk-version]
                if {[catch {exec xcrun --show-sdk-path -sdk macosx${SDK}} result]} {
                    ui_msg "Couldn't find the preferred nor a SDK macosx${SDK}: ${result}"
                    ui_msg "WARNING: this has been known to lead to build errors"
                } else {
                    ui_debug "Using default SDK macosx${SDK}"
                    configure.args-append \
                            -sdk macosx${SDK}
                }
            } else {
                ui_debug "Using SDK macosx10.${OSX_MINOR} : ${result}"
                configure.args-append \
                        -sdk [string tolower "macosx10.${OSX_MINOR}"]
            }
        }
    }

    # NB: -prefix->${prefix} !
    configure.args-append                      \
        -prefix         ${prefix}              \
        -archdatadir    ${qt_dir}              \
        -docdir         ${qt_docs_dir}         \
        -headerdir      ${qt_includes_dir}     \
        -plugindir      ${qt_plugins_dir}      \
        -importdir      ${qt_imports_dir}      \
        -qmldir         ${qt_qml_dir}          \
        -datadir        ${qt_data_dir}         \
        -libdir         ${qt_frameworks_dir}   \
        -bindir         ${qt_bins_dir}         \
        -libexecdir     ${qt_dir}/libexec      \
        -translationdir ${qt_translations_dir} \
        -sysconfdir     ${qt_sysconf_dir}      \
        -examplesdir    ${qt_examples_dir}     \
        -testsdir       ${qt_tests_dir}        \
        -hostbindir     ${qt_bins_dir}         \
        -hostlibdir     ${qt_frameworks_dir}   \
        -hostdatadir    ${qt_host_data_dir}

# Configure options:

    # set up things for an out-of-source build:
    default configure.dir   {${workpath}/build}
    default build.dir       {${workpath}/build}
    if {${subport} eq "${name}-x11"} {
        #default configure.cmd   {../${worksrcdir}/qtbase/configure}
        default configure.cmd   {../${worksrcdir}/configure}
    } else {
        default configure.cmd   {../${worksrcdir}/configure}
    }

    if {[file exists ${configure.dir}/config.status]} {
        # support reconfigure runs
        pre-configure {
            ui_info "--> Reconfiguring"
        }
        configure.args-append -redo -recheck-all
    }
    configure.args-append \
        -v                \
        -release          \
        -opensource       \
        -confirm-license  \
        -shared
    if {[variant_exists LTO] && [variant_isset LTO]} {
        configure.args-append -ltcg
    }

    if {${os.platform} eq "darwin"} {
        configure.args-append   \
            -force-pkg-config   \
            -no-evdev           \
            -no-linuxfb         \
            -no-kms             \
            -framework

        # Third Party Libraries:
        configure.args-append \
            -no-mtdev         \
            -no-harfbuzz      \
            -openssl  \
            -no-xinput2       \
            -no-xcb           \
            -no-xcb-xlib
        configure.args-append \
                -no-pulseaudio

        # configure options that don't show up in configure --help
        configure.args-append \
            -no-libudev       \
            -no-egl
        configure.args-append \
                -no-c++11
    } else {
        configure.args-delete  \
            -libdir         ${qt_frameworks_dir}   \
            -hostlibdir     ${qt_frameworks_dir}
        configure.args-append  \
            -libdir         ${qt_libs_dir}          \
            -hostlibdir     ${qt_libs_dir}
        # presume we want to build the xcb version.
        configure.args-append   \
            -xcb -xcb-xlib      \
            -qpa xcb            \
            -rpath              \
            -R ${prefix}/lib    \
            -R ${qt_libs_dir}   \
            -no-reduce-relocations
        # to avoid multiarch issues on Debuntu, we force the use of the system pkg-config
	   # (hardwired to /usr/bin/pkg-config) and tell it to look in our pkgconfig dir too (=first)
        set PKG_CONFIG_PATH "${prefix}/lib/pkgconfig"
        configure.env-append    \
            PKG_CONFIG_PATH=${PKG_CONFIG_PATH} PKG_CONFIG=/usr/bin/pkg-config
        build.env-append        \
            PKG_CONFIG_PATH=${PKG_CONFIG_PATH} PKG_CONFIG=/usr/bin/pkg-config
        patchfiles-append   \
                patch-configure-for-linux.diff
        post-patch {
            reinplace "s/mac|/linux|mac|/g" ${worksrcpath}/qtbase/config.tests/unix/iconv/iconv.pro
        }
    }

# Additional options:
    configure.args-append    \
        {-make libs}         \
        {-make tools}        \
        {-nomake examples}   \
        {-nomake tests}      \
        -verbose             \
        -no-pch              \
        -cups                \
        -icu                 \
        -fontconfig          \
        -dbus-linked         \
        -glib                \
        -no-directfb
    configure.args-append   -iconv

    configure.args-append       -optimized-qmake

    # the sqlite3 ("sqlite") and mysql plugins have been re-absorbed into the main port
    configure.args-append       -system-sqlite
    if {${os.platform} eq "darwin"} {
        depends_lib-append      port:sqlite3
    }
    foreach driver { db2 ibase oci odbc psql sqlite2 tds } {
        configure.args-append   -no-sql-${driver}
    }


    if {${subport} eq "${name}-x11"} {
        patchfiles-delete       ${PF532}patch-fontpanel.diff
        patchfiles-append       ${PF532}patch-to-build-xcb.diff
        post-patch {
            # this may already have been done in patch-enable-qgenericunixservices.diff
            reinplace -W ${worksrcpath}/qtbase/src "s|unix:!mac|unix|g" platformsupport/services/services.pri
        }
        configure.args-delete   -no-xinput2 -no-xcb -no-xcb-xlib
        configure.args-append   -xcb -xcb-xlib -qpa xcb
        configure.args-append   -I ${prefix}/include -L ${prefix}/lib
        patchfiles-append       qt532/patch-xcb-XOpenGL.diff \
                                qt532/patch-xcb-missing-functions.diff
        if {${os.major} > 10} {
            # not sure exactly when the GLhandleARB type was changed on OS X
            # in fact, I have to assume this patch isn't required on 10.6 ...
            patchfiles-append   qt532/patch-OpenGLhandARB-typedef.diff
        }
    } else {
        # make sure that the Designer doesn't try to use a global menubar when using the xcb plugin.
        # Yes, this patch has to be applied when building the master port, not the xcb plugin subport...
        patchfiles-append       ${PF532}patch-designer-show-menubar-on-xcb.diff
                # configure options that don't show up in configure --help
        if {${os.platform} eq "darwin"} {
            # openvg makes sense only when using X11 ...
            configure.args-append   -no-openvg
        }
    }

    if {${os.platform} eq "darwin"} {
        # Some extra blackish magic to get Qt 5.3.2 to build on OS X 10.6, using a recent clang version.
        patchfiles-append           qt532/patch-configure-allow-macports-binutils.diff \
                                    qt532/patch-nistest.diff \
                                    qt532/patch-icutest.pro.diff \
                                    qt532/patch-clangconf.diff
        if {${subport} ne "${name}-x11" && ${subport} ne "${name}-zz-docs"} {
            patchfiles-append       qt532/patch-geoclue-gvalue-init.diff
        }
        patchfiles-append           qt532/patch-sdk.prf-no-xcrun.diff
        # a hackery bit of post-patch to be done pre-configure
        # (or post-patch, so it can be checked before running configure)
        post-patch {
            xinstall -m 755 -d ${workpath}/build/qtbase
            xinstall -m 755 -d ${workpath}/build/qtbase/bin
            # take some measures to pick the appropriate clang compiler. The compiler_blacklist portgroup and MacPorts based
            # have already introduced a dependency on clang-3.5 (unless clang-3.4 is installed?!). We create symlinks to clang
            # 3.4 or 3.5 in our build tree, so that the user doesn't have to do a `port select` for us.
            if {![file exists ${workpath}/build/qtbase/bin/clang++]} {
                ln -s [qt_cc] ${workpath}/build/qtbase/bin/clang
                ln -s [qt_cxx] ${workpath}/build/qtbase/bin/clang++
            }
            # instruct the build system to use these for building:
            reinplace -W ${worksrcpath}/qtbase "s|PREFIX|${prefix}|g" config.tests/unix/icu/icu.pro
            # the configure script will build a bootstrap qmake executable respecting our mkspec (macx-clang referring to a MacPorts clang version)
            # because we patched it to do just that (patch-configure-allow-macports-binutils.diff).
            # We also provide an appropriate .qmake.stash to be sure that qmake doesn't generate a less appropriate one (despite the sdk.prf patch)
            # NB: this issue also hampers the universal build of the qtwebengine subport.
            if {![file exists ${workpath}/build/qtbase/.qmake.stash]} {
                file copy ${filespath}/qt532/qmake.stash.in ${workpath}/build/qtbase/.qmake.stash
            }
            reinplace -W ${workpath}/build/qtbase "s|PREFIX/bin/clang|${workpath}/build/qtbase/bin/clang|g" .qmake.stash
            reinplace -W ${workpath}/build/qtbase "s|PREFIX|${prefix}|g" .qmake.stash
            # put a copy at the build root, which will be required for building qtwebkit
            # (way ahead in the future...)
            if {![file exists ${workpath}/build/.qmake.stash]} {
                file copy ${workpath}/build/qtbase/.qmake.stash ${workpath}/build
            }
            if {[file exists ${worksrcpath}/qtwebkit/Source/WebCore/bindings/scripts/CodeGeneratorObjC.pm]} {
                reinplace "s|/usr/bin/clang|${workpath}/build/qtbase/bin/clang|g" \
                            ${worksrcpath}/qtwebkit/Source/WebCore/bindings/scripts/CodeGeneratorObjC.pm
            }
            ui_msg "Everything is set up to use the Qt-specific compiler symlink ${workpath}/build/qtbase/bin/clang++\
                    but the build system will probably resolve the actual compiler to which this link points ([qt_cxx]).\
                    That is of no consequence; future Qt5 ports will use the Qt compiler in ${qt_bins_dir}."
        }
        configure.args-append       -process
    }

    # Qt builds part of the system using environment provided by MacPorts.
    # It builds the rest using its own internal environment.
    # For consistency, clear MacPorts environment.
    configure.cxx_stdlib
        configure.sdkroot
        configure.cc_archflags
        configure.cxx_archflags
        configure.objc_archflags
        configure.objcxx_archflags
        configure.ld_archflags
        configure.cppflags
        configure.objcflags-append  "-g"
        configure.objcxxflags-append  "-g"
        configure.pipe  no
    configure.march
        configure.mtune
        configure.universal_ldflags
        configure.universal_cflags
        configure.universal_cxxflags
        configure.universal_cppflags

    # patches for improving the KDE experience (and facilitating debugging)
    patchfiles-append       ${PF532}patch-enable-dumpObjectInfo.diff
    patchfiles-append       qt532/correct-systraymenu-iconhandling.patch \
                            qt532/deactivate-menurole-heuristics.patch \
                            qt532/debug-negative-qtimerint.patch

    configure.args-append   -force-debug-info -no-strip -no-separate-debug-info
}

# finish up building preparations
if { (${subport} eq ${name}) \
    || (${subport} eq "${name}-x11") || (${subport} eq "${name}-qtwebengine") } {

    if {[variant_isset LTO]} {
        ui_msg "The LTO variant is currently ignored for Qt 5.3"
    }
    if {[variant_isset LTO] && ${os.platform} eq "darwin"} {
        if {(${os.major} <= 13) || ${CXX_mp}} {
            patchfiles-append       ${PF532}patch-clangconf-lto-commands.diff
        }
    }
    configure.ldflags-append        ${configure.optflags}

    if {${os.platform} eq "darwin"} {
        depends_lib-append                       \
            port:zlib                            \
            port:libpng                          \
            path:include/turbojpeg.h:libjpeg-turbo                            \
            port:freetype                        \
            port:fontconfig                      \
            path:bin/dbus-daemon:dbus            \
            port:openssl                         \
            port:tiff                            \
            port:libmng                          \
            path:lib/pkgconfig/glib-2.0.pc:glib2 \
            port:icu                             \
            port:pcre
        depends_lib-append port:libiconv
    } else {
        depends_build-append \
            port:tiff-dev
        depends_lib-append                       \
            port:zlib                            \
            port:libpng                          \
            path:include/turbojpeg.h:libjpeg-turbo                            \
            port:openssl                         \
            port:tiff                            \
            port:openal-soft                     \
            port:pcre
        configure.ldflags-delete    -Wl,-headerpad_max_install_names
    }

    do_not_extract-append           ${distname}/qttranslations

    post-extract {
        file mkdir ${workpath}/build
        if {[file exists ${worksrcpath}/qtwebengine] && (${subport} ne "${name}-zz-docs")} {
            file delete -force ${worksrcpath}/qtwebengine
            patchfiles-append   patch-disable-qtwebengine.diff
        }
        if {[variant_isset universal]} {
            ui_msg "Setting up symlinks for architectures ${universal_archs_to_use}"
            foreach arch ${universal_archs_to_use} {
                ui_msg "ln -s ${distname} ${worksrcpath}-${arch}"
                ln -s ${distname} ${worksrcpath}-${arch}
            }
        }
        # clean out the examples directories
        if {![variant_isset examples] || (${subport} eq "${name}-qtwebengine")} {
            foreach ex [glob -nocomplain ${worksrcpath}/*/examples] {
                file delete -force ${ex}
            }
        }
    }

    if {${os.platform} eq "darwin"} {
        build.type              gnu
        # make sure we use the latest gmake:
        build.cmd               gmake
        depends_build-append    port:gmake
    }

    # see https://bugreports.qt-project.org/browse/QTBUG-35514
    build.target

    post-patch {
        #reinplace "s|//opt//local//|${prefix}/|g" ${worksrcpath}/qtbase/src/corelib/io/qstandardpaths_mac.cpp
        if {${use_parallel_build} && [file exists ${worksrcpath}/qtbase/configure]} {
            # let qmake be build in parallel too
            reinplace "s|\"\$MAKE\")|\"\$MAKE\" -j${build.jobs})|g" ${worksrcpath}/qtbase/configure
        }
        if {${subport} ne "${name}-qtwebengine"} {
            reinplace -W ${worksrcpath}/qtbase "s|@PREFIX@|${prefix}|g" \
                    src/corelib/io/qstandardpaths_unix.cpp \
                    src/network/ssl/qsslsocket_openssl_symbols.cpp
            if {[variant_isset LTO] && ${os.platform} eq "darwin"} {
                if {${CXX_mp}} {
                    reinplace "s|@LLVM_AR@|${CXX_dir}/llvm-ar-${CXX_vsuffix}|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                    reinplace "s|@LLVM_NM@|${CXX_dir}/llvm-nm-${CXX_vsuffix}|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                    # this may seem surprising, but it's the stock setting:
                    reinplace "s|@LLVM_RANLIB@|true|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                } elseif {${os.major} <= 13} {
                    reinplace "s|@LLVM_AR@|ar|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                    reinplace "s|@LLVM_NM@|nm|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                    reinplace "s|@LLVM_RANLIB@|ranlib|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                }
                # else not yet needed.
            }
            # UsingTheRightCompiler:
            reinplace -W ${worksrcpath}/qtbase/mkspecs/common "s|macportsclang++|${configure.cxx}|g" clang.conf
            reinplace -W ${worksrcpath}/qtbase/mkspecs/common "s|macportsclang|${configure.cc}|g" clang.conf
        }
    }

    if { [variant_isset universal] } {
        merger-post-destroot {
            if {[tbool is_stubport]} {
                return
            }
            foreach arch ${universal_archs_to_use} {
                set dir ${destroot}-${arch}

                foreach pcfl [glob -nocomplain ${dir}${qt_frameworks_dir}/pkgconfig/*.pc] {
                    reinplace "s|/build-${arch}/|/build/|g" ${pcfl}
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${pcfl}
                }

                foreach prlfl [glob -nocomplain ${dir}${qt_frameworks_dir}/*.framework/*.prl] {
                    reinplace "s|/build-${arch}/|/build/|g" ${prlfl}
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
                }

                foreach prlfl [glob -nocomplain ${dir}${qt_frameworks_dir}/*.prl] {
                    reinplace "s|/build-${arch}/|/build/|g" ${prlfl}
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
                }

                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_mkspecs_dir}/modules/qt_lib_bootstrap_private.pri

                reinplace \
                    "s|^set(_qt5_corelib_extra_includes \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang.*\")$|set(_qt5_corelib_extra_includes \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang-32\" \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang\")|" \
                    ${dir}${qt_frameworks_dir}/cmake/Qt5Core/Qt5CoreConfigExtrasMkspecDir.cmake
            }
        }

        post-destroot {
            if {[tbool is_stubport]} {
                return
            }
            if {[file exists ${destroot}${qt_mkspecs_dir}/qmodule.pri]} {
                # delete preprocessor comments surrounding QT_CPU_FEATURES.i386 and QT_CPU_FEATURES.x86_64
                reinplace "/^#ifndef.*$/d" ${destroot}${qt_mkspecs_dir}/qmodule.pri
                reinplace "/^#else.*$/d"   ${destroot}${qt_mkspecs_dir}/qmodule.pri
                reinplace "/^#endif.*$/d"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
            }
        }

        # The file ${prefix}/share/qt5/mkspecs/qconfig.pri is still not properly merged
        # The solution is ???.
    }

    if {${subport} ne "${name}-qtwebengine"} {
        variant harfbuzz description {Use HarfBuzz-NG to do text shaping} {
            # Qt 5.8 prints a warning about AAT support but that appears to be a red herring
            # given that the harfbuzz version in MacPorts is much newer than the version
            # shipped with Qt.
            if {${os.platform} eq "darwin"} {
                depends_lib-append port:harfbuzz
            }
            configure.args-replace \
                -no-harfbuzz       \
                -system-harfbuzz
        }
        default_variants    +harfbuzz

        variant reduce_exports description {configure with --reduce-exports (experimental)} {
            configure.args-append   --reduce-exports
        }
        if {${os.platform} eq "linux"} {
            default_variants        +reduce_exports
        }

        variant tests description {Enable tests} {
            configure.args-replace  {-nomake tests} {-make tests}
        }

        variant examples description "Build examples. This will conflict with port:${name}-examples!" {
            conflicts-append        ${name}-examples
            configure.args-replace  {-nomake examples} {-make examples}
        }

        platform darwin {
            if {${subport} ne "${name}-x11"} {
                variant mariadb55 conflicts mysql56 mysql57 description {use MariaDB v5.5} {}
                variant mysql56 conflicts mariadb55 mysql57 description {use MySQL v5.6} {}
                variant mysql57 conflicts mariadb55 mysql56 description {use MySQL v5.7} {}
                switch_variant mysql56 mysql57 {
                    "mysql56" -
                    "mysql57" {
                        depends_lib-append port:${variant}
                    }
                    default {
                        default_variants +mariadb55
                        depends_lib-append port:mariadb
                    }
                }
            }
        }
    }

    variant debug description {This variant forces a build made with configure.optflags="-O0 -g"} {
        foreach opt {O3 O2 Os} {
            configure.cflags-replace     -${opt} -O0
            configure.cxxflags-replace   -${opt} -O0
            configure.objcflags-replace  -${opt} -O0
            configure.objcxxflags-replace  -${opt} -O0
            configure.ldflags-replace    -${opt} -O0
        }
        if {[string match *clang* ${configure.cxx}]} {
            set debugopts "-g -fno-limit-debug-info"
        } else {
            set debugopts "-g"
        }
        configure.cflags-append     ${debugopts}
        configure.cxxflags-append   ${debugopts}
        configure.objcflags-append  ${debugopts}
        configure.objcxxflags-append  ${debugopts}
        configure.ldflags-append    ${debugopts}
    }

    variant cputuned description {Build using -O3 -march=native for optimal tuning to your CPU} {
        configure.cflags-append     -O3 -march=native
        configure.cxxflags-append   -O3 -march=native
        configure.objcflags-append  -O3 -march=native
        configure.objcxxflags-append  -O3 -march=native
        configure.ldflags-append    -O3 -march=native
    }

    build.env-append                CXX=${configure.cxx} CC=${configure.cc}
}

# link includes and libraries for each actual installed framework
proc proxy_includes_and_libs {} {
    global destroot qt_includes_dir qt_frameworks_dir qt_libs_dir qt_pkg_config_dir version
    # make sure that the target directories exist
    xinstall -m 755 -d ${destroot}${qt_includes_dir}
    xinstall -m 755 -d ${destroot}${qt_libs_dir}
#     ui_info "Exposing Framework headers via ${qt_includes_dir} and creating .dylib stubs for the frameworks"
    ui_info "Exposing Framework headers via ${qt_includes_dir}"
    foreach fixfile [exec find ${destroot}${qt_frameworks_dir} \
                         -name "*.framework" | \
                         sed -e "s@${destroot}@@g"] {

        set tf_full [strsed ${fixfile} {s@\\.framework@@}]
        set tf [strsed ${tf_full} {g@.*\/@@}]

        # link headers into ${qt_includes_dir}, removing directories
        # if they are already there first

        set inc_file ${destroot}${qt_includes_dir}/${tf}
        if {[file exists ${inc_file}]} {
            system "ls -l ${inc_file}"
            ui_msg "*Warning* replacing directory ${inc_file} with a symlink to ${tf_full}.framework/Headers!"
            file delete -force ${inc_file}
        }
        ln -s ${tf_full}.framework/Headers ${inc_file}
        if {[file exists ${destroot}${tf_full}.framework/Headers/${version}/${tf}/private] \
                && ![file exist ${destroot}${tf_full}.framework/Headers/private]} {
            # the symlink will appear also as ${inc_file}/private but since ${inc_file} is itself a symlink
            # that isn't supposed to be pointing anywhere right now we use the correct actual destination in ${destroot}
            ui_debug "ln -s ${tf_full}.framework/Headers/${version}/${tf}/private ${inc_file}/private"
            ln -s ${tf_full}.framework/Headers/${version}/${tf}/private ${destroot}${tf_full}.framework/Headers/private
        }

## This is legacy code from port:qt4-mac which is probably redundant. Keep the code around for a while in the -devel port.
## <snip>
## End link library legacy code
    }

    xinstall -m 755 -d ${destroot}${qt_pkg_config_dir}
    ui_debug "moving the pkg-config files to ${qt_pkg_config_dir}"
    foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir}/pkgconfig *.pc] {
        file rename ${f} ${destroot}${qt_pkg_config_dir}
    }
    xinstall -m 755 -d ${destroot}${qt_libs_dir}/
    ui_debug "moving static libraries and .prl files to ${qt_libs_dir}"
    foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir} *.{a,prl,la}] {
        file rename ${f} ${destroot}${qt_libs_dir}/
    }

    # link back the static libraries to where some Qt components expect them:
    foreach f [exec find ${destroot}${qt_libs_dir} \
                         -name "*.a" | \
                         sed -e "s@${destroot}@@g"] {
        ln -s ${f} ${destroot}${qt_frameworks_dir}/
    }
}

proc move_and_proxy_appbundles {} {
    global destroot prefix qt_apps_dir qt_bins_dir filespath
    platform darwin {
        # Move .apps into the applications_dir, and link each .app's
        # executable back into ${qt_bins_dir}
        set dr_qt_apps_dir ${destroot}${qt_apps_dir}
        set dr_qt_bins_dir ${destroot}${qt_bins_dir}
        xinstall -m 755 -d ${dr_qt_apps_dir}
        foreach app [glob -nocomplain ${dr_qt_bins_dir}/*.app] {
            # remove the leading stuff
            set app [lindex [split ${app} /] end]
            # move the .app
            move ${dr_qt_bins_dir}/${app} ${dr_qt_apps_dir}
            # link it back
            ln -s ${qt_apps_dir}/${app} ${dr_qt_bins_dir}
            # provide a proxy to the app's executable; symlinks won't
            # be accepted by qtchooser if the user has that port installed.
            set appName [strsed ${app} {g@\.app@@}]
            set appProxy [string tolower ${appName}]
            qt5.add_app_wrapper ${appProxy} ${appName}
            # add_app_wrapper installs to ${prefix}/bin; move the wrapper
            file rename ${destroot}${prefix}/bin/${appProxy} ${dr_qt_bins_dir}/${appProxy}
        }
    }
}

if { (${subport} eq ${name}) || (${subport} eq "${name}-x11")
    || (![info exists qtwebkit_is_stub] && (${subport} eq "${name}-qtwebkit")) } {

    post-destroot {
        if {[tbool is_stubport]} {
            return
        }

        # get Qt's version numbers
        set qt_vers [split ${version} "."]
        set qt_major [lindex ${qt_vers} 0]
        set qt_minor [lindex ${qt_vers} 1]
        set qt_patch [lindex ${qt_vers} 2]

        if {${os.platform} eq "darwin"} {

#             if {![info exists qt_cmake_module_dir]} {
#                 # aargh, we're building with mcalhoun's PortGroup :-/
#                 set qt_qmake_module_dir     ${qt_libs_dir}/cmake
#             }
            # move items out of the Frameworks directory that are more appropriate to the lib directory

            proxy_includes_and_libs
            # certain applications might expect to find the following .prl files in ${qt_frameworks_dir}
            foreach fixfile { libQt5OpenGLExtensions_debug.prl libQt5PlatformSupport_debug.prl \
                                libQt5QmlDevTools.prl libQt5UiTools.prl libQt5UiTools_debug.prl } {
                if {[file exists ${destroot}${qt_libs_dir}/${fixfile}]} {
                    ln -s ${qt_libs_dir}/${fixfile} ${destroot}${qt_frameworks_dir}/${fixfile}
                }
            }

            move_and_proxy_appbundles

            # create our own compiler symlinks in qt_bins_dir:
            ln -s [qt_cc] ${destroot}${qt_bins_dir}/clang
            ln -s [qt_cxx] ${destroot}${qt_bins_dir}/clang++
            # edit the build scripts to use those compilers:
            reinplace "s|${build.dir}/qtbase/bin/clang|${qt_bins_dir}/clang|g" ${destroot}${qt_mkspecs_dir}/common/clang.conf
            reinplace "s|${prefix}/bin/clang-mp-.*|${qt_bins_dir}/clang|g" ${destroot}${qt_mkspecs_dir}/qmodule.pri
            reinplace "s|${prefix}/bin/clang\+\+-mp-.*|${qt_bins_dir}/clang\+\+|g" ${destroot}${qt_mkspecs_dir}/qmodule.pri
            notes-append "Qt ${version} has been configured to use the C++ compiler ${qt_bins_dir}/clang++,\
                which is a symlink to [qt_cxx]. Remember to update this link (and its C compiler companion, clang)\
                if ever you upgrade your port:clang installation and remove the current version."
            if {[file exists ${destroot}${qt_mkspecs_dir}/qmodule.pri]} {
                correct_qmodulepri_flags  ${destroot}${qt_mkspecs_dir}/qmodule.pri
                if {![variant_isset debug]} {
                    reinplace "s|-fno-limit-debug-info||g" ${destroot}${qt_mkspecs_dir}/qmodule.pri
                }
            }
            # experimental: don't export the SDK used to build Qt via qdevice.pri
            if {[file exists ${destroot}${qt_mkspecs_dir}/qdevice.pri]} {
                reinplace "s|^!host_build:QMAKE_MAC_SDK = |# !host_build:QMAKE_MAC_SDK = |g" \
                                    ${destroot}${qt_mkspecs_dir}/qdevice.pri
            }
        }
        platform linux {
            if {[file exists ${destroot}${qt_libs_dir}/pkgconfig]
                    && [file type ${destroot}${qt_libs_dir}/pkgconfig] eq "directory"} {
                ui_debug "moving the pkg-config files to ${qt_pkg_config_dir}"
                xinstall -v -m 755 -d ${destroot}${qt_pkg_config_dir}
                foreach f [glob -nocomplain -directory ${destroot}${qt_libs_dir}/pkgconfig *.pc] {
                    file rename ${f} ${destroot}${qt_pkg_config_dir}
                }
                # now delete this entry so that it can be replaced with a symlink later on
                file delete -force ${destroot}${qt_libs_dir}/pkgconfig
            }
        }
        if {[info exists qt_cmake_module_dir]} {
            ui_info "fixing and moving the CMake files into ${qt_cmake_module_dir}"
            if {[file exists ${destroot}${qt_frameworks_dir}/cmake]} {
                set srcdir ${qt_frameworks_dir}
                # replace the *_install_prefix path with the correct path, but "take a detour" through ${qt_dir}
                # as an extra insurance and to show the expected Qt install location in case cmake ever finds
                # a .cmake script that doesn't below to this Qt5 port.
                set sedcmd "s|/../../../../|/../../../${qt_dir_rel}/|g"
            } else {
                set srcdir ${qt_libs_dir}
                set sedcmd "s|/../../../../../|/../../../${qt_dir_rel}/../../|g"
            }
            xinstall -v -m 755 -d ${destroot}${qt_cmake_module_dir}
            foreach d [glob -tails -nocomplain -directory ${destroot}${srcdir}/cmake *] {
                xinstall -m 755 -d ${destroot}${qt_cmake_module_dir}/${d}
                foreach f [glob -nocomplain -directory ${destroot}${srcdir}/cmake/${d} *.cmake] {
                    # ${qt_frameworks_dir} is  ${qt_dir}/Library/Frameworks while
                    # ${qt_libs_dir}       is  ${qt_dir}/lib
                    # unless modified, cmake files will point to a directory that is too high in the directory hierarchy
                    reinplace ${sedcmd} ${f}
                    file rename ${f} ${destroot}${qt_cmake_module_dir}/${d}/
                }
            }
        }
        if {[file exists ${destroot}${qt_qmake_cmd}] } {
            ln -s ${qt_qmake_cmd} ${destroot}/${prefix}/bin/qmake-qt${qt_major}
            ln -s ${qt_moc_cmd} ${destroot}/${prefix}/bin/moc-qt${qt_major}
            ln -s ${qt_uic_cmd} ${destroot}/${prefix}/bin/uic-qt${qt_major}
            ln -s ${qt_lrelease_cmd} ${destroot}/${prefix}/bin/lrelease-qt${qt_major}
        }

        if {${subport} eq "${name}-x11"} {
            file delete -force ${destroot}-tmp
            file rename ${destroot} ${destroot}-tmp
            # now cherry-pick the things we want which aren't yet installed through the main port:
            xinstall -d -m 755 ${destroot}${qt_plugins_dir}/platforminputcontexts
            file rename ${destroot}-tmp/${qt_plugins_dir}/platforminputcontexts/libcomposeplatforminputcontextplugin.dylib ${destroot}${qt_plugins_dir}/platforminputcontexts
            xinstall -d -m 755 ${destroot}${qt_plugins_dir}/platforms
            file rename ${destroot}-tmp/${qt_plugins_dir}/platforms/libqxcb.dylib ${destroot}${qt_plugins_dir}/platforms
            if {[info exists qt_cmake_module_dir]} {
                xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}/Qt5Gui
                foreach cm {QComposePlatformInputContextPlugin QXcbIntegrationPlugin QXcbGlxIntegrationPlugin \
                        QEglFSIntegrationPlugin QEglFSX11IntegrationPlugin QMinimalEglIntegrationPlugin QXcbEglIntegrationPlugin} {
                    set cmf ${destroot}-tmp/${qt_cmake_module_dir}/Qt5Gui/Qt5Gui_${cm}.cmake
                    if {[file exists ${cmf}]} {
                        file rename ${cmf} ${destroot}${qt_cmake_module_dir}/Qt5Gui
                    }
                }
#                 file rename ${destroot}-tmp/${qt_cmake_module_dir}/Qt5Gui/Qt5Gui_QComposePlatformInputContextPlugin.cmake \
#                 xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}/Qt5X11Extras
                file rename ${destroot}-tmp/${qt_cmake_module_dir}/Qt5X11Extras \
                    ${destroot}${qt_cmake_module_dir}/Qt5X11Extras
#                 file rename ${destroot}-tmp/${qt_cmake_module_dir}/Qt5X11Extras/Qt5X11ExtrasConfigVersion.cmake \
#                     ${destroot}${qt_cmake_module_dir}/Qt5X11Extras
            }
            if {[file exists ${destroot}-tmp/${qt_pkg_config_dir}/Qt5X11Extras.pc]} {
                xinstall -d -m 755 ${destroot}${qt_pkg_config_dir}
                file rename ${destroot}-tmp/${qt_pkg_config_dir}/Qt5X11Extras.pc ${destroot}${qt_pkg_config_dir}
            }
            xinstall -d -m 755 ${destroot}${qt_frameworks_dir}
            xinstall -d -m 755 ${destroot}${qt_libs_dir}
            xinstall -m 755 -d ${destroot}${qt_includes_dir}
            file rename ${destroot}-tmp/${qt_frameworks_dir}/QtX11Extras.framework ${destroot}${qt_frameworks_dir}
            foreach lib {GlxSupport LinuxAccessibilitySupport EglSupport EglFSDeviceIntegration} {
                # this loop ignore non-existent items
                foreach f [glob -nocomplain ${destroot}-tmp/${qt_libs_dir}/libQt5${lib}*] {
                    file rename ${f} ${destroot}${qt_libs_dir}
                    ln -s ${qt_libs_dir}/[file tail ${f}] ${destroot}${qt_frameworks_dir}
                }
                foreach f [glob -nocomplain ${destroot}-tmp/${qt_includes_dir}/Qt${lib}*] {
                    file rename ${f} ${destroot}${qt_includes_dir}
                }
            }
            xinstall -d -m 755 ${destroot}${qt_mkspecs_dir}/modules
            file rename ${destroot}-tmp/${qt_mkspecs_dir}/modules/qt_lib_x11extras.pri ${destroot}/${qt_mkspecs_dir}/modules
            file rename ${destroot}-tmp/${qt_mkspecs_dir}/modules/qt_lib_x11extras_private.pri ${destroot}/${qt_mkspecs_dir}/modules
            file delete -force ${destroot}-tmp
        } else {
            if {${subport} eq "${name}"} {
                xinstall -m 755 ${filespath}/qtlogging.ini ${destroot}${qt_data_dir}/qtlogging.ini
                # set up hardcoded links to places where the mainstream port:qt5-* install things
                ui_info "set up things for compatibility with the mainstream port:qt5"
                # these should be done by the main port only
                ln -s ${qt_docs_dir} ${destroot}${qt_dir}/doc
                ln -s ${qt_includes_dir} ${destroot}${qt_dir}/include
                ln -s ${qt_pkg_config_dir} ${destroot}${qt_dir}/lib/pkgconfig
                ln -s ${qt_mkspecs_dir} ${destroot}${qt_dir}/mkspecs
                ln -s ${qt_plugins_dir} ${destroot}${qt_dir}/plugins
                foreach d {imports phrasebooks qml translations} {
                    ln -s ${qt_data_dir}/${d} ${destroot}${qt_dir}/${d}
                }
            }
            # these are relevant for all other subports installing frameworks
            if {[file exists ${destroot}${qt_frameworks_dir}]} {
                foreach l [exec find ${destroot}${qt_frameworks_dir} \
                                 -name "*.framework" | \
                                 sed -e "s@${destroot}@@g"] {
                     ln -s ${l} ${destroot}${qt_dir}/lib/
                }
            }
        }
    }
}

pre-configure {
    setQt53Compilers
    set env(CC)         ${configure.cc}
    set env(OBJC)       ${configure.objc}
    set env(CXX)        ${configure.cxx}
    set env(OBJCXX)     ${configure.objcxx}
}

proc correct_qmodulepri_flags {qmopri} {
    # if the user used configure.optflags="-something" make sure that gets added to compiler and linker
    # options qmake determines, rather than replacing all of those
    reinplace "s|QMAKE_CFLAGS = |QMAKE_CFLAGS \+= |g"  ${qmopri}
    reinplace "s|QMAKE_CXXFLAGS = |QMAKE_CXXFLAGS \+= |g"  ${qmopri}
    reinplace "s|QMAKE_LFLAGS = |QMAKE_LFLAGS \+= |g"  ${qmopri}
}

post-configure {
    if {[file exists ${build.dir}/qtbase/mkspecs/qmodule.pri]} {
        correct_qmodulepri_flags ${build.dir}/qtbase/mkspecs/qmodule.pri
    }
    if {![catch {set fd [open "${workpath}/.macports.${subport}.configure.cmd" "w"]} err]} {
        foreach var [array names ::env] {
            puts ${fd} "${var}=$::env(${var})"
        }
        puts ${fd} "[join [lrange [split ${configure.env} " "] 0 end] "\n"]\n"
        puts ${fd} "cd ${worksrcpath}"
        if {[info exists configure.post_args]} {
            puts ${fd} "${configure.cmd} ${configure.pre_args} ${configure.args} ${configure.post_args}"
        } else {
            puts ${fd} "${configure.cmd} ${configure.pre_args} ${configure.args}"
        }
    } else {
        if {[info exists fd]} {
            unset fd
        }
    }
    if {[variant_exists LTO] && [variant_isset LTO]} {
        if {${subport} eq "${name}-qtwebengine"} {
            system -W ${build.dir} "${qt_qmake_cmd} -config ltcg ../${worksrcdir}/qtwebengine"
            if {[info exists fd]} {
                puts ${fd} "cd ${build.dir} ; ${qt_qmake_cmd} -config ltcg ../${worksrcdir}/qtwebengine"
            }
        }
        # it's crucial that the same command is used for linking as for compiling!
        if {[file exists ${build.dir}/qtbase/mkspecs/qmodule.pri]} {
            set qfp [open ${build.dir}/qtbase/mkspecs/qmodule.pri a]
            puts $qfp "QMAKE_LINK         = ${configure.cxx}"
            puts $qfp "QMAKE_LINK_SHLIB   = ${configure.cxx}"
            puts $qfp "QMAKE_LINK_C       = ${configure.cxx}"
            puts $qfp "QMAKE_LINK_C_SHLIB = ${configure.cxx}"
            close $qfp
        }
    }
    if {[info exists fd]} {
        if {[file exists "${configure.dir}/.qmake.cache"]} {
            puts ${fd} "## ${configure.dir}/.qmake.cache:"
            close ${fd}
            system "cat \"${configure.dir}/.qmake.cache\" >> \"${workpath}/.macports.${subport}.configure.cmd\""
        } else {
            close ${fd}
        }
        unset fd
    }
}

pre-build {
    setQt53Compilers
    set env(CC)             ${configure.cc}
    set env(OBJC)           ${configure.objc}
    set env(CXX)            ${configure.cxx}
    set env(OBJCXX)         ${configure.objcxx}
}

set webcorestlib ${build.dir}/Source/WebCore/release/libWebCore.a
set compress_webcorestlib   no
pre-destroot {
    setQt53Compilers
    set env(CC)             ${configure.cc}
    set env(OBJC)           ${configure.objc}
    set env(CXX)            ${configure.cxx}
    set env(OBJCXX)         ${configure.objcxx}
    if {[file exists ${webcorestlib}.bz2]
            && ![file exists ${webcorestlib}]} {
        # others who like me keep the Qt5 build.dir around may appreciate the possibility to
        # reduce its size by compressing libWebCore.a (>3Gb -> ~600Mb)
        ui_info "--->  Decompressing libWebCore.a.bz2"
        system "bunzip2 -v ${webcorestlib}.bz2"
        set compress_webcorestlib yes
    }
}

subport ${name}-x11 {
    PortGroup active_variants 1.1
    if {${os.platform} eq "darwin"} {
        depends_lib-append  port:xorg-xcb-util port:xorg-xcb-util-wm port:xorg-xcb-util-image \
                            port:xorg-xcb-util-keysyms port:xorg-xorgproto \
                            port:libxkbcommon \
                            port:xrender port:mesa
        depends_run         ${qt5_dependency}
        description         ${description} - the xcb (X11) platform plugin
        long_description    ${long_description} This port installs just the xcb \
                            platform plugin, which allows rendering to (remote) X11 servers. \
                            It is useless without port:qt5-kde or port:qt5-kde-devel.

        # extract only the qtbase component
        extract_components-append \
                            ${distname}/qtbase ${distname}/qtx11extras ${distname}/configure ${distname}/qt.pro
    } else {
        ui_msg "x11 subport unsupported on ${os.platform}"
        description         unsupported on ${os.platform}
        long_description    unsupported on ${os.platform}
    }
}

subport ${name}-zz-docs {
    description         ${description} - the documentation
    long_description    ${long_description}. This subport installs the documentation \
                        and has -zz- in its name to ensure it's the last one to be \
                        processed during upgrading an existing install, so it doesn't \
                        have to rebuild anything but the documentation.\n See the port notes \
                        about Assistant stability after upgrades.

    variant html description {Install the HTML documentation in addition to the Qt help (.qch) files (obsolete variant for default behaviour)} {}
    variant qch conflicts html description {Install only the Qt help (.qch) files} {}

    depends_build-append \
        path:${qt_bins_dir}/qdoc:${name}
    depends_run-append \
        path:${qt_bins_dir}/assistant:${name}-assistant

    supported_archs   noarch

    build.target      docs
    if {[variant_isset qch]} {
        destroot.target     install_qch_docs
    } else {
        default_variants    +html
        destroot.target     install_docs
    }

    patchfiles-append   ${PF532}patch-configure-docs-no-build-qmake.diff

    default configure.dir       {${workpath}/build}
    default build.dir           {${workpath}/build}
    post-extract {
        # we'll be doing a doc build as if it were part of a full Qt build,
        # but building only the "doc" target.
        # ensure that the required binaries are available where they'd be
        # when doing a full build, as symlinks to the installed binaries.
        # This saves us from having to rebuild them.
        #
        xinstall -d -m 755 ${build.dir}/qttools/bin/
        ln -s ${qt_bins_dir}/qhelpgenerator ${build.dir}/qttools/bin/

        # For the most part, generated makefiles use ${qt_bins_dir}/qdoc.
        # There are a couple of places that look in ${worksrcpath}/qtbase/src/tools/qdoc/.
        # Also put a symlink to qmake where the configure script expects it
        xinstall -d -m 755 ${build.dir}/qtbase/bin/
        ln -s ${qt_bins_dir}/qmake ${build.dir}/qtbase/bin
        ln -s ${qt_bins_dir}/qdoc ${build.dir}/qtbase/src/tools/qdoc/
        ln -s ${qt_bins_dir}/qdoc ${build.dir}/qtbase/bin

        # Without this file, the makefile ${worksrcpath}/qtwebkit/Source/WebCore/Makefile.WebCore.Target
        #    keeps generating itself over and over again.
        # This file is only created when the library is being built, however.
        if {[file exists ${worksrcpath}/qtwebkit]} {
            xinstall -d -m 755 ${worksrcpath}/qtwebkit/Source/WebCore/generated
            touch ${worksrcpath}/qtwebkit/Source/WebCore/generated/InspectorBackendCommands.qrc
        }
    }
    post-destroot {
        if {[variant_isset qch]} {
            xinstall -m 755 -d ${destroot}${prefix}/share/doc/qch
            system "echo \"Put or symlink your own Qt help files here, but beware there's a limit\" \
                >  ${destroot}${prefix}/share/doc/qch/README.txt"
# not a good idea?
#             foreach d [glob -nocomplain ${destroot}${qt_docs_dir}/*.qch] {
#                 set target [string map [list ${destroot} ""] ${d}]
#                 ln -s ${target} ${destroot}${prefix}/share/doc/qch/
#             }
        }
    }
    notes-append \n\
        "Qt's Assistant has a tendency to become unstable after upgrading. This can be prevented in 2 ways:\n\
        1) remove all documentation entries for the old Qt5 version in the Preferences/Documentation page \
        *before* doing the upgrade.\n\
        2) remote ~/Library/Application Support/QtProject/Assistant in case of post-upgrade instability."
}

post-build {
    if {[variant_exists strip] && [variant_isset strip]} {
        ui_msg "--->  Stripping build"
        catch {system -W ${build.dir} \
            "find . -name \"*.\[ao\]\" -o -name \"*.dylib\" -o -name \"*.so\" | xargs strip -SX"}
    }
}

# See http://qt-project.org/doc/qt-5/sql-driver.html for info on building SQL Database Drivers

if {[info exists qtwebkit_is_stub]} {
    # add this one to the list of stub ports
    set qt5.kde_stubports [lappend qt5.kde_stubports qtwebkit]
}

subport ${name}-qttranslations {
    use_PortGroup           qmake5 1.0

    description             Qt5 translations
    long_description        Qt5 translations.
    conflicts-append        [qt5_port_conflicts qttranslations]


    extract_components-append \
                            ${distname}/qttranslations
    depends_lib-append      ${qt5_dependency}
    default configure.dir   {${workpath}/build}
    configure.pre_args-append \
                            ../${worksrcdir}/qttranslations/qttranslations.pro
    default build.dir       {${workpath}/build}
}

subport ${name}-sqlite3-plugin {
    replaced_by     ${name}-sqlite-plugin
}
if {${subport} eq "${name}-sqlite3-plugin"} {
    replaced_by     ${name}-sqlite-plugin
    PortGroup       obsolete 1.0
}

# qtwebkit is a stubport before Qt 5.6.0
set qt5.kde_stubports [lappend qt5.kde_stubports qtwebkit assistant]

foreach sp ${qt5.kde_stubports} {
    subport ${name}-${sp} {
        set is_stubport     yes
        conflicts-append    [qt5_port_conflicts ${sp}]
        archive_sites
        distfiles
        depends_extract
        depends_build
        depends_run
        depends_lib         ${qt5_dependency}
        switch ${sp} {
            "docs" {
                variant html description {passed on to ${name}-zz-docs} {}
                variant qch conflicts html description {passed on to ${name}-zz-docs} {}
                description     stub\; provided by port:${name}-zz-docs
                long_description \
                                this is a stub for the Qt5 documentation, provided by port:${name}-zz-docs
                depends_lib     port:${name}-zz-docs
                depends_run     port:${name}-zz-docs
                replaced_by     port:${name}-zz-docs
            }
            "qtwebkit-examples" {
                description     stub\; part of port:${name}-examples
                long_description \
                                this is a stub for a subport that's included in port:${name}-examples
                depends_run     port:${name}-examples
            }
            "qtenginio" {
                description     ${subport} was deprecated and removed
                long_description \
                                ${description}
                if {[vercmp ${version} 5.7.0] >= 0} {
                    pre-fetch {
                        ui_error "QtEngioIO was deprecated and removed; this port no longer exists"
                        return -code error "Obsolete port"
                    }
                }
            }
            "qtquick1" {
                description     ${subport} is deprecated.
                long_description \
                                ${description}
                replaced_by     ${name}-qtdeclarative
                PortGroup       obsolete 1.0
            }
            "qttools" {
                description     stub\; part of port:${name}
                long_description \
                                this is a stub subport for Qt5's ${sp} which is included in port:${name}
                depends_run-append \
                                path:${qt_bins_dir}/assistant:${name}-assistant
                # we're a stub but we still should pass through relevant variants
                variant qtwebkit description {enable QtWebKit in the Assistant} {}
            }
            "mysql-plugin" {
                PortGroup active_variants 1.1
                description     stub\; part of port:${name}
                long_description \
                                this is a stub subport for Qt5's ${sp} which is included in port:${name}
                # we're a stub but we still should pass through relevant variants
                variant mariadb55 conflicts mysql56 mysql57 description {use MariaDB v5.5} {}
                variant mysql56 conflicts mariadb55 mysql57 description {use MySQL v5.6} {}
                variant mysql57 conflicts mariadb55 mysql56 description {use MySQL v5.7} {}
                switch_variant mariadb55 mysql56 mysql57 {
                    "mysql56" -
                    "mysql57" {
                        global qt5_dependency
                        require_active_variants ${qt5_dependency} ${variant}
                    }
                    default {
                        global qt5_dependency
                        default_variants +mariadb55
                        require_active_variants ${qt5_dependency} mariadb55
                    }
                }
            }
            default {
                description     stub\; part of port:${name}
                long_description \
                                this is a stub subport for Qt5's ${sp} component which is included in port:${name}
            }
        }
        use_configure       no
        supported_archs     noarch
        build {}
        destroot {
            xinstall -d -m 755 ${destroot}${qt_docs_dir}/installed-stubports
            system "touch ${destroot}${qt_docs_dir}/installed-stubports/${subport}"
        }
    }
    if {${subport} eq "${name}"} {
        # we could be more specific but we'll just record all the port:qt5 subports as conflicts:
        conflicts-append    qt5-${sp}
    }
}

if {${subport} eq "${name}-psql84-plugin"} {
    replaced_by     ${name}-psql-plugin
    PortGroup       obsolete 1.0
}
subport ${name}-psql84-plugin {}
subport ${name}-psql-plugin {
    use_PortGroup   qmake5 1.0

    depends_lib-append \
                    ${qt5_dependency}
    if {${os.platform} eq "darwin"} {
        # define the postgresql variants
        set pqversions {84 93 94 95 96}
        set pqvariant ""
        foreach pqv ${pqversions} {
            set conflist ""
            foreach v ${pqversions} {
                if {${v} ne ${pqv}} {
                    set conflist "${conflist} postgresql${v}"
                }
            }
            variant postgresql${pqv} conflicts ${conflist} description "Use postgresql${pqv}" {}
            if {[variant_isset postgresql${pqv}]} {
                set pqvariant "postgresql${pqv}"
            }
        }
        # now ensure that one is set, and that each adds the appropriate build settings
        if {${pqvariant} eq ""} {
            set pqvariant "postgresql95"
            default_variants +${pqvariant}
        }
        foreach pqv ${pqversions} {
            if {[variant_isset postgresql${pqv}]} {
                set pqvariant "postgresql${pqv}"
                depends_lib-append port:postgresql${pqv}
                configure.args-append \
                            "INCLUDEPATH+=${prefix}/include/postgresql${pqv}" \
                            "LIBS+=\"-L${prefix}/lib/postgresql${pqv} -lpq\""
            }
        }
    }
    platform linux {
        configure.args-append \
                            "INCLUDEPATH+=/usr/include/postgresql" \
                            "LIBS+=-lpq"
    }

    # extract only the qtbase component
    extract_components-append \
                            ${distname}/qtbase
    post-extract {
        file delete -force ${worksrcpath}/qtbase/mkspecs
        file rename ${worksrcpath}/qtbase/.qmake.conf ${worksrcpath}/qtbase/src/plugins/sqldrivers/psql/.qmake.conf
    }
    # for single architecture, easier to use
    #    worksrcdir ${worksrcdir}/qtbase/src/plugins/sqldrivers/psql,
    #    but doesn't work for universal build
    configure.dir           ${worksrcpath}/qtbase/src/plugins/sqldrivers/psql
    build.dir               ${configure.dir}
    destroot.dir            ${configure.dir}

    post-destroot {
        if {${os.platform} eq "darwin" && [info exists qt_cmake_module_dir]} {
            xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}
            move ${destroot}${qt_frameworks_dir}/cmake/Qt5Sql ${destroot}${qt_cmake_module_dir}
        }
    }
}

subport ${name}-examples {
    use_PortGroup               qmake5 1.0

    description                 ${description} - the examples
    long_description            ${long_description} The examples. NB: this port will conflict \
                                with port:${name}'s +examples variant!
    universal_variant           no

    # extract only the examples
    extract_components-append   ${distname}/qtbase/examples/            \
                                ${distname}/qtconnectivity/examples/    \
                                ${distname}/qtdeclarative/examples/     \
                                ${distname}/qtlocation/examples/        \
                                ${distname}/qtmacextras/examples/       \
                                ${distname}/qtmultimedia/examples/      \
                                ${distname}/qtquickcontrols/examples/   \
                                ${distname}/qtscript/examples/          \
                                ${distname}/qtsensors/examples/         \
                                ${distname}/qtsvg/examples/             \
                                ${distname}/qttools/examples/           \
                                ${distname}/qtxmlpatterns/examples/
    extract_components-append   ${distname}/qtquick1/examples/          \
                                ${distname}/qtwebkit-examples/examples/
    depends_lib-append          ${qt5_dependency}

    post-extract {
        copy -force ${filespath}/${PF532}/all-examples.pro ${workpath}/${worksrcdir}/all-examples.pro
        xinstall -m 755 -d ${workpath}/build
    }

    patchfiles-append           ${PF532}remove_icon_from_example.patch \
                                ${PF532}remove_google_adsense.patch

    variant debug description {This variant builds with more debugging info} {
        if {[string match *clang* ${configure.cxx}]} {
            set debugopts "-g -fno-limit-debug-info"
        } else {
            set debugopts "-g"
        }
        configure.post_args-append "QMAKE_CFLAGS+=\"${debugopts}\""
        configure.post_args-append "QMAKE_CXXFLAGS+=\"${debugopts}\""
    }

    default configure.dir       {${workpath}/build}
    configure.pre_args-append   -r ../${worksrcdir}/all-examples.pro
    default build.dir           {${workpath}/build}
    build.target
    post-destroot {
        if {${os.platform} eq "darwin"} {
            # this may be a bug since Qt 5.4.1: libgruesensor.1.dylib must be accessed through a complete path but
            # isn't stored like that in 2 dependents.
            system "install_name_tool -change libgruesensor.1.dylib ${qt_examples_dir}/sensors/grue/libgruesensor.1.dylib \
                ${destroot}${qt_examples_dir}/sensors/grue/Grue/libdeclarative_grue.dylib"
            system "install_name_tool -change libgruesensor.1.dylib ${qt_examples_dir}/sensors/grue/libgruesensor.1.dylib \
                ${destroot}${qt_examples_dir}/sensors/grue/sensors/libqtsensors_grue.dylib"
        }
    }
}

subport ${name}-settingseditor {
    use_PortGroup               qmake5 1.0
#     qt5.depends_component qtbase qtsvg qtwebkit

    description                 ${description} - the settings editor from the examples
    long_description            The settings editor from the examples of port:${name}. \
                                It can edit both native (binary) .plists and cross-platform .ini \
                                files.
    universal_variant           no
    conflicts-append            [qt5_port_conflicts settingseditor]

    # extract only the examples
    extract_components-append   ${distname}/qtbase/examples/widgets/tools/settingseditor
    depends_lib-append          ${qt5_dependency}

    default configure.dir       {${workpath}/build}
    configure.pre_args-append   ../${worksrcdir}/qtbase/examples/widgets/tools/settingseditor/settingseditor.pro
    default build.dir           {${workpath}/build}
    post-destroot {
        if {${os.platform} eq "darwin"} {
            file rename ${destroot}${qt_examples_dir}/widgets/tools/settingseditor/settingseditor.app \
                ${destroot}${qt_apps_dir}
        } else {
            file rename ${destroot}${qt_examples_dir}/widgets/tools/settingseditor/settingseditor \
                ${destroot}${qt_apps_dir}
        }
    }
}

post-destroot {
    # store the configuration information. NB: this could have gone in one of the above post-destroot
    # blocks where we know that ${build.dir}/qtbase is available ...
    if {[file exists ${build.dir}/qtbase]} {
        xinstall -m 755 -d ${destroot}${qt_docs_dir}/${subport}
        foreach l [glob -nocomplain ${build.dir}/qtbase/config.s* ${build.dir}/config.s*] {
            set fn [file tail ${l}]
            xinstall -m 644 ${l} ${destroot}${qt_docs_dir}/${subport}/${fn}
            xinstall -m 644 ${l} ${destroot}${qt_docs_dir}/${subport}/${fn}
        }
    }
    if {${compress_webcorestlib}} {
        ui_info "--->  Re-compressing libWebCore.a"
        system "bzip2 -9v ${webcorestlib} &"
    }

    xinstall -m 755 -d ${destroot}${qt_install_registry}
    system "echo ${version} > ${destroot}${qt_install_registry}/${subport}"
    if {${subport} eq "${name}"} {
        xinstall -m 755 -d ${destroot}${qt_install_registry}/family
        ln -s ../${subport}  ${destroot}${qt_install_registry}/family/${basename}
    }
}

post-activate {
    set pgroup_files {"qt5-1.0.tcl" "qt5-kde-1.0.tcl" "qt5-stock-1.0.tcl.tcl" "qmake5-1.0.tcl" "qmake5-kde-1.0.tcl"}
    ui_msg "Don't forget to copy the following file(s) into your main port tree's _resources directory:"
    foreach pg ${pgroup_files} {
        ui_msg "\t${qt5::currentportgroupdir}/${pg}"
    }
    ui_msg "(That's probably ${prefix}/var/macports/sources/rsync.macports.org/release/ports/_resources/port1.0/group"
    ui_msg "or ${prefix}/var/macports/sources/rsync.macports.org/release/tarballs/ports/_resources/port1.0/group/"
    ui_msg "or ${prefix}/var/macports/sources/svn.macports.org/trunk/dports/_resources/port1.0/group)"
}

livecheck.type      regex
livecheck.url       http://download.qt.io/archive/qt/${branch}/
livecheck.regex     (\\d+(\\.\\d+)+)
