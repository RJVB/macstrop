diff --git a/src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp b/src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp
index 6bf9399d23f460b5814ea17a645c61531feb89bf..41c1f4f8ae680de3ca02f92e4921db26e074dfa8 100644
--- a/src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp
+++ b/src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp
@@ -1104,7 +1104,8 @@ void QGL2PaintEngineExPrivate::resetClipIfNeeded()
 
 bool QGL2PaintEngineExPrivate::prepareForDraw(bool srcPixelsAreOpaque)
 {
-    if (brushTextureDirty && !imageDrawingMode)
+    if (brushTextureDirty
+        && (!imageDrawingMode || imageDrawingMode == TextDrawingMode || imageDrawingMode == BrushDrawingMode))
         updateBrushTexture();
 
     if (compositionModeDirty)
@@ -1129,7 +1130,8 @@ bool QGL2PaintEngineExPrivate::prepareForDraw(bool srcPixelsAreOpaque)
     } else {
         opacityMode = stateHasOpacity ? QGLEngineShaderManager::UniformOpacity
                                       : QGLEngineShaderManager::NoOpacity;
-        if (stateHasOpacity && !imageDrawingMode) {
+        if (stateHasOpacity && !imageDrawingMode
+            && imageDrawingMode != ImageDrawingMode && imageDrawingMode != ImageArrayDrawingMode) {
             // Using a brush
             bool brushIsPattern = (currentBrush.style() >= Qt::Dense1Pattern) &&
                                   (currentBrush.style() <= Qt::DiagCrossPattern);
@@ -1149,7 +1151,8 @@ bool QGL2PaintEngineExPrivate::prepareForDraw(bool srcPixelsAreOpaque)
         matrixUniformDirty = true;
     }
 
-    if (brushUniformsDirty && !imageDrawingMode)
+    if (brushUniformsDirty
+        && (!imageDrawingMode || imageDrawingMode == TextDrawingMode || imageDrawingMode == BrushDrawingMode))
         updateBrushUniforms();
 
     if (opacityMode == QGLEngineShaderManager::UniformOpacity && opacityUniformDirty) {
@@ -1641,7 +1644,10 @@ void QGL2PaintEngineExPrivate::drawCachedGlyphs(QFontEngineGlyphCache::Type glyp
     if (cache->width() == 0 || cache->height() == 0)
         return;
 
-    transferMode(TextDrawingMode);
+    if (glyphType == QFontEngineGlyphCache::Raster_ARGB)
+        transferMode(ImageArrayDrawingMode);
+    else
+        transferMode(TextDrawingMode);
 
     int margin = cache->glyphMargin();
 
@@ -1737,8 +1743,10 @@ void QGL2PaintEngineExPrivate::drawCachedGlyphs(QFontEngineGlyphCache::Type glyp
 #endif
     }
 
-    setVertexAttributePointer(QT_VERTEX_COORDS_ATTR, (GLfloat*)vertexCoordinates->data());
-    setVertexAttributePointer(QT_TEXTURE_COORDS_ATTR, (GLfloat*)textureCoordinates->data());
+    if (glyphType != QFontEngineGlyphCache::Raster_ARGB || recreateVertexArrays) {
+        setVertexAttributePointer(QT_VERTEX_COORDS_ATTR, (GLfloat*)vertexCoordinates->data());
+        setVertexAttributePointer(QT_TEXTURE_COORDS_ATTR, (GLfloat*)textureCoordinates->data());
+    }
 
     if (!snapToPixelGrid) {
         snapToPixelGrid = true;
@@ -1852,6 +1860,11 @@ void QGL2PaintEngineExPrivate::drawCachedGlyphs(QFontEngineGlyphCache::Type glyp
             glBlendFunc(GL_ONE, GL_ONE);
         }
         compositionModeDirty = true;
+    } else if (glyphType == QFontEngineGlyphCache::Raster_ARGB) {
+        currentBrush = noBrush;
+        shaderManager->setSrcPixelType(QGLEngineShaderManager::ImageSrc);
+        if (prepareForDraw(true))
+            shaderManager->currentProgram()->setUniformValue(location(QGLEngineShaderManager::ImageTexture), QT_IMAGE_TEXTURE_UNIT);
     } else {
         // Greyscale/mono glyphs
 
@@ -1862,7 +1875,11 @@ void QGL2PaintEngineExPrivate::drawCachedGlyphs(QFontEngineGlyphCache::Type glyp
     QGLTextureGlyphCache::FilterMode filterMode = (s->matrix.type() > QTransform::TxTranslate)?QGLTextureGlyphCache::Linear:QGLTextureGlyphCache::Nearest;
     if (lastMaskTextureUsed != cache->texture() || cache->filterMode() != filterMode) {
 
-        glActiveTexture(GL_TEXTURE0 + QT_MASK_TEXTURE_UNIT);
+        if (glyphType == QFontEngineGlyphCache::Raster_ARGB)
+            glActiveTexture(GL_TEXTURE0 + QT_IMAGE_TEXTURE_UNIT);
+        else
+            glActiveTexture(GL_TEXTURE0 + QT_MASK_TEXTURE_UNIT);
+
         if (lastMaskTextureUsed != cache->texture()) {
             glBindTexture(GL_TEXTURE_2D, cache->texture());
             lastMaskTextureUsed = cache->texture();
@@ -2073,7 +2090,8 @@ void QGL2PaintEngineExPrivate::drawPixmapFragments(const QRectF *targetRects, co
             data[i].y = 1 - data[i].y;
     }
 
-    transferMode(ImageArrayDrawingMode);
+//     transferMode(ImageArrayDrawingMode);
+    transferMode(ImageArrayWithOpacityDrawingMode);
 
     bool isBitmap = pixmap.isQBitmap();
     bool isOpaque = !isBitmap && (!pixmap.hasAlpha() || (hints & QPainter::OpaqueHint));
diff --git a/src/opengl/gl2paintengineex/qtextureglyphcache_gl.cpp b/src/opengl/gl2paintengineex/qtextureglyphcache_gl.cpp
index 75a67e87cc5d8643ebc3b54ebbd91f9343e308ca..8897448faa2559ca1f3db17c1a0fcd9925f96421 100644
--- a/src/opengl/gl2paintengineex/qtextureglyphcache_gl.cpp
+++ b/src/opengl/gl2paintengineex/qtextureglyphcache_gl.cpp
@@ -127,7 +127,7 @@ void QGLTextureGlyphCache::createTextureData(int width, int height)
     glyphTexture->m_width = width;
     glyphTexture->m_height = height;
 
-    if (m_type == QFontEngineGlyphCache::Raster_RGBMask) {
+    if (m_type == QFontEngineGlyphCache::Raster_RGBMask || m_type == QFontEngineGlyphCache::Raster_ARGB) {
         QVarLengthArray<uchar> data(width * height * 4);
         for (int i = 0; i < data.size(); ++i)
             data[i] = 0;
@@ -311,23 +311,29 @@ void QGLTextureGlyphCache::fillTexture(const Coord &c, glyph_t glyph, QFixed sub
             for (int x = 0; x < maskWidth; ++x)
                 src[x] = -src[x]; // convert 0 and 1 into 0 and 255
         }
-    } else if (mask.format() == QImage::Format_RGB32) {
-        // Make the alpha component equal to the average of the RGB values.
-        // This is needed when drawing sub-pixel antialiased text on translucent targets.
-        for (int y = 0; y < maskHeight; ++y) {
-            quint32 *src = (quint32 *) mask.scanLine(y);
-            for (int x = 0; x < maskWidth; ++x) {
-                uchar r = src[x] >> 16;
-                uchar g = src[x] >> 8;
-                uchar b = src[x];
-                quint32 avg = (quint32(r) + quint32(g) + quint32(b) + 1) / 3; // "+1" for rounding.
-                src[x] = (src[x] & 0x00ffffff) | (avg << 24);
+    } else if (mask.depth() == 32) {
+        if (mask.format() == QImage::Format_RGB32) {
+            // We need to make the alpha component equal to the average of the RGB values.
+            // This is needed when drawing sub-pixel antialiased text on translucent targets.
+            for (int y = 0; y < maskHeight; ++y) {
+                quint32 *src = (quint32 *) mask.scanLine(y);
+                for (int x = 0; x < maskWidth; ++x) {
+                    uchar r = src[x] >> 16;
+                    uchar g = src[x] >> 8;
+                    uchar b = src[x];
+                    quint32 avg;
+                    if (mask.format() == QImage::Format_RGB32)
+                        avg = (quint32(r) + quint32(g) + quint32(b) + 1) / 3; // "+1" for rounding.
+                    else // Format_ARGB_Premultiplied
+                        avg = src[x] >> 24;
+                    src[x] = (src[x] & 0x00ffffff) | (avg << 24);
+                }
             }
         }
     }
 
     glBindTexture(GL_TEXTURE_2D, glyphTexture->m_texture);
-    if (mask.format() == QImage::Format_RGB32) {
+    if (mask.depth() == 32) {
         glTexSubImage2D(GL_TEXTURE_2D, 0, c.x, c.y, maskWidth, maskHeight, GL_BGRA, GL_UNSIGNED_BYTE, mask.bits());
     } else {
         // glTexSubImage2D() might cause some garbage to appear in the texture if the mask width is
diff --git a/src/gui/painting/qpaintengine_raster.cpp b/src/gui/painting/qpaintengine_raster.cpp
index 78f899cc94571854c44a12a5860e58f9e47d2096..e6ce1c4ff925c7494524518874b415912be7067a 100644
--- a/src/gui/painting/qpaintengine_raster.cpp
+++ b/src/gui/painting/qpaintengine_raster.cpp
@@ -2909,7 +2909,20 @@ bool QRasterPaintEngine::drawCachedGlyphs(int numGlyphs, const glyph_t *glyphs,
             //        x, y,
             //        positions[i].x.toInt(), positions[i].y.toInt());
 
-            alphaPenBlt(bits + ((c.x << leftShift) >> rightShift) + c.y * bpl, bpl, depth, x, y, c.w, c.h);
+//             alphaPenBlt(bits + ((c.x << leftShift) >> rightShift) + c.y * bpl, bpl, depth, x, y, c.w, c.h);
+            const uchar *glyphBits = bits + ((c.x << leftShift) >> rightShift) + c.y * bpl;
+
+            if (glyphType == QFontEngineGlyphCache::Raster_ARGB) {
+                // The current state transform has already been applied to the positions,
+                // so we prevent drawImage() from re-applying the transform by clearing
+                // the state for the duration of the call.
+                QTransform originalTransform = s->matrix;
+                s->matrix = QTransform();
+                drawImage(QPoint(x, y), QImage(glyphBits, c.w, c.h, bpl, image.format()));
+                s->matrix = originalTransform;
+            } else {
+                alphaPenBlt(glyphBits, bpl, depth, x, y, c.w, c.h);
+            }
         }
     }
     return true;
diff --git a/src/gui/painting/qtextureglyphcache.cpp b/src/gui/painting/qtextureglyphcache.cpp
index 883433a216addaba28e5ab7d6a774e2bb18c98e7..533ad8e3be59e394e73fec8bad19294741554c4b 100644
--- a/src/gui/painting/qtextureglyphcache.cpp
+++ b/src/gui/painting/qtextureglyphcache.cpp
@@ -151,6 +151,7 @@ bool QTextureGlyphCache::populate(QFontEngine *fontEngine, int numGlyphs, const
     switch (m_type) {
     case Raster_A8: format = QFontEngine::Format_A8; break;
     case Raster_RGBMask: format = QFontEngine::Format_A32; break;
+    case Raster_ARGB: format = QFontEngine::Format_ARGB; break;
     default: format = QFontEngine::Format_Mono; break;
     }
 
@@ -329,6 +330,8 @@ QImage QTextureGlyphCache::textureMapForGlyph(glyph_t g, QFixed subPixelPosition
 #endif
     if (m_type == QFontEngineGlyphCache::Raster_RGBMask)
         return m_current_fontengine->alphaRGBMapForGlyph(g, subPixelPosition, glyphMargin(), m_transform);
+    else if (m_type == QFontEngineGlyphCache::Raster_ARGB)
+        return m_current_fontengine->bitmapForGlyph(g, subPixelPosition, m_transform);
     else
         return m_current_fontengine->alphaMapForGlyph(g, subPixelPosition, m_transform);
 
@@ -362,6 +365,9 @@ void QImageTextureGlyphCache::createTextureData(int width, int height)
     case QFontEngineGlyphCache::Raster_RGBMask:
         m_image = QImage(width, height, QImage::Format_RGB32);
         break;
+    case QFontEngineGlyphCache::Raster_ARGB:
+        m_image = QImage(width, height, QImage::Format_ARGB32_Premultiplied);
+        break;
     }
 }
 
@@ -386,7 +392,8 @@ void QImageTextureGlyphCache::fillTexture(const Coord &c, glyph_t g, QFixed subP
     }
 #endif
 
-    if (m_type == QFontEngineGlyphCache::Raster_RGBMask) {
+    if (m_type == QFontEngineGlyphCache::Raster_RGBMask
+        || m_type == QFontEngineGlyphCache::Raster_ARGB) {
         QImage ref(m_image.bits() + (c.x * 4 + c.y * m_image.bytesPerLine()),
                    qMax(mask.width(), c.w), qMax(mask.height(), c.h), m_image.bytesPerLine(),
                    m_image.format());
diff --git a/src/gui/text/qfontengineglyphcache_p.h b/src/gui/text/qfontengineglyphcache_p.h
index 602927cbb00760e471f90638fa45c5ac50ff5271..c8dc64b29fad3ad3d5c2561011bd676818dcc56e 100644
--- a/src/gui/text/qfontengineglyphcache_p.h
+++ b/src/gui/text/qfontengineglyphcache_p.h
@@ -79,6 +79,8 @@ public:
         Raster_RGBMask,
         Raster_A8,
         Raster_Mono
+        // RJVB backported
+        , Raster_ARGB
     };
 
     QFontEngineGlyphCache(const QTransform &matrix, Type type) : m_transform(matrix), m_type(type) { }
diff --git a/src/gui/text/qfontengine.cpp b/src/gui/text/qfontengine.cpp
index 67b8798da1d09c435579d1419ae47add0695fa0c..73feaa3978793da160c26c8717429a2504db93ce 100644
--- a/src/gui/text/qfontengine.cpp
+++ b/src/gui/text/qfontengine.cpp
@@ -682,6 +692,13 @@ QImage QFontEngine::alphaMapForGlyph(glyph_t glyph)
     return indexed;
 }
 
+QImage QFontEngine::bitmapForGlyph(glyph_t, QFixed subPixelPosition, const QTransform&)
+{
+    Q_UNUSED(subPixelPosition);
+
+    return QImage();
+}
+
 void QFontEngine::removeGlyphFromCache(glyph_t)
 {
 }
diff --git a/src/gui/text/qfontengine_p.h b/src/gui/text/qfontengine_p.h
index f29ac47eef8f27c88afb8645f04e00fa82da0056..938f2cad2d30ca28dad4c0698e0cdcd4ca6f1db9 100644
--- a/src/gui/text/qfontengine_p.h
+++ b/src/gui/text/qfontengine_p.h
@@ -127,7 +127,8 @@ public:
         Format_Render = Format_None,
         Format_Mono,
         Format_A8,
-        Format_A32
+        Format_A32,
+        Format_ARGB
     };
 
     QFontEngine();
@@ -200,6 +201,7 @@ public:
     virtual QImage alphaMapForGlyph(glyph_t, const QTransform &t);
     virtual QImage alphaMapForGlyph(glyph_t, QFixed subPixelPosition, const QTransform &t);
     virtual QImage alphaRGBMapForGlyph(glyph_t, QFixed subPixelPosition, int margin, const QTransform &t);
+    virtual QImage bitmapForGlyph(glyph_t, QFixed subPixelPosition, const QTransform &t);
 
     virtual glyph_metrics_t alphaMapBoundingBox(glyph_t glyph, QFixed /*subPixelPosition*/, const QTransform &matrix, GlyphFormat /*format*/)
     {
@@ -247,7 +249,7 @@ public:
     QFontEngineGlyphCache *glyphCache(void *key, QFontEngineGlyphCache::Type type, const QTransform &transform) const;
 
     static const uchar *getCMap(const uchar *table, uint tableSize, bool *isSymbolFont, int *cmapSize);
-    static quint32 getTrueTypeGlyphIndex(const uchar *cmap, uint unicode);
+    static quint32 getTrueTypeGlyphIndex(const uchar *cmap, int cmapSize, uint unicode);
 
     static QByteArray convertToPostscriptFontFamilyName(const QByteArray &fontFamily);
 
diff --git a/src/gui/text/qfontengine_coretext_p.h b/src/gui/text/qfontengine_coretext_p.h
index 5a46c988ed1d112ebd0f7faf8a88b48188bc28ad..a8b01b8dbfeaf7f68fcd99cd68c06c9ce06a635e 100644
--- a/src/gui/text/qfontengine_coretext_p.h
+++ b/src/gui/text/qfontengine_coretext_p.h
@@ -116,6 +116,7 @@ private:
     CGAffineTransform transform;
     QFixed avgCharWidth;
     friend class QCoreTextFontEngineMulti;
+    bool isColourFont;
 };
 
 class QCoreTextFontEngineMulti : public QFontEngineMulti
diff --git a/src/gui/text/qfontengine_coretext.mm b/src/gui/text/qfontengine_coretext.mm
index 204d6855c1273f1bd982c810af8f25fd7e070da7..8c3938a650d9cf58daadb31298977f00d10b9422 100644
--- a/src/gui/text/qfontengine_coretext.mm
+++ b/src/gui/text/qfontengine_coretext.mm
@@ -370,24 +370,76 @@ bool QCoreTextFontEngineMulti::stringToCMap(const QChar *str, int len, QGlyphLay
 
     QVarLengthArray<CGGlyph> cgGlyphs(len);
     CTFontGetGlyphsForCharacters(ctfont, (const UniChar*)str, cgGlyphs.data(), len);
+    CGGlyph placeHolder = 0;
 
     for (int i = 0; i < len; ++i) {
         if (cgGlyphs[i]) {
             glyphs->glyphs[i] = cgGlyphs[i];
         } else {
+            bool isUTF32 = false;
             if (!cfstring)
                 cfstring = CFStringCreateWithCharactersNoCopy(0, reinterpret_cast<const UniChar *>(str), len, kCFAllocatorNull);
             QCFType<CTFontRef> substituteFont = CTFontCreateForString(ctfont, cfstring, CFRangeMake(i, 1));
+//             QCFString family = CTFontCopyFamilyName(substituteFont);
+//             QCFString styleName = (CFStringRef) CTFontCopyAttribute(substituteFont, kCTFontStyleNameAttribute);
+
             CGGlyph substituteGlyph = 0;
             CTFontGetGlyphsForCharacters(substituteFont, (const UniChar*)str + i, &substituteGlyph, 1);
+            if (!substituteGlyph && i < len-1) {
+                // try UTF32
+                substituteFont = QCFType<CTFontRef>(CTFontCreateForString(ctfont, cfstring, CFRangeMake(i, 2)));
+//                 family = CTFontCopyFamilyName(substituteFont);
+//                 styleName = (CFStringRef) CTFontCopyAttribute(substituteFont, kCTFontStyleNameAttribute);
+                CTFontGetGlyphsForCharacters(substituteFont, (const UniChar*)str + i, &substituteGlyph, 2);
+                isUTF32 = true;
+            }
             if (substituteGlyph) {
                 const uint fontIndex = (fontIndexForFont(substituteFont) << 24);
                 glyphs->glyphs[i] = substituteGlyph | fontIndex;
+#if 1
+                if (isUTF32) {
+                    if (!placeHolder) {
+                        CGFontRef fontRef = CTFontCopyGraphicsFont(ctfont, NULL);
+                        if (fontRef) {
+                            // look up the non-breaking-space glyph for the official font
+                            placeHolder = CGFontGetGlyphWithGlyphName(fontRef, CFSTR("uni00A0"));
+//                             // or rather use ".null" which might take less horizontal space.
+//                             placeHolder = CGFontGetGlyphWithGlyphName(fontRef, CFSTR(".null"));
+                            CFRelease(fontRef);
+                        }
+                    }
+                    if (placeHolder) {
+                        glyphs->glyphs[i+1] = placeHolder;
+                        // also set this one!
+                        cgGlyphs[i+1] = placeHolder;
+                    }
+                }
+#endif
                 if (!(flags & QTextEngine::GlyphIndicesOnly)) {
                     CGSize advance;
                     CTFontGetAdvancesForGlyphs(substituteFont, kCTFontHorizontalOrientation, &substituteGlyph, &advance, 1);
                     glyphs->advances_x[i] = QFixed::fromReal(advance.width);
                     glyphs->advances_y[i] = QFixed::fromReal(advance.height);
+#if 1
+                    if (isUTF32 && placeHolder) {
+                        CTFontGetAdvancesForGlyphs(ctfont, kCTFontHorizontalOrientation, &placeHolder, &advance, 1);
+                        glyphs->advances_x[i+1] = QFixed::fromReal(advance.width);
+                        glyphs->advances_y[i+1] = QFixed::fromReal(advance.height);
+                    }
+#endif
+                }
+                if (isUTF32) {
+//                     QCFType<CGFontRef> sFont = CTFontCopyGraphicsFont(substituteFont, NULL);
+//                     QCFString glyphName = CGFontCopyGlyphNameForGlyph(sFont, substituteGlyph);
+//                     qWarning() << Q_FUNC_INFO << "Font" << QString(family) << QString(styleName)
+//                         << "instead of" << fontDef.family << fontDef.styleName
+//                         << "for" << str[i].unicode() << str[i]
+//                         << substituteGlyph << QString(glyphName);
+                    // skip the next glyph!
+                    i += 1;
+//                     glyphName = CGFontCopyGlyphNameForGlyph(CTFontCopyGraphicsFont(ctfont, NULL), glyphs->glyphs[i]);
+//                     qWarning() << "\t: next glyph:" << glyphs->glyphs[i] << QString(glyphName) << "advances:"
+//                         << glyphs->advances_x[i] << glyphs->advances_y[i];
                 }
             }
         }
@@ -472,6 +490,12 @@ void QCoreTextFontEngine::init()
 
     synthesisFlags = 0;
     CTFontSymbolicTraits traits = CTFontGetSymbolicTraits(ctfont);
+    // RJVB: backported, but only set glyphFormat for colour glyphs
+    isColourFont = (traits & kCTFontColorGlyphsTrait);
+    if (isColourFont) {
+        glyphFormat = QFontEngineGlyphCache::Raster_ARGB;
+    }
+
     if (traits & kCTFontItalicTrait)
         fontDef.style = QFont::StyleItalic;
 
@@ -708,6 +732,9 @@ static void convertCGPathToQPainterPath(void *info, const CGPathElement *element
 void QCoreTextFontEngine::addGlyphsToPath(glyph_t *glyphs, QFixedPoint *positions, int nGlyphs,
                                           QPainterPath *path, QTextItem::RenderFlags)
 {
+    if (isColourFont)
+        return; // We can't convert color-glyphs to path
+
     CGAffineTransform cgMatrix = CGAffineTransformIdentity;
     cgMatrix = CGAffineTransformScale(cgMatrix, 1, -1);
 
@@ -725,16 +752,21 @@ QImage QCoreTextFontEngine::imageForGlyph(glyph_t glyph, QFixed subPixelPosition
 {
     Q_UNUSED(margin);
     const glyph_metrics_t br = boundingBox(glyph);
-    QImage im(qRound(br.width) + 2, qRound(br.height) + 2, QImage::Format_RGB32);
+    QImage::Format imageFormat = isColourFont ? QImage::Format_ARGB32_Premultiplied : QImage::Format_RGB32;
+    QImage im(qRound(br.width) + 2, qRound(br.height) + 2, imageFormat);
     im.fill(0);
 
+    if (!im.width() || !im.height()) {
+        return im;
+    }
+
     CGColorSpaceRef colorspace =
 #ifdef Q_WS_MAC
             CGColorSpaceCreateWithName(kCGColorSpaceGenericRGB);
 #else
             CGColorSpaceCreateDeviceRGB();
 #endif
-    uint cgflags = kCGImageAlphaNoneSkipFirst;
+    uint cgflags = isColourFont ? kCGImageAlphaPremultipliedFirst : kCGImageAlphaNoneSkipFirst;
 #ifdef kCGBitmapByteOrder32Host //only needed because CGImage.h added symbols in the minor version
     cgflags |= kCGBitmapByteOrder32Host;
 #endif
@@ -745,38 +777,51 @@ QImage QCoreTextFontEngine::imageForGlyph(glyph_t glyph, QFixed subPixelPosition
     CGContextSetShouldAntialias(ctx, (aa || fontDef.pointSize > qt_antialiasing_threshold)
                                  && !(fontDef.styleStrategy & QFont::NoAntialias));
     CGContextSetShouldSmoothFonts(ctx, aa);
-    CGAffineTransform oldTextMatrix = CGContextGetTextMatrix(ctx);
-    CGAffineTransform cgMatrix = CGAffineTransformMake(1, 0, 0, 1, 0, 0);
-
-    CGAffineTransformConcat(cgMatrix, oldTextMatrix);
+    CGAffineTransform cgMatrix = CGAffineTransformIdentity;
 
     if (synthesisFlags & QFontEngine::SynthesizedItalic)
         cgMatrix = CGAffineTransformConcat(cgMatrix, CGAffineTransformMake(1, 0, SYNTHETIC_ITALIC_SKEW, 1, 0, 0));
 
-    cgMatrix = CGAffineTransformConcat(cgMatrix, transform);
-
-    CGContextSetTextMatrix(ctx, cgMatrix);
-    CGContextSetRGBFillColor(ctx, 1, 1, 1, 1);
-    CGContextSetTextDrawingMode(ctx, kCGTextFill);
-
-    CGContextSetFont(ctx, cgFont);
+    if (!isColourFont) {
+        cgMatrix = CGAffineTransformConcat(cgMatrix, transform);
+    }
 
+    CGGlyph cgGlyph = glyph;
     qreal pos_x = -br.x.truncate() + subPixelPosition.toReal();
     qreal pos_y = im.height() + br.y.toReal();
-    CGContextSetTextPosition(ctx, pos_x, pos_y);
 
-    CGSize advance;
-    advance.width = 0;
-    advance.height = 0;
-    CGGlyph cgGlyph = glyph;
-    CGContextShowGlyphsWithAdvances(ctx, &cgGlyph, &advance, 1);
+    if (!isColourFont) {
+        CGContextSetTextMatrix(ctx, cgMatrix);
+        CGContextSetRGBFillColor(ctx, 1, 1, 1, 1);
+        CGContextSetTextDrawingMode(ctx, kCGTextFill);
 
-    if (synthesisFlags & QFontEngine::SynthesizedBold) {
-        CGContextSetTextPosition(ctx, pos_x + 0.5 * lineThickness().toReal(), pos_y);
+        CGContextSetFont(ctx, cgFont);
+
+        CGContextSetTextPosition(ctx, pos_x, pos_y);
+
+        CGSize advance;
+        advance.width = 0;
+        advance.height = 0;
         CGContextShowGlyphsWithAdvances(ctx, &cgGlyph, &advance, 1);
+
+        if (synthesisFlags & QFontEngine::SynthesizedBold) {
+            CGContextSetTextPosition(ctx, pos_x + 0.5 * lineThickness().toReal(), pos_y);
+            CGContextShowGlyphsWithAdvances(ctx, &cgGlyph, &advance, 1);
+        }
+    } else {
+        // CGContextSetTextMatrix does not work with color glyphs, so we use
+        // the CTM instead. This means we must translate the CTM as well, to
+        // set the glyph position, instead of using CGContextSetTextPosition.
+        CGContextTranslateCTM(ctx, pos_x, pos_y);
+        CGContextConcatCTM(ctx, cgMatrix);
+
+        // CGContextShowGlyphsWithAdvances does not support the 'sbix' color-bitmap
+        // glyphs in the Apple Color Emoji font, so we use CTFontDrawGlyphs instead.
+        CTFontDrawGlyphs(ctfont, &cgGlyph, &CGPointZero, 1, ctx);
     }
 
     CGContextRelease(ctx);
+    CGColorSpaceRelease(colorspace);
 
     return im;
 }
@@ -814,6 +859,14 @@ QImage QCoreTextFontEngine::alphaRGBMapForGlyph(glyph_t glyph, QFixed subPixelPo
     return im;
 }
 
+QImage QCoreTextFontEngine::bitmapForGlyph(glyph_t glyph, QFixed subPixelPosition, const QTransform &t)
+{
+    if (t.type() > QTransform::TxScale)
+        return QFontEngine::bitmapForGlyph(glyph, subPixelPosition, t);
+
+    return imageForGlyph(glyph, subPixelPosition, 0, true);
+}
+
 void QCoreTextFontEngine::recalcAdvances(QGlyphLayout *glyphs, QTextEngine::ShaperFlags flags) const
 {
     int i, numGlyphs = glyphs->numGlyphs;
