# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;
# $Id:$

PortSystem          1.0

set basename        qt54-kde
name                ${basename}

# Qt 5.4 will not build on OS X 10.6, so we provide 5.3 on that OS.
# The just-release Qt 5.5 release should build on OS X 10.7 (to be confirmed)
if {${os.platform} eq "darwin" && ${os.major} <= 10} {
    version         5.3.2
} else {
    variant legacy description {Installs version 5.3.2 also on OS X 10.7+} {}
    if {[variant_isset legacy]} {
        version         5.3.2
    } else {
        version         5.4.2
    }
}

pre-fetch {
    ui_error "This port shouldn't be used anymore"
    return -code error "This port is obsolete"
}

#====================================================================
# If Qt 5.7 will drop support for 10.7 and earlier, and by then we may wish
# to split up the portfile with includes, like e.g.
# if {[catch {source "${portpath}/Portfile.qt5"} err]} {
#     puts stderr "Error reading Portfile.qt5: $err"
#     return 1;
# }
# or else create qt53, qt54 (etc) ports that will be pulled in
# automatically by port:qt5 on OS versions where the latest release
# version doesn't build.
# It seems a bad idea to try to support multiple Qt versions in a
# single Portfile despite the advantages of shared code, patches etc.
#====================================================================

# set building_qt5 immediately, before including the Qt5 PortGroup!
set building_qt5    1
set qt5.prefer_kde  1
PortGroup           qt5 1.0

set branch          [join [lrange [split ${version} .] 0 1] .]
if {[expr ${branch} >= 5.4]} {
    set QT54        yes
    set QT53        no
} else {
    set QT54        no
    set QT53        yes
}

categories          aqua
platforms           macosx
maintainers         gmail.com:rjvbertin mk
license             {LGPL-2.1 GPL-3}

homepage            http://qt.io
description         Qt Tool Kit ${branch}, tuned for an improved KF5 experience
long_description    Qt Tool Kit: A cross-platform framework \
                    (headers, data, and libraries) for writing \
                    cross-platform GUI-based applications. This port uses an installation layout \
                    and includes a number of patches \
                    aimed at improving the KF5 experience, \
                    and enables useful backtraces into Qt code for debugging.\
                    Installs to ${qt_dir}.

distname            qt-everywhere-opensource-src-${version}

master_sites        http://download.qt.io/new_archive/qt/${branch}/${version}/single/

use_xz              yes
if {${QT53}} {
    checksums       rmd160  e4664d55eb4cfb04e982d680602e4cdcd4f2ac05 \
                    sha256  7f5bf93344cb57bac374ea4a32c8eda87f1357f998f14278e717cf84d0289bf0
} else {
    checksums       rmd160  6b7ce0ce0d6807637b47b4335624d1decc9119a8 \
                    sha256  8c6d070613b721452f8cffdea6bddc82ce4f32f96703e3af02abb91a59f1ea25
}

# we'll stick to the qt5-mac name for some purposes for now:
dist_subdir         qt5-mac

# Qt5 is huge. Enable HFS compression if bsdtar is already installed
# This doesn't change the built/installed files, so should be acceptable runtime behaviour
if {[file exists ${prefix}/bin/bsdtar]} {
    extract.post_args       "| bsdtar -x -k --hfsCompression"
}

if { ${os.platform} ne "darwin" } {
    pre-fetch {
        ui_msg "You're on your own on \"${os.platform}\"!!"
    }
} elseif { ${os.major} < 10 } {
    pre-fetch {
        ui_error "OS X prior to 10.7 (Lion) is not a Reference Configuration for Qt."
            ui_error "OS X prior to 10.6 (Snow Leopard) is not even tested."
            ui_error "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
            return -code error "unsupported OS"
    }
} elseif { ${os.major} == 10 } {
    pre-fetch {
        ui_warn "OS X prior to 10.7 (Lion) is not a Reference Configuration for Qt."
        if { [variant_isset universal] } {
            ui_warn "OS X 10.6 (Snow Leopard) is \"occasionally tested\" but ONLY in 32-bit mode."
                ui_warn "OS X 10.6 (Snow Leopard) is deprecated and scheduled for removal in Qt 5.4."
        } else {
            if { ${build_arch} eq "i386" } {
                ui_warn "OS X 10.6 (Snow Leopard) is \"occasionally tested\"."
                    ui_warn "OS X 10.6 (Snow Leopard) is deprecated and scheduled for removal in Qt 5.4."
            } else {
                ui_warn "OS X 10.6 (Snow Leopard) is \"occasionally tested\" but ONLY in 32-bit mode."
                    ui_warn "OS X 10.6 (Snow Leopard) is deprecated and scheduled for removal in Qt 5.4."
            }
        }
        ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
        ui_warn "MacPorts applies patches to build Qt with a recent, non-Xcode clang version;"
        # remove if ever this changes:
        ui_warn "currently, these patches have been tested only in 64-bit mode."
    }
} elseif { ${os.major} > 14 } {
    pre-fetch {
        ui_warn "OS X subsequent to 10.10 (Yosemite) is not a Reference Configuration for Qt."
            ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
    }
} else {
    # 11 <= ${os.major} <= 13
    if { [variant_isset universal] } {
        pre-fetch {
            ui_warn "Multiple architectures is not a Reference Configuration for Qt."
                ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
        }
    } else {
        if { ${build_arch} eq "i386" } {
            pre-fetch {
                ui_warn "32-bit mode is not a Reference Configuration for Qt."
                    ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
            }
        }
    }
}

if { ${subport} eq "${name}-zz-docs"  } {
    universal_variant   no
    installs_libs       no
} else {
    if { ![variant_isset universal] } {
        configure.args-append               "-platform ${qt_qmake_spec}"
    } else {
        set merger_configure_env(i386)      "QMAKESPEC=${qt_qmake_spec_32}"
        set merger_configure_env(x86_64)    "QMAKESPEC=${qt_qmake_spec_64}"
        set merger_configure_args(i386)     "-platform ${qt_qmake_spec_32}"
        set merger_configure_args(x86_64)   "-platform ${qt_qmake_spec_64}"
        set merger_arch_flag                yes
        set merger_arch_compiler            yes
    }
}


if {[info exists env(QTDIR)]} {
    ui_msg "unsetting \$QTDIR"
    unset env(QTDIR)
}

if {${QT53}} {
    set clang_versions {4.0 3.9 3.8 3.7 3.6 3.5 3.4}
    proc qt_cc {} {
        global prefix clang_versions
        foreach v ${clang_versions} {
            set cc "clang-mp-${v}"
            if {[file exists ${prefix}/bin/${cc}]} {
                return ${prefix}/bin/${cc}
            }
        }
        ui_error "\nNo compatible MacPorts clang compiler found. This is a bug, please report\n"
        return -code error "No compatible clang found in ${prefix}/bin"
    }
    proc qt_cxx {} {
        global prefix clang_versions
        foreach v ${clang_versions} {
            set cxx "clang++-mp-${v}"
            if {[file exists ${prefix}/bin/${cxx}]} {
                return ${prefix}/bin/${cxx}
            }
        }
        ui_error "\nNo compatible MacPorts clang++ compiler found. This is a bug, please report\n"
        return -code error "No compatible clang++ found in ${prefix}/bin"
    }
}

if {${subport} eq ${name}} {
    PortGroup           select 1.0
    select.group        qt
    select.file         ${filespath}/qt5-kde
    variant abort description {this variant provides qFatal's standard behaviour of calling abort(2) instead of quitting with an alert dialog} {}
}

if { ${subport} eq ${name} || ${subport} eq "${name}-zz-docs" || ${subport} eq "${name}-x11"} {
    # use the qt5 group; set 'building_qt5' so that the portgroup
    # does not include certain parts
    conflicts           qt3 qt3-mac qt5-kde-devel qt5-kde-devel-x11 qt5-mac qt5-mac-devel qt5-mac-x11 qt5-mac-devel-kde qt5-mac-devel-x11
    PortGroup           xcodeversion 1.0

    minimum_xcodeversions   {10 3.2}

    use_parallel_build  yes

    # header file QtCore/private/qmachparser_p.h is included only if "defined(QT_BUILD_INTERNAL) && defined(Q_OF_MACH_O)"
    #     code from header is used only "ifdef Q_OF_MACH_O"
    #     the two must be consistent
    #     assume the header include code is correct
    patchfiles-append patch-tst_qpluginloader.diff

    # When testing, ensure that a universal object file is not inadvertently created.
    patchfiles-append patch-machtest.diff

    # On testing of 32-bit systems,
    #  Pre-patch: QCOMPARE(unsigned long const&, unsigned int const&
    # Post-patch: QCOMPARE(unsigned int  const&, unsigned int const&
    # Function template is only instantiated for same first and second arguments.
    patchfiles-append patch-tst_qarraydata.diff

    # see http://stackoverflow.com/questions/14506151/invalid-symbol-redefinition-in-inline-asm-on-llvm
    patchfiles-append patch-tst_benchlibcallgrind.diff

    # During testing, NSStringFromRect requires NSRect.
    patchfiles-append patch-tst_qaccessibilitymac_helpers.diff

    if {${subport} ne "${name}-x11"} {
        # see #44934 (and #35067 for the qt4-mac version)
        patchfiles-append patch-shared.diff
        if {${QT53}} {
            # see https://bugreports.qt-project.org/browse/QTBUG-41136
            patchfiles-append qt532/patch-avfmediaplayersession.diff
        }
    }

    if {${QT53}} {
        # see https://bugreports.qt-project.org/browse/QTBUG-41367
        patchfiles-append qt532/patch-qmacstyle_mac.diff
    }

    # avoid leaving zombies when starting an inexisting executable through QProcess
    patchfiles-append qprocess-nozombies.patch

    if {${QT54}} {
        # correct the font directories returned by QStandardPaths:
        patchfiles-append   fix-qsp_fontlocations.patch
        # patch QStandardPaths so that it can optionally return XDG-compliant locations
        patchfiles-append   fix-qstandardpaths3.patch
        # https://bugreports.qt.io/browse/QTBUG-31034 and https://bugreports.qt.io/browse/QTBUG-31034?focusedCommentId=277009
        patchfiles-append   patch-missing-autoreleasepools.diff
        patchfiles-append   patch-enable-qgenericunixthemes.diff
    } else {
        patchfiles-append   qt532/fix-qsp_fontlocations.patch
        patchfiles-append   qt532/fix-qstandardpaths3.patch
        patchfiles-append   qt532/patch-missing-autoreleasepools.diff
    }

    # make sure the private headers are always found through the CMake files,
    # even in an out-of-tree build
    patchfiles-append always_include_private_headers.diff

    # print out some more info when warning about a menu item already added somewhere else
    patchfiles-append debug-menuItem-already-in-menu.patch

    # it's not Qt's role to inform the user constantly if s/he removed fonts that are in Apple's fallback font list
    patchfiles-append dont-warn-missing-fallback-fonts.patch

    # patches from Ubuntu 5.3.2+dfsg-4ubuntu8 (from Vivid Vervet)
    if {${QT54}} {
        patchfiles-append       remove_icon_from_example.patch \
                                remove_google_adsense.patch \
                                load_testability_from_env_var.patch \
                                Add-workaround-for-GL-on-Android-emulator.patch \
                                disable-generic-plugin-when-others-available.patch
    } else {
        # patches remove_icon_from_example and remove_google_adsense are identical for Qt 5.4 and Qt 5.3.2
        patchfiles-append       remove_icon_from_example.patch \
                                qt532/gnukfreebsd.diff \
                                qt532/fix_bug_in_internal_comparison_operator.patch \
                                qt532/fix_sparc_atomics.patch \
                                remove_google_adsense.patch \
                                qt532/load_testability_from_env_var.patch \
                                qt532/Add-workaround-for-GL-on-Android-emulator.patch \
                                qt532/dbus_correct_signal_name_disconnect.patch \
                                qt532/Fix-crash-in-QNetworkAccessCacheBackend-closeDownstr.patch \
                                qt532/Don-t-always-chmod-the-XDG_RUNTIME_DIR.patch \
                                qt532/Report-the-system-error-on-why-chmod-2-failed-in-XDG.patch \
                                qt532/disable-generic-plugin-when-others-available.patch \
                                qt532/update-QtBearer-NetworkManager-backend-API.patch \
                                qt532/Reset-QNAM-s-NetworkConfiguration-when-state-changes.patch \
                                qt532/Use-a-property-cache-to-cut-down-on-blocking-calls.patch \
                                qt532/QtBearer-networkmanager-make-sure-to-set-flag-Active.patch \
                                qt532/Always-lock-the-DBus-dispatcher-before-dbus_connecti.patch \
                                qt532/QDBusConnection-Merge-the-dispatch-and-the-watch-and.patch \
                                qt532/Partially-revert-Fix-a-deadlock-introduced-by-the-ra.patch \
                                qt532/Break-after-handling-the-read-write.patch
    }

    if {${subport} eq ${name}} {
        if {![variant_isset abort]} {
            if {${QT54}} {
                patchfiles-append   patch-qFatal-no-abort.diff
            } else {
                patchfiles-append   qt532/patch-qFatal-no-abort.diff
            }
        }
        patchfiles-append   patch-qmenuAddSection.diff
    }

    if {${QT54}} {
        patchfiles-append   patch-improve-fontweight-support8.diff \
                            patch-fontpanel.diff
    } else {
        patchfiles-append   qt532/patch-improve-fontweight-support8.diff \
                            patch-fontpanel.diff
    }

    # --prefix is not recognised.
    configure.pre_args-delete       --prefix=${prefix}

    # --disable-dependency-tracking is not recognised.
    configure.universal_args-delete --disable-dependency-tracking

    # taken from the qt4-mac Portfile:
    global OSX_MINOR
    set OSX_MINOR ""
    # hopefully the MACOSX_DEPLOYMENT_TARGET exists and is set by now.  if
    # not, last resort (which is not desirable) is to use the os.version.
    if {${macosx_deployment_target} ne ""} {
        set OSX_MINOR [lindex [split ${macosx_deployment_target} "."] 1]
    } else {
        set OSX_MINOR [expr ${os.major} - 4]
    }

    if {${configure.sdkroot} ne ""} {
        configure.args-append \
            -sdk [string tolower [join [lrange [split [lindex [split ${configure.sdkroot} "/"] end] "."] 0 end-1] "."]]
    } else {
        # default: build for the current OS version, requesting the corresponding SDK explicitly
        configure.args-append \
            -sdk [string tolower "macosx10.${OSX_MINOR}"]
    }

    # NB: -prefix->${prefix} !
    configure.args-append                      \
        -prefix         ${prefix}              \
        -archdatadir    ${qt_dir}              \
        -docdir         ${qt_docs_dir}         \
        -headerdir      ${qt_includes_dir}     \
        -plugindir      ${qt_plugins_dir}      \
        -importdir      ${qt_imports_dir}      \
        -qmldir         ${qt_qml_dir}          \
        -datadir        ${qt_data_dir}         \
        -libdir         ${qt_frameworks_dir}   \
        -bindir         ${qt_bins_dir}         \
        -libexecdir     ${qt_dir}/libexec      \
        -translationdir ${qt_translations_dir} \
        -sysconfdir     ${qt_sysconf_dir}      \
        -examplesdir    ${qt_examples_dir}     \
        -testsdir       ${qt_tests_dir}        \
        -hostbindir     ${qt_bins_dir}         \
        -hostlibdir     ${qt_frameworks_dir}   \
        -hostdatadir    ${qt_host_data_dir}

# Configure options:
    configure.args-append \
        -v                \
        -release          \
        -opensource       \
        -confirm-license  \
        -shared           \
        -force-pkg-config

# Third Party Libraries:
    configure.args-append \
        -no-pulseaudio   \
        -no-mtdev         \
        -no-harfbuzz      \
        -openssl-linked   \
        -no-xinput2       \
        -no-xcb           \
        -no-xcb-xlib

# configure options that don't show up in configure --help
    configure.args-append \
        -no-libudev       \
        -no-egl

# Additional options:
    configure.args-append    \
        {-make libs}         \
        {-make tools}        \
        {-nomake examples}   \
        {-nomake tests}      \
        -verbose             \
        -nis                 \
        -cups                \
        -iconv               \
        -no-evdev            \
        -icu                 \
        -fontconfig          \
        -no-pch              \
        -dbus-linked         \
        -glib                \
        -directfb            \
        -no-linuxfb          \
        -no-kms              \
        -no-use-gold-linker  \
        -framework

    configure.args-append   -optimized-qmake

    # the sqlite3 plugin ("sqlite") has been re-absorbed into the main port
    configure.args-append -system-sqlite
    depends_lib-append port:sqlite3
    foreach driver { db2 ibase mysql oci odbc psql sqlite2 tds } {
        configure.args-append -no-sql-${driver}
    }


    if {${subport} eq "${name}-x11"} {
        patchfiles-delete       patch-fontpanel.diff
        patchfiles-append       patch-to-build-xcb.diff
        configure.args-delete   -no-xinput2 -no-xcb -no-xcb-xlib
        configure.args-append   -xcb -xcb-xlib -qpa xcb
        if {${QT53}} {
            configure.args-append   -I ${prefix}/include -L ${prefix}/lib
            patchfiles-append   qt532/patch-xcb-XOpenGL.diff \
                                qt532/patch-xcb-missing-functions.diff
        }
    } else {
        # make sure that the Designer doesn't try to use a global menubar when using the xcb plugin.
        # Yes, this patch has to be applied when building the master port, not the xcb plugin subport...
        patchfiles-append       patch-designer-show-menubar-on-xcb.diff
                # configure options that don't show up in configure --help
        # openvg makes sense only when using X11 ...
        configure.args-append   -no-openvg
    }

    if {${os.platform} eq "darwin" && ${os.major} <= 10} {
        # Some extra blackish magic to get Qt 5.3.2 to build on OS X 10.6, using a recent clang version.
        patchfiles-append       qt532/patch-configure-allow-macports-binutils.diff \
                                qt532/patch-nistest.diff \
                                qt532/patch-icutest.pro.diff \
                                qt532/patch-clangconf.diff
        if {${subport} ne "${name}-x11" && ${subport} ne "${name}-zz-docs"} {
            patchfiles-append   qt532/patch-geoclue-gvalue-init.diff
        }
        #patchfiles-append       qt532/patch-sdk.prf-xcrun-not-for-compilers.diff
        patchfiles-append       qt532/patch-sdk.prf-no-xcrun.diff
        # a hackery bit of post-patch to be done pre-configure
        # (or post-patch, so it can be checked before running configure)
        post-patch {
            xinstall -m 775 -d ${build.dir}/qtbase
            xinstall -m 775 -d ${build.dir}/qtbase/bin
            # take some measures to pick the appropriate clang compiler. The compiler_blacklist portgroup and MacPorts based
            # have already introduced a dependency on clang-3.5 (unless clang-3.4 is installed?!). We create symlinks to clang
            # 3.4 or 3.5 in our build tree, so that the user doesn't have to do a `port select` for us.
            if {![file exists ${build.dir}/qtbase/bin/clang++]} {
                ln -s [qt_cc] ${build.dir}/qtbase/bin/clang
                ln -s [qt_cxx] ${build.dir}/qtbase/bin/clang++
            }
            # instruct the build system to use these for building:
            reinplace -W ${worksrcpath}/qtbase/mkspecs/common "s|macportsclang|${build.dir}/qtbase/bin/clang|g" clang.conf
            reinplace -W ${worksrcpath}/qtbase "s|PREFIX|${prefix}|g" config.tests/unix/icu/icu.pro
            # the configure script will build a bootstrap qmake executable respecting our mkspec (macx-clang referring to a MacPorts clang version)
            # because we patched it to do just that (patch-configure-allow-macports-binutils.diff).
            # We also provide an appropriate .qmake.stash to be sure that qmake doesn't generate a less appropriate one (despite the sdk.prf patch)
            # NB: this issue also hampers the universal build of the qtwebengine subport.
            if {![file exists ${build.dir}/qtbase/.qmake.stash]} {
                file copy ${filespath}/qt532/qmake.stash.in ${build.dir}/qtbase/.qmake.stash
            }
            reinplace -W ${build.dir}/qtbase "s|PREFIX/bin/clang|${build.dir}/qtbase/bin/clang|g" .qmake.stash
            reinplace -W ${build.dir}/qtbase "s|PREFIX|${prefix}|g" .qmake.stash
            # put a copy at the build root, which will be required for building qtwebkit
            # (way ahead in the future...)
            if {![file exists ${build.dir}/.qmake.stash]} {
                file copy ${build.dir}/qtbase/.qmake.stash ${build.dir}
            }
            ui_msg "Everything is set up to use the Qt-specific compiler symlink ${build.dir}/qtbase/bin/clang++ but the build system will probably resolve\
                    the actual compiler to which this link points ([qt_cxx]). That is of no consequence; future Qt5 ports will use the Qt compiler in ${qt_bins_dir}."
        }
        configure.args-append   -process
    } else {
        # We don't want qmake to 2nd-guess the compiler we specify in our mkspec and
        # replace it with an Xcode compiler determined by xcrun.
        # 20150723: also exclude the QMAKE_LINK commands from being determined by xcrun
        patchfiles-append       patch-sdk.prf-xcrun-not-for-compilers.diff
    }

    # Qt builds part of the system using environment provided by MacPorts.
    # It builds the rest using its own internal environment.
    # For consistency, clear MacPorts environment.
    configure.cxx_stdlib
        configure.sdkroot
        configure.cc_archflags
        configure.cxx_archflags
        configure.objc_archflags
        configure.objcxx_archflags
        configure.ld_archflags
        configure.cppflags
        configure.objcflags-append  "-g"
        configure.objcxxflags-append  "-g"
        configure.pipe  no
    configure.march
        configure.mtune
        configure.universal_ldflags
        configure.universal_cflags
        configure.universal_cxxflags
        configure.universal_cppflags

    # patches for improving the KDE experience (and facilitating debugging)
    patchfiles-append       patch-enable-dumpObjectInfo.diff
    if {${QT54}} {
        patchfiles-append   deactivate-menurole-heuristics.patch \
                            debug-negative-qtimerint.patch
    } else {
        patchfiles-append   qt532/correct-systraymenu-iconhandling.patch \
                            qt532/deactivate-menurole-heuristics.patch \
                            qt532/debug-negative-qtimerint.patch
    }

    configure.args-append   -force-debug-info -no-strip -no-separate-debug-info
}

if { (${subport} eq ${name}) \
    || (${subport} eq "${name}-x11") || (${subport} eq "${name}-qtwebengine") } {

    if {${QT54} && ![variant_exists LTO]} {
        variant LTO description \
            {Use link-time optimisation (currently incompatible with the SSE4+ instruction sets)} {
            # -no-sse4* do not appear to have the intended effect
            #configure.args-append   -no-sse4.1 -no-sse4.2
        }
    } elseif {${QT53} && [variant_isset LTO]} {
        ui_msg "The LTO variant is currently ignored (moot) for Qt 5.3"
    }
#     if {[variant_isset LTO]} {
#         configure.cflags-append     -mno-sse4 -mno-3dnow
#         configure.cxxflags-append   -mno-sse4 -mno-3dnow
#         configure.objcflags-append  -mno-sse4 -mno-3dnow
#         configure.objcxxflags-append    -mno-sse4 -mno-3dnow
#         configure.optflags-append   -mno-sse4 -mno-3dnow
#     }
    configure.ldflags-append        ${configure.optflags}

    depends_lib                              \
        port:zlib                            \
        port:libpng                          \
        path:include/turbojpeg.h:libjpeg-turbo                            \
        port:freetype                        \
        path:bin/dbus-daemon:dbus            \
        port:openssl                         \
        port:tiff                            \
        port:libmng                          \
        path:lib/pkgconfig/glib-2.0.pc:glib2 \
        port:icu                             \
        port:pcre                            \
        port:libiconv

    post-extract {
        file mkdir ${workpath}/build
        if {${subport} eq "${name}-qtwebengine"} {
            file delete -force ${worksrcpath}/qtwebengine/examples
        } else {
            if {[file exists ${worksrcpath}/qtwebengine] && (${subport} ne "${name}-zz-docs")} {
                file delete -force ${worksrcpath}/qtwebengine
                patchfiles-append   patch-disable-qtwebengine.diff
            } else {
                ui_msg "not exists ${worksrcpath}/qtwebengine or ${subport} == ${name}-zz-docs";
            }
            if {[variant_isset universal]} {
                ui_msg "Setting up symlinks for architectures ${universal_archs_to_use}"
                foreach arch ${universal_archs_to_use} {
                    ui_msg "ln -s ${distname} ${worksrcpath}-${arch}"
                    ln -s ${distname} ${worksrcpath}-${arch}
                }
            }
        }
    }

    # set up things for an out-of-source build:
    default configure.dir   {${workpath}/build}
    default build.dir       {${workpath}/build}
    if {${subport} eq "${name}-x11"} {
        #default configure.cmd   {../${worksrcdir}/qtbase/configure}
        default configure.cmd   {../${worksrcdir}/configure}
    } elseif {${subport} eq "${name}-qtwebengine"} {
        configure.args          -Wall -r ../${worksrcdir}/qtwebengine/qtwebengine.pro
    } else {
        default configure.cmd   {../${worksrcdir}/configure}
    }

    build.type              gnu
    # make sure we use the latest gmake:
    build.cmd               gmake
    depends_build-append    port:gmake

    # see https://bugreports.qt-project.org/browse/QTBUG-35514
    build.target

    post-patch {
        #reinplace "s|//opt//local//|${prefix}/|g" ${worksrcpath}/qtbase/src/corelib/io/qstandardpaths_mac.cpp
        if {${use_parallel_build} && [file exists ${worksrcpath}/qtbase/configure]} {
            # let qmake be build in parallel too
            reinplace "s|\"\$MAKE\")|\"\$MAKE\" -j${build.jobs})|g" ${worksrcpath}/qtbase/configure
        }
    }

    if { [variant_isset universal] } {
        merger-post-destroot {
            foreach arch ${universal_archs_to_use} {
                set dir ${destroot}-${arch}

                foreach pcfl [glob -nocomplain ${dir}${qt_frameworks_dir}/pkgconfig/*.pc] {
                    reinplace "s|/build-${arch}/|/build/|g" ${pcfl}
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${pcfl}
                }

                foreach prlfl [glob -nocomplain ${dir}${qt_frameworks_dir}/*.framework/*.prl] {
                    reinplace "s|/build-${arch}/|/build/|g" ${prlfl}
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
                }

                foreach prlfl [glob -nocomplain ${dir}${qt_frameworks_dir}/*.prl] {
                    reinplace "s|/build-${arch}/|/build/|g" ${prlfl}
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
                }

# that's the same loop as the one 2 above?
#                foreach prlfl [glob ${dir}${qt_frameworks_dir}/*.framework/*.prl] {
#                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
#                }

                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_mkspecs_dir}/modules/qt_lib_bootstrap_private.pri

                reinplace \
                    "s|^set(_qt5_corelib_extra_includes \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang.*\")$|set(_qt5_corelib_extra_includes \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang-32\" \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang\")|" \
                    ${dir}${qt_frameworks_dir}/cmake/Qt5Core/Qt5CoreConfigExtrasMkspecDir.cmake
            }
        }

        post-destroot {
            if {[file exists ${destroot}${qt_mkspecs_dir}/qmodule.pri]} {
                # delete preprocessor comments surrounding QT_CPU_FEATURES.i386 and QT_CPU_FEATURES.x86_64
                reinplace "/^#ifndef.*$/d" ${destroot}${qt_mkspecs_dir}/qmodule.pri
                reinplace "/^#else.*$/d"   ${destroot}${qt_mkspecs_dir}/qmodule.pri
                reinplace "/^#endif.*$/d"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
            }
        }

        # The file ${prefix}/share/qt5/mkspecs/qconfig.pri is still not properly merged
        # The solution is ???.
    }

    post-destroot {

        #if {${subport} ne "${name}-x11"} 

            # move items out of the Frameworks directory that are more appropriate to lib directory
            xinstall -m 775 -d ${destroot}${qt_cmake_module_dir}
            foreach d [glob -tails -nocomplain -directory ${destroot}${qt_frameworks_dir}/cmake *] {
                xinstall -m 775 -d ${destroot}${qt_cmake_module_dir}/${d}
                foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir}/cmake/${d} *.cmake] {
                    # ${qt_frameworks_dir} is  ${qt_dir}/Library/Frameworks while
                    # ${qt_libs_dir}       is  ${qt_dir}/lib
                    # unless modified, cmake files will point to a directory that is too high in the directory hierarchy
                    reinplace "s|/../../../../|/../../../${qt_dir_rel}/|g" ${f}
                    file rename ${f} ${destroot}${qt_cmake_module_dir}/${d}/
                }
            }

            # get Qt's version numbers

            set qt_vers [split ${version} "."]
            set qt_major [lindex ${qt_vers} 0]
            set qt_minor [lindex ${qt_vers} 1]
            set qt_patch [lindex ${qt_vers} 2]

            # link includes and libraries for each actual installed framework

            # make sure that the target directories exist
            exec mkdir -p ${destroot}${qt_includes_dir} ${destroot}${qt_libs_dir}
            foreach fixfile [exec find ${destroot}${qt_frameworks_dir} \
                                 -name "*.framework" | \
                                 sed -e "s@${destroot}@@g"] {

                set tf_full [strsed ${fixfile} {s@\\.framework@@}]
                set tf [strsed ${tf_full} {g@.*\/@@}]

                # special for QtWebKit entries

                set t_minor ${qt_minor}
                set is_QtWebKit 0
                if {[string compare ${tf} QtWebKit] == 0} {
                    set t_minor 9
                    set is_QtWebKit 1
                }

                # link headers into ${qt_includes_dir}, removing directories
                # if they are already there first

                set inc_file ${destroot}${qt_includes_dir}/${tf}
                if {[file exists ${inc_file}]} {
                    ui_msg "*Warning* replacing directory ${inc_file} with a symlink to ${tf_full}.framework/Headers!"
                    file delete -force ${inc_file}
                }
                ln -s ${tf_full}.framework/Headers ${inc_file}

                # link libraries into ${qt_libs_dir}, all 4 number variants

                set dr_qt_libs_dir ${destroot}${qt_libs_dir}

                ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.dylib
                ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.${qt_major}.dylib
                ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.${qt_major}.${t_minor}.dylib
                ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.${qt_major}.${t_minor}.${qt_patch}.dylib

                # copy .prl file, then correct it for library usage

                copy ${destroot}${tf_full}.framework/${tf}.prl ${dr_qt_libs_dir}/lib${tf}.prl

                # fix TARGET in .prl file

                reinplace "/QMAKE_PRL_TARGET/s|Qt\\(\[^ \]*\\)|libQt\\1.${qt_major}.${t_minor}.${qt_patch}.dylib|" ${dr_qt_libs_dir}/lib${tf}.prl

                # fix PRL_LIBS -F -> -L in .prl file

                reinplace "/QMAKE_PRL_LIBS/s|-F${qt_frameworks_dir}|-L${qt_libs_dir}|" ${dr_qt_libs_dir}/lib${tf}.prl

                # fix "-framework Qt*" -> "-lQt*" in .prl file

                reinplace "/QMAKE_PRL_LIBS/s|-framework Qt|-lQt|g" \
                    ${dr_qt_libs_dir}/lib${tf}.prl

                # remove the QMAKE_PRL_BUILD_DIR line from the .prl file
                reinplace "/QMAKE_PRL_BUILD_DIR/d" ${dr_qt_libs_dir}/lib${tf}.prl

                # deal with debug files

                # RJVB: I have *not* tested the block below!
                if {[variant_isset debug]} {

                    # but not if QtWebKit and +universal, since that one does
                    # not exist (the 32-bit version of the debug library is
                    # larger than fits into the 32-bit filespace).

                    if {[variant_isset debug] && ${is_QtWebKit}} {
                        continue
                    }

                    # link libraries into ${qt_libs_dir}, all 4 number variants

                    ln -s ${tf_full}.framework/${tf}_debug ${dr_qt_libs_dir}/lib${tf}_debug.dylib
                    ln -s ${tf_full}.framework/${tf}_debug ${dr_qt_libs_dir}/lib${tf}_debug.${qt_major}.dylib
                    ln -s ${tf_full}.framework/${tf}_debug ${dr_qt_libs_dir}/lib${tf}_debug.${qt_major}.${t_minor}.dylib
                    ln -s ${tf_full}.framework/${tf}_debug ${dr_qt_libs_dir}/lib${tf}_debug.${qt_major}.${t_minor}.${qt_patch}.dylib

                    # copy .prl file, then correct it for library usage

                    copy ${destroot}${tf_full}.framework/${tf}_debug.prl ${dr_qt_libs_dir}/lib${tf}_debug.prl

                    # fix TARGET in .prl file

                    reinplace "/QMAKE_PRL_TARGET/s|Qt\\(\[^ \]*\\)|libQt\\1.${qt_major}.${t_minor}.${qt_patch}.dylib|" ${dr_qt_libs_dir}/lib${tf}_debug.prl

                    # fix PRL_LIBS -F -> -L in .prl file

                    reinplace "/QMAKE_PRL_LIBS/s|-F${qt_frameworks_dir}|-L${qt_libs_dir}|" ${dr_qt_libs_dir}/lib${tf}_debug.prl

                    # fix "-framework Qt*" -> "-lQt*_debug" in .prl file

                    reinplace "/QMAKE_PRL_LIBS/s|-framework Qt\\(\[^ \]*\\)|-lQt\\1_debug|g" ${dr_qt_libs_dir}/lib${tf}_debug.prl
                }
            }

            if {${subport} eq ${name}} {
                ln -s ${qt_qmake_cmd} ${destroot}/${prefix}/bin/qmake-qt${qt_major}
                ln -s ${qt_moc_cmd} ${destroot}/${prefix}/bin/moc-qt${qt_major}
                ln -s ${qt_uic_cmd} ${destroot}/${prefix}/bin/uic-qt${qt_major}
                ln -s ${qt_lrelease_cmd} ${destroot}/${prefix}/bin/lrelease-qt${qt_major}
            }

            xinstall -m 775 -d ${destroot}${qt_pkg_config_dir}
            foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir}/pkgconfig *.pc] {
                file rename ${f} ${destroot}${qt_pkg_config_dir}
            }
            xinstall -m 775 -d ${destroot}${qt_libs_dir}/
            foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir} *.{a,prl,la}] {
                file rename ${f} ${destroot}${qt_libs_dir}/
            }

            # link back the static libraries to where some Qt components expect them:
            foreach f [exec find ${destroot}${qt_libs_dir} \
                                 -name "*.a" | \
                                 sed -e "s@${destroot}@@g"] {
                ln -s ${f} ${destroot}${qt_frameworks_dir}/
            }
            # certain applications might expect to find the following .prl files in ${qt_frameworks_dir}
            foreach fixfile { libQt5OpenGLExtensions_debug.prl libQt5PlatformSupport_debug.prl \
                                libQt5QmlDevTools.prl libQt5UiTools.prl libQt5UiTools_debug.prl } {
                if {[file exists ${destroot}${qt_libs_dir}/${fixfile}]} {
                    ln -s ${qt_libs_dir}/${fixfile} ${destroot}${qt_frameworks_dir}/${fixfile}
                }
            }

            # Move .apps into the applications_dir, and link each .apps'
            # executable back into ${qt_bins_dir}
            set dr_qt_apps_dir ${destroot}${qt_apps_dir}
            set dr_qt_bins_dir ${destroot}${qt_bins_dir}
            xinstall -m 755 -d ${dr_qt_apps_dir}
            foreach app [glob -nocomplain ${dr_qt_bins_dir}/*.app] {
                # remove the leading stuff
                set app [lindex [split ${app} /] end]
                # move the .app
                move ${dr_qt_bins_dir}/${app} ${dr_qt_apps_dir}
                # link it back
                ln -s ${qt_apps_dir}/${app} ${dr_qt_bins_dir}
                # provide a proxy to the app's executable; symlinks won't
                # be accepted by qtchooser if the user has that port installed.
                set texe [strsed ${app} {g@\.app@@}]
                set appProxy ${dr_qt_bins_dir}/[string tolower ${texe}]
                copy ${filespath}/appProxy.sh ${appProxy}
                reinplace "s|@BUNDLEEXEC@|${qt_apps_dir}/${app}/Contents/MacOS/${texe}|g" ${appProxy}

            }

            # expose KF5 styles to Qt5 ... once we know where those styles are stored and if it's still required.
            #ln -s ${prefix}/lib/kf5??/plugins/styles ${destroot}${qt_plugins_dir}/

            if {${QT53}} {
                # create our own compiler symlinks in qt_bins_dir:
                ln -s [qt_cc] ${destroot}${qt_bins_dir}/clang
                ln -s [qt_cxx] ${destroot}${qt_bins_dir}/clang++
                # edit the build scripts to use those compilers:
                reinplace "s|${build.dir}/qtbase/bin/clang|${qt_bins_dir}/clang|g" ${destroot}${qt_mkspecs_dir}/common/clang.conf
                reinplace "s|${prefix}/bin/clang-mp-.*|${qt_bins_dir}/clang|g" ${destroot}${qt_mkspecs_dir}/qmodule.pri
                reinplace "s|${prefix}/bin/clang\+\+-mp-.*|${qt_bins_dir}/clang\+\+|g" ${destroot}${qt_mkspecs_dir}/qmodule.pri
                notes-append "Qt ${version} has been configured to use the C++ compiler ${qt_bins_dir}/clang++,\
                    which is a symlink to [qt_cxx]. Remember to update this link (and its C compiler companion, clang)\
                    if ever you upgrade your port:clang installation and remove the current version."
            } else {
                if {[file exists ${destroot}${qt_mkspecs_dir}/qmodule.pri]} {
                    # clean up the generated mkspecs/qmodule.pri:
                    # undo any symlink normalisation that introduced the clang version number into QMAKE_CC/CXX (e.g. clang++-mp-3.5)
                    reinplace "s|bin/clang-mp-.*|bin/clang|g"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
                    reinplace "s|bin/clang\+\+-mp-.*|bin/clang\+\+|g"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
                }
            }
            if {[file exists ${destroot}${qt_mkspecs_dir}/qmodule.pri]} {
                # if the user used configure.optflags="-something" make sure that gets added to compiler and linker
                # options qmake determines, rather than replacing all of those
                reinplace "s|QMAKE_CFLAGS = |QMAKE_CFLAGS \+= |g"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
                reinplace "s|QMAKE_CXXFLAGS = |QMAKE_CXXFLAGS \+= |g"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
                reinplace "s|QMAKE_LFLAGS = |QMAKE_LFLAGS \+= |g"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
            }
        # else 
        if {${subport} eq "${name}-x11"} {
            file delete -force ${destroot}-tmp
            file rename ${destroot} ${destroot}-tmp
            # now cherry-pick the things we want which aren't yet
            # installed through the main port:
            xinstall -d -m 755 ${destroot}${qt_plugins_dir}/platforminputcontexts
            file rename ${destroot}-tmp/${qt_plugins_dir}/platforminputcontexts/libcomposeplatforminputcontextplugin.dylib ${destroot}${qt_plugins_dir}/platforminputcontexts
            xinstall -d -m 755 ${destroot}${qt_plugins_dir}/platforms
            file rename ${destroot}-tmp/${qt_plugins_dir}/platforms/libqxcb.dylib ${destroot}${qt_plugins_dir}/platforms
            xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}/Qt5Gui
            file rename ${destroot}-tmp/${qt_cmake_module_dir}/Qt5Gui/Qt5Gui_QComposePlatformInputContextPlugin.cmake \
                ${destroot}${qt_cmake_module_dir}/Qt5Gui
            file rename ${destroot}-tmp/${qt_cmake_module_dir}/Qt5Gui/Qt5Gui_QXcbIntegrationPlugin.cmake \
                ${destroot}${qt_cmake_module_dir}/Qt5Gui
            xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}/Qt5X11Extras
            file rename ${destroot}-tmp/${qt_cmake_module_dir}/Qt5X11Extras/Qt5X11ExtrasConfig.cmake \
                ${destroot}${qt_cmake_module_dir}/Qt5X11Extras
            file rename ${destroot}-tmp/${qt_cmake_module_dir}/Qt5X11Extras/Qt5X11ExtrasConfigVersion.cmake \
                ${destroot}${qt_cmake_module_dir}/Qt5X11Extras
            xinstall -d -m 755 ${destroot}${qt_pkg_config_dir}
            file rename ${destroot}-tmp/${qt_pkg_config_dir}/Qt5X11Extras.pc ${destroot}${qt_pkg_config_dir}
            xinstall -d -m 755 ${destroot}${qt_frameworks_dir}
            file rename ${destroot}-tmp/${qt_frameworks_dir}/QtX11Extras.framework ${destroot}${qt_frameworks_dir}
            xinstall -d -m 755 ${destroot}${qt_libs_dir}
            file rename ${destroot}-tmp/${qt_libs_dir}/libQtX11Extras.prl ${destroot}${qt_libs_dir}
            xinstall -d -m 755 ${destroot}${qt_mkspecs_dir}/modules
            file rename ${destroot}-tmp/${qt_mkspecs_dir}/modules/qt_lib_x11extras.pri ${destroot}/${qt_mkspecs_dir}/modules
            file rename ${destroot}-tmp/${qt_mkspecs_dir}/modules/qt_lib_x11extras_private.pri ${destroot}/${qt_mkspecs_dir}/modules
            file delete -force ${destroot}-tmp
        }

    }

    variant harfbuzz description {Use HarfBuzz-NG to do text shaping} {
        depends_lib-append port:harfbuzz
        configure.args-replace \
            -no-harfbuzz       \
            -system-harfbuzz
    }
    default_variants    +harfbuzz

    variant tests description {Enable tests} {
        configure.args-replace {-nomake tests} {-make tests}
    }

    variant examples description {Build examples} {
        configure.args-replace {-nomake examples} {-make examples}
    }

    variant debug description {Build both release and debug library} {
        configure.args-replace -release -debug-and-release
    }
}

post-configure {
    if {${QT54} && [variant_isset LTO]} {
        if {${subport} eq "${name}-x11"} {
            #system -W ${build.dir} "bin/qmake -config ltcg ../${worksrcdir}/qtbase"
            system -W ${build.dir} "qtbase/bin/qmake -config ltcg ../${worksrcdir}"
        } elseif {${subport} eq "${name}-qtwebengine"} {
            system -W ${build.dir} "${qt_qmake_cmd} -config ltcg ../${worksrcdir}/qtwebengine"
        } else {
            foreach qdir {qtbase qtconnectivity qtdeclarative qtenginio qtlocation qtmacextras \
                        qtmultimedia qtquick1 qtsensors qtserialport qtsvg qttools qtwebchannel \
                        qtwebsockets qtxmlpatterns} {
                xinstall -d -m 755 ${build.dir}/${qdir}
                system -W ${build.dir}/${qdir} "${build.dir}/qtbase/bin/qmake -config ltcg ../../${worksrcdir}/${qdir}"
            }
        }
    }
}

subport ${name}-x11 {
    depends_lib-append  port:xorg-xcb-util port:xorg-xcb-util-wm port:xorg-xcb-util-image \
                        port:xorg-xcb-util-keysyms port:xorg-xorgproto \
                        port:xrender port:mesa path:${qt_bins_dir}/qmake:${name}
    description         ${description} - the xcb (X11) platform plugin
    long_description    ${long_description} This port installs just the xcb \
                        platform plugin, which allows rendering to (remote) X11 servers.

    # extract only the qtbase component
    extract.post_args-append    ${distname}/qtbase ${distname}/qtx11extras ${distname}/configure ${distname}/qt.pro
}

subport ${name}-zz-docs {
    description         ${description} - the documentation
    long_description    ${long_description}. This subport installs the documentation \
                        and has a -zz- in its name to ensure it's the last one to be \
                        processed during upgrading an existing install.

    depends_lib-append \
        path:${qt_bins_dir}/qdoc:${name} \
        path:${qt_plugins_dir}/sqldrivers/libqsqlite.dylib:${name}-sqlite3-plugin

    supported_archs   noarch

    build.target      docs
    destroot.target   install_docs

    post-extract {
        # For the most part, generated makefiles use ${qt_bins_dir}/qdoc.
        # There are a couple of places that look in ${worksrcpath}/qtbase/src/tools/qdoc/.
        ln -s ${qt_bins_dir}/qdoc ${worksrcpath}/qtbase/src/tools/qdoc/
        ln -s ${qt_bins_dir}/qdoc ${worksrcpath}/qtbase/bin

        # Similarly, location of qhelpgenerator is expected in ${worksrcpath}
        xinstall -d -m 755 ${worksrcpath}/qttools/bin/
        ln -s ${qt_bins_dir}/qhelpgenerator ${worksrcpath}/qttools/bin/

        # Without this file, the makefile ${worksrcpath}/qtwebkit/Source/WebCore/Makefile.WebCore.Target
        #    keeps generating itself over and over again.
        # This file is only created when the library is being built, however.
        xinstall -d -m 755 ${worksrcpath}/qtwebkit/Source/WebCore/generated
        touch ${worksrcpath}/qtwebkit/Source/WebCore/generated/InspectorBackendCommands.qrc
    }
}

# See http://qt-project.org/doc/qt-5/sql-driver.html for info on building SQL Database Drivers

if {${QT54}} {
    subport ${name}-qtwebengine {
        description         ${description} - the QtWebEngine component
        long_description    ${long_description} This port installs the  \
                            QtWebEngine component.
        PortGroup           qmake5 1.0
        universal_variant   no
        if {[variant_isset universal]} {
            # See the comments about qmake and .qmake.stash above. It is likely that the same "feature"
            # prevents us from doing cross-bitwidth (32 on 64bit and vice-versa) builds inside the Qt
            # source tree.
            ui_msg "Warning: this component doesn't currently support a universal build (probable Qt bug)"
        }

        # the QtWebengine components is built using ninja
        depends_build       port:ninja
        # qtwebengine/src/3rdparty/ninja/bootstrap.py calls g++ (must set CXX)
        build.env-append    CXX=${configure.cxx}

        # extract only the qtwebengine component
        extract.post_args-append    ${distname}/qtwebengine
        post-configure {
            # try to detect and handle an issue with building out-of-tree
    #         if {![file exists ${build.dir}/config.log]} {
    #             if {[variant_isset universal]} {
    #                 ui_error "\nConfiguration error; please retry\n"
    #                 return -code error "Configuration error"
    #             } else {
    #                 system -W ${configure.dir} "${configure.cmd} ${configure.pre_args} ${configure.args}"
    #             }
    #         }
        }
    }
}

subport ${name}-sqlite3-plugin {
    replaced_by         ${name}
    PortGroup           obsolete 1.0

    PortGroup           qmake5 1.0

    depends_lib-append port:sqlite3

    # extract only the qtbase component
    extract.post_args-append    ${distname}/qtbase ${distname}/configure
    # for single architecture, easier to use
    #    worksrcdir ${worksrcdir}/qtbase/src/plugins/sqldrivers/sqlite,
    #    but doesn't work for universal build
    configure.dir ${worksrcpath}/qtbase/src/plugins/sqldrivers/sqlite
    build.dir     ${configure.dir}
    destroot.dir  ${configure.dir}

    configure.args-append "INCLUDEPATH+=${prefix}/include" "LIBS+=\"-L${prefix}/lib -lsqlite3\""
    post-destroot {
        xinstall -m 775 -d ${destroot}${qt_cmake_module_dir}
        foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir}/cmake/ *] {
            file rename ${f} ${destroot}${qt_cmake_module_dir}/
        }
    }
}

subport ${name}-psql84-plugin {
    PortGroup           qmake5 1.0

    depends_lib-append port:postgresql84

    # extract only the qtbase component
    extract.post_args-append    ${distname}/qtbase
    post-extract {
        file delete -force ${worksrcpath}/qtbase/mkspecs
    }
    # for single architecture, easier to use
    #    worksrcdir ${worksrcdir}/qtbase/src/plugins/sqldrivers/psql,
    #    but doesn't work for universal build
    configure.dir ${worksrcpath}/qtbase/src/plugins/sqldrivers/psql
    build.dir     ${configure.dir}
    destroot.dir  ${configure.dir}

    configure.args-append "INCLUDEPATH+=${prefix}/include/postgresql84" "LIBS+=\"-L${prefix}/lib/postgresql84 -lpq\""
    post-destroot {
        xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}
        move ${destroot}${qt_frameworks_dir}/cmake/Qt5Sql ${destroot}${qt_cmake_module_dir}
    }
}

subport ${name}-examples {
    PortGroup                   qmake5 1.0

    description                 ${description} - the examples
    long_description            ${long_description} - the examples
    universal_variant           no

    # extract only the examples
    extract.post_args-append    ${distname}/qtbase/examples/            \
                                ${distname}/qtconnectivity/examples/    \
                                ${distname}/qtdeclarative/examples/     \
                                ${distname}/qtenginio/examples/         \
                                ${distname}/qtlocation/examples/        \
                                ${distname}/qtmacextras/examples/       \
                                ${distname}/qtmultimedia/examples/      \
                                ${distname}/qtquick1/examples/          \
                                ${distname}/qtquickcontrols/examples/   \
                                ${distname}/qtscript/examples/          \
                                ${distname}/qtsensors/examples/         \
                                ${distname}/qtsvg/examples/             \
                                ${distname}/qttools/examples/           \
                                ${distname}/qtwebkit-examples/examples/ \
                                ${distname}/qtxmlpatterns/examples/
    if {${QT54}} {
        variant qtwebengine description {build the qtwebengine examples too} {
            depends_lib-append          port:${name}-qtwebengine
            extract.post_args-append    ${distname}/qtwebengine/examples/
            post-extract {
                copy ${filespath}/all-examples.pro ${workpath}/${worksrcdir}/all-examples.pro
                file mkdir ${workpath}/build
            }
        }
    }
    # QT54 -qtwebengine and QT53 share the same list of examples to build:
    if {![variant_isset qtwebengine]} {
        post-extract {
            copy ${filespath}/qt532/all-examples.pro ${workpath}/${worksrcdir}/all-examples.pro
            file mkdir ${workpath}/build
        }
    }

    default configure.dir       {${workpath}/build}
    configure.pre_args-append   ../${worksrcdir}/all-examples.pro
    default build.dir           {${workpath}/build}
    post-destroot {
        # this may be a bug in Qt 5.4.1: libgruesensor.1.dylib must be accessed through a complete path but
        # isn't stored like that in 2 dependents.
        system "install_name_tool -change libgruesensor.1.dylib ${qt_examples_dir}/sensors/grue/libgruesensor.1.dylib \
            ${destroot}${qt_examples_dir}/sensors/grue/Grue/libdeclarative_grue.dylib"
        system "install_name_tool -change libgruesensor.1.dylib ${qt_examples_dir}/sensors/grue/libgruesensor.1.dylib \
            ${destroot}${qt_examples_dir}/sensors/grue/sensors/libqtsensors_grue.dylib"
    }
}

livecheck.type      regex
livecheck.url       http://download.qt.io/archive/qt/5.4/
livecheck.regex     (\\d+(\\.\\d+)+)
