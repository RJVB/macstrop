# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# kate: backspace-indents true; indent-pasted-text true; indent-width 4; keep-extra-spaces true; remove-trailing-spaces modified; replace-tabs true; replace-tabs-save true; syntax Tcl/Tk; tab-indents true; tab-width 4;
# Copyright (c) 2015-18 R.J.V. Bertin

PortSystem          1.0
PortGroup           conflicts_build 1.0

set basename        qt5-kde
set namesuffix      -devel
name                ${basename}${namesuffix}

ui_debug "Port ${subport}, configure.optflags=${configure.optflags} configure.compiler=${configure.compiler}"

version             5.9.7
# we no longer include the fallback to Qt 5.3 for OS X 10.6 (use port:qt53-kde for that)
set QT53            no

set is_stubport     no

#### revision magic
# for backport-from-future patches 2 & 3
# +1 for ditto patch 4
# +1 for OpenSSL 1.1 patch
if {${subport} eq "${name}"} {
    revision        [expr ${revision} + 3]
} elseif {${subport} eq "${name}-x11"} {
    revision        1
}
platform darwin {
#     # for patch-add-cups-printsupport.diff
#     if {${subport} eq "${name}"} {
#         revision        [expr ${revision} + 1]
#     }
}
platform linux {
#     # for the missed reinplace of @PREFIX@
#     if {${subport} eq "${name}" || ${subport} eq "${name}-x11"} {
#         revision        [expr ${revision} + 1]
#     }
}
####

# set building_qt5 immediately, before including the Qt5 PortGroup!
set building_qt5    1
set qt5.prefer_kde  1
PortGroup           qt5 1.0

if {${subport} ne "${name}-qtwebengine"} {
    PortGroup       muniversal 1.0
}

if {![info exists qt5.using_kde] || !${qt5.using_kde}} {
    ui_error "Using port ${subport} without the corresponding Qt5 PortGroup"
    return -code error "Qt5 PortGroup mismatch"
}

# a convenience procedure to register conflicts among the different Qt5 ports:
# for instance: [qt5_port_conflicts {qtbase x11}]
proc qt5_port_conflicts {components} {
    global namesuffix available_qt5_versions
    set cnfls {}
    if {${namesuffix} eq ""} {
        set suffix "-devel"
    } else {
        set suffix ""
    }
    foreach comp ${components} {
        foreach {v info} ${available_qt5_versions} {
            if {${comp} ne "" && ${comp} ne "qtbase"} {
                set cnfls [lappend cnfls ${v}-${comp}]
                set cnfls [lappend cnfls ${v}-kde${suffix}-${comp}]
            } else {
                set cnfls [lappend cnfls ${v}-qtbase]
                set cnfls [lappend cnfls ${v}-kde${suffix}]
            }
        }
    }
    return ${cnfls}
}

# convenience replacement for the PortGroup procedure which can be used
# to include the qmake5 PG without re-including the Qt5-kde PG.
proc use_PortGroup {name vers} {
    uplevel namespace eval qt5 {set dont_include_twice yes}
    ui_debug "Including PortGroup ${name} ${vers}"
    uplevel PortGroup          ${name} ${vers}
    # if ${name} eq "qmake5" then dont_include_twice will already have been unset!
    if {[info exists qt5::dont_include_twice]} {
        uplevel namespace eval qt5 {unset dont_include_twice}
    }
}

proc which_variant {args} {
    set vlist {}
    foreach v [join ${args}] {
        if {[variant_isset ${v}]} {
            set vlist [lappend vlist ${v}]
        }
    }
    return ${vlist}
}

proc switch_variant {args} {
    set code [lindex $args end]
    set variant [which_variant [lrange ${args} 0 end-1]]
    switch ${variant} ${code}
}
# # # examples:
# # set vv [which_variant harfbuzz qt5kde LTO]
# # switch ${vv} {
# #     "harfbuzz" {
# #         ui_msg "harfbuzz"
# #     }
# #     "qt5kde" {
# #         ui_msg "qt5kde"
# #     }
# #     default {
# #         ui_msg "other: ${vv}"
# #     }
# # }
# # switch_variant harfbuzz qt5kde LTO {
# #     "harfbuzz" {
# #         ui_msg "harfbuzz"
# #         depends_extract-append port:HB
# #     }
# #     "qt5kde" {
# #         ui_msg "qt5kde"
# #         depends_extract-append port:KDE
# #     }
# #     default {
# #         ui_msg "other: ${variant}"
# #     }
# # }

### nothing to be seen from here on, move along :)

# optional support for HFS-compression of the source and build dirs
if {[file exists ${qt5::currentportgroupdir}/compress_workdir-1.0.tcl]} {
    PortGroup       compress_workdir 1.0
}

# set branch          [join [lrange [split ${version} .] 0 1] .]
set branch          [qt5.active_branch]

# minimal version variables:
set QT59            yes
set PF59x           "qt593/"
set PF594           "qt594/"
set PF595           "qt595/"
set PF596           "qt596/"
set PF597           "qt597/"

categories          aqua
platforms           macosx linux
maintainers         gmail.com:rjvbertin
license             LGPL-3

homepage            http://qt.io
description         Qt Tool Kit ${branch}, tuned for an improved KF5 experience
long_description    Qt Tool Kit: A cross-platform framework \
                    (headers, data, and libraries) for writing \
                    cross-platform GUI-based applications. This port uses an installation layout \
                    and includes a number of patches \
                    aimed at improving the KF5 experience (by supporting the selected KDE theme for instance), \
                    and enables useful backtraces into Qt code for debugging.\
                    It provides most of Qt in a single port rather than using port:qt5's one-component-per-subport approach. \
                    It does provide the same subports port:qt5 provides, as stubs. Installs to ${qt_dir}.\n\
                    For license info, see http://doc-snapshots.qt.io/qt5-${branch}/licenses-used-in-qt.html

platform darwin {
    notes-append    "Install port:kf5-osx-integration-devel and set KDE_SESSION_VERSION to 4 or 5 in order to \
                    apply the theme/style selected for KF5 applications automatically in all Qt5 applications.\
                    What also should work (with any Qt5 version) is to set QT_QPA_PLATFORMTHEME=kde, but only osx-integration \
                    will provide support for icon themes in ${prefix}/share/icons."
}

distname            qt-everywhere-opensource-src-${version}

master_sites        http://download.qt.io/official_releases/qt/${branch}/${version}/single/

use_xz              yes

# 20171218: qtwebkit is a stub pulling in port:qt5-webkit
set qtwebkit_is_stub yes

if {${subport} ne "${name}-qtwebkit"} {
    distfiles       ${distname}${extract.suffix}
    checksums       rmd160  162aaecdaea0e4ff999406e64475cc7ee3b751bf \
                    sha256  1c3852aa48b5a1310108382fb8f6185560cefc3802e81ecc099f4e62ee38516c
#                     size    462427728
}

# Share the distfiles dir with port:qt5
dist_subdir         qt5

# be neat and put all --exclude extract exclusions before any specified components to extract
options             do_not_extract \
                    extract_components
default do_not_extract      {}
default extract_components  {}
proc collect_extract_args {} {
    foreach comp [option do_not_extract] {
        extract.post_args-append --exclude ${comp}
    }
    foreach comp [option extract_components] {
        extract.post_args-append ${comp}
    }
    ui_info "Excluding components: [option do_not_extract]"
    ui_info "Exclusive components: [option extract_components]"
}
pre-extract {
    collect_extract_args
}
extract.pre_args-append     -T 0
if {${os.platform} ne "darwin"} {
    if {[file exists ${prefix}/bin/bsdtar]} {
        extract.post_args | ${prefix}/bin/bsdtar --no-same-owner -xf -
    }

    if {[variant_isset universal]} {
        return -code error "The universal variant only makes sense on Darwin/OS X"
    }
}

if { ${os.platform} ne "darwin" } {
    # probably linux, violate MacPorts premises by allowing a build fully dependent
    # on system/host libraries.
    pre-fetch {
        ui_msg "On \"${os.platform}\" most dependencies are obtained from the host, expect unforeseen issues!!"
    }
} elseif { ${os.major} < 13 } {
    pre-fetch {
        ui_error "OS X prior to 10.9 is not a Reference Configuration for Qt."
        ui_error "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
        return -code error "unsupported OS"
    }
    replaced_by qt58-kde
    PortGroup obsolete 1.0
} elseif { ${os.major} > 17 } {
    pre-fetch {
        ui_warn "future OS version; not a Reference Configuration for Qt."
        ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
    }
} else {
    if { ${os.major} == 13 && ${subport} ne "${name}-qtwebengine"} {
        pre-fetch {
            ui_warn "OS X 10.9 is not officially supported by Qt but possible by reintroducing code \
                    that was removed from the Cocoa QPA plugin"
            ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
        }
    }
    if { [variant_isset universal] } {
        pre-fetch {
            ui_warn "Multiple architectures is not a Reference Configuration for Qt."
            ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
        }
    } else {
        if { ${build_arch} eq "i386" } {
            pre-fetch {
                ui_warn "32-bit mode is not a Reference Configuration for Qt."
                ui_warn "See http://qt-project.org/doc/qt-5/supported-platforms.html#reference-configurations"
            }
        }
    }
}

if { ${subport} eq "${name}-zz-docs"  } {
    universal_variant                       no
    installs_libs                           no
    configure.args-append                   "-platform ${qt_qmake_spec}"
} else {
    if { ![variant_isset universal] } {
        configure.args-append               "-platform ${qt_qmake_spec}"
    } else {
        set merger_configure_env(i386)      "QMAKESPEC=${qt_qmake_spec_32}"
        set merger_configure_env(x86_64)    "QMAKESPEC=${qt_qmake_spec_64}"
        set merger_configure_args(i386)     "-platform ${qt_qmake_spec_32}"
        set merger_configure_args(x86_64)   "-platform ${qt_qmake_spec_64}"
        set merger_arch_flag                yes
        set merger_arch_compiler            yes
    }
}


if {[info exists env(QTDIR)]} {
    ui_msg "unsetting \$QTDIR"
    unset env(QTDIR)
}

patch.pre_args              -Np1

if {${subport} eq ${name}} {
#     PortGroup           select 1.0
#     select.group        qt
#     select.file         ${filespath}/qt5-kde
    if {${os.platform} eq "darwin"} {
        variant abort description {this variant provides qFatal's standard behaviour of calling abort(2) instead of quitting with an alert dialog} {}
    }
}

set CXX                     [file tail ${configure.cxx}]
set CXX_dir                 [file dirname ${configure.cxx}]
set CXX_parts               [split ${CXX} -]
set CXX_family              [lindex ${CXX_parts} 0]
set CXX_mp                  [expr {[lindex ${CXX_parts} 1] eq "mp"}]
set CXX_vsuffix             [join [lrange ${CXX_parts} 1 end] -]
unset CXX_parts

if { ${subport} eq ${name} || ${subport} eq "${name}-zz-docs" || ${subport} eq "${name}-x11"} {
    # use the qt5 group; set 'building_qt5' so that the portgroup
    # does not include certain parts
    conflicts-append    qt3 qt3-mac [qt5_port_conflicts {qtbase x11}]
    PortGroup           xcodeversion 1.0

    minimum_xcodeversions   {13 6.2}

    use_parallel_build  yes

    # as yet untested check copied from port:qt5
    if {${os.platform} eq "darwin" && ${configure.compiler} ne "clang"} {
        if {[string match macports-clang-* ${configure.compiler}] && [vercmp ${xcodeversion} "7.0"] >= 0} {
            # non-Xcode clang does not seem to be able to understand tbd files
            # for an explanation of tbd files, see
            #    http://stackoverflow.com/questions/31450690/why-xcode-7-shows-tbd-instead-of-dylib
            # see https://trac.macports.org/ticket/53151
            pre-fetch {
                ui_error "This configuration is known to fail"
                ui_error "See https://trac.macports.org/ticket/53151"
                ui_error "As a workaround, do not set configure.compiler manually"
                return -code error "incompatible configuration"
            }
        }
    }

    # When testing, ensure that a universal object file is not created inadvertently.
    patchfiles-append       ${PF59x}patch-machtest.diff

    # see http://stackoverflow.com/questions/14506151/invalid-symbol-redefinition-in-inline-asm-on-llvm
    patchfiles-append       ${PF59x}patch-tst_benchlibcallgrind.diff

    if {${subport} ne "${name}-x11"} {
        # see #44934 (and #35067 for the qt4-mac version)
        patchfiles-append   ${PF59x}patch-shared.diff
    }

    # Mac menu items shouldn't have icons according to the HIG (and I agree)
    patchfiles-append       ${PF59x}patch-no-icons-in-menus.diff
    patchfiles-append       ${PF59x}patch-find-opengl.diff
    # correct the font directories returned by QStandardPaths (incorporated into the qsp patch #4):
    # patchfiles-append   fix-qsp_fontlocations.patch
    # patch QStandardPaths so that it can optionally return XDG-compliant locations
    # the patch of headers.pri is in a separate file because it contains very long lines.
    # The linux patch is safe to apply on OS X and probably required on FreeBSD
    patchfiles-append       ${PF596}fix-qstandardpaths6.patch \
                            ${PF594}fix-qstandardpaths-headerspri.patch \
                            ${PF59x}fix-qstandardpaths-linux.patch \
                            ${PF59x}patch-lookup-css-monospace-font.diff
    if {${os.platform} ne "darwin"} {
        post-patch {
            # build the QspXDG activator CMake stuff even if it doesn't do anything on Linux
            reinplace "s|mac : SUBDIRS += src_qsp_xdg|SUBDIRS += src_qsp_xdg|g" ${worksrcpath}/qtbase/src/src.pro
        }
    }
    # patch qtpaths and qtdiag:
    if {${subport} eq "${name}"} {
        patchfiles-append   ${PF59x}patch-qtdiag-all-locations-and-qspmode.diff \
                            ${PF59x}patch-qtpaths-all-locations.diff
        if {${os.platform} eq "darwin"} {
            patchfiles-append \
                            ${PF59x}patch-qtpaths-qspmode.diff
        }
    }
    # https://bugreports.qt.io/browse/QTBUG-31034 and https://bugreports.qt.io/browse/QTBUG-31034?focusedCommentId=277009
    patchfiles-append       ${PF59x}patch-missing-autoreleasepools.diff

    platform darwin {
        # these enable automatic loading of a KDE platform theme plugin
        # they're tested on Linux too but not used for "official" builds there
        if {${subport} eq ${name}} {
            patchfiles-append \
                            ${PF59x}patch-enable-qgenericunixthemes.diff
        } elseif {${subport} eq "${name}-x11"} {
            patchfiles-append \
                            ${PF59x}patch-enable-qgenericunixthemes-xcb.diff
        }
        patchfiles-append   ${PF59x}patch-enable-qgenericunixservices.diff
        # and this one if probably required because of adding the genericunix stuff:
        patchfiles-append   ${PF59x}patch-enable-fontconfig.diff
    }

    # 2 more reported bugs
    patchfiles-append       ${PF59x}patch-nonull-setAsDockMenu.diff \
                            ${PF59x}patch-qkqueuefilesystemwatcher_addPaths.diff

    # make sure the private headers are always found through the CMake files,
    # even in an out-of-tree build
    patchfiles-append       ${PF59x}patch-always_include_private_headers.diff

    # print out some more info when warning about a menu item already added somewhere else
    patchfiles-append       ${PF59x}patch-better-menuitem-insert-warning.diff

    # it's not Qt's role to inform the user constantly if s/he removed fonts that are in Apple's fallback font list
    patchfiles-append       ${PF59x}dont-warn-missing-fallback-fonts.patch

    # patches from Ubuntu 5.3.2+dfsg-4ubuntu8 (from Vivid Vervet)
    if {[variant_isset examples]} {
        patchfiles-append   ${PF59x}remove_icon_from_example.patch
                            ${PF59x}remove_google_adsense.patch
    }

    patchfiles-append       ${PF59x}load_testability_from_env_var.patch \
                            ${PF59x}disable-generic-plugin-when-others-available.patch

    if {${subport} eq ${name} && ${os.platform} eq "darwin"} {
        if {![variant_isset abort]} {
            patchfiles-append   ${PF59x}patch-qFatal-no-abort.diff
        }
        # emulate QMenu sections (QMenu::addSection). This is done by adding
        # an inactive, centred text item and a separator to the menu instead of
        # a separator with text hint ("underlined text") when the style use doesn't
        # support such "texted separators". This is the case notably with the native
        # Mac style.
        # The Qt devs refuse to see the problem with dropping potentially crucial
        # information from menus and reject patches like this.
        # Also improve the fallback fullscreen mode.
        patchfiles-append   ${PF594}patch-qmenuAddSection.diff \
                            ${PF59x}patch-improve-fallback-fullscreen-mode.diff
    }

    # patch-fontpanel.diff -> patch-assistant-fontpanel.diff for Qt 5.9
    patchfiles-append       ${PF597}patch-improve-fontweight-support9.diff \
                            ${PF59x}patch-assistant-fontpanel.diff

    platform darwin {
        patchfiles-append   ${PF59x}patch-respect-DontSwapCtrlMeta.diff
    }

    # https://codereview.qt-project.org/124643/
    # starting with Freetype font rendering: -platform cocoa:fontengine=freetype
    patchfiles-append       ${PF59x}patch-fix-build-when-system-freetype-is-detected.diff
    # fix font colour due to inappropriate gamma. The XCB patch also adds
    # an override for the event compression feature (QT_XCB_NO_COMPRESS_EVENTS)
    patchfiles-append       ${PF59x}patch-freetype-gamma-cocoa.diff \
                            ${PF59x}patch-xcb-fontgamma.diff
    patchfiles-append       ${PF59x}patch-silence-qpixmap-warnings.diff
    # do not omit pkg-config files:
    # https://codereview.qt-project.org/#/c/140954/
    # https://github.com/Homebrew/legacy-homebrew/commit/620baaf10c957875d9d2b958343456f0d35d15fc
    patchfiles-append       ${PF59x}patch-restore-pc-files.diff

    # https://codereview.qt-project.org/157488 + https://codereview.qt-project.org/161056
    patchfiles-append       ${PF59x}patch-fix-dbus-crash-at-exit.diff
    if {${subport} eq "${name}"} {
        # https://codereview.qt-project.org/#/c/172619/
        patchfiles-append   ${PF59x}patch-qtconn-for-10.12.diff \
                            ${PF59x}patch-qttools-skip-assistant.diff
        # https://codereview.qt-project.org/181230/
        patchfiles-append   ${PF59x}patch-cmake-warn-compile_features.diff
        patchfiles-append   ${PF59x}patch-no-pulseaudio+gstreamer.diff
        # https://bugreports.qt.io/browse/QTBUG-58267
        platform darwin 13 {
            # TODO : regroup all 109 patches
            patchfiles-append   ${PF59x}patch-readable-selected-tab-109.diff
        }
        # support NSMenuFunctionKey and Qt::Key_Menu
        patchfiles-append   ${PF59x}patch-keyboard-support-menukey.diff
        # https://trac.macports.org/ticket/53369
        patchfiles-append   ${PF59x}patch-use-openssl-mp.diff
        # https://trac.macports.org/ticket/58218
        patchfiles-append   ${PF597}patch-openssl11-support-qt597.diff
        platform darwin 13 {
            # TODO : regroup all 109 patches
            patchfiles-append   ${PF59x}/patch-firstObject-109.diff
        }
        # enable the VNC qpa which allows to display Qt applications remotely
        patchfiles-append   ${PF59x}/patch-enable-vnc-qpa.diff
        patchfiles-append   ${PF59x}/patch-handle-null-corefonts.diff

#         # revert a regression
#         # https://bugreports.qt.io/browse/QTBUG-68939
#         patchfiles-append   ${PF596}/patch-fix-qtbugfix-16252.diff
        platform darwin {
            # this adds printing support when using the XCB QPA (X11 mode)
            patchfiles-append \
                            ${PF596}/patch-add-cups-printsupport.diff
        }
        # avoid a boost build failure on 10.13+
        patchfiles-append   ${PF596}patch-avoid-boost-autoptr-bug.diff
        # don't initialise the network manager after calling it quits
        patchfiles-append   ${PF596}patch-nm-not-when-quitting.diff

    }
    # https://codereview.qt-project.org/#/c/177188/
    patchfiles-append       ${PF59x}patch-ibus-fix.diff
    # avoid warnings about -Wdate-time
    patchfiles-append       ${PF597}patch-wdate-time.diff

    patchfiles-append       ${PF59x}patch-printpreview-pdf-export.diff

    # take down the QRegExpEngine cache early so it won't try to
    # access objects residing in unloaded library space
    patchfiles-append       ${PF59x}patch-empty-qregexpeng-cache-early.diff

    # prevent a nullptr dereference in QLocale::monthName() (during global destruction)
    patchfiles-append       ${PF594}patch-qlocale-nullptr-deref.diff

    # give runtime control over the mkspec directory used in CMake-based projects
    patchfiles-append       ${PF597}patch-runtime-cmake_mkspec.diff

    # --prefix is not recognised.
    configure.pre_args-delete --prefix=${prefix}

    # --disable-dependency-tracking is not recognised.
    configure.universal_args-delete --disable-dependency-tracking

    # NB: -prefix->${prefix} !
    configure.args-append                      \
        -prefix         ${prefix}              \
        -archdatadir    ${qt_dir}              \
        -docdir         ${qt_docs_dir}         \
        -headerdir      ${qt_includes_dir}     \
        -plugindir      ${qt_plugins_dir}      \
        -importdir      ${qt_imports_dir}      \
        -qmldir         ${qt_qml_dir}          \
        -datadir        ${qt_data_dir}         \
        -libdir         ${qt_frameworks_dir}   \
        -bindir         ${qt_bins_dir}         \
        -libexecdir     ${qt_dir}/libexec      \
        -translationdir ${qt_translations_dir} \
        -sysconfdir     ${qt_sysconf_dir}      \
        -examplesdir    ${qt_examples_dir}     \
        -testsdir       ${qt_tests_dir}        \
        -hostbindir     ${qt_bins_dir}         \
        -hostlibdir     ${qt_frameworks_dir}   \
        -hostdatadir    ${qt_host_data_dir}

# Configure options:

    # set up things for an out-of-source build:
    default configure.dir   {${workpath}/build}
    default build.dir       {${workpath}/build}
    if {${subport} eq "${name}-x11"} {
        #default configure.cmd   {../${worksrcdir}/qtbase/configure}
        default configure.cmd   {../${worksrcdir}/configure}
    } else {
        default configure.cmd   {../${worksrcdir}/configure}
    }

    if {[file exists ${configure.dir}/config.status]} {
        # support reconfigure runs
        pre-configure {
            ui_info "--> Reconfiguring"
        }
        configure.args-append -redo -recheck-all
    }
    configure.args-append \
        -v                \
        -release          \
        -opensource       \
        -confirm-license  \
        -shared
    if {[variant_exists LTO] && [variant_isset LTO]} {
        configure.args-append -ltcg
    }

    if {${os.platform} eq "darwin"} {
        configure.args-append   \
            -force-pkg-config   \
            -no-evdev           \
            -no-linuxfb         \
            -no-kms             \
            -framework          \
            -no-rpath

        # Third Party Libraries:
        configure.args-append \
            -no-mtdev         \
            -no-harfbuzz      \
            -openssl-runtime  \
            OPENSSL_PREFIX=${prefix} \
            -no-xinput2       \
            -no-xcb           \
            -no-xcb-xlib
        # in Qt 5.8+ these are only available when building the main port:
        if {${subport} eq "${name}"} {
            configure.args-append \
                -no-pulseaudio \
                -no-gstreamer
        }

        # configure options that don't show up in configure --help
        configure.args-append \
            -no-libudev       \
            -no-egl
        configure.args-append \
            -no-libproxy
        if {${os.major} <= 13} {
            configure.args-append \
                -c++std "c++11"
        }
    } else {
        # make the configure script ignore the presence of /System/Library/Frameworks/Carbon.framework
        # (as an indicator that we're building on Mac...)
        patchfiles-append   ${PF59x}patch-build_not_on_mac.diff
        configure.args-delete  \
            -libdir         ${qt_frameworks_dir}   \
            -hostlibdir     ${qt_frameworks_dir}
        configure.args-append  \
            -libdir         ${qt_libs_dir}          \
            -hostlibdir     ${qt_libs_dir}
        # presume we want to build the xcb version.
        # Qt 5.9 needs (and includes a copy of) xcb >= 1.5
        configure.args-append   \
            -xcb -xcb-xlib      \
            -qpa xcb            \
            -no-linuxfb         \
            -rpath              \
            -R ${prefix}/lib    \
            -R ${qt_libs_dir}   \
            -no-reduce-relocations
    }
    patchfiles-append \
                ${PF59x}/patch-toolchainprf.diff \
                ${PF59x}/patch-configurejsons.diff

    post-patch {
        file copy -force ${filespath}/${PF59x}/save-as-pdf-24.png ${worksrcpath}/qtbase/src/printsupport/dialogs/images/
        file copy -force ${filespath}/${PF59x}/save-as-pdf-32.png ${worksrcpath}/qtbase/src/printsupport/dialogs/images/
        reinplace -W ${worksrcpath}/qtbase "s|@PREFIX@|${prefix}|g" \
                mkspecs/features/toolchain.prf \
                src/platformsupport/themes/genericunix/qgenericunixthemes.cpp \
                src/network/ssl/qsslsocket_openssl_symbols.cpp \
                src/corelib/io/qstandardpaths_unix.cpp
    }

# Additional options:
    configure.args-append    \
        {-make libs}         \
        {-make tools}        \
        {-nomake examples}   \
        {-nomake tests}      \
        -verbose             \
        -no-pch              \
        -cups                \
        -icu                 \
        ICU_PREFIX=${prefix} \
        -fontconfig          \
        -dbus-linked         \
        -glib                \
        -no-directfb         \
        -system-pcre
    configure.args-append       -no-use-gold-linker

    configure.args-append       -optimized-qmake

    if {[tbool configure.ccache]} {
        configure.args-append   -ccache
    }

    # the sqlite3 ("sqlite") and mysql plugins have been re-absorbed into the main port
    configure.args-append       -system-sqlite
    if {${os.platform} eq "darwin"} {
        depends_lib-append      port:sqlite3
    }
    foreach driver { db2 ibase oci odbc psql sqlite2 tds } {
        configure.args-append   -no-sql-${driver}
    }


    if {${subport} eq "${name}-x11"} {
        # patch-fontpanel.diff -> patch-assistant-fontpanel.diff for Qt 5.9
        patchfiles-delete       ${PF59x}patch-assistant-fontpanel.diff
        patchfiles-append       ${PF594}patch-to-build-xcb.diff \
                                ${PF597}patch-xcb-silence-xvisual-warning.diff
        post-patch {
            # avoid introducing dependencies on the OpenGL frameworks; that means not building the cocoa QPA
            # which is fine because we don't need it (and it's already installed).
            set ext "pro"
            reinplace -W ${worksrcpath}/qtbase/src "s|mac:|cocoa:|g" platformsupport/cglconvenience/cglconvenience.${ext}
            reinplace -W ${worksrcpath}/qtbase/src "s|mac |cocoa |g" plugins/platforms/platforms.pro
        }
        configure.args-delete   -no-xinput2 -no-xcb -no-xcb-xlib
        configure.args-append   -xcb -xcb-xlib -qpa xcb
        patchfiles-append       ${PF59x}patch-xcb-XOpenGL-full.diff \
                                ${PF59x}patch-xcb-use-qgenunixfontdb.diff
    } else {
        # make sure that the Designer doesn't try to use a global menubar when using the xcb plugin.
        # Yes, this patch has to be applied when building the master port, not the xcb plugin subport...
        patchfiles-append       ${PF59x}patch-designer-show-menubar-on-xcb.diff
        # patch for building on 10.13:
        patchfiles-append       ${PF59x}patch-qtscript_ceil.diff
        # the opposite of patch-xcb-use-qgenunixfontdb.diff; allow building with fontconfig
        # (complement to patch-enable-fontconfig.diff)
        patchfiles-append       ${PF59x}patch-qcocoa-use-qcoretextfontdb.diff
        # configure options that don't show up in configure --help
        # https://bugreports.qt.io/browse/QTBUG-69734
        # https://codereview.qt-project.org/236047
        patchfiles-append       ${PF596}patch-qpa+coreaudio-outplugin.diff
    }
    # print out some additional debugging info when copying to the X11 clipboard fails
    # (This happens only under XQuartz, OR only has a negative effect there)
    patchfiles-append           ${PF594}patch-xcbclipboard-debugging.diff

    platform darwin {
        if {${subport} eq "${name}-zz-docs"} {
            configure.args-delete   -no-xinput2 -no-xcb -no-xcb-xlib
            configure.args-append   -xcb -xcb-xlib
        }

        # determine the most appropriate SDK to use (taken from the qt4-mac Portfile):
        global OSX_MINOR
        set OSX_MINOR ""
        # hopefully the MACOSX_DEPLOYMENT_TARGET exists and is set by now.  if
        # not, last resort (which is not desirable) is to use the os.version.
        if {${macosx_deployment_target} ne ""} {
            set OSX_MINOR [lindex [split ${macosx_deployment_target} "."] 1]
        } else {
            set OSX_MINOR [expr ${os.major} - 4]
        }
        if {${OSX_MINOR} == 9} {
            pre-configure {
                ui_warn "Building on OS X 10.9, using the 10.10 SDK"
            }
            set OSX_MINOR 10
        }
        if {${configure.sdkroot} ne ""} {
            ui_debug "Using SDK from configure.sdkroot= ${configure.sdkroot}"
            configure.args-append \
                -sdk [string tolower [join [lrange [split [lindex [split ${configure.sdkroot} "/"] end] "."] 0 end-1] "."]]
        } else {
            # default: build for the current OS version, requesting the corresponding SDK explicitly
            if {[catch {exec xcrun --show-sdk-path -sdk macosx10.${OSX_MINOR}} result]} {
                ui_debug "Couldn't find preferred SDK macosx10.${OSX_MINOR}: ${result}"
                # the preferred matching SDK isn't available; check if the default SDK is
                set SDK [exec xcrun -show-sdk-version]
                if {[catch {exec xcrun --show-sdk-path -sdk macosx${SDK}} result]} {
                    ui_msg "Couldn't find the preferred nor a SDK macosx${SDK}: ${result}"
                    ui_msg "WARNING: this has been known to lead to build errors"
                } else {
                    ui_debug "Using default SDK macosx${SDK}"
                    configure.args-append \
                            -sdk macosx${SDK}
                }
            } else {
                ui_debug "Using SDK macosx10.${OSX_MINOR} : ${result}"
                configure.args-append \
                        -sdk [string tolower "macosx10.${OSX_MINOR}"]
            }
        }

        # We don't want qmake to 2nd-guess the compiler we specify in our mkspec and
        # replace it with an Xcode compiler determined by xcrun.
        # 20150723: also exclude the QMAKE_LINK commands from being determined by xcrun
        # 20171218: NOTE: mcalhoun proposed change (cf. https://codereview.qt-project.org/141654/)
        #   is contrary to my intention here so we don't include is patch-add_sdk.diff patch.
        patchfiles-append       ${PF59x}patch-sdk.prf-xcrun-not-for-compilers.diff
        # UsingTheRightCompiler:
        patchfiles-append       ${PF59x}patch-clangconf.diff
        # more patches from port:qt5 (@5.9.2):
        patchfiles-append       ${PF59x}patch-find_rez.diff

        if {${os.major} == 13} {
            # "backport" stripped code for OS X 10.9 and make a few tweaks to allow
            # building with AppleClang 600 . 10.9 support currently requires disabling
            # the bearer plugin (not a big loss).
            # There are a few more 109 patches elsewhere that should be moved here.
            # Maybe it's a good idea to disable Application Extension Only enforcing everywhere
            # (or maybe it should be a variant?)
            patchfiles-append   ${PF59x}patch-backport-corelib-109.diff \
                                ${PF59x}patch-backport-gui-109.diff \
                                ${PF59x}patch-macstyle-build-on-109.diff \
                                ${PF59x}patch-qcocoa-build-on-109.diff \
                                ${PF594}patch-disable-bearer-109.diff \
                                ${PF59x}patch-no-app_ext-only-109.diff
            if {${subport} eq ${name}} {
                patchfiles-append \
                                ${PF59x}patch-backport-qtpurchasing-109.diff
            }
        }

        set mkspecs_cache ${workpath}/mkspecs_cache
        set cached_mkspecs {common/clang.conf common/mac.conf features/mac/rez.prf common/clang-mac.conf \
                            macx-clang/qmake.conf macx-g++/qmake.conf macx-icc/qmake.conf}
        proc tweak_mkspecs {} {
            global CXX_mp CXX_vsuffix
            global os.platform macosx_deployment_target worksrcpath build_arch
            global configure.cxx configure.cc configure.cxx_stdlib
            if {[variant_isset LTO] && ${os.platform} eq "darwin"} {
                # check if this is still required... (or needs to be updated)
                if {${CXX_mp}} {
                    reinplace "s|@LLVM_AR@|${CXX_dir}/llvm-ar-${CXX_vsuffix}|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                    reinplace "s|@LLVM_NM@|${CXX_dir}/llvm-nm-${CXX_vsuffix}|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                    # this may seem surprising, but it's the stock setting:
                    reinplace "s|@LLVM_RANLIB@|true|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                } elseif {${os.major} <= 13} {
                    reinplace "s|@LLVM_AR@|ar|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                    reinplace "s|@LLVM_NM@|nm|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                    reinplace "s|@LLVM_RANLIB@|ranlib|g" ${worksrcpath}/qtbase/mkspecs/common/clang.conf
                }
                # else not yet needed.
            }
            reinplace -W ${worksrcpath}/qtbase "s|__MACPORTS_Rez__|[exec xcrun --find Rez]|g" \
                                mkspecs/common/mac.conf \
                                mkspecs/features/mac/rez.prf
            # UsingTheRightCompiler:
            reinplace -W ${worksrcpath}/qtbase/mkspecs/common "s|macportsclang++|${configure.cxx}|g" clang.conf
            reinplace -W ${worksrcpath}/qtbase/mkspecs/common "s|macportsclang|${configure.cc}|g" clang.conf
            if {${configure.cxx_stdlib} ne ""} {
                reinplace "s|__MACPORTS_CXX_STDLIB__|${configure.cxx_stdlib}|g" \
                    ${worksrcpath}/qtbase/mkspecs/common/clang-mac.conf
            } else {
                reinplace "s|__MACPORTS_CXX_STDLIB__|libc++|g" \
                    ${worksrcpath}/qtbase/mkspecs/common/clang-mac.conf
            }
            foreach spec {macx-clang macx-g++ macx-icc} {
                reinplace \
                    "s|__MACPORTS_DEPLOYMENT_TARGET__|${macosx_deployment_target}|g" ${worksrcpath}/qtbase/mkspecs/${spec}/qmake.conf
                # TODO: check how this works out with a [m]universal build
                reinplace \
                    "s|__MACPORTS_DEVICE_ARCHS__|${build_arch}|g" ${worksrcpath}/qtbase/mkspecs/${spec}/qmake.conf
            }
        }

        post-patch {
            # make copies of the patched-pre-reinplace mkspecs files
            foreach spec ${cached_mkspecs} {
                xinstall -m 755 -d ${mkspecs_cache}/[file dirname ${spec}]
                if {![file exists ${mkspecs_cache}/${spec}]} {
                    file copy ${worksrcpath}/qtbase/mkspecs/${spec} ${mkspecs_cache}/${spec}
                }
            }
            # tweak the mkspecs files with the appropriate reinplace commands.
            # We repeat that in the pre-configure so that users can redo both
            # the patch and the configure steps independently (and not end up
            # with mkspecs files with unprocessed content).
            tweak_mkspecs
        }
        pre-configure {
            # restore the patched  mkspecs files so we can redo the reinplace operations
            foreach spec ${cached_mkspecs} {
                file copy -force ${mkspecs_cache}/${spec} ${worksrcpath}/qtbase/mkspecs/${spec}
            }
            # redo the reinplace operations.
            tweak_mkspecs
        }
    }
    # new patches for Qt 5.9
    patchfiles-append           ${PF59x}patch-fix-qtMacWindow-WIP.diff \
                                ${PF59x}patch-macstyle-checks-if-cocoa.diff \
                                ${PF59x}patch-col+font-dialog-fix.diff \
                                ${PF59x}patch-qcocoa-add-aqua-themehint.diff \
                                ${PF59x}patch-mkspecs.diff

    # Qt builds part of the system using environment provided by MacPorts.
    # It builds the rest using its own internal environment.
    # For consistency, clear MacPorts environment.
    configure.cxx_stdlib
        configure.sdkroot
        configure.cc_archflags
        configure.cxx_archflags
        configure.objc_archflags
        configure.objcxx_archflags
        configure.ld_archflags
        configure.cppflags
        configure.objcflags-append  "-g"
        configure.objcxxflags-append  "-g"
        configure.pipe  no
    configure.march
        configure.mtune
        configure.universal_ldflags
        configure.universal_cflags
        configure.universal_cxxflags
        configure.universal_cppflags

    # patches for improving the KDE experience (and facilitating debugging)
    patchfiles-append       ${PF59x}patch-enable-dumpObjectInfo.diff
    patchfiles-append       ${PF59x}deactivate-menurole-heuristics.patch \
                            ${PF59x}debug-negative-qtimerint.patch
    # don't qFatal() in QObjectPrivate when running a library built against
    # a slightly older (patchlevel) QtCore version. Code might crash but won't
    # be aborted (= crash) immediately.
    patchfiles-append       ${PF59x}patch-qobjpriv-allow-older-versions.diff

    # backport certain things from future Qt versions;
    # 20180907: Q*String::front() and Q*String::back()
    #           QRandomGenerator64 and QRandomGenerator
    patchfiles-append       ${PF597}patch-backport-from-future.diff
    # 20190112: #2ca187ca allow NOTIFY signals defined in parent classes (5.10)
    patchfiles-append       ${PF597}patch-backport-from-future2.diff
    # 20190112: QMetaObject::invokeMethod() that accepts a functor (5.10)
    patchfiles-append       ${PF597}patch-backport-from-future3.diff
    # 20190114: QStyle: deprecate SH_Widget_Animate in favor of SH_Widget_Animation_Duration (5.10)
    #                   (and a whiff of SH_TitleBar_ShowToolTipsOnButtons)
    patchfiles-append       ${PF597}patch-backport-from-future4.diff

    platform darwin {
        configure.args-append \
                            -force-debug-info
    }
    configure.args-append   -no-strip -no-separate-debug-info

    # use a simple way to get our compiler + options in:
    pre-configure {
        xinstall -m 755 -d ${build.dir}/qtbase
        set qt5::cache [open "${build.dir}/.qmake.cache" w 0644]
        puts ${qt5::cache} "QMAKE_CC=${configure.cc}"
        puts ${qt5::cache} "QMAKE_CXX=${configure.cxx}"
        puts ${qt5::cache} "QMAKE_LINK_C=${configure.cc}"
        puts ${qt5::cache} "QMAKE_LINK_C_SHLIB=${configure.cc}"
        puts ${qt5::cache} "QMAKE_LINK=${configure.cxx}"
        puts ${qt5::cache} "QMAKE_LINK_SHLIB=${configure.cxx}"
        puts ${qt5::cache} "QMAKE_CFLAGS+=[join ${configure.cflags}]"
        puts ${qt5::cache} "QMAKE_CXXFLAGS+=[join ${configure.cxxflags}]"
        close ${qt5::cache}
        file copy -force ${build.dir}/.qmake.cache ${build.dir}/qtbase/.qmake.cache
    }
    if {${os.platform} ne "darwin"} {
        post-configure {
            # full debug info can be useful in QtBase.
            system -W ${build.dir}/qtbase "bin/qmake -config force_debug_info ../../${worksrcdir}/qtbase"
        }
    }
}

# finish up building preparations
if { (${subport} eq ${name}) || (${subport} eq "${name}-x11") } {

    if {[variant_isset LTO] && ${os.platform} eq "darwin"} {
        if {(${os.major} <= 13) || ${CXX_mp}} {
            patchfiles-append       ${PF59x}patch-clangconf-lto-commands.diff
        }
    }
    configure.ldflags-append        ${configure.optflags}

    if {${os.platform} eq "darwin"} {
        depends_lib-append                       \
            port:zlib                            \
            port:libpng                          \
            port:jpeg                            \
            port:freetype                        \
            port:fontconfig                      \
            path:bin/dbus-daemon:dbus            \
            path:lib/libssl.dylib:openssl        \
            port:tiff                            \
            port:libmng                          \
            path:lib/pkgconfig/glib-2.0.pc:glib2 \
            port:icu                             \
            port:pcre2
        conflicts_build-append      openal openal-soft
    } else {
        depends_build-append \
            port:tiff-dev
        depends_lib-append                       \
            port:zlib                            \
            port:libpng                          \
            port:jpeg                            \
            path:lib/libssl.so:openssl           \
            port:tiff                            \
            port:openal-soft                     \
            port:pcre2
        configure.ldflags-delete    -Wl,-headerpad_max_install_names
    }

    do_not_extract-append           ${distname}/qttranslations \
                                    ${distname}/qt3d \
                                    ${distname}/qtwebengine \
                                    ${distname}/qtwebview
    platform darwin {
        # build QtWayland on Linux!
        do_not_extract-append       ${distname}/qtwayland
    }

    post-extract {
        file mkdir ${workpath}/build
        if {[variant_isset universal]} {
            ui_msg "Setting up symlinks for architectures ${universal_archs_to_use}"
            foreach arch ${universal_archs_to_use} {
                ui_msg "ln -s ${distname} ${worksrcpath}-${arch}"
                ln -s ${distname} ${worksrcpath}-${arch}
            }
        }
        # clean out the examples directories
        if {![variant_isset examples]} {
            foreach ex [glob -nocomplain ${worksrcpath}/*/examples] {
                if {${ex} ne "${worksrcpath}/qtwebchannel/examples"} {
                    file delete -force ${ex}
                }
            }
        }
    }

    if {${os.platform} eq "darwin" && ${os.major} < 17} {
        build.type              gnu
        # make sure we use the latest gmake:
        build.cmd               gmake
        depends_build-append    port:gmake
    }

    # see https://bugreports.qt-project.org/browse/QTBUG-35514
    build.target

    post-patch {
        #reinplace "s|//opt//local//|${prefix}/|g" ${worksrcpath}/qtbase/src/corelib/io/qstandardpaths_mac.cpp
        if {${use_parallel_build} && [file exists ${worksrcpath}/qtbase/configure]} {
            # let qmake be build in parallel too
            reinplace "s|\"\$MAKE\")|\"\$MAKE\" -j${build.jobs})|g" ${worksrcpath}/qtbase/configure
        }
    }

    if { [variant_isset universal] } {
        merger-post-destroot {
            if {[tbool is_stubport]} {
                return
            }
            foreach arch ${universal_archs_to_use} {
                set dir ${destroot}-${arch}

                foreach pcfl [glob -nocomplain ${dir}${qt_frameworks_dir}/pkgconfig/*.pc] {
                    reinplace "s|/build-${arch}/|/build/|g" ${pcfl}
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${pcfl}
                }

                foreach prlfl [glob -nocomplain ${dir}${qt_frameworks_dir}/*.framework/*.prl] {
                    reinplace "s|/build-${arch}/|/build/|g" ${prlfl}
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
                }

                foreach prlfl [glob -nocomplain ${dir}${qt_frameworks_dir}/*.prl] {
                    reinplace "s|/build-${arch}/|/build/|g" ${prlfl}
                    reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
                }

                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_mkspecs_dir}/modules/qt_lib_bootstrap_private.pri

                reinplace \
                    "s|^set(_qt5_corelib_extra_includes \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang.*\")$|set(_qt5_corelib_extra_includes \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang-32\" \"\${_qt5Core_install_prefix}/share/qt5//mkspecs/macx-clang\")|" \
                    ${dir}${qt_frameworks_dir}/cmake/Qt5Core/Qt5CoreConfigExtrasMkspecDir.cmake
            }
        }

        post-destroot {
            if {[tbool is_stubport]} {
                return
            }
            if {[file exists ${destroot}${qt_mkspecs_dir}/qmodule.pri]} {
                # delete preprocessor comments surrounding QT_CPU_FEATURES.i386 and QT_CPU_FEATURES.x86_64
                reinplace "/^#ifndef.*$/d" ${destroot}${qt_mkspecs_dir}/qmodule.pri
                reinplace "/^#else.*$/d"   ${destroot}${qt_mkspecs_dir}/qmodule.pri
                reinplace "/^#endif.*$/d"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
            }
        }

        # The file ${prefix}/share/qt5/mkspecs/qconfig.pri is still not properly merged
        # The solution is ???.
    }

    variant harfbuzz description {Use HarfBuzz-NG to do text shaping} {
        # Qt 5.8 prints a warning about AAT support but that appears to be a red herring
        # given that the harfbuzz version in MacPorts is much newer than the version
        # shipped with Qt.
        depends_lib-append      port:harfbuzz
        configure.args-replace  -no-harfbuzz \
                                -system-harfbuzz
    }
    default_variants    +harfbuzz

    variant reduce_exports description {configure with --reduce-exports (experimental)} {
        configure.args-append   --reduce-exports
    }
    if {${os.platform} ne "darwin"} {
        default_variants        +reduce_exports
    }

    variant tests description {Enable tests} {
        configure.args-replace  {-nomake tests} {-make tests}
    }

    variant examples description "Build examples. This will conflict with port:${name}-examples!" {
        conflicts-append        ${name}-examples
        configure.args-replace  {-nomake examples} {-make examples}
    }

    if {${subport} ne "${name}-x11"} {
        platform darwin {
            variant mariadb55 conflicts mysql56 mysql57 description {use MariaDB v5.5} {}
            variant mysql56 conflicts mariadb55 mysql57 description {use MySQL v5.6} {}
            variant mysql57 conflicts mariadb55 mysql56 description {use MySQL v5.7} {}
            switch_variant mysql56 mysql57 {
                "mysql56" -
                "mysql57" {
                    depends_lib-append port:${variant}
                }
                default {
                    default_variants +mariadb55
                    depends_lib-append port:mariadb
                }
            }

            variant gstreamer description {build GStreamer support, needed for the QAudioDecoder class} {}
            if {[variant_isset gstreamer]} {
                patchfiles-append \
                    ${PF596}/patch-activate-gstreamer.diff
                configure.args-replace \
                    -no-gstreamer \
                    -gstreamer
                depends_lib-append \
                    port:gstreamer1 \
                    port:gstreamer1-gst-plugins-base
            }
        }
        variant QtHelpNG description {Use the QtHelpNG library/framework from port:qt5-assistant-devel} {
            depends_run-append  port:qt5-assistant-devel
            post-destroot {
                if {${os.platform} eq "darwin"} {
                    file delete -force ${destroot}${qt_frameworks_dir}/QtHelp.framework
                    ln -s QtHelpNG.framework ${destroot}${qt_frameworks_dir}/QtHelp.framework
                    # this is currently done by port:qt5-assistant-devel :
                    # xinstall -m 755 -d ${destroot}${qt_frameworks_dir}/QtHelpNG.framework/Versions/5
                    # ln -s QtHelpNG ${destroot}${qt_frameworks_dir}/QtHelpNG.framework/Versions/5/QtHelp
                } else {
                    file delete -force ${destroot}${qt_libs_dir}/libQt5Help.so
                    file delete -force ${destroot}${qt_libs_dir}/libQt5Help.so.5
                    # note: no "5" in libQtHelpNG!
                    ln -s libQtHelpNG.so ${destroot}${qt_libs_dir}/libQt5Help.so
                    # this is the one stored in the application dynamic loader table:
                    ln -s libQtHelpNG.so.5 ${destroot}${qt_libs_dir}/libQt5Help.so.5
                }
                file delete ${destroot}${qt_bins_dir}/qhelpgenerator \
                     ${destroot}${qt_bins_dir}/qcollectiongenerator
                xinstall -m 755 ${filespath}/qhelpgeneratorng.sh ${destroot}${qt_bins_dir}/qhelpgenerator
                xinstall -m 755 ${filespath}/qhelpgeneratorng.sh ${destroot}${qt_bins_dir}/qcollectiongenerator
                reinplace "s|@QTBINSDIR@|${qt_bins_dir}|g" ${destroot}${qt_bins_dir}/qhelpgenerator \
                     ${destroot}${qt_bins_dir}/qcollectiongenerator
            }
        }
    }

    variant debug description {This variant forces a build made with configure.optflags="-O0 -g"} {
        foreach opt {O3 O2 Os} {
            configure.cflags-replace     -${opt} -O0
            configure.cxxflags-replace   -${opt} -O0
            configure.objcflags-replace  -${opt} -O0
            configure.objcxxflags-replace  -${opt} -O0
            configure.ldflags-replace    -${opt} -O0
        }
        if {[string match *clang* ${configure.cxx}]} {
            set debugopts "-g -fno-limit-debug-info"
        } else {
            set debugopts "-g"
        }
        configure.cflags-append     ${debugopts}
        configure.cxxflags-append   ${debugopts}
        configure.objcflags-append  ${debugopts}
        configure.objcxxflags-append  ${debugopts}
        configure.ldflags-append    ${debugopts}
    }

    variant cputuned description {Build using -O3 -march=native for optimal tuning to your CPU} {
        configure.cflags-append     -O3 -march=native
        configure.cxxflags-append   -O3 -march=native
        configure.objcflags-append  -O3 -march=native
        configure.objcxxflags-append  -O3 -march=native
        configure.ldflags-append    -O3 -march=native
    }

    configure.post_args-append      QMAKE_CXX=${configure.cxx} QMAKE_CC=${configure.cc}
    build.env-append                CXX=${configure.cxx} CC=${configure.cc}
}

# link includes and libraries for each actual installed framework
proc proxy_includes_and_libs {} {
    global destroot qt_includes_dir qt_frameworks_dir qt_libs_dir qt_pkg_config_dir version
    # make sure that the target directories exist
    xinstall -m 755 -d ${destroot}${qt_includes_dir}
    xinstall -m 755 -d ${destroot}${qt_libs_dir}
#     ui_info "Exposing Framework headers via ${qt_includes_dir} and creating .dylib stubs for the frameworks"
    ui_info "Exposing Framework headers via ${qt_includes_dir}"
    foreach fixfile [exec find ${destroot}${qt_frameworks_dir} \
                         -name "*.framework" | \
                         sed -e "s@${destroot}@@g"] {

        set tf_full [strsed ${fixfile} {s@\\.framework@@}]
        set tf [strsed ${tf_full} {g@.*\/@@}]

        # link headers into ${qt_includes_dir}, removing directories
        # if they are already there first

        set inc_file ${destroot}${qt_includes_dir}/${tf}
        if {[file exists ${inc_file}]} {
            system "ls -l ${inc_file}"
            ui_msg "*Warning* replacing directory ${inc_file} with a symlink to ${tf_full}.framework/Headers!"
            file delete -force ${inc_file}
        }
        ln -s ${tf_full}.framework/Headers ${inc_file}
        if {[file exists ${destroot}${tf_full}.framework/Headers/${version}/${tf}/private] \
                && ![file exist ${destroot}${tf_full}.framework/Headers/private]} {
            # the symlink will appear also as ${inc_file}/private but since ${inc_file} is itself a symlink
            # that isn't supposed to be pointing anywhere right now we use the correct actual destination in ${destroot}
            ui_debug "ln -s ${tf_full}.framework/Headers/${version}/${tf}/private ${inc_file}/private"
            ln -s ${tf_full}.framework/Headers/${version}/${tf}/private ${destroot}${tf_full}.framework/Headers/private
        }

## This is legacy code from port:qt4-mac which is probably redundant. Keep the code around for a while in the -devel port.
#         # link libraries into ${qt_libs_dir}, all 4 number variants
#         set dr_qt_libs_dir ${destroot}${qt_libs_dir}
#         ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.dylib
#         ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.${qt_major}.dylib
#         ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.${qt_major}.${qt_minor}.dylib
#         ln -s ${tf_full}.framework/${tf} ${dr_qt_libs_dir}/lib${tf}.${qt_major}.${qt_minor}.${qt_patch}.dylib
#
#         # copy .prl file, then correct it for library usage
#         if {[file exists ${destroot}${tf_full}.framework/${tf}.prl]} {
#             copy ${destroot}${tf_full}.framework/${tf}.prl ${dr_qt_libs_dir}/lib${tf}.prl
#
#             # fix TARGET in .prl file
#             reinplace "/QMAKE_PRL_TARGET/s|Qt\\(\[^ \]*\\)|libQt\\1.${qt_major}.${qt_minor}.${qt_patch}.dylib|" ${dr_qt_libs_dir}/lib${tf}.prl
#
#             # fix PRL_LIBS -F -> -L in .prl file
#             reinplace "/QMAKE_PRL_LIBS/s|-F${qt_frameworks_dir}|-L${qt_libs_dir}|" ${dr_qt_libs_dir}/lib${tf}.prl
#
#             # fix "-framework Qt*" -> "-lQt*" in .prl file
#             reinplace "/QMAKE_PRL_LIBS/s|-framework Qt|-lQt|g" \
#                 ${dr_qt_libs_dir}/lib${tf}.prl
#
#             # remove the QMAKE_PRL_BUILD_DIR line from the .prl file
#             reinplace "/QMAKE_PRL_BUILD_DIR/d" ${dr_qt_libs_dir}/lib${tf}.prl
#         }
## End link library legacy code
    }

    xinstall -m 755 -d ${destroot}${qt_pkg_config_dir}
    ui_debug "moving the pkg-config files to ${qt_pkg_config_dir}"
    foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir}/pkgconfig *.pc] {
        file rename ${f} ${destroot}${qt_pkg_config_dir}
    }
    xinstall -m 755 -d ${destroot}${qt_libs_dir}/
    ui_debug "moving static libraries and .prl files to ${qt_libs_dir}"
    foreach f [glob -nocomplain -directory ${destroot}${qt_frameworks_dir} *.{a,prl,la}] {
        file rename ${f} ${destroot}${qt_libs_dir}/
    }

    # link back the static libraries to where some Qt components expect them:
    foreach f [exec find ${destroot}${qt_libs_dir} \
                         -name "*.a" | \
                         sed -e "s@${destroot}@@g"] {
        ln -s ${f} ${destroot}${qt_frameworks_dir}/
    }
}

proc move_and_proxy_appbundles {} {
    global destroot prefix qt_apps_dir qt_bins_dir filespath
    platform darwin {
        # Move .apps into the applications_dir, and link each .app's
        # executable back into ${qt_bins_dir}
        set dr_qt_apps_dir ${destroot}${qt_apps_dir}
        set dr_qt_bins_dir ${destroot}${qt_bins_dir}
        xinstall -m 755 -d ${dr_qt_apps_dir}
        foreach app [glob -nocomplain ${dr_qt_bins_dir}/*.app] {
            # remove the leading stuff
            set app [lindex [split ${app} /] end]
            # move the .app
            move ${dr_qt_bins_dir}/${app} ${dr_qt_apps_dir}
            # link it back
            ln -s ${qt_apps_dir}/${app} ${dr_qt_bins_dir}
            # provide a proxy to the app's executable; symlinks won't
            # be accepted by qtchooser if the user has that port installed.
            set appName [strsed ${app} {g@\.app@@}]
            set appProxy [string tolower ${appName}]
            qt5.add_app_wrapper ${appProxy} ${appName}
            # add_app_wrapper installs to ${prefix}/bin; move the wrapper
            file rename ${destroot}${prefix}/bin/${appProxy} ${dr_qt_bins_dir}/${appProxy}
        }
    }
}

if { [lsearch \
        [list ${name} "${name}-x11" "${name}-qtwebengine" "${name}-qtwebkit" "${name}-qtwebview" "${name}-qt3d"] \
        ${subport}] != -1
} {

    post-destroot {
        if {[tbool is_stubport]} {
            return
        }

        # get Qt's version numbers
        set qt_vers [split ${version} "."]
        set qt_major [lindex ${qt_vers} 0]
        set qt_minor [lindex ${qt_vers} 1]
        set qt_patch [lindex ${qt_vers} 2]

        if {${os.platform} eq "darwin"} {

#             if {![info exists qt_cmake_module_dir]} {
#                 # aargh, we're building with mcalhoun's PortGroup :-/
#                 set qt_qmake_module_dir     ${qt_libs_dir}/cmake
#             }
            # move items out of the Frameworks directory that are more appropriate to the lib directory

            proxy_includes_and_libs
            # certain applications might expect to find the following .prl files in ${qt_frameworks_dir}
            foreach fixfile { libQt5OpenGLExtensions_debug.prl libQt5PlatformSupport_debug.prl \
                                libQt5QmlDevTools.prl libQt5UiTools.prl libQt5UiTools_debug.prl } {
                if {[file exists ${destroot}${qt_libs_dir}/${fixfile}]} {
                    ln -s ${qt_libs_dir}/${fixfile} ${destroot}${qt_frameworks_dir}/${fixfile}
                }
            }

            move_and_proxy_appbundles

            if {[file exists ${destroot}${qt_mkspecs_dir}/qmodule.pri]} {
                # clean up the generated mkspecs/qmodule.pri:
                # undo any symlink normalisation that introduced the clang version number into QMAKE_CC/CXX (e.g. clang++-mp-3.5)
                # (NB: I could check and only do this when required...)
                reinplace -q "s|${prefix}/bin/clang-mp-.*|clang|g"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
                reinplace -q "s|${prefix}/bin/clang\+\+-mp-.*|clang\+\+|g"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
                # UsingTheRightCompiler:
                reinplace -q -W ${destroot}${qt_mkspecs_dir}/common "s|${configure.cxx}|clang++|g" clang.conf
                reinplace -q -W ${destroot}${qt_mkspecs_dir}/common "s|${configure.cc}|clang|g" clang.conf
            }
            if {[file exists ${destroot}${qt_mkspecs_dir}/qmodule.pri]} {
                correct_qmodulepri_flags  ${destroot}${qt_mkspecs_dir}/qmodule.pri
                if {![variant_isset debug]} {
                    reinplace -q "s|-fno-limit-debug-info||g" ${destroot}${qt_mkspecs_dir}/qmodule.pri
                }
            }
            # experimental: don't export the SDK used to build Qt via qdevice.pri
            if {[file exists ${destroot}${qt_mkspecs_dir}/qdevice.pri]} {
                reinplace -q "s|^!host_build:QMAKE_MAC_SDK = |# !host_build:QMAKE_MAC_SDK = |g" \
                                    ${destroot}${qt_mkspecs_dir}/qdevice.pri
            }
        } else {
            if {[file exists ${destroot}${qt_libs_dir}/pkgconfig]
                    && [file type ${destroot}${qt_libs_dir}/pkgconfig] eq "directory"} {
                ui_debug "moving the pkg-config files to ${qt_pkg_config_dir}"
                xinstall -v -m 755 -d ${destroot}${qt_pkg_config_dir}
                foreach f [glob -nocomplain -directory ${destroot}${qt_libs_dir}/pkgconfig *.pc] {
                    file rename ${f} ${destroot}${qt_pkg_config_dir}
                }
                # now delete this entry so that it can be replaced with a symlink later on
                file delete -force ${destroot}${qt_libs_dir}/pkgconfig
            }
        }
        if {[info exists qt_cmake_module_dir]} {
            ui_info "fixing and moving the CMake files into ${qt_cmake_module_dir}"
            if {[file exists ${destroot}${qt_frameworks_dir}/cmake]} {
                set srcdir ${qt_frameworks_dir}
                # replace the *_install_prefix path with the correct path, but "take a detour" through ${qt_dir}
                # as an extra insurance and to show the expected Qt install location in case cmake ever finds
                # a .cmake script that doesn't below to this Qt5 port.
                set sedcmd "s|/../../../../|/../../../${qt_dir_rel}/|g"
            } else {
                set srcdir ${qt_libs_dir}
                set sedcmd "s|/../../../../../|/../../../${qt_dir_rel}/../../|g"
            }
            xinstall -v -m 755 -d ${destroot}${qt_cmake_module_dir}
            foreach d [glob -tails -nocomplain -directory ${destroot}${srcdir}/cmake *] {
                xinstall -m 755 -d ${destroot}${qt_cmake_module_dir}/${d}
                foreach f [glob -nocomplain -directory ${destroot}${srcdir}/cmake/${d} *.cmake] {
                    # ${qt_frameworks_dir} is  ${qt_dir}/Library/Frameworks while
                    # ${qt_libs_dir}       is  ${qt_dir}/lib
                    # unless modified, cmake files will point to a directory that is too high in the directory hierarchy
                    reinplace -q ${sedcmd} ${f}
                    file rename ${f} ${destroot}${qt_cmake_module_dir}/${d}/
                }
            }
        }
        if {[file exists ${destroot}${qt_qmake_cmd}] } {
            ln -s ${qt_qmake_cmd} ${destroot}/${prefix}/bin/qmake-qt${qt_major}
            ln -s ${qt_moc_cmd} ${destroot}/${prefix}/bin/moc-qt${qt_major}
            ln -s ${qt_uic_cmd} ${destroot}/${prefix}/bin/uic-qt${qt_major}
            ln -s ${qt_lrelease_cmd} ${destroot}/${prefix}/bin/lrelease-qt${qt_major}
        }

        if {${subport} eq "${name}-x11"} {
            file delete -force ${destroot}-tmp
            file rename ${destroot} ${destroot}-tmp
            # now cherry-pick the things we want which aren't yet installed through the main port:
            xinstall -d -m 755 ${destroot}${qt_plugins_dir}/platforminputcontexts
            file rename ${destroot}-tmp/${qt_plugins_dir}/platforminputcontexts/libcomposeplatforminputcontextplugin.dylib ${destroot}${qt_plugins_dir}/platforminputcontexts
            xinstall -d -m 755 ${destroot}${qt_plugins_dir}/platforms
            file rename ${destroot}-tmp/${qt_plugins_dir}/platforms/libqxcb.dylib ${destroot}${qt_plugins_dir}/platforms
            file rename ${destroot}-tmp/${qt_plugins_dir}/xcbglintegrations \
                ${destroot}${qt_plugins_dir}/
            if {[info exists qt_cmake_module_dir]} {
                xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}/Qt5Gui
                # the qeglfs QPA doesn't work on OS X, so we skip QEglFSIntegrationPlugin
                foreach cm {QComposePlatformInputContextPlugin QXcbIntegrationPlugin QXcbGlxIntegrationPlugin \
                        QEglFSX11IntegrationPlugin QMinimalEglIntegrationPlugin QXcbEglIntegrationPlugin} {
                    set cmf ${destroot}-tmp/${qt_cmake_module_dir}/Qt5Gui/Qt5Gui_${cm}.cmake
                    if {[file exists ${cmf}]} {
                        file rename ${cmf} ${destroot}${qt_cmake_module_dir}/Qt5Gui
                    }
                }
                xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}/Qt5X11Extras
                file rename ${destroot}-tmp/${qt_cmake_module_dir}/Qt5X11Extras/Qt5X11ExtrasConfig.cmake \
                    ${destroot}${qt_cmake_module_dir}/Qt5X11Extras
                file rename ${destroot}-tmp/${qt_cmake_module_dir}/Qt5X11Extras/Qt5X11ExtrasConfigVersion.cmake \
                    ${destroot}${qt_cmake_module_dir}/Qt5X11Extras
            }
            if {[file exists ${destroot}-tmp/${qt_pkg_config_dir}/Qt5X11Extras.pc]} {
                xinstall -d -m 755 ${destroot}${qt_pkg_config_dir}
                file rename ${destroot}-tmp/${qt_pkg_config_dir}/Qt5X11Extras.pc ${destroot}${qt_pkg_config_dir}
            }
            xinstall -d -m 755 ${destroot}${qt_frameworks_dir}
            xinstall -d -m 755 ${destroot}${qt_libs_dir}
            xinstall -m 755 -d ${destroot}${qt_includes_dir}
            file rename ${destroot}-tmp/${qt_frameworks_dir}/QtX11Extras.framework ${destroot}${qt_frameworks_dir}
            file rename ${destroot}-tmp/${qt_frameworks_dir}/QtXcbQpa.framework ${destroot}${qt_frameworks_dir}
            foreach lib {GlxSupport LinuxAccessibilitySupport EglSupport EglFSDeviceIntegration} {
                # this loop ignores non-existent items
                foreach f [glob -nocomplain ${destroot}-tmp/${qt_libs_dir}/libQt5${lib}*] {
                    file rename ${f} ${destroot}${qt_libs_dir}
                    ln -s ${qt_libs_dir}/[file tail ${f}] ${destroot}${qt_frameworks_dir}
                }
                foreach f [glob -nocomplain ${destroot}-tmp/${qt_includes_dir}/Qt${lib}*] {
                    file rename ${f} ${destroot}${qt_includes_dir}
                }
            }
            xinstall -d -m 755 ${destroot}${qt_mkspecs_dir}/modules
            file rename ${destroot}-tmp/${qt_mkspecs_dir}/modules/qt_lib_x11extras.pri ${destroot}/${qt_mkspecs_dir}/modules
            file rename ${destroot}-tmp/${qt_mkspecs_dir}/modules/qt_lib_x11extras_private.pri ${destroot}/${qt_mkspecs_dir}/modules
            if {[variant_isset egl]} {
                file rename ${destroot}-tmp/${qt_plugins_dir}/platforms/libqminimalegl.dylib \
                    ${destroot}${qt_plugins_dir}/platforms
                file rename ${destroot}-tmp/${qt_plugins_dir}/egldeviceintegrations \
                    ${destroot}${qt_plugins_dir}/
                xinstall -d -m 755 ${destroot}${qt_mkspecs_dir}/features
                file rename ${destroot}-tmp/${qt_mkspecs_dir}/modules/qt_lib_egl_support_private.pri \
                    ${destroot}/${qt_mkspecs_dir}/modules
                file rename ${destroot}-tmp/${qt_frameworks_dir}/QtEglFSDeviceIntegration.framework ${destroot}${qt_frameworks_dir}
# the eglfs QPA doesn't work in 5.9
#                 file rename ${destroot}-tmp/${qt_plugins_dir}/platforms/libqeglfs.dylib ${destroot}${qt_plugins_dir}/platforms
            }
            file delete -force ${destroot}-tmp
        } else {
            if {${subport} eq "${name}"} {
                xinstall -m 755 ${filespath}/qtlogging.ini ${destroot}${qt_data_dir}/qtlogging.ini
                # set up hardcoded links to places where the mainstream port:qt5-* install things
                ui_info "set up things for compatibility with the mainstream port:qt5"
                # these should be done by the main port only
                ln -s ${qt_docs_dir} ${destroot}${qt_dir}/doc
                ln -s ${qt_includes_dir} ${destroot}${qt_dir}/include
                ln -s ${qt_pkg_config_dir} ${destroot}${qt_dir}/lib/pkgconfig
                ln -s ${qt_mkspecs_dir} ${destroot}${qt_dir}/mkspecs
                ln -s ${qt_plugins_dir} ${destroot}${qt_dir}/plugins
                foreach d {imports phrasebooks qml translations} {
                    ln -s ${qt_data_dir}/${d} ${destroot}${qt_dir}/${d}
                }

                if {[info exists compress.in_applications_dir]} {
                    # this subport installs things into /Applications which may or may not
                    # be on the same volume as ${prefix}. Make sure they get compressed too
                    # (after installation, in the post-activate).
                    compress.in_applications_dir-append \
                            ${qt_apps_dir}/Designer.app \
                            ${qt_apps_dir}/Linguist.app \
                            ${qt_apps_dir}/pixeltool.app \
                            ${qt_apps_dir}/qdbusviewer.app \
                            ${qt_apps_dir}/qml.app
                }
            }
            # these are relevant for all other subports installing frameworks
            if {[file exists ${destroot}${qt_frameworks_dir}]} {
                foreach l [exec find ${destroot}${qt_frameworks_dir} \
                                 -name "*.framework" | \
                                 sed -e "s@${destroot}@@g"] {
                     ln -s ${l} ${destroot}${qt_dir}/lib/
                }
            }
        }
    }
}

pre-configure {
    if {[variant_exists LTO] && [variant_isset LTO]} {
        if {[file exists ${build.dir}/qtbase/mkspecs/qmodule.pri]} {
            file delete -force ${build.dir}/qtbase/mkspecs/qmodule.pri
        }
    }
}

proc correct_qmodulepri_flags {qmopri} {
    # if the user used configure.optflags="-something" make sure that gets added to compiler and linker
    # options qmake determines, rather than replacing all of those
    reinplace -q "s|QMAKE_CFLAGS = |QMAKE_CFLAGS \+= |g"  ${qmopri}
    reinplace -q "s|QMAKE_CXXFLAGS = |QMAKE_CXXFLAGS \+= |g"  ${qmopri}
    reinplace -q "s|QMAKE_LFLAGS = |QMAKE_LFLAGS \+= |g"  ${qmopri}
}

post-configure {
    if {[file exists ${build.dir}/qtbase/mkspecs/qmodule.pri]} {
        correct_qmodulepri_flags ${build.dir}/qtbase/mkspecs/qmodule.pri
    }
    if {![catch {set fd [open "${workpath}/.macports.${subport}.configure.cmd" "w"]} err]} {
        foreach var [array names ::env] {
            puts ${fd} "${var}=$::env(${var})"
        }
        puts ${fd} "[join [lrange [split ${configure.env} " "] 0 end] "\n"]\n"
        puts ${fd} "cd ${worksrcpath}"
        if {[info exists configure.post_args]} {
            puts ${fd} "${configure.cmd} ${configure.pre_args} ${configure.args} ${configure.post_args}"
        } else {
            puts ${fd} "${configure.cmd} ${configure.pre_args} ${configure.args}"
        }
    } else {
        if {[info exists fd]} {
            unset fd
        }
    }
    if {[variant_exists LTO] && [variant_isset LTO]} {
        # it's crucial that the same command is used for linking as for compiling!
        if {[file exists ${build.dir}/qtbase/mkspecs/qmodule.pri]} {
            set qfp [open ${build.dir}/qtbase/mkspecs/qmodule.pri a]
            puts $qfp "QMAKE_LINK         = ${configure.cxx}"
            puts $qfp "QMAKE_LINK_SHLIB   = ${configure.cxx}"
            puts $qfp "QMAKE_LINK_C       = ${configure.cxx}"
            puts $qfp "QMAKE_LINK_C_SHLIB = ${configure.cxx}"
            close $qfp
        }
    }
    if {[file exists ${worksrcpath}/qtwebkit/.git]} {
        # Do what qmake would do during an in-tree build:
        system -W ${worksrcpath}/qtwebkit "../qtbase/bin/syncqt.pl Source -version ${version}"
    }
    if {[info exists fd]} {
        if {[file exists "${configure.dir}/.qmake.cache"]} {
            puts ${fd} "## ${configure.dir}/.qmake.cache:"
            close ${fd}
            system "cat \"${configure.dir}/.qmake.cache\" >> \"${workpath}/.macports.${subport}.configure.cmd\""
        } else {
            close ${fd}
        }
        unset fd
    }
}

set webcorestlib ${build.dir}/Source/WebCore/release/libWebCore.a
set compress_webcorestlib   no
pre-destroot {
    if {[file exists ${webcorestlib}.bz2]
            && ![file exists ${webcorestlib}]} {
        # others who like me keep the Qt5 build.dir around may appreciate the possibility to
        # reduce its size by compressing libWebCore.a (>3Gb -> ~600Mb)
        ui_info "--->  Decompressing libWebCore.a.bz2"
        system "bunzip2 -v ${webcorestlib}.bz2"
        set compress_webcorestlib yes
    }
}

## X11 subport
subport ${name}-x11 {
    PortGroup active_variants 1.1
    if {${os.platform} eq "darwin"} {
        depends_lib-append  port:xorg-xcb-util port:xorg-xcb-util-wm port:xorg-xcb-util-image \
                            port:xorg-xcb-util-keysyms port:xorg-xorgproto \
                            port:libxkbcommon \
                            port:xrender port:mesa
        depends_run         ${qt5_dependency}
        description         ${description} - the xcb (X11) platform plugin
        long_description    ${long_description} This port installs just the xcb \
                            platform plugin, which allows rendering to (remote) X11 servers. \
                            It is useless without port:qt5-kde or port:qt5-kde-devel.

        # extract only the qtbase component
        extract_components-append \
                            ${distname}/qtbase ${distname}/qtx11extras ${distname}/configure ${distname}/qt.pro
        extract_components-append \
                            ${distname}/.gitmodules
    } else {
        ui_msg "x11 subport unsupported on ${os.platform}"
        description         unsupported on ${os.platform}
        long_description    unsupported on ${os.platform}
    }
    variant egl description {build with EGL support} {}
    if {[variant_isset egl]} {
        require_active_variants mesa egl
        configure.args-replace \
                            -no-egl \
                            -egl
        patchfiles-append   ${PF59x}patch-xcb-enable-eglfs.diff
# the eglfs QPA doesn't work in 5.9
#         configure.args-append \
#                             -eglfs
    }
}

## Docs subport
subport ${name}-zz-docs {
    description         ${description} - the documentation
    long_description    ${long_description}. This subport installs the documentation \
                        and has -zz- in its name to ensure it's the last one to be \
                        processed during upgrading an existing install, so it doesn't \
                        have to rebuild anything but the documentation.\n See the port notes \
                        about Assistant stability after upgrades.

    variant html description {Install the HTML documentation in addition to the Qt help (.qch) files (obsolete variant for default behaviour)} {}
    variant qch conflicts html description {Install only the Qt help (.qch) files} {}
    variant qtwebengine description {build the qtwebengine documentation too} {}

    depends_build-append \
        path:${qt_bins_dir}/qdoc:${name}
    depends_run-append \
        path:${qt_bins_dir}/assistant:${name}-assistant

    supported_archs   noarch

    build.target      docs
    if {[variant_isset qch]} {
        destroot.target     install_qch_docs
    } else {
        default_variants    +html
        destroot.target     install_docs
    }

    if {![variant_isset qtwebengine]} {
        do_not_extract-append \
                            ${distname}/qtwebengine
    }
    patchfiles-append       ${PF59x}patch-configure-docs-no-build-qmake.diff
    platform darwin {
        # don't disable X11 detection, we might want to build the X11Extras docs too.
        patchfiles-append   ${PF594}patch-to-build-xcb.diff
    }

    default configure.dir   {${workpath}/build}
    default build.dir       {${workpath}/build}
    post-extract {
        # we'll be doing a doc build as if it were part of a full Qt build,
        # but building only the "doc" target.
        # ensure that the required binaries are available where they'd be
        # when doing a full build, as symlinks to the installed binaries.
        # This saves us from having to rebuild them.
        #
        xinstall -d -m 755 ${build.dir}/qttools/bin/
        ln -s ${qt_bins_dir}/qhelpgenerator ${build.dir}/qttools/bin/

        # For the most part, generated makefiles use ${qt_bins_dir}/qdoc.
        # There are a couple of places that look in ${worksrcpath}/qtbase/src/tools/qdoc/.
        # Also put a symlink to qmake where the configure script expects it
        xinstall -d -m 755 ${build.dir}/qtbase/bin/
        ln -s ${qt_bins_dir}/qmake ${build.dir}/qtbase/bin
#         ln -s ${qt_bins_dir}/qdoc ${build.dir}/qttools/src/qdoc/
        ln -s ${qt_bins_dir}/qdoc ${build.dir}/qttools/bin
        ln -s ${qt_bins_dir}/moc ${build.dir}/qtbase/bin
        ln -s ${qt_bins_dir}/rcc ${build.dir}/qtbase/bin
        ln -s ${qt_bins_dir}/uic ${build.dir}/qtbase/bin
        ln -s ${qt_bins_dir}/qtattributionsscanner ${build.dir}/qttools/bin
    }
    post-destroot {
        if {[variant_isset qch]} {
            xinstall -m 755 -d ${destroot}${prefix}/share/doc/qch
            system "echo \"Put or symlink your own Qt help files here, but beware there's a limit\" \
                >  ${destroot}${prefix}/share/doc/qch/README.txt"
# not a good idea?
#             foreach d [glob -nocomplain ${destroot}${qt_docs_dir}/*.qch] {
#                 set target [string map [list ${destroot} ""] ${d}]
#                 ln -s ${target} ${destroot}${prefix}/share/doc/qch/
#             }
        }
    }
    notes-append \n\
        "Qt's Assistant has a tendency to become unstable after upgrading. This can be prevented in 2 ways:\n\
        1) remove all documentation entries for the old Qt5 version in the Preferences/Documentation page \
        *before* doing the upgrade.\n\
        2) remove ~/Library/Application Support/QtProject/Assistant in case of post-upgrade instability."
}

post-build {
    if {[variant_exists strip] && [variant_isset strip]} {
        ui_msg "--->  Stripping build"
        if {[catch {system -W ${build.dir} \
            "find . -name \"*.\[ao\]\" -o -name \"*.dylib\" -o -name \"*.so\" | xargs strip -S"} err]} {
            ui_warn "Strip failed (ignored): ${err}"
        }
    }
}

# See http://qt-project.org/doc/qt-5/sql-driver.html for info on building SQL Database Drivers

if {[info exists qtwebkit_is_stub]} {
    # add this one to the list of stub ports
    set qt5.kde_stubports [lappend qt5.kde_stubports qtwebkit]
} else {
    # QtWebKit is provided as a separate port currently, port:qt5-webkit,
    # which ships the rebooted QtWebkit 5.212 .
    # This version may be reinstated as an official Qt component in the future,
    # so we keep this subport implementation (but only in the -devel port).
#     subport ${name}-qtwebkit {
#         description Qt5 WebKit
#         long_description \
#                     ${description}, QtWebEngine's deprecated predecessor.
#         conflicts-append \
#                     [qt5_port_conflicts qtwebkit]
#
#         master_sites \
#                 http://download.qt.io/community_releases/${branch}/${version}-final/
#         distname \
#                 qtwebkit-opensource-src-${version}
#         distfiles \
#                 ${distname}${extract.suffix}
#         checksums \
#                 rmd160  db6e8a239c744c213033a9a7087b9323cac6014c \
#                 sha256  79ae8660086bf92ffb0008b17566270e6477c8fa0daf9bb3ac29404fb5911bec
#
#         depends_lib-append \
#                     ${qt5_dependency}
#         platform darwin {
#             depends_lib-append \
#                     port:leveldb
#         }
#         platform linux {
#             conflicts_build-append leveldb
#         }
#         use_PortGroup qmake5 1.0
#         PortGroup   xcodeversion 1.0
#         minimum_xcodeversions   {10 3.2}
#         if {[variant_isset debug]} {
#             universal_variant   no
#         }
#         variant strip conflicts debug {reduce the disk footprint by stripping debug-related information (at the cost of increased build time)} {}
#
#         # Prevent conflicting definitions of Objective-C classes in C++ code
#         #    from ${qt_libs_dir}/QtCore.framework/Headers/qglobal.h
#         patchfiles-append \
#                     patch-qtwk-objc.diff \
#                     ${PF58x}patch-qtwk-icu.diff
#
#         platform darwin {
#             if {${os.major} < 13} {
#                 # untested adaptations taken from mcalhoun's port:qt5-qtwebkit;
#                 # shouldn't be required on 10.9 and upwards (untested).
#                 PortGroup   cxx11 1.0
#                 configure.args-delete QMAKE_MACOSX_DEPLOYMENT_TARGET=${macosx_deployment_target}
#                 # -mmacosx-version-min=10.7 sets the stdlib to libstdc++ unless -stdlib=libc++ is set
#                 # QMAKE_CXXFLAGS+=-stdlib=${configure.cxx_stdlib} is insufficient since order of switches matters
#                 configure.args-delete \
#                     QMAKE_CXXFLAGS_CXX11-=-stdlib=libc++ \
#                     QMAKE_LFLAGS_CXX11-=-stdlib=libc++
#             }
#             post-patch {
#                 # qtwebkit uses glx, libXcomposite, libXrender if they can be found
#                 # Ensure that test fails even if software is installed
#                 foreach test { glx libXcomposite libXrender } {
#                     reinplace "s|return 0;|return 0;\\\n#error turn off test|g" \
#                         ${worksrcpath}/Tools/qmake/config.tests/${test}/${test}.cpp
#                 }
#             }
#         }
#
#         # QtWebKit has a dependency on jpeglib which apparently has always been somewhat
#         # problematic. There's a 2012 mod to improve reliability but that appears to have
#         # solved only pulling in the right library. The header is still expected to be
#         # on the header search path. Add ${prefix}/include globally to ensure that, in
#         # addition to defining the path to our frameworks directory.
#         configure.args              QMAKE_CXXFLAGS+="-F${qt_frameworks_dir} -I${prefix}/include"
#         default configure.dir       {${workpath}/build}
#         configure.pre_args          ../${worksrcdir}/WebKit.pro
#         default build.dir           {${workpath}/build}
#         # make sure qmake is called without unwanted arguments!
#         configure.cmd               ${qt_qmake_cmd}
#         configure.post_args-append -after QMAKE_CXXFLAGS-=-O3
#         configure.post_args-append QMAKE_CXXFLAGS-=-O2
#         configure.post_args-append QMAKE_CXXFLAGS-=-g
#         configure.post_args-append "QMAKE_CXXFLAGS+=\"${configure.cxxflags}\""
#         # don't add the "all" target because that will interfere with generation of the interface headers
#         build.pre_args-delete       all
#         build {
#             if {[catch {system -W ${build.dir} "${build.cmd} -j${build.jobs} ${build.pre_args}"} result]} {
#                 # this should be redundant by now:
#                 # there's a chance the 1st build attempt will fail because not all interface
#                 # headers have been generated. We can either attempt to create via symlinks
#                 # or else run make a 2nd time and presume the build system will always
#                 # generate them then. If it does, at least they'll be exactly right.
#                 ui_msg "--->    Building ${subport} (take 2)"
#                 system -W ${build.dir} "${build.cmd} -j${build.jobs} ${build.pre_args}"
#             }
#         }
#     }
}

## QtWebEngine subport
subport ${name}-qtwebengine {

    platform darwin {
        # see https://wiki.qt.io/QtWebEngine
        PortGroup           xcodeversion 1.0
        minimum_xcodeversions {13 6.2}
        if {${os.major} == 13} {
            # corner case: provide QWE 5.8
            ui_warn         "QtWebEngine ${version} requires 10.10; as a courtesy we provide v5.8.0 instead"
            set qt_version  ${version}
            version         5.8.0
            revision        [join [split ${qt_version} .] ""]
            set branch      [join [lrange [split ${version} .] 0 1] .]
            distname        qtwebengine-opensource-src-${version}
            distfiles       ${distname}${extract.suffix}
            master_sites    http://download.qt.io/official_releases/qt/${branch}/${version}/submodules/
            checksums       rmd160  cb0789067b954fb14e950b1704450dc513fd1181 \
                            sha256  223d22f1660811e60677afe0a85f2f385823e25157689561489700c5d1da79be
            patch.pre_args  -Np2
        } elseif {[vercmp ${macosx_deployment_target} 10.9] <= 0} {
            ui_error "qtwebengine ${version} won't build"
#             return -code error "unsupported OS X version"
            replaced_by     qt56-kde-qtwebengine
            PortGroup       obsolete 1.0
        }
    }

    if {[variant_exists LTO] && [variant_isset LTO]} {
        ui_error "Building QtWebEngine with LTO is not currently supported"
        return -code error "unsupported variant"
    }

    conflicts-append    [qt5_port_conflicts qtwebengine]
    description         ${description} - the QtWebEngine component
    long_description    ${long_description} This port installs the  \
                        QtWebEngine component.
    use_PortGroup       qmake5 1.0
    universal_variant   no

    post-extract {
        # trash the examples (one of the paths should exist)
        file delete -force ${worksrcpath}/examples/examples.pro
        file delete -force ${worksrcpath}/qtwebengine/examples/examples.pro
    }

    # ninja is used, which has its own parallel cooker; it's called through
    # a toplevel Makefile which should not be parsed in parallel to avoid
    # some kind of process multiplication (I've seen peak CPU loads of 30 in a supposedly
    # serial build ...)
    supported_archs     x86_64
    use_parallel_build  no
    # use NINJAFLAGS to tell ninja to use the desired number (N) of parallel compile jobs
    # this still leads to CPU loads that are significantly higher than N though not more than 2x
    # If necessary we can use ninja's -l N option which limits CPU load instead of job number.
    build.args-append   NINJAFLAGS=-j${build.jobs}
    if {[variant_isset universal]} {
        # See the comments about qmake and .qmake.stash above. It is likely that the same "feature"
        # prevents us from doing cross-bitwidth (32 on 64bit and vice-versa) builds inside the Qt
        # source tree.
        ui_msg "Warning: this component doesn't currently support a universal build (probable Qt bug)"
    }
    variant strip conflicts debug {reduce the disk footprint by stripping debug-related information (at the cost of increased build time)} {}

    # the QtWebengine components is built using an included copy of ninja
    depends_lib-append \
                        ${qt5_dependency} \
                        port:snappy
    # qtwebengine/src/3rdparty/ninja/bootstrap.py calls g++ (must set CXX)
    build.env-append    CXX=${configure.cxx}

    # set up things for an out-of-source build:
    default configure.dir \
                        {${workpath}/build}
    default build.dir   {${workpath}/build}

    # check if we're using the all-inclusive distribution tarball
    # (that's the case when building a version that's older than the rest of Qt.)
    if {${distname} eq "qtwebengine-opensource-src-${version}"} {
        configure.args  -Wall -r ../${worksrcdir}/qtwebengine.pro \
                        QMAKE_LINK=${configure.cxx}
        # https://codereview.qt-project.org/#/c/216068/
        patchfiles-append \
                    ${PF59x}patch-qwe-no-qobjpriv-dep.diff
        if {[variant_isset strip]} {
            patchfiles-append \
                    ${PF59x}patch-qwe-nodebug-p2.diff
        }
    } else {
        # extract only the qtwebengine component
        extract_components-append \
                        ${distname}/qtwebengine
        configure.args  -Wall ../${worksrcdir}/qtwebengine/qtwebengine.pro \
                        QMAKE_LINK=${configure.cxx}
        # https://codereview.qt-project.org/#/c/216068/
        patchfiles-append \
                    ${PF59x}patch-qwe-no-qobjpriv-dep.diff
        if {[variant_isset strip]} {
            patchfiles-append \
                    ${PF59x}patch-qwe-nodebug.diff
        }
        # make build against ffmpeg 4
        patchfiles-append \
                    ${PF595}patch-qwe-ffmpeg4.diff
    }

    platform darwin 13 {
        set macosx_deployment_target 10.10
        # getting the CFAllocator context fails for me, so disable it
        # https://bugreports.qt.io/browse/QTBUG-56703
        patchfiles-append \
                    ${PF59x}patch-qwe-no-allocator-context.diff \
                    ${PF59x}/patch-qwe-bluetooth-57x.diff \
                    ${PF59x}patch-qwe-no-sanitisation.diff
        post-destroot {
            # correct the rpath to the CoreBluetooth framework binary.
            # Mostly required to satisfy `port rev-upgrade`
            system "install_name_tool -change /System/Library/Frameworks/CoreBluetooth.framework/Versions/A/CoreBluetooth \
                /System/Library/Frameworks/IOBluetooth.framework/Frameworks/CoreBluetooth.framework/Versions/A/CoreBluetooth \
                ${destroot}${prefix}/libexec/qt5/Library/Frameworks/QtWebEngineCore.framework/Versions/5/QtWebEngineCore"
        }
        configure.args-append \
                    QMAKE_MAC_SDK=macosx10.10
    }
    if {${os.platform} ne "darwin"} {
        patchfiles-append \
                    ${PF59x}/patch-qwe-ignore-jj-variants.diff
    }
    post-destroot {
        # Make QWE require the version it was built against
        if {[info exists qt_version] && [vercmp ${version} ${qt_version}] != 0} {
            reinplace "s|${version} \$\{_Qt5WebEngineCore_FIND_VERSION_EXACT\}|${qt_version} \$\{_Qt5WebEngineCore_FIND_VERSION_EXACT\}|g" \
                ${destroot}${qt_cmake_module_dir}/Qt5WebEngineCore/Qt5WebEngineCoreConfig.cmake
        }
    }
    # UsingTheRightCompiler (https://trac.macports.org/wiki/UsingTheRightCompiler)
    build.env-append    CXX=${configure.cxx}

#     configure.post_args-append -after QMAKE_CXXFLAGS-=-O3
#     configure.post_args-append QMAKE_CXXFLAGS-=-O2
#     configure.post_args-append QMAKE_CXXFLAGS-=-g
#     configure.post_args-append "QMAKE_CXXFLAGS+=\"${configure.cxxflags}\""
    if {[variant_isset strip]} {
        qt5.unset_cflags    -g -O2
        qt5.unset_cxxflags  -g -O2 -O3
        configure.cxxflags-append \
                            -Os
        configure.args-append \
                        CONFIG-=debug
        build.post_args-append \
                        debugsymbols=off
    }
    configure.args-append \
                        QT_BUILD_PARTS-="examples" \
                        WEBENGINE_CONFIG+=use_proprietary_codecs \
                        WEBENGINE_CONFIG+=reduce_binary_size \
                        WEBENGINE_CONFIG+=use_system_snappy \
                        WEBENGINE_CONFIG+=use_system_icu \
                        WEBENGINE_CONFIG+=use_system_ffmpeg \
                        WEBENGINE_CONFIG+=use_native_spellchecker
    if {${os.platform} eq "darwin"} {
        configure.args-append \
                        WEBENGINE_CONFIG+=use_system_vpx
        # Qt's new-style configure options are better suited for configure.post_args:
        configure.post_args-append \
                        -- -no-pulseaudio -proprietary-codecs
    } else {
        PortGroup       conflicts_build 1.0
        # certain headers cannot be present during the build.
        conflicts_build gettext-dev \
                        openssl-dev \
                        protobuf-cpp-dev
        depends_lib-append \
                        port:libxml2
        patchfiles-append \
                        ${PF59x}patch-qwe-disable-libvpx.diff
        if {[variant_isset strip] && ![string match *clang* ${configure.cxx}]} {
            configure.cxxflags-append -gtoggle
        }
        # unset cppflags which introduces -I${prefix}/include
        configure.cppflags
        configure.args-append \
                        WEBENGINE_CONFIG+=use_system_opus
        configure.args-delete \
                        WEBENGINE_CONFIG+=use_system_icu
        configure.post_args-append \
                        -- -proprietary-codecs \
                        -system-opus \
                        -system-ffmpeg
    }
    # do NOT forget this one!!
    build.target
}

## QtWebView subport
subport ${name}-qtwebview {
    use_PortGroup           qmake5 1.0

    description             ${description} - the Qt WebView component
    long_description        ${long_description} - the Qt WebView component.
    conflicts-append        [qt5_port_conflicts qtwebview]


    extract_components-append \
                            ${distname}/qtwebview
    depends_lib-append      ${qt5_dependency} \
                            ${qt5webengine_dependency}
    default configure.dir   {${workpath}/build}
    configure.pre_args-append \
                            ../${worksrcdir}/qtwebview/qtwebview.pro
    default build.dir       {${workpath}/build}
    qt5.unset_cflags        -O2
    qt5.unset_cxxflags      -O2 -O3
    platform darwin {
        variant native description {use the Apple/native Webkit framework instead of QtWebEngine} {}
        if {[variant_isset native]} {
            depends_lib-delete \
                            ${qt5webengine_dependency}
            patchfiles-append \
                            ${PF59x}patch-qwv-use-apple-webkit.diff
        }
    }
}

## QtTranslations subport
subport ${name}-qttranslations {
    use_PortGroup           qmake5 1.0

    description             Qt5 translations
    long_description        Qt5 translations.
    conflicts-append        [qt5_port_conflicts qttranslations]


    extract_components-append \
                            ${distname}/qttranslations
    depends_lib-append      ${qt5_dependency}
    default configure.dir   {${workpath}/build}
    configure.pre_args-append \
                            ../${worksrcdir}/qttranslations/qttranslations.pro
    default build.dir       {${workpath}/build}
}

## Qt3D subport
subport ${name}-qt3d {
    use_PortGroup           qmake5 1.0

    description             Qt5 3D
    long_description        Qt5 3D QML bindings and C++ APIs.
    conflicts-append        [qt5_port_conflicts qt3d]


    extract_components-append \
                            ${distname}/qt3d

    depends_lib-append      ${qt5_dependency} \
                            port:assimp
    default configure.dir   {${workpath}/build}
    configure.pre_args-append \
                            ../${worksrcdir}/qt3d/qt3d.pro
    configure.args-append   QT_BUILD_PARTS-="examples"
    configure.post_args-append \
                            -- -system-assimp
    default build.dir       {${workpath}/build}
}

subport ${name}-sqlite3-plugin {
    replaced_by     ${name}-sqlite-plugin
}
if {${subport} eq "${name}-sqlite3-plugin"} {
    replaced_by     ${name}-sqlite-plugin
    PortGroup       obsolete 1.0
}

foreach sp ${qt5.kde_stubports} {
    subport ${name}-${sp} {
        set is_stubport     yes
        conflicts-append    [qt5_port_conflicts ${sp}]
        archive_sites
        distfiles
        depends_extract
        depends_build
        depends_run
        depends_lib         ${qt5_dependency}
        switch ${sp} {
            "docs" {
                variant html description {passed on to ${name}-zz-docs} {}
                variant qch conflicts html description {passed on to ${name}-zz-docs} {}
                description     stub\; provided by port:${name}-zz-docs
                long_description \
                                this is a stub for the Qt5 documentation, provided by port:${name}-zz-docs
                depends_lib     port:${name}-zz-docs
                depends_run     port:${name}-zz-docs
                replaced_by     port:${name}-zz-docs
            }
            "qtwebkit" {
                description     stub\; pulls in port:qt5-webkit
                long_description \
                                this is a transitional stub subport for Qt5's ${sp} which is now provided by port:qt5-webkit
                depends_lib-append \
                                port:qt5-webkit
            }
            "qtwebkit-examples" {
                description     stub\; part of port:${name}-examples
                long_description \
                                this is a stub for a subport that's included in port:${name}-examples
                depends_run     port:${name}-qtwebkit port:${name}-examples
            }
            "qtenginio" {
                description     ${subport} was deprecated and removed
                long_description \
                                ${description}
                if {[vercmp ${version} 5.7.0] >= 0} {
                    pre-fetch {
                        ui_error "QtEngioIO was deprecated and removed; this port no longer exists"
                        return -code error "Obsolete port"
                    }
                }
            }
            "qtquick1" {
                description     ${subport} is deprecated.
                long_description \
                                ${description}
                replaced_by     ${name}-qtdeclarative
                PortGroup       obsolete 1.0
            }
            "qttools" {
                description     stub\; part of port:${name}
                long_description \
                                this is a stub subport for Qt5's ${sp} which is included in port:${name}
                depends_run-append \
                                path:${qt_bins_dir}/assistant:${name}-assistant
                # we're a stub but we still should pass through relevant variants
                variant qtwebkit description {enable QtWebKit in the Assistant} {}
            }
            "mysql-plugin" {
                PortGroup active_variants 1.1
                description     stub\; part of port:${name}
                long_description \
                                this is a stub subport for Qt5's ${sp} which is included in port:${name}
                # we're a stub but we still should pass through relevant variants
                variant mariadb55 conflicts mysql56 mysql57 description {use MariaDB v5.5} {}
                variant mysql56 conflicts mariadb55 mysql57 description {use MySQL v5.6} {}
                variant mysql57 conflicts mariadb55 mysql56 description {use MySQL v5.7} {}
                switch_variant mariadb55 mysql56 mysql57 {
                    "mysql56" -
                    "mysql57" {
                        global qt5_dependency
                        require_active_variants ${qt5_dependency} ${variant}
                    }
                    default {
                        global qt5_dependency
                        default_variants +mariadb55
                        require_active_variants ${qt5_dependency} mariadb55
                    }
                }
            }
            default {
                description     stub\; part of port:${name}
                long_description \
                                this is a stub subport for Qt5's ${sp} component which is included in port:${name}
            }
        }
        use_configure       no
        supported_archs     noarch
        build {}
        destroot {
            xinstall -d -m 755 ${destroot}${qt_docs_dir}/installed-stubports
            system "touch ${destroot}${qt_docs_dir}/installed-stubports/${subport}"
        }
    }
    if {${subport} eq "${name}"} {
        # we could be more specific but we'll just record all the port:qt5 subports as conflicts:
        conflicts-append    qt5-${sp}
    }
}

if {${subport} eq "${name}-psql84-plugin"} {
    replaced_by     ${name}-psql-plugin
    PortGroup       obsolete 1.0
}
subport ${name}-psql84-plugin {}

## psql-plugin subport
subport ${name}-psql-plugin {
    use_PortGroup   qmake5 1.0

    depends_lib-append \
                    ${qt5_dependency}
    if {${os.platform} eq "darwin"} {
        # define the postgresql variants
        set pqversions {84 93 94 95 96}
        set pqvariant ""
        foreach pqv ${pqversions} {
            set conflist ""
            foreach v ${pqversions} {
                if {${v} ne ${pqv}} {
                    set conflist "${conflist} postgresql${v}"
                }
            }
            variant postgresql${pqv} conflicts ${conflist} description "Use postgresql${pqv}" {}
            if {[variant_isset postgresql${pqv}]} {
                set pqvariant "postgresql${pqv}"
            }
        }
        # now ensure that one is set, and that each adds the appropriate build settings
        if {${pqvariant} eq ""} {
            set pqvariant "postgresql96"
            default_variants +${pqvariant}
        }
        foreach pqv ${pqversions} {
            if {[variant_isset postgresql${pqv}]} {
                set pqvariant "postgresql${pqv}"
                depends_lib-append port:postgresql${pqv}
                configure.args-append \
                            "QMAKE_INCDIR_PSQL+=\"${prefix}/include/postgresql${pqv}\"" \
                            "QMAKE_LIBDIR_PSQL+=\"${prefix}/lib/postgresql${pqv}\"" \
                            "QMAKE_LIBS_PSQL+=\"-lpq\""
            }
        }
    } else {
        configure.args-append \
                            "QMAKE_INCDIR_PSQL+=\"/usr/include/postgresql\"" \
                            "QMAKE_LIBS_PSQL+=\"-lpq\""
    }

    # extract only the qtbase component
    extract_components-append \
                            ${distname}/qtbase
    post-extract {
        file delete -force ${workpath}/${distname}/qtbase/mkspecs
    }
    patchfiles-append       ${PF59x}patch-sqlplugins-pri.diff
    # for single architecture, easier to use
    #    worksrcdir ${worksrcdir}/qtbase/src/plugins/sqldrivers/psql,
    #    but doesn't work for universal build
    qt5.top_level           ${worksrcpath}/qtbase/src/plugins/sqldrivers
    configure.dir           ${worksrcpath}/qtbase/src/plugins/sqldrivers/psql
    build.dir               ${configure.dir}
    destroot.dir            ${configure.dir}
    # lets get more verbose qmake output in case something breaks - again...
    configure.pre_args-append \
                            -d

    post-destroot {
        if {${os.platform} eq "darwin" && [info exists qt_cmake_module_dir]} {
            xinstall -d -m 755 ${destroot}${qt_cmake_module_dir}
            move ${destroot}${qt_frameworks_dir}/cmake/Qt5Sql ${destroot}${qt_cmake_module_dir}
        }
    }
}

## Examples subport
subport ${name}-examples {
    use_PortGroup               qmake5 1.0

    description                 ${description} - the examples
    long_description            ${long_description} The examples. NB: this port will conflict \
                                with port:${name}'s +examples variant!
    universal_variant           no

    # extract only the examples
    extract_components-append   ${distname}/qtbase/examples/            \
                                ${distname}/qtconnectivity/examples/    \
                                ${distname}/qtdeclarative/examples/     \
                                ${distname}/qtlocation/examples/        \
                                ${distname}/qtmacextras/examples/       \
                                ${distname}/qtmultimedia/examples/      \
                                ${distname}/qtquickcontrols/examples/   \
                                ${distname}/qtscript/examples/          \
                                ${distname}/qtsensors/examples/         \
                                ${distname}/qtsvg/examples/             \
                                ${distname}/qttools/examples/           \
                                ${distname}/qtxmlpatterns/examples/     \
                                ${distname}/qtcanvas3d/examples
    extract_components-append   ${distname}/qtcharts/examples \
                                ${distname}/qtdatavis3d/examples \
                                ${distname}/qtgamepad/examples \
                                ${distname}/qtpurchasing/examples \
                                ${distname}/qtquickcontrols2/examples/   \
                                ${distname}/qtscxml/examples \
                                ${distname}/qtserialbus/examples/   \
                                ${distname}/qtserialport/examples/   \
                                ${distname}/qtvirtualkeyboard/examples \
                                ${distname}/qtremoteobjects/examples

    variant qtwebengine description {build the qtwebengine and qtwebview examples too} {
        qt5.depends_component       qtwebengine qtwebview
        extract_components-append   ${distname}/qtwebengine/examples/ \
                                    ${distname}/qtwebview/examples/
    }
    variant qt3d description {build the Qt3D examples too} {
        extract_components-append   ${distname}/qt3d/examples
    }

    platform linux {
        extract_components-append   ${distname}/qtwayland/examples
    }
    depends_lib-append              ${qt5_dependency}

    post-extract {
        copy -force ${filespath}/${PF59x}/all-examples.pro ${workpath}/${worksrcdir}/all-examples.pro
        if {![variant_isset qtwebengine]} {
            reinplace "/qtwebengine/d" ${workpath}/${worksrcdir}/all-examples.pro
            reinplace "/qtwebview/d" ${workpath}/${worksrcdir}/all-examples.pro
        }
        if {![variant_isset qt3d]} {
            reinplace "/qt3d/d" ${workpath}/${worksrcdir}/all-examples.pro
        }
        platform linux {
            # wayland may really be Linux-specific for now
            reinplace "s|#linux|SUBDIRS += qtwayland/examples|g" \
                                ${workpath}/${worksrcdir}/all-examples.pro
        }
        xinstall -m 755 -d ${workpath}/build
    }

    patchfiles-append           ${PF59x}remove_icon_from_example.patch \
                                ${PF59x}remove_google_adsense.patch
    platform darwin 13 {
        patchfiles-append       ${PF595}patch-qwe-examples-109.diff
    }

    variant debug description {This variant builds with more debugging info} {
        if {[string match *clang* ${configure.cxx}]} {
            set debugopts "-g -fno-limit-debug-info"
        } else {
            set debugopts "-g"
        }
        configure.post_args-append "QMAKE_CFLAGS+=\"${debugopts}\""
        configure.post_args-append "QMAKE_CXXFLAGS+=\"${debugopts}\""
    }

    default configure.dir       {${workpath}/build}
    configure.pre_args-append   -r ../${worksrcdir}/all-examples.pro
    default build.dir           {${workpath}/build}
    build.target
    post-destroot {
        if {${os.platform} eq "darwin"} {
            # this may be a bug since Qt 5.4.1: libgruesensor.1.dylib must be accessed through a complete path but
            # isn't stored like that in 2 dependents.
            system "install_name_tool -change libgruesensor.1.dylib ${qt_examples_dir}/sensors/grue/libgruesensor.1.dylib \
                ${destroot}${qt_examples_dir}/sensors/grue/Grue/libdeclarative_grue.dylib"
            system "install_name_tool -change libgruesensor.1.dylib ${qt_examples_dir}/sensors/grue/libgruesensor.1.dylib \
                ${destroot}${qt_examples_dir}/sensors/grue/sensors/libqtsensors_grue.dylib"
        }
    }
}

## settingseditor subport
subport ${name}-settingseditor {
    use_PortGroup               qmake5 1.0

    description                 ${description} - the settings editor from the examples
    long_description            The settings editor from the examples of port:${name}. \
                                It can edit both native (binary) .plists and cross-platform .ini \
                                files.
    universal_variant           no
    conflicts-append            [qt5_port_conflicts settingseditor]

    # extract only the examples
    extract_components-append   ${distname}/qtbase/examples/widgets/tools/settingseditor
    depends_lib-append          ${qt5_dependency}

    default configure.dir       {${workpath}/build}
    configure.pre_args-append   ../${worksrcdir}/qtbase/examples/widgets/tools/settingseditor/settingseditor.pro
    default build.dir           {${workpath}/build}
    post-destroot {
        if {${os.platform} eq "darwin"} {
            file rename ${destroot}${qt_examples_dir}/widgets/tools/settingseditor/settingseditor.app \
                ${destroot}${qt_apps_dir}
        } else {
            file rename ${destroot}${qt_examples_dir}/widgets/tools/settingseditor/settingseditor \
                ${destroot}${qt_apps_dir}
        }
    }
}

## Assistant subport
subport ${name}-assistant {
    use_PortGroup               qmake5 1.0
    description                 ${description} - the documentation browser
    long_description            Qt Assistant is the documentation browser from the QtTools component. \
                                Its full feature set and optimum rendering depends on the QtWebKit component. \n\
                                Please read the notes (`port notes ${subport}`)!
    notes-append                "\n---\nPort:${subport} maintains a collection file with \
                                additional Qt help files available on the system in ${prefix}/share/doc/qch\; \
                                You can add complete this collection with the Qt documentation in \
                                ${qt_docs_dir} in the Assistant's Preferences dialog. Use with\n\
                                `assistant-qt5 -collectionFile ${qt5::qch_collection_file}`"
    universal_variant           no
    conflicts-append            [qt5_port_conflicts assistant]

    # extract only the examples
    extract_components-append   ${distname}/qttools/src/assistant ${distname}/qttools/src/shared
    depends_lib-append          ${qt5_dependency}

    variant qtwebkit description {build the full-featured version that uses QtWebKit for rendering} {}
    if {[variant_isset qtwebkit]} {
        qt5.depends_component   qtwebkit
        patchfiles-append       ${PF59x}patch-assistant-with-qtwebkit.diff
    } else {
        patchfiles-append       ${PF59x}patch-assistant-without-qtwebkit.diff
    }

    # patch-fontpanel.diff -> patch-assistant-fontpanel.diff for Qt 5.9
    patchfiles-append           ${PF59x}patch-assistant-fontpanel.diff

    default configure.dir       {${workpath}/build}
    configure.pre_args-append   ../${worksrcdir}/qttools/src/assistant/assistant/assistant.pro
    default build.dir           {${workpath}/build}
    destroot {
        # sic, we destroot to qt_bins_dir; post-destroot will correct this
        xinstall -m 755 -d ${destroot}${qt_bins_dir}
        if {${os.platform} eq "darwin"} {
            file copy ${build.dir}/Assistant.app ${destroot}${qt_bins_dir}
            qt5.add_app_wrapper assistant-qt5 Assistant
        } else {
            xinstall -m 755 ${build.dir}/assistant ${destroot}${qt_bins_dir}
            qt5.add_app_wrapper assistant-qt5 assistant assistant ${qt_bins_dir}
        }
    }
    post-destroot {
        move_and_proxy_appbundles
    }
}

post-destroot {
    # store the configuration information. NB: this could have gone in one of the above post-destroot
    # blocks where we know that ${build.dir}/qtbase is available ...
    if {[file exists ${build.dir}/qtbase]} {
        xinstall -m 755 -d ${destroot}${qt_docs_dir}/${subport}
        foreach l [glob -nocomplain ${build.dir}/qtbase/config.s* ${build.dir}/config.s*] {
            set fn [file tail ${l}]
            xinstall -m 644 ${l} ${destroot}${qt_docs_dir}/${subport}/${fn}
            xinstall -m 644 ${l} ${destroot}${qt_docs_dir}/${subport}/${fn}
        }
    }
    if {${compress_webcorestlib}} {
        ui_info "--->  Re-compressing libWebCore.a"
        system "bzip2 -9v ${webcorestlib} &"
    }

    xinstall -m 755 -d ${destroot}${qt_install_registry}
    system "echo ${version} > ${destroot}${qt_install_registry}/${subport}"
    if {${subport} eq "${name}"} {
        xinstall -m 755 -d ${destroot}${qt_install_registry}/family
        ln -s ../${subport}  ${destroot}${qt_install_registry}/family/${basename}
    }
}

post-activate {
    set pgroup_files {"qt5-1.0.tcl" "qt5-kde-1.0.tcl" "qt5-mac-1.0.tcl" "qmake5-1.0.tcl" "qmake5-kde-1.0.tcl"}
    ui_msg "Don't forget to copy the following file(s) into your main port tree's _resources directory:"
    foreach pg ${pgroup_files} {
        ui_msg "\t${qt5::currentportgroupdir}/${pg}"
    }
    ui_msg "(That's probably ${prefix}/var/macports/sources/rsync.macports.org/release/ports/_resources/port1.0/group"
    ui_msg "or ${prefix}/var/macports/sources/rsync.macports.org/release/tarballs/ports/_resources/port1.0/group/"
    ui_msg "or ${prefix}/var/macports/sources/svn.macports.org/trunk/dports/_resources/port1.0/group)"
}

livecheck.type      regex
livecheck.url       http://download.qt.io/archive/qt/${branch}/
livecheck.regex     (\\d+(\\.\\d+)+)
