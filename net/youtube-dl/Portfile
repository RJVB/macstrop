# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0

name                youtube-dl
version             2019.06.21
checksums           rmd160  2034f79f88cebc47db00e66e34c831d862f873a0 \
                    sha256  85872e23add44409711bd0eb5620c663d67c578a3df663578ff07f944212470d
#                     size    3169975

categories          net
platforms           darwin
maintainers         {ryandesign @ryandesign} openmaintainer
supported_archs     noarch
installs_libs       no
license             public-domain

description         command-line program to download videos from YouTube.com and other sites

long_description    ${name} is a small ${description}.

homepage            https://rg3.github.io/youtube-dl/
master_sites        https://yt-dl.org/downloads/${version}

depends_build       bin:zip:zip

worksrcdir          ${name}

post-extract {
    # Force the script to be regenerated by `make`.
    delete ${worksrcpath}/${name}
    system -W ${worksrcpath} "chmod +x devscripts/make_contributing.py devscripts/make_supportedsites.py"
}

patchfiles          patch-config-location.diff
patch.args          --backup

post-patch {
    reinplace -W ${worksrcpath} "s|@PREFIX@|${prefix}|g" \
            youtube_dl/options.py \
            README.md \
            youtube-dl.1

    # Restore original mtimes of files changed by the patch so that `make` doesn't try to regenerate the documentation with `pandoc`.
    foreach f {youtube_dl/update.py youtube_dl/options.py README.md youtube-dl.1} {
        if {[file exists ${worksrcpath}/${f}.orig]} {
            file mtime ${worksrcpath}/${f} [file mtime ${worksrcpath}/${f}.orig]
            file delete ${worksrcpath}/${f}.orig
        }
    }
}

use_configure       no

destroot.args       PREFIX=${prefix} \
                    MANDIR=${prefix}/share/man \
                    SYSCONFDIR=${prefix}/etc

post-destroot {
    set docdir ${prefix}/share/doc/${name}
    xinstall -d ${destroot}${docdir}
    xinstall -m 0644 -W ${worksrcpath} LICENSE README.md ${destroot}${docdir}
}

variant ffmpeg description {Add ffmpeg dependency, used to extract audio} {
    depends_run-append      path:bin/AtomicParsley:AtomicParsley \
                            path:bin/ffmpeg:ffmpeg
}

default_variants    +ffmpeg

variant python27 conflicts python35 python36 python37 description {Use Python 2.7 from MacPorts} {
    depends_run-append      port:python27
    depends_build-append    port:python27
    configure.python        ${prefix}/bin/python2.7
}

variant python35 conflicts python27 python36 python37 description {Use Python 3.5 from MacPorts} {
    depends_run-append      port:python35
    depends_build-append    port:python35
    configure.python        ${prefix}/bin/python3.5
}

variant python36 conflicts python27 python35 python37 description {Use Python 3.6 from MacPorts} {
    depends_run-append      port:python36
    depends_build-append    port:python36
    configure.python        ${prefix}/bin/python3.6
}

variant python37 conflicts python27 python35 python36 description {Use Python 3.7 from MacPorts} {
    depends_run-append      port:python37
    depends_build-append    port:python37
    configure.python        ${prefix}/bin/python3.7
}

if {![variant_isset python27] && ![variant_isset python35] && ![variant_isset python36] && ![variant_isset python37]} {
    # There isn't actually a need to use a MacPorts Python interpreter; the system one will do just fine.
    # When using the system interpreter (or whichever python is on the path) there is also no hard reason to
    # ban in-app upgrading; this will only replace ${prefix}/bin/youtube-dl with a new version (= not introduce
    # new files).
    # NB: python 2.7 runs this significantly faster.
    configure.python        python
} else {
    # disallow in-app upgrading as that would drop the use of the user-selected python version
    patchfiles-append       patch-youtube_dl-update.py.diff
    pre-build {
        build.args-append   PYTHON=${configure.python}
    }
}

variant unpacked description {improve startup performance by installing as a bundle of uncompressed scripts} {}

if {[variant_isset unpacked]} {
    # unpack the compressed script that was just created. This ensures that we get the exact
    # same behaviour. In-app upgrading is not supported when installing this way.
    post-destroot {
        set catchval [catch {system -W ${destroot} "unzip ${destroot}${prefix}/bin/youtube-dl"} rval optval]
        # we will probably get an exit code 1 from unzip because of the 
        if {(${catchval} == 0 || [lindex ${::errorCode} 2] == 1)
            && [file exists ${destroot}/__main__.py]
        } {
            file delete ${destroot}${prefix}/bin/youtube-dl
            file rename ${destroot}/__main__.py ${destroot}${prefix}/bin/youtube-dl
            system "chmod 755 ${destroot}${prefix}/bin/youtube-dl"
            file rename ${destroot}/youtube_dl ${destroot}${prefix}/libexec/youtube_dl
            # force a compilation by invoking the script once
            system -W ${destroot} "env PYTHONPATH=${destroot}${prefix}/libexec \
                ${configure.python} -v ${destroot}${prefix}/bin/youtube-dl --version"
            # make certain the wrapper script will load the correct programme
            reinplace "s|__file__|'${prefix}/libexec/youtube_dl/version.py'|g" ${destroot}${prefix}/bin/youtube-dl
            if {${configure.python} ne "python"} {
                reinplace "s|#!/usr/bin/env python|#!${configure.python}|g" ${destroot}${prefix}/bin/youtube-dl
            }
        } else {
            ui_error "Unpacking youtube-dl failed (${rval})"
            return -code error "Unpacking failed"
        }
    }
    pre-activate {
        # remove the bytecode cache directory
        if {[file exists ${prefix}/libexec/youtube_dl]} {
            ui_warn "Purging any existing youtube_dl bytecode cache files"
            file delete -force {*}[glob -nocomplain -directory ${prefix}/libexec/youtube_dl *.pyc *.pyo]
        }
        if {[file exists ${prefix}/libexec/youtube_dl/__pycache__]} {
            ui_warn "Purging the youtube_dl bytecode cache directory"
            file delete -force ${prefix}/libexec/youtube_dl/__pycache__
        }
    }
}

livecheck.type      regex
livecheck.url       ${homepage}update/LATEST_VERSION
livecheck.regex     {^([0-9.]+)$}
