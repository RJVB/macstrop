diff --git a/clientloop.c
--- a/clientloop.c	2023-03-15 16:28:19.000000000 -0500
+++ b/clientloop.c	2023-03-16 13:56:15.000000000 -0500
@@ -295,6 +295,10 @@
 	struct stat st;
 	u_int now, x11_timeout_real;
 
+#if __APPLE__
+	int is_path_to_socket = 0;
+#endif /* __APPLE__ */
+
 	*_proto = proto;
 	*_data = data;
 	proto[0] = data[0] = xauthfile[0] = xauthdir[0] = '\0';
@@ -311,6 +315,19 @@
 	}
 
 	if (xauth_path != NULL) {
+#if __APPLE__
+		{
+			/*
+			 * If using launchd socket, remove the screen number from the end
+			 * of $DISPLAY. is_path_to_socket is used later in this function
+			 * to determine if an error should be displayed.
+			 */
+			char path[PATH_MAX];
+
+			is_path_to_socket = is_path_to_xsocket(display, path, sizeof(path));
+		}
+#endif /* __APPLE__ */
+
 		/*
 		 * Handle FamilyLocal case where $DISPLAY does
 		 * not match an authorization entry.  For this we
@@ -433,6 +450,9 @@
 		u_int8_t rnd[16];
 		u_int i;
 
+#if __APPLE__
+		if (!is_path_to_socket)
+#endif /* __APPLE__ */
 		logit("Warning: No xauth data; "
 		    "using fake authentication data for X11 forwarding.");
 		strlcpy(proto, SSH_X11_PROTO, sizeof proto);
diff --git a/channels.c
--- a/channels.c	2023-03-15 16:28:19.000000000 -0500
+++ b/channels.c	2023-03-16 13:56:15.000000000 -0500
@@ -5066,7 +5066,7 @@
 }
 
 #ifdef __APPLE__
-static int
+int
 is_path_to_xsocket(const char *display, char *path, size_t pathlen)
 {
 	struct stat sbuf;
diff --git a/channels.h
--- a/channels.h	2023-03-15 16:28:19.000000000 -0500
+++ b/channels.h	2023-03-16 13:58:02.000000000 -0500
@@ -376,6 +376,9 @@
 /* x11 forwarding */
 
 void	 channel_set_x11_refuse_time(struct ssh *, time_t);
+#ifdef __APPLE__
+int	 is_path_to_xsocket(const char *, char *, size_t);
+#endif
 int	 x11_connect_display(struct ssh *);
 int	 x11_create_display_inet(struct ssh *, int, int, int, u_int *, int **);
 void	 x11_request_forwarding_with_spoofing(struct ssh *, int,
diff --git a/ssh-agent.0
--- a/ssh-agent.0	2023-03-15 22:32:25.000000000 +0100
+++ b/ssh-agent.0	2023-04-16 21:38:52.000000000 +0200
@@ -9,6 +9,7 @@
      ssh-agent [-a bind_address] [-E fingerprint_hash] [-O option]
                [-P allowed_providers] [-t life] command [arg ...]
      ssh-agent [-c | -s] -k
+     ssh-agent -l
 
 DESCRIPTION
      ssh-agent is a program to hold private keys used for public key
@@ -69,6 +70,9 @@
              for an identity with ssh-add(1) overrides this value.  Without
              this option the default maximum lifetime is forever.
 
+     -l      Start in launchd mode.  This feature should only be used by macOS
+             itself.  It is not very useful to users.
+
      command [arg ...]
              If a command (and optional arguments) is given, this is executed
              as a subprocess of the agent.  The agent exits automatically when
diff --git a/ssh-agent.1 b/ssh-agent.1
index b0bf65d..50f5953 100644
--- a/ssh-agent.1
+++ b/ssh-agent.1
@@ -59,6 +59,8 @@
 .Nm ssh-agent
 .Op Fl c | s
 .Fl k
+.Nm ssh-agent
+.Fl l
 .Sh DESCRIPTION
 .Nm
 is a program to hold private keys used for public key authentication.
@@ -153,6 +155,10 @@ A lifetime specified for an identity with
 .Xr ssh-add 1
 overrides this value.
 Without this option the default maximum lifetime is forever.
+.It Fl l
+Start in launchd mode.
+This feature should only be used by macOS itself.
+It is not very useful to users.
 .It Ar command Op Ar arg ...
 If a command (and optional arguments) is given,
 this is executed as a subprocess of the agent.
diff --git a/ssh-agent.c b/ssh-agent.c
index 618bb198190e712f32598624eb4b0272476e8678..46b9dc768f6b649130d269168176ac5444611a90 100644
--- a/ssh-agent.c
+++ b/ssh-agent.c
@@ -70,6 +70,10 @@
 #include <time.h>
 #include <string.h>
 #include <unistd.h>
+#ifdef __APPLE_LAUNCHD__
+#include <launch.h>
+#include <AvailabilityMacros.h>
+#endif
 #ifdef HAVE_UTIL_H
 # include <util.h>
 #endif
@@ -1992,7 +1996,8 @@ usage(void)
 	    "                 [-O option] [-P allowed_providers] [-t life]\n"
 	    "       ssh-agent [-a bind_address] [-E fingerprint_hash] [-O option]\n"
 	    "                 [-P allowed_providers] [-t life] command [arg ...]\n"
-	    "       ssh-agent [-c | -s] -k\n");
+	    "       ssh-agent [-c | -s] -k\n"
+        "       ssh-agent -l\n");
 	exit(1);
 }
 
@@ -2000,6 +2005,9 @@ int
 main(int ac, char **av)
 {
 	int c_flag = 0, d_flag = 0, D_flag = 0, k_flag = 0, s_flag = 0;
+	#ifdef __APPLE_LAUNCHD__
+	int l_flag = 0;
+	#endif
 	int sock, ch, result, saved_errno;
 	char *shell, *format, *pidstr, *agentsocket = NULL;
 #ifdef HAVE_SETRLIMIT
@@ -2033,7 +2041,11 @@ main(int ac, char **av)
 	__progname = ssh_get_progname(av[0]);
 	seed_rng();
 
+#ifdef __APPLE_LAUNCHD__
+	while ((ch = getopt(ac, av, "cDdklsE:a:O:P:t:")) != -1) {
+#else
 	while ((ch = getopt(ac, av, "cDdksE:a:O:P:t:")) != -1) {
+#endif
 		switch (ch) {
 		case 'E':
 			fingerprint_hash = ssh_digest_alg_by_name(optarg);
@@ -2059,6 +2071,11 @@ main(int ac, char **av)
 				fatal("-P option already specified");
 			allowed_providers = xstrdup(optarg);
 			break;
+#ifdef __APPLE_LAUNCHD__
+		case 'l':
+			l_flag++;
+			break;
+#endif
 		case 's':
 			if (c_flag)
 				usage();
@@ -2161,6 +2178,75 @@ main(int ac, char **av)
 	 * Create socket early so it will exist before command gets run from
 	 * the parent.
 	 */
+#ifdef __APPLE_LAUNCHD__
+	if (l_flag) {
+#if ((defined (MAC_OS_X_VERSION_10_11)) && (MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_11))
+		int *fds = NULL;
+		size_t count = 0;
+		result = launch_activate_socket("Listeners", &fds, &count);
+
+		if (result != 0 || fds == NULL || count < 1) {
+			errno = result;
+			perror("launch_activate_socket()");
+			exit(1);
+		}
+
+		size_t i;
+		for (i = 0; i < count; i++) {
+			new_socket(AUTH_SOCKET, fds[i]);
+		}
+
+		if (fds)
+			free(fds);
+
+		goto skip2;
+#else /* ((defined (MAC_OS_X_VERSION_10_11)) && (MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_11)) */
+		launch_data_t resp, msg, tmp;
+		size_t listeners_i;
+
+		msg = launch_data_new_string(LAUNCH_KEY_CHECKIN);
+
+		resp = launch_msg(msg);
+
+		if (NULL == resp) {
+			perror("launch_msg");
+			exit(1);
+		}
+		launch_data_free(msg);
+		switch (launch_data_get_type(resp)) {
+		case LAUNCH_DATA_ERRNO:
+			errno = launch_data_get_errno(resp);
+			perror("launch_msg response");
+			exit(1);
+		case LAUNCH_DATA_DICTIONARY:
+			break;
+		default:
+			fprintf(stderr, "launch_msg unknown response");
+			exit(1);
+		}
+		tmp = launch_data_dict_lookup(resp, LAUNCH_JOBKEY_SOCKETS);
+
+		if (NULL == tmp) {
+			fprintf(stderr, "no sockets\n");
+			exit(1);
+		}
+
+		tmp = launch_data_dict_lookup(tmp, "Listeners");
+
+		if (NULL == tmp) {
+			fprintf(stderr, "no known listeners\n");
+			exit(1);
+		}
+
+		for (listeners_i = 0; listeners_i < launch_data_array_get_count(tmp); listeners_i++) {
+			launch_data_t obj_at_ind = launch_data_array_get_index(tmp, listeners_i);
+			new_socket(AUTH_SOCKET, launch_data_get_fd(obj_at_ind));
+		}
+
+		launch_data_free(resp);
+#endif /* ((defined (MAC_OS_X_VERSION_10_11)) && (MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_11)) */
+	} else {
+#endif
 	prev_mask = umask(0177);
 	sock = unix_listener(socket_name, SSH_LISTEN_BACKLOG, 0);
 	if (sock < 0) {
@@ -2168,7 +2254,18 @@ main(int ac, char **av)
 		*socket_name = '\0'; /* Don't unlink any existing file */
 		cleanup_exit(1);
 	}
+
 	umask(prev_mask);
+#ifdef __APPLE_LAUNCHD__
+	}
+#endif
+
+#ifdef __APPLE_LAUNCHD__
+#if ((!(defined (MAC_OS_X_VERSION_10_11))) || (MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_11))
+	if (l_flag)
+		goto skip2;
+#endif /* ((!(defined (MAC_OS_X_VERSION_10_11))) || (MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_11)) */
+#endif /* defined (__APPLE_LAUNCHD__) */
 
 	/*
 	 * Fork, and have the parent execute the command, if any, or present
@@ -2240,6 +2337,9 @@ skip:
 	pkcs11_init(0);
 #endif
 	new_socket(AUTH_SOCKET, sock);
+#ifdef __APPLE_LAUNCHD__
+skip2:
+#endif
 	if (ac > 0)
 		parent_alive_interval = 10;
 	idtab_init();
