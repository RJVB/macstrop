diff --git CMakeLists.txt CMakeLists.txt
index c47748c5..f12751ba 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -58,12 +58,16 @@ option(WITH_XC_YUBIKEY "Include YubiKey support." OFF)
 option(WITH_XC_SSHAGENT "Include SSH agent support." OFF)
 option(WITH_XC_KEESHARE "Sharing integration with KeeShare" OFF)
 option(WITH_XC_UPDATECHECK "Include automatic update checks; disable for controlled distributions" ON)
-if(UNIX AND NOT APPLE)
+if(UNIX)
     option(WITH_XC_FDOSECRETS "Implement freedesktop.org Secret Storage Spec server side API." OFF)
 endif()
 option(WITH_XC_DOCS "Enable building of documentation" ON)
 
-set(WITH_XC_X11 ON CACHE BOOL "Enable building with X11 deps")
+if (APPLE)
+    set(WITH_XC_X11 OFF CACHE BOOL "Enable building with X11 deps")
+else()
+    set(WITH_XC_X11 ON CACHE BOOL "Enable building with X11 deps")
+endif()
 
 if(APPLE)
     # Perform the platform checks before applying the stricter compiler flags.
@@ -103,7 +107,7 @@ if(WITH_XC_ALL)
     set(WITH_XC_YUBIKEY ON)
     set(WITH_XC_SSHAGENT ON)
     set(WITH_XC_KEESHARE ON)
-    if(UNIX AND NOT APPLE)
+    if(UNIX)
         set(WITH_XC_FDOSECRETS ON)
     endif()
 endif()
diff --git share/CMakeLists.txt share/CMakeLists.txt
index f120fc6e..4f7864f2 100644
--- share/CMakeLists.txt
+++ share/CMakeLists.txt
@@ -69,6 +69,10 @@ endif(UNIX AND NOT APPLE AND NOT HAIKU)
 
 if(APPLE)
   install(FILES macosx/keepassxc.icns DESTINATION ${DATA_INSTALL_DIR})
+  # RJVB
+  configure_file(linux/${APP_ID}.desktop.in ${CMAKE_CURRENT_BINARY_DIR}/linux/${APP_ID}.desktop @ONLY)
+  configure_file(linux/${APP_ID}.policy.in ${CMAKE_CURRENT_BINARY_DIR}/linux/${APP_ID}.policy @ONLY)
+  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/linux/${APP_ID}.policy DESTINATION ${CMAKE_INSTALL_PREFIX}/share/polkit-1/actions)
 endif()
 
 if(WIN32)
diff --git src/CMakeLists.txt src/CMakeLists.txt
index f52b02d0..edb9fc1e 100644
--- src/CMakeLists.txt
+++ src/CMakeLists.txt
@@ -205,17 +205,17 @@ if(APPLE)
             gui/osutils/macutils/AppKitImpl.mm
             gui/osutils/macutils/AppKit.h)
 endif()
-if(UNIX AND NOT APPLE)
+if(UNIX)
     set(keepassx_SOURCES
             ${keepassx_SOURCES}
             gui/osutils/nixutils/ScreenLockListenerDBus.cpp
             gui/osutils/nixutils/NixUtils.cpp)
-    if("${CMAKE_SYSTEM}" MATCHES "Linux")
+#     if("${CMAKE_SYSTEM}" MATCHES "Linux")
         set(keepassx_SOURCES
                 ${keepassx_SOURCES}
                 quickunlock/Polkit.cpp
                 quickunlock/PolkitDbusTypes.cpp)
-    endif()
+#     endif()
     if(WITH_XC_X11)
         list(APPEND keepassx_SOURCES
             gui/osutils/nixutils/X11Funcs.cpp)
@@ -235,9 +235,11 @@ if(UNIX AND NOT APPLE)
         polkit_dbus
     )
 
-    find_library(KEYUTILS_LIBRARIES NAMES keyutils)
-    if(NOT KEYUTILS_LIBRARIES)
-		message(FATAL_ERROR "Could not find libkeyutils")
+    if("${CMAKE_SYSTEM}" MATCHES "Linux")
+        find_library(KEYUTILS_LIBRARIES NAMES keyutils)
+        if(NOT KEYUTILS_LIBRARIES)
+            message(FATAL_ERROR "Could not find libkeyutils")
+        endif()
     endif()
 endif()
 if(WIN32)
@@ -264,7 +266,7 @@ add_feature_info(SSHAgent WITH_XC_SSHAGENT "SSH agent integration compatible wit
 add_feature_info(KeeShare WITH_XC_KEESHARE "Sharing integration with KeeShare")
 add_feature_info(YubiKey WITH_XC_YUBIKEY "YubiKey HMAC-SHA1 challenge-response")
 add_feature_info(UpdateCheck WITH_XC_UPDATECHECK "Automatic update checking")
-if(UNIX AND NOT APPLE)
+if(UNIX)
     add_feature_info(FdoSecrets WITH_XC_FDOSECRETS "Implement freedesktop.org Secret Storage Spec server side API.")
 endif()
 
@@ -398,7 +400,7 @@ endif()
 if(HAIKU)
     target_link_libraries(keepassx_core network)
 endif()
-if(UNIX AND NOT APPLE)
+if(UNIX)
     target_link_libraries(keepassx_core Qt5::DBus)
     if(WITH_XC_X11)
         target_link_libraries(keepassx_core Qt5::X11Extras X11)
diff --git src/gui/MainWindow.cpp src/gui/MainWindow.cpp
index a41f631e..10625936 100644
--- src/gui/MainWindow.cpp
+++ src/gui/MainWindow.cpp
@@ -73,7 +73,7 @@
 #include "browser/BrowserSettingsPage.h"
 #endif
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_MACOS) && !defined(QT_NO_DBUS)
+#if defined(Q_OS_UNIX) && !defined(QT_NO_DBUS)
 #include "mainwindowadaptor.h"
 #endif
 
@@ -92,7 +92,7 @@ MainWindow::MainWindow()
 
     m_ui->setupUi(this);
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_MACOS) && !defined(QT_NO_DBUS)
+#if defined(Q_OS_UNIX) && !defined(QT_NO_DBUS)
     new MainWindowAdaptor(this);
     QDBusConnection dbus = QDBusConnection::sessionBus();
     dbus.registerObject("/keepassxc", this);
@@ -1849,7 +1849,7 @@ void MainWindow::toggleWindow()
     } else {
         bringToFront();
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_MACOS) && !defined(QT_NO_DBUS) && (QT_VERSION < QT_VERSION_CHECK(5, 9, 0))
+#if defined(Q_OS_UNIX) && !defined(QT_NO_DBUS) && (QT_VERSION < QT_VERSION_CHECK(5, 9, 0))
         // re-register global D-Bus menu (needed on Ubuntu with Unity)
         // see https://github.com/keepassxreboot/keepassxc/issues/271
         // and https://bugreports.qt.io/browse/QTBUG-58723
diff --git src/gui/MainWindow.h src/gui/MainWindow.h
index 53f9add1..f620a10c 100644
--- src/gui/MainWindow.h
+++ src/gui/MainWindow.h
@@ -42,7 +42,7 @@ class MainWindow : public QMainWindow
 {
     Q_OBJECT
 
-#if defined(Q_OS_UNIX) && !defined(Q_OS_MACOS) && !defined(QT_NO_DBUS)
+#if defined(Q_OS_UNIX) && !defined(QT_NO_DBUS)
     Q_CLASSINFO("D-Bus Interface", "org.keepassxc.KeePassXC.MainWindow")
 #endif
 
diff --git src/quickunlock/Polkit.cpp src/quickunlock/Polkit.cpp
index 38b9380d..db7d8d86 100644
--- src/quickunlock/Polkit.cpp
+++ src/quickunlock/Polkit.cpp
@@ -28,9 +28,11 @@
 #include <botan/mem_ops.h>
 #include <cerrno>
 
+#ifdef __linux__
 extern "C" {
 #include <keyutils.h>
 }
+#endif
 
 const QString polkit_service = "org.freedesktop.PolicyKit1";
 const QString polkit_object = "/org/freedesktop/PolicyKit1/Authority";
@@ -122,6 +124,7 @@ bool Polkit::setKey(const QUuid& dbUuid, const QByteArray& key)
         return false;
     }
 
+#ifdef __linux__
     // Add the iv/key pair into the linux keyring
     key_serial_t key_serial = add_key("user",
                                       getKeyName(dbUuid).toStdString().c_str(),
@@ -133,6 +136,7 @@ bool Polkit::setKey(const QUuid& dbUuid, const QByteArray& key)
         qDebug() << "polkit keyring failed to store: " << errno;
         return false;
     }
+#endif
 
     // Scrub the keys from ram
     Botan::secure_scrub_memory(randomKey.data(), randomKey.size());
@@ -176,6 +180,7 @@ bool Polkit::getKey(const QUuid& dbUuid, QByteArray& key)
 
     PolkitAuthorizationResults authResult = result.value();
     if (authResult.is_authorized) {
+#ifdef __linux__
         QByteArray encryptedMasterKey = m_encryptedMasterKeys.value(dbUuid);
         key_serial_t keySerial =
             find_key_by_type_and_desc("user", getKeyName(dbUuid).toStdString().c_str(), KEY_SPEC_PROCESS_KEYRING);
@@ -225,6 +230,11 @@ bool Polkit::getKey(const QUuid& dbUuid, QByteArray& key)
         Botan::secure_scrub_memory(encryptedMasterKey.data(), encryptedMasterKey.size());
 
         return true;
+#else
+        m_error = QObject::tr("No kernel keyring on this platform");
+        qDebug() << "polkit no keyring";
+        return false;
+#endif
     }
 
     // Failed to authenticate
@@ -239,9 +249,13 @@ bool Polkit::getKey(const QUuid& dbUuid, QByteArray& key)
 
 bool Polkit::hasKey(const QUuid& dbUuid) const
 {
+#ifdef __linux__
     if (!m_encryptedMasterKeys.contains(dbUuid)) {
         return false;
     }
 
     return find_key_by_type_and_desc("user", getKeyName(dbUuid).toStdString().c_str(), KEY_SPEC_PROCESS_KEYRING) != -1;
+#else
+    return false;
+#endif
 }
