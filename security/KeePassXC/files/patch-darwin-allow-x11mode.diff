diff --git src/gui/osutils/macutils/MacUtils.cpp src/gui/osutils/macutils/MacUtils.cpp
index 0f2cc616..a7a186b1 100644
--- src/gui/osutils/macutils/MacUtils.cpp
+++ src/gui/osutils/macutils/MacUtils.cpp
@@ -35,6 +35,8 @@
 
 QPointer<MacUtils> MacUtils::m_instance = nullptr;
 
+static bool isCocoa = true;
+
 MacUtils::MacUtils(QObject* parent)
     : OSUtilsBase(parent)
     , m_appkit(new AppKit())
@@ -46,6 +48,8 @@ MacUtils::MacUtils(QObject* parent)
         // if we call it too fast after a theme change.
         QTimer::singleShot(100, [this]() { emit statusbarThemeChanged(); });
     });
+
+    isCocoa = QApplication::platformName().contains(QLatin1String("cocoa"));
 }
 
 MacUtils::~MacUtils()
@@ -63,52 +67,76 @@ MacUtils* MacUtils::instance()
 
 WId MacUtils::activeWindow()
 {
-    return m_appkit->activeProcessId();
+    return isCocoa ? m_appkit->activeProcessId() : 0;
 }
 
 bool MacUtils::raiseWindow(WId pid)
 {
-    return m_appkit->activateProcess(pid);
+    return isCocoa ? m_appkit->activateProcess(pid) : false;
 }
 
 bool MacUtils::raiseOwnWindow()
 {
+    if (!isCocoa) {
+        return false;
+    }
     m_appkit->toggleForegroundApp(true);
     return m_appkit->activateProcess(m_appkit->ownProcessId());
 }
 
 bool MacUtils::raiseLastActiveWindow()
 {
+    if (!isCocoa) {
+        return false;
+    }
     return m_appkit->activateProcess(m_appkit->lastActiveProcessId());
 }
 
 bool MacUtils::hideOwnWindow()
 {
+    if (!isCocoa) {
+        return false;
+    }
     return m_appkit->hideProcess(m_appkit->ownProcessId());
 }
 
 bool MacUtils::isHidden()
 {
+    if (!isCocoa) {
+        return false;
+    }
     return m_appkit->isHidden(m_appkit->ownProcessId());
 }
 
 bool MacUtils::enableAccessibility()
 {
+    if (!isCocoa) {
+        return false;
+    }
     return m_appkit->enableAccessibility();
 }
 
 bool MacUtils::enableScreenRecording()
 {
+    if (!isCocoa) {
+        return false;
+    }
     return m_appkit->enableScreenRecording();
 }
 
 bool MacUtils::isDarkMode() const
 {
+    if (!isCocoa) {
+        return false;
+    }
     return m_appkit->isDarkMode();
 }
 
 bool MacUtils::isStatusBarDark() const
 {
+    if (!isCocoa) {
+        return false;
+    }
     return m_appkit->isStatusBarDark();
 }
 
@@ -156,17 +184,20 @@ bool MacUtils::isCapslockEnabled()
  */
 void MacUtils::toggleForegroundApp(bool foreground)
 {
+    if (!isCocoa) {
+        return;
+    }
     m_appkit->toggleForegroundApp(foreground);
 }
 
 bool MacUtils::canPreventScreenCapture() const
 {
-    return true;
+    return isCocoa;
 }
 
 bool MacUtils::setPreventScreenCapture(QWindow* window, bool prevent) const
 {
-    if (window) {
+    if (isCocoa && window) {
         m_appkit->setWindowSecurity(window, prevent);
     }
     return true;
