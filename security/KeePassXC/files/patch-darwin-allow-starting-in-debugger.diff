diff --git src/core/Bootstrap.cpp src/core/Bootstrap.cpp
index aa359a29..22f2cc01 100644
--- src/core/Bootstrap.cpp
+++ src/core/Bootstrap.cpp
@@ -37,6 +37,8 @@
 // clang-format off
 #include <sys/types.h>
 #include <sys/ptrace.h>
+#include <sys/sysctl.h>
+#include <unistd.h>
 // clang-format on
 #endif
 
@@ -59,6 +61,41 @@ namespace Bootstrap
         qputenv("QT_BEARER_POLL_TIMEOUT", QByteArray::number(-1));
     }
 
+#ifdef HAVE_PT_DENY_ATTACH
+// from https://stackoverflow.com/a/2200786/1460868
+    static bool AmIBeingDebugged(void)
+        // Returns true if the current process is being debugged (either 
+        // running under the debugger or has a debugger attached post facto).
+    {
+        int                 junk;
+        int                 mib[4];
+        struct kinfo_proc   info;
+        size_t              size;
+
+        // Initialize the flags so that, if sysctl fails for some bizarre 
+        // reason, we get a predictable result.
+
+        info.kp_proc.p_flag = 0;
+
+        // Initialize mib, which tells sysctl the info we want, in this case
+        // we're looking for information about a specific process ID.
+
+        mib[0] = CTL_KERN;
+        mib[1] = KERN_PROC;
+        mib[2] = KERN_PROC_PID;
+        mib[3] = getpid();
+
+        // Call sysctl.
+
+        size = sizeof(info);
+        junk = sysctl(mib, sizeof(mib) / sizeof(*mib), &info, &size, NULL, 0);
+
+        // We're being debugged if the P_TRACED flag is set.
+
+        return ( (info.kp_proc.p_flag & P_TRACED) != 0 );
+    }
+#endif
+
     /**
      * Perform early application bootstrapping that does not rely on a QApplication
      * being present.
@@ -97,7 +134,9 @@ namespace Bootstrap
 
 // Mac OS X
 #ifdef HAVE_PT_DENY_ATTACH
-        success = success && (ptrace(PT_DENY_ATTACH, 0, 0, 0) == 0);
+        if (!AmIBeingDebugged()) {
+            success = success && (ptrace(PT_DENY_ATTACH, 0, 0, 0) == 0);
+        }
 #endif
 
 #ifdef Q_OS_WIN
