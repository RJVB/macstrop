diff --git a/lib/common/font-manager-fontconfig.c b/lib/common/font-manager-fontconfig.c
index 35ceabc9..ab950cc3 100644
--- a/lib/common/font-manager-fontconfig.c
+++ b/lib/common/font-manager-fontconfig.c
@@ -171,7 +171,9 @@ font_manager_list_available_font_files (void)
 {
     FcPattern *pattern = FcPatternBuild(NULL,NULL);
     FcObjectSet *objectset = FcObjectSetBuild (FC_FILE, FC_FONTFORMAT, NULL);
+#ifdef FC_VARIABLE
     g_assert(FcPatternAddBool(pattern, FC_VARIABLE, FcFalse));
+#endif
     FcFontSet *fontset = FcFontList(FcConfigGetCurrent(), pattern, objectset);
     GList *result = NULL;
 
@@ -276,7 +278,9 @@ font_manager_list_available_font_families (void)
 {
     GList *result = NULL;
     FcPattern *pattern = FcPatternBuild(NULL,NULL);
+#ifdef FC_VARIABLE
     g_assert(FcPatternAddBool(pattern, FC_VARIABLE, FcFalse));
+#endif
     FcObjectSet *objectset = FcObjectSetBuild(FC_FAMILY, FC_FONTFORMAT, NULL);
     FcFontSet *fontset = FcFontList(FcConfigGetCurrent(), pattern, objectset);
 
@@ -336,11 +340,15 @@ font_manager_get_available_fonts (const gchar *family_name)
     if (family_name)
         pattern = FcPatternBuild (NULL,
                                   FC_FAMILY, FcTypeString, family_name,
+#ifdef FC_VARIABLE
                                   FC_VARIABLE, FcTypeBool, FcFalse,
+#endif
                                   NULL);
     else
         pattern = FcPatternBuild (NULL,
+#ifdef FC_VARIABLE
                                   FC_VARIABLE, FcTypeBool, FcFalse,
+#endif
                                   NULL);
 
     FcObjectSet *objectset = FcObjectSetBuild(FC_FILE,
@@ -387,7 +395,9 @@ font_manager_get_available_fonts_for_lang (const gchar *lang_id)
 
     g_assert(FcLangSetAdd(langset, language));
     g_assert(FcPatternAddLangSet(pattern, FC_LANG, langset));
+#ifdef FC_VARIABLE
     g_assert(FcPatternAddBool(pattern, FC_VARIABLE, FcFalse));
+#endif
 
     FcObjectSet *objectset = FcObjectSetBuild(FC_FILE,
                                               FC_INDEX,
@@ -448,7 +458,9 @@ font_manager_get_available_fonts_for_chars (const gchar *chars)
     FcPattern *pattern = FcPatternCreate();
     FcCharSet *charset = FcCharSetCreate();
 
+#ifdef FC_VARIABLE
     g_assert(FcPatternAddBool(pattern, FC_VARIABLE, FcFalse));
+#endif
 
     for (int i = 0; i < n_chars; i++) {
         wc = g_utf8_get_char(p);
