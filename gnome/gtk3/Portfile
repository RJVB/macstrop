# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           xcodeversion 1.0
PortGroup           active_variants 1.1
PortGroup           legacysupport 1.1
PortGroup           LTO 1.0
PortGroup           meson 1.0
PortGroup           debug 1.0
PortGroup           locale_select 1.0
PortGroup           compress_workdir 1.0

name                gtk3
conflicts           gtk3-devel
set my_name         gtk3
version             3.24.38
epoch               1

set proj_name       gtk+
set branch          [join [lrange [split ${version} .] 0 1] .]
categories          gnome x11
license             LGPL-2.1+
maintainers         {mascguy @mascguy} openmaintainer
platforms           darwin

description         GTK+ widget toolkit
long_description    GTK+ is a highly usable, feature-rich toolkit for creating graphical user \
                    interfaces, which boasts cross-platform compatibility and an easy-to-use \
                    API. GTK+ is written in C, but has bindings to many other popular \
                    programming languages, such as C++, Python and C#, among others.
homepage            http://www.gtk.org/

distname            ${proj_name}-${version}
dist_subdir         ${my_name}
use_xz              yes
master_sites        gnome:sources/${proj_name}/${branch}/

checksums           rmd160  4b48beab01bc1337c5e5120a68c390ab95e9af16 \
                    sha256  ce11decf018b25bdd8505544a4f87242854ec88be054d9ade5f3a20444dd8ee7
#                    size    12398104

set gtkPrefix       ${prefix}

platform darwin {
    subport "${name}-quartz" {
        description-append \
                    - Concurrent Quartz build.
        long_description-append \
                    Concurrent Quartz build.
        set gtkPrefix \
                    ${prefix}/libexec/GTQuartz
        langselect_prefix \
                    ${gtkPrefix}
    }
    if {${subport} eq ${name} && ([variant_isset quartz] && ([variant_isset x11] || [variant_isset wayland]))} {
        revision    [expr ${revision} +2]
    }
}

minimum_xcodeversions {9 3.1}

set port_ver_major  [lindex [split ${version} .] 0]

depends_build-append \
                    port:gtk-doc \
                    path:bin/pkg-config:pkgconfig

depends_lib-append \
                    port:atk \
                    path:lib/pkgconfig/gdk-pixbuf-2.0.pc:gdk-pixbuf2 \
                    path:lib/pkgconfig/glib-2.0.pc:glib2 \
                    path:lib/pkgconfig/gobject-introspection-1.0.pc:gobject-introspection \
                    path:lib/pkgconfig/harfbuzz.pc:harfbuzz \
                    port:iso-codes \
                    port:libepoxy \
                    path:lib/pkgconfig/pango.pc:pango

# mesa required to configure both +x11, +quartz (not just +x11) due to their dependency on libepoxy
depends_lib-append  port:mesa
                    
depends_run-append \
                    port:shared-mime-info \
                    port:hicolor-icon-theme

compiler.cxx_standard 2011

# darwin 10 and earlier requires legacy support for O_CLOEXEC
legacysupport.newest_darwin_requires_legacy 10

# Upstream disables X11 for macOS; disable that behaviour
# Also don't disable wayland.
patchfiles-append   patch-meson.build-x11-enabled.diff

# Quartz patch to fix QuartzCore linking and compiling with 10.11
# Upstream merge request: https://gitlab.gnome.org/GNOME/gtk/-/merge_requests/4298
patchfiles-append   patch-quartz-calayer-contentsformat.diff

# Quartz patch to eliminate hard-coded use of NSEventTypeApplicationDefined
# Upstream merge request: https://gitlab.gnome.org/GNOME/gtk/-/merge_requests/5958
patchfiles-append   patch-quartz-nseventtype.diff

# Quartz patch to make CoreGraphics optional; not available for 10.7 and earlier
# Upstream merge request: https://gitlab.gnome.org/GNOME/gtk/-/merge_requests/5959
patchfiles-append   patch-quartz-meson-appleframeworks.diff

# RJVB : relax the at_spi2 requirement (seems to play at runtime anyway)
patchfiles-append   patch-relax-atspi-req.diff

# RJVB : allow user to opt to continue after X11 errors
patchfiles-append   patch-allow-ignoring-X11errors.diff

# RJVB : allow X11 + quartz backend, preferring X11
patchfiles-append   patch-gtk3-prefer-x11-over-quartz-and-allow-both.diff \
                    patch-multibackends-filechooser.diff

# RJVB : allow building the Wayland backend without evdev
#        and assume Wayland uses TMPDIR if XDG_RUNTIME_DIR isn't set.
patchfiles-append   patch-no-evdev.diff \
                    patch-wayland-no-check-xdgruntimedir.diff

# gtk3 +quartz uses instancetype which is not available
# before approximately Xcode 4.6 (#49391)
# if building +x11 blacklist comilers that do not support C11
# (redefinition of typedef ‘GdkX11Monitor’ at gdkscreen-x11.h:33)

proc variant_isset:quartz {} {
    global subport name
    return [expr {[variant_isset quartz] || ${subport} eq "${name}-quartz"}]
}

proc variant_isset:x11 {} {
    global subport
    return [expr {[variant_exists x11] && [variant_isset x11]}]
}

if {[variant_isset:quartz]} {
    compiler.blacklist  *gcc-3.* *gcc-4.* {clang < 425}
} else {
    compiler.blacklist  *gcc-3.* *gcc-4.* {clang < 300}
}

# gobject-introspection uses g-ir-scanner, which uses $CC from env

if {${universal_possible} && [variant_isset universal]} {
    foreach arch ${configure.universal_archs} {
        lappend merger_build_args(${arch})  CC='${configure.cc} -arch ${arch}'
        lappend merger_build_args(${arch})  CC_FOR_BUILD='${configure.cc} -arch ${arch}'
        lappend merger_destroot_args(${arch})  CC='${configure.cc} -arch ${arch}'
        lappend merger_destroot_args(${arch})  CC_FOR_BUILD='${configure.cc} -arch ${arch}'
    }
}

pre-configure {
    if {${subport} eq "${name}"} {
        if {![variant_isset:quartz] && ![variant_isset:x11]} {
            error "Either +x11 or +quartz is required"
        } elseif {[variant_isset:quartz] && [variant_isset:x11]} {
            ui_warn "The X11 and Quartz backends will BOTH be built; this is experimental!"
        }
    }
}

configure.cppflags-append \
                    -DX_LOCALE

configure.cflags-append \
                    -fstrict-aliasing

configure.args-append \
                    -Dtests=false \
                    -Dgtk_doc=false \
                    -Dman=true \
                    -Dintrospection=true \
                    -Ddemos=false \
                    -Dexamples=false \
                    -Dprofiler=false \
                    -Dwayland_backend=false

post-destroot {
    set docdir ${gtkPrefix}/share/doc/${name}
    xinstall -d ${destroot}${docdir}
    xinstall -m 644 -W ${worksrcpath} CONTRIBUTING.md COPYING NEWS README.md \
        ${destroot}${docdir}

    # avoid conflict with the gtk-update-icon-cache installed by gtk2
    move ${destroot}${gtkPrefix}/bin/gtk-update-icon-cache \
         ${destroot}${gtkPrefix}/bin/gtk-update-icon-cache-3.0
    
    ui_debug "Creating gtk.immodules..."
    system "DYLD_LIBRARY_PATH=${destroot}${gtkPrefix}/lib \
        ${destroot}${gtkPrefix}/bin/gtk-query-immodules-3.0 \
        ${destroot}${gtkPrefix}/lib/gtk-3.0/3.0.0/immodules/*.so \
        >${destroot}${gtkPrefix}/etc/gtk-3.0/gtk.immodules"
    reinplace "s|${destroot}||" ${destroot}${gtkPrefix}/etc/gtk-3.0/gtk.immodules
}

platform darwin {
    if {${os.major} <= 8} {
        if {[variant_isset:quartz] || ![variant_isset:x11]} {
            configure.ldflags-append  -framework Cocoa -framework Carbon
        }
    }

    if {${os.major} <= 10} {
        # OS X 10.6 and earlier do not supply all cursors specified by gtk3 +quartz (#49391)
        if {[variant_isset:quartz]} {
            patchfiles-append   patch-gdk_quartz_gdkcursor-quartz-10_6_compat.diff
        }
    }

    if {${os.major} <= 11} {
        # Drop linking to 'CoreGraphics', not available for 10.7 and earlier
        patchfiles-append patch-quartz-disable-coregraphics.diff
    }

    if {${os.major} <= 12} {
        # requires cups 1.7
        configure.args-append \
            -Dprint_backends=file,lpr,test
    }
}

if {${universal_possible} && [variant_isset universal]} {
    set cups /usr/bin/cups-config
    if {[info exists universal_sysroot]} {
        set cups ${universal_sysroot}${cups}
    }
    configure.env-append CUPS_CONFIG=${cups}

    # Find architectures which will not run on build platform.
    set cpu64bit_capable [sysctl hw.cpu64bit_capable]
    if {${os.arch} eq "i386"} {
        set cross_archs ppc64
        if {${os.major} >= 10} {
            lappend cross_archs ppc
        }
        set host_archs "ppc ppc64"
        set run_archs i386
        if {${cpu64bit_capable}} {
            set run_archs "x86_64 ${run_archs}"
        }
    } else {
        set cross_archs "i386 x86_64"
        set host_archs "i386 x86_64"
        set run_archs ppc
        if {${cpu64bit_capable}} {
            set run_archs "ppc64 ${run_archs}"
        }
    }

    pre-configure {
        set run_arch ""
        foreach arch ${run_archs} {
            if {[lsearch ${universal_archs_to_use} ${arch}] != -1} {
                set run_arch ${arch}
                break
            }
        }

        if {${run_arch} eq ""} {
            ui_error ""
            ui_error "${name} requires at least one architecture runnable on this"
            ui_error "machine to be able to build universally. Please add at least"
            ui_error "one of the following architectures to `universal_archs` in"
            ui_error "\"${prefix}/etc/macports/macports.conf\":"
            ui_error ""
            ui_error "\t${run_archs}"
            ui_error ""
        }

        foreach arch ${host_archs} {
            lappend merger_configure_env(${arch}) \
                NM='/usr/bin/nm -p'
        }

        foreach arch ${cross_archs} {
            lappend merger_configure_env(${arch}) \
                GTK_UPDATE_ICON_CACHE=${worksrcpath}-${run_arch}/gtk/gtk-update-icon-cache \
                GDK_PIXBUF_CSOURCE=${worksrcpath}-${run_arch}/gdk-pixbuf/gdk-pixbuf-csource
            lappend merger_build_env(${arch}) \
                GDK_PIXBUF_MODULE_FILE=${worksrcpath}-${run_arch}/gdk-pixbuf/gdk-pixbuf.loaders
        }

        # Let gtk_host in .pc files be the same on all architectures
        set host powerpc
        if {${os.arch} eq "i386"} {
            set host i686
        }
        reinplace s/@host@/${host}-apple-darwin${os.version}/ \
            {*}[glob -directory ${worksrcpath} *.pc.in]
    }
    
    merger_arch_compiler yes
} else {
    configure.cc "${configure.cc} ${configure.cc_archflags}"
}

variant tests description {Enable tests} {
    configure.args-replace \
                            -Dtests=false \
                            -Dtests=true

    test.run                yes
    test.target             test
}

variant broadway description {Enable the broadway (HTML5) gdk backend} {
    configure.args-append \
                            -Dbroadway_backend=true
}

variant demos description {Build demos and examples} {
    configure.args-replace \
                            -Ddemos=false \
                            -Ddemos=true
    configure.args-replace \
                            -Dexamples=false \
                            -Dexamples=true
}

if {${subport} eq "${name}"} {
  variant quartz description {build the Quartz/native GDK backend} {
    require_active_variants path:lib/pkgconfig/cairo.pc:cairo quartz
    require_active_variants path:lib/pkgconfig/pango.pc:pango quartz

#     configure.args-append \
#                             -Dx11_backend=false \
#                             -Dxinerama=no
    configure.args-append \
                            -Dquartz_backend=true
  }

  variant x11 description {build the X11 GDK backend} {
    require_active_variants path:lib/pkgconfig/cairo.pc:cairo x11
    require_active_variants path:lib/pkgconfig/pango.pc:pango x11

    depends_lib-append \
                            port:at-spi2-atk \
                            port:fontconfig \
                            path:lib/pkgconfig/xkbcommon-x11.pc:libxkbcommon-x11 \
                            port:xorg-libXi \
                            port:xorg-libXrandr \
                            port:xorg-libXcursor \
                            port:xorg-libXinerama \
                            port:xorg-libXdamage \
                            port:xorg-libXcomposite \
                            port:xorg-libXfixes

#     configure.args-append \
#                             -Dquartz_backend=false
    configure.args-append \
                            -Dx11_backend=true \
                            -Dxinerama=yes
  }

  variant wayland description {build (experimental!) Wayland support} {}
  if {[variant_isset wayland]} {
    # this is a guess:
    require_active_variants path:lib/pkgconfig/cairo.pc:cairo quartz
    require_active_variants path:lib/pkgconfig/pango.pc:pango quartz

    depends_lib-append      port:wayland \
                            port:wayland-protocols
    patchfiles-append       patch-wayland-no-gdkmonitor-asserts.diff
    configure.args-replace  -Dwayland_backend=false \
                            -Dwayland_backend=true
  }

  # if neither is set, set both. This way the old behaviour of selection only a
  # single backend (X11 or Quartz) is preserved.
  if {![variant_isset:quartz] && ![variant_isset:x11] && ![variant_isset wayland]} {
    default_variants +x11 +quartz
  }
} else {
    require_active_variants path:lib/pkgconfig/cairo.pc:cairo quartz
    require_active_variants path:lib/pkgconfig/pango.pc:pango quartz

    if {[info exists env(PKG_CONFIG_PATH)]} {
        configure.env-append \
                            "PKG_CONFIG_PATH=$env(PKG_CONFIG_PATH):${gtkPrefix}/lib/pkgconfig"
    } else {
        configure.env-append \
                            "PKG_CONFIG_PATH=${gtkPrefix}/lib/pkgconfig"
    }

    configure.pre_args-replace \
                            --prefix=${prefix} \
                            --prefix=${gtkPrefix}
    configure.args-append \
                            -Dx11_backend=false \
                            -Dquartz_backend=true \
                            -Dxinerama=no
}

meson.save_configure_cmd "install log"

build.pre_args-prepend -k 0

post-activate {
    ui_debug "Updating gdk-pixbuf.loaders..."
    system "${prefix}/bin/gdk-pixbuf-query-loaders >${gtkPrefix}/etc/gtk-3.0/gdk-pixbuf.loaders"
    ui_debug "Updating GLib schemas..."
    system "${prefix}/bin/glib-compile-schemas ${gtkPrefix}/share/glib-2.0/schemas"
}

livecheck.type      gnome
livecheck.name      gtk+
# versions 3.89.1+ are snapshots of unstable development leading to GTK+ 4
# and are not compatible with gtk3
livecheck.regex     "LATEST-IS-(${port_ver_major}\\.\[0-7\]\[02468\](?:\\.\\d+)*)"
