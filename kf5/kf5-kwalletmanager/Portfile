# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# Copyright (c) 2015, 2016 R.J.V. Bertin

PortSystem          1.0

set kf5.project     kwalletmanager
set kf5.virtualPath applications
set kf5.category    system
PortGroup           kf5 1.1
set kf5.latest_release 19.08.3 ; revision 1     ;# sneak preview
kf5.use_latest      applications

maintainers         gmail.com:rjvbertin openmaintainer

installs_libs       no

description         KF5 Wallet manager
long_description    The KF5 Wallet manager is a tool to manage the \
                    passwords in your KDE wallet(s).
checksums           rmd160  8ab2585f4d74b2f9b62c08d10ebc4fa9202caaf8 \
                    sha256  00c1362d1454f4593e1f99847b97b3da99931c74ceafc3c3350337af0038b985
#                     size    786804

kf5.depends_frameworks \
                    karchive kauth kcmutils kconfig \
                    kconfigwidgets kcoreaddons \
                    kdbusaddons ki18n kiconthemes kio \
                    kjobwidgets knotifications kservice \
                    ktextwidgets kwallet kwindowsystem kxmlgui

platform darwin {
    kf5.kde4compat -port kwallet {
        post-destroot {
            file delete -force ${destroot}${prefix}/share/icons
        }
    }
    post-destroot {
        kf5.add_app_wrapper kwalletmanager5
    }
}
patchfiles-append   patch-enable-restore-from-tray.diff \
                    patch-preserve-app-icon.diff \
                    patch-konfigurator.diff

variant authconfig description {configuration changes require authentication (and the system D-Bus)} {
    notes-append "Making KWallet configuration changes requires authentication and \
    that requires running the system D-Bus (after each login!)\:
    sudo launchctl load -w ${prefix}/Library/LaunchDaemons/org.freedesktop.dbus-system.plist"
}
# default_variants    +authconfig
if {![variant_isset authconfig]} {
    patchfiles-append \
                    patch-drop-authentication.diff
}

### build times (+LTO+cputuned, -O3 -g) after cmake and then after `make clean`:
### NB: +LTO means -flto=thin for clang; clang builds are also +use_lld
## clang-5.0 (MacStrop, idem)
# 126.821 user_cpu 10.357 kernel_cpu 0:44.60 total_time 307.5%CPU {126652416M 1776F 1522348R 22I 166O 346k 789w 46486c}
# 118.290 user_cpu 10.790 kernel_cpu 0:37.57 total_time 343.5%CPU {126423040M 153F 1475651R 0I 207O 346k 690w 46321c}
## clang-9.0 (MacStrop, idem)
# 153.345 user_cpu 11.617 kernel_cpu 0:51.45 total_time 320.6%CPU {139661312M 2061F 1628971R 31I 50O 353k 841w 52191c}
# 131.216 user_cpu 11.114 kernel_cpu 0:41.38 total_time 343.9%CPU {138428416M 167F 1566782R 0I 51O 352k 694w 50086c}
## clang-12 (MacStrop, idem)
# 175.628 user_cpu 11.054 kernel_cpu 1:00.58 total_time 308.1%CPU {146972672M 1764F 1568605R 34I 225O 350k 772w 59695c}
# 162.201 user_cpu 11.303 kernel_cpu 0:49.35 total_time 351.5%CPU {141373440M 168F 1509858R 0I 168O 354k 686w 56025c}
## clang-15 (stock MP):
# 190.725 user_cpu 17.732 kernel_cpu 1:06.83 total_time 311.9%CPU {147738624M 2169F 1827603R 113I 108O 345k 1048w 63461c}
# 176.069 user_cpu 17.613 kernel_cpu 0:55.52 total_time 348.8%CPU {147623936M 171F 1760708R 0I 42O 347k 920w 59963c}
## clang-17 (MacStrop version, +nortti, built with "-Os -march=native -fvectorize"
# 239.930 user_cpu 20.624 kernel_cpu 1:22.65 total_time 315.2%CPU {146870272M 169F 1982897R 0I 264O 348k 933w 78726c}
# 218.955 user_cpu 20.588 kernel_cpu 1:09.35 total_time 345.3%CPU {147161088M 169F 1912107R 0I 179O 343k 820w 74145c}
## gcc-7 (MacStrop, built with "Os -march=native")
# 189.245 user_cpu 26.660 kernel_cpu 1:13.60 total_time 293.3%CPU {303865856M 3709F 2522772R 991I 564O 348k 2186w 126251c}
# 188.917 user_cpu 26.102 kernel_cpu 1:13.02 total_time 294.4%CPU {303525888M 1614F 2532400R 5I 100O 357k 892w 139623c}
## gcc-12 (MacPorts):
# 155.001 user_cpu 33.833 kernel_cpu 0:58.07 total_time 325.1%CPU {249151488M 2845F 2146341R 182I 293O 341k 1775w 58384c}
# 165.326 user_cpu 35.838 kernel_cpu 1:02.22 total_time 323.2%CPU {248643584M 1239F 2147606R 0I 83O 340k 882w 62816c}
### without +LTO:
## gcc-7 (as above)
# 162.353 user_cpu 24.039 kernel_cpu 0:58.27 total_time 319.8%CPU {292474880M 196F 2316635R 154I 280O 344k 978w 147879c}
# 167.957 user_cpu 24.918 kernel_cpu 1:00.15 total_time 320.6%CPU {292089856M 195F 2317720R 4I 71O 345k 824w 148503c}
## gcc-12 (as above)
# 146.931 user_cpu 33.317 kernel_cpu 0:51.62 total_time 349.1%CPU {244572160M 141F 2005059R 0I 336O 340k 866w 64939c}
# 146.375 user_cpu 32.957 kernel_cpu 0:51.49 total_time 348.2%CPU {244191232M 141F 2004460R 0I 71O 336k 820w 64887c}
## clang-12 (as above):
# 149.416 user_cpu 9.931 kernel_cpu 0:46.30 total_time 344.1%CPU {115630080M 1551F 1334335R 0I 223O 341k 640w 49884c}
# 156.708 user_cpu 10.439 kernel_cpu 0:47.84 total_time 349.3%CPU {115302400M 140F 1343535R 0I 54O 342k 626w 49652c}
## clang-12 without +use_lld (as above):
# 149.656 user_cpu 9.858 kernel_cpu 0:46.09 total_time 346.0%CPU {114868224M 136F 1341107R 0I 154O 341k 614w 46813c}
# 161.315 user_cpu 10.782 kernel_cpu 0:49.49 total_time 347.7%CPU {114905088M 136F 1332941R 1I 47O 339k 621w 51499c}
## clang-12 +gnuxx (= built with clang-9 -stdlib=libstdc++_macports !!) (as above):
# 134.355 user_cpu 9.759 kernel_cpu 0:41.77 total_time 344.9%CPU {119799808M 1739F 1360113R 0I 67O 341k 625w 49831c}
# 141.461 user_cpu 10.314 kernel_cpu 0:44.41 total_time 341.7%CPU {120692736M 141F 1361642R 0I 142O 337k 654w 47549c}
## clang-12 rebuilt with clang-12+gnuxx (as above):
# 130.509 user_cpu 11.298 kernel_cpu 0:43.23 total_time 327.9%CPU {119214080M 9592F 1349636R 657I 337O 340k 2431w 53467c}
# 141.834 user_cpu 10.640 kernel_cpu 0:43.81 total_time 348.0%CPU {120180736M 141F 1359366R 0I 26O 339k 636w 48724c}




