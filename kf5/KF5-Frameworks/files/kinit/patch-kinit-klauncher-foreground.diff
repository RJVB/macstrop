diff --git src/klauncher/klauncher.cpp src/klauncher/klauncher.cpp
index f8f15b3b3a6266cca145ab0cf71ed19da80ea749..80747c3699dbf3e0265352c4c12451115cb6847f 100644
--- src/klauncher/klauncher.cpp
+++ src/klauncher/klauncher.cpp
@@ -473,6 +473,56 @@ static void appendLong(QByteArray &ba, long l)
     memcpy(ba.data() + sz, &l, sizeof(long));
 }
 
+bool QTimeoutProcess::startDetached(const QString &exe, const QStringList &args,
+                          const QString &cwd, qint64 *pid, int timeoutMs)
+{
+    bool ret = false;
+#ifdef Q_OS_MACOS
+    QProcess *proc = new QTimeoutProcess;
+    connect(proc, SIGNAL(finished(int,QProcess::ExitStatus)), proc, SLOT(slotFinished(int,QProcess::ExitStatus)));
+    if (!cwd.isEmpty()) {
+        proc->setWorkingDirectory(cwd);
+    }
+    proc->start(exe, args);
+    if (proc->waitForStarted()) {
+        ret = true;
+        if (pid) {
+            *pid = proc->pid();
+        }
+        if (timeoutMs > 0) {
+            proc->startTimer(timeoutMs);
+        }
+    }
+#endif
+    return ret;
+}
+
+QTimeoutProcess::~QTimeoutProcess()
+{
+#ifdef Q_OS_MACOS
+    if (state() == QProcess::Running) {
+        // prevent the parent dtor from yelling because the process still runs
+        kill();
+        waitForFinished(500);
+    }
+#endif
+}
+
+void QTimeoutProcess::timerEvent(QTimerEvent *)
+{
+#ifdef Q_OS_MACOS
+    terminate();
+    deleteLater();
+#endif
+}
+
+void QTimeoutProcess::slotFinished(int exitCode, QProcess::ExitStatus exitStatus)
+{
+#ifdef Q_OS_MACOS
+    deleteLater();
+#endif
+}
+
 void
 KLauncher::requestStart(KLaunchRequest *request)
 {
@@ -501,7 +551,7 @@ KLauncher::requestStart(KLaunchRequest *request)
     }
 
     QString executable = request->name;
-#ifdef Q_OS_OSX
+#ifdef Q_OS_MACOS
     const QString bundlepath = QStandardPaths::findExecutable(executable);
     if (!bundlepath.isEmpty()) {
         executable = bundlepath;
@@ -519,6 +569,44 @@ KLauncher::requestStart(KLaunchRequest *request)
 #endif
         QByteArray data((char *)&request->pid, sizeof(int));
         processRequestReturn(LAUNCHER_OK, data);
+#ifdef Q_OS_MACOS
+        // we now know that 'process' started successfully, so we can start a background
+        // process that will wait a preconfigured time for the <executable> to launch
+        // and activate it (= bring to foreground). The only way to do this in combination
+        // with QProcess is to use AppleScript
+        if (!qEnvironmentVariableIsSet("KDE_KLAUNCH_NO_FOREGROUND_PUSH")) {
+            QStringList osacommand;
+            auto delay = qgetenv("KDE_KLAUNCH_FOREGROUND_PUSH_DELAY");
+            auto baDuration = qgetenv("KDE_KLAUNCH_FOREGROUND_PUSH_DURATION");
+            int durationMS;
+            bool floatOk = false;
+            if (delay.isEmpty() || delay.toDouble(&floatOk) < 0 || !floatOk) {
+                delay = QByteArrayLiteral("0.5");
+            }
+            floatOk = false;
+            // NB: we don't accept duration == 0!
+            if (baDuration.isEmpty() || baDuration.toDouble(&floatOk) <= 0 || !floatOk) {
+                durationMS = 2000;
+            } else {
+                durationMS = baDuration.toDouble() * 1000.0 + 0.5;
+            }
+            osacommand << QStringLiteral("-e")
+                << QStringLiteral(
+                    "delay %1\n"
+                    "tell application \"System Events\"\n"
+                    " repeat\n"
+                    "  if (exists application process \"%2\") then\n"
+                    "   tell application \"%2\" to activate\n"
+                    "   exit repeat\n"
+                    "  end if\n"
+                    "  delay 0.2\n"
+                    " end repeat\n"
+                    "end tell").arg(QString::fromLatin1(delay)).arg(QFileInfo(executable).baseName());
+            bool osaOK = QTimeoutProcess::startDetached(QStringLiteral("/usr/bin/osascript"),
+                                                        osacommand, QString(), Q_NULLPTR, durationMS);
+            qCDebug(KLAUNCHER) << "osascript" << osacommand << ":" << osaOK;
+        }
+#endif
     }
     return;
 
diff --git src/klauncher/klauncher.h src/klauncher/klauncher.h
index 711e35c21c0f029043f3c43c91c3f136f20d3fb4..df36b8e28d0ac6011bc42a4353ea29ed674c1825 100644
--- src/klauncher/klauncher.h
+++ src/klauncher/klauncher.h
@@ -261,4 +261,20 @@ private:
     XCBConnection getXCBConnection(const QByteArray &displyName);
 #endif
 };
+
+// For Q_OS_MACOS:
+class QTimeoutProcess : public QProcess
+{
+    Q_OBJECT
+public:
+    static bool startDetached(const QString &exe, const QStringList &args,
+                              const QString &cwd = QString(), qint64 *pid = 0,
+                              int timeoutMs = 0);
+    virtual ~QTimeoutProcess();
+protected:
+    void timerEvent(QTimerEvent *) Q_DECL_OVERRIDE;
+protected Q_SLOTS:
+    void slotFinished(int exitCode, QProcess::ExitStatus exitStatus);
+};
+
 #endif
