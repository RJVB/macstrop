diff --git src/kdeinit/CMakeLists.txt src/kdeinit/CMakeLists.txt
index ae619f7..d9876f1 100644
--- src/kdeinit/CMakeLists.txt
+++ src/kdeinit/CMakeLists.txt
@@ -1,6 +1,9 @@
 if (WIN32)
   set(kdeinit_SRCS kinit_win.cpp ../klauncher_cmds.cpp )
   set(kdeinit_LIBS psapi)
+elseif (APPLE)
+  set(kdeinit_SRCS kinit.cpp kinit_mac.mm proctitle.cpp ../klauncher_cmds.cpp )
+  set(kdeinit_LIBS "")
 else ()
   set(kdeinit_SRCS kinit.cpp proctitle.cpp ../klauncher_cmds.cpp )
   set(kdeinit_LIBS "")
@@ -11,14 +14,7 @@ include_directories(${KInit_BINARY_DIR}) # for kinit_version.h
 # on win32 kdeinit5 has to be a console application
 # to be able to catch stderr based --verbose output
 add_executable(kdeinit5 ${kdeinit_SRCS})
-if (APPLE)
-  # this has to be GUI on OSX because it launches GUI apps and need a quartz context
-  set_target_properties(kdeinit5 PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/Info.plist.template)
-  set_target_properties(kdeinit5 PROPERTIES MACOSX_BUNDLE_GUI_IDENTIFIER "org.kde.kdeinit5")
-  set_target_properties(kdeinit5 PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME "KDE Init")
-else ()
-  ecm_mark_nongui_executable(kdeinit5)
-endif ()
+ecm_mark_nongui_executable(kdeinit5)
 
 target_link_libraries(kdeinit5 ${kdeinit_LIBS} ${KINIT_SOCKET_LIBRARY}
     Qt5::Gui #QFont::initialize
@@ -28,6 +24,9 @@ target_link_libraries(kdeinit5 ${kdeinit_LIBS} ${KINIT_SOCKET_LIBRARY}
     KF5::ConfigCore
     Qt5::DBus
 )
+if (APPLE)
+    target_link_libraries(kdeinit5 "-framework Foundation -framework AppKit")
+endif ()
 
 target_compile_definitions(kdeinit5 PRIVATE
     CMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}"
diff --git src/kdeinit/kinit.cpp src/kdeinit/kinit.cpp
index ca18603..142be31 100644
--- src/kdeinit/kinit.cpp
+++ src/kdeinit/kinit.cpp
@@ -64,14 +64,6 @@
 #endif
 #endif
 
-#ifdef Q_OS_MAC
-#include <CoreFoundation/CFBundle.h>
-#include <CoreFoundation/CFString.h>
-#include <CoreFoundation/CFURL.h>
-#include <crt_externs.h> // for _NSGetArgc and friends
-#include <mach-o/dyld.h> // for _NSGetExecutablePath
-#endif
-
 #include <kinit_version.h>
 
 #include "klauncher_cmds.h"
@@ -91,23 +83,26 @@
 
 #include <qstandardpaths.h>
 
+#include "kinit.h"
+#ifdef Q_OS_OSX
+#include "kinit_mac.h"
+#endif
+
 #ifdef Q_OS_UNIX
-#ifdef Q_OS_MAC
+//TODO: make sure what libraries we want here...
 static const char *extra_libs[] = {
+#ifdef Q_OS_OSX
     "libKF5KIOCore.5.dylib",
     "libKF5Parts.5.dylib",
     "libKF5Plasma.5.dylib"
-};
 #else
-//TODO: make sure what libraries we want here...
-static const char *extra_libs[] = {
     "libKF5KIOCore.so.5",
     "libKF5Parts.so.5",
 //#ifdef __KDE_HAVE_GCC_VISIBILITY // Removed for KF5, we'll see.
     "libKF5Plasma.so.5"
 //#endif
-};
 #endif
+};
 #endif
 
 // #define SKIP_PROCTITLE 1
@@ -133,51 +128,17 @@ static int s_startup_notify_screen = 0;
 #define MAX_SOCK_FILE (sizeof(struct sockaddr_un) - offsetof(struct sockaddr_un,sun_path))
 static char sock_file[MAX_SOCK_FILE];
 
+#if HAVE_X11 || HAVE_XCB
 static const char* displayEnvVarName_c()
 {
     // Can't use QGuiApplication::platformName() here, there is no app instance.
-#if HAVE_X11
     return "DISPLAY";
-#elif defined(Q_OS_MACX)
-    return "MAC_DISPLAY";
-#elif defined(Q_OS_WIN)
-    return "WIN_DISPLAY";
-#endif
 }
 static inline QByteArray displayEnvVarName()
 {
     return QByteArray::fromRawData(displayEnvVarName_c(), strlen(displayEnvVarName_c()));
 }
-
-/* Group data */
-static struct {
-    int maxname;
-    int fd[2];
-    int launcher[2]; /* socket pair for launcher communication */
-    int deadpipe[2]; /* pipe used to detect dead children */
-    int initpipe[2];
-    int wrapper; /* socket for wrapper communication */
-    int accepted_fd; /* socket accepted and that must be closed in the child process */
-    char result;
-    int exit_status;
-    pid_t fork;
-    pid_t launcher_pid;
-    pid_t kded_pid;
-    int n;
-    char **argv;
-    int (*func)(int, char *[]);
-    int (*launcher_func)(int);
-    bool debug_wait;
-    QByteArray errorMsg;
-    bool launcher_ok;
-    bool suicide;
-} d;
-
-struct child {
-    pid_t pid;
-    int sock; /* fd to write message when child is dead*/
-    struct child *next;
-};
+#endif
 
 static struct child *children;
 
@@ -218,7 +179,7 @@ static void cleanup_fds()
  * Close fd's which are only useful for the parent process.
  * Restore default signal handlers.
  */
-static void close_fds()
+void close_fds()
 {
     while (struct child *child = children) {
         close(child->sock);
@@ -300,20 +261,7 @@ static void child_died(pid_t exit_pid, int exit_status)
     }
 }
 
-static void exitWithErrorMsg(const QString &errorMsg)
-{
-    fprintf(stderr, "%s\n", errorMsg.toLocal8Bit().data());
-    QByteArray utf8ErrorMsg = errorMsg.toUtf8();
-    d.result = 3; // Error with msg
-    write(d.fd[1], &d.result, 1);
-    int l = utf8ErrorMsg.length();
-    write(d.fd[1], &l, sizeof(int));
-    write(d.fd[1], utf8ErrorMsg.data(), l);
-    close(d.fd[1]);
-    exit(255);
-}
-
-static void setup_tty(const char *tty)
+void setup_tty(const char *tty)
 {
     if (tty == NULL || *tty == '\0') {
         return;
@@ -436,7 +384,7 @@ static void oom_protect_sighandler(int)
 {
 }
 
-static void reset_oom_protect()
+void reset_oom_protect()
 {
     if (oom_pipe <= 0) {
         return;
@@ -464,11 +412,25 @@ static void reset_oom_protect()
     oom_pipe = -1;
 }
 #else
-static void reset_oom_protect()
+void reset_oom_protect()
 {
 }
 #endif
 
+#ifndef Q_OS_OSX
+static void exitWithErrorMsg(const QString &errorMsg)
+{
+    fprintf(stderr, "%s\n", errorMsg.toLocal8Bit().data());
+    QByteArray utf8ErrorMsg = errorMsg.toUtf8();
+    d.result = 3; // Error with msg
+    write(d.fd[1], &d.result, 1);
+    int l = utf8ErrorMsg.length();
+    write(d.fd[1], &l, sizeof(int));
+    write(d.fd[1], utf8ErrorMsg.data(), l);
+    close(d.fd[1]);
+    exit(255);
+}
+
 static pid_t launch(int argc, const char *_name, const char *args,
                     const char *cwd = 0, int envc = 0, const char *envs = 0,
                     bool reset_env = false,
@@ -544,9 +506,6 @@ static pid_t launch(int argc, const char *_name, const char *args,
 #endif
     // find out this path before forking, doing it afterwards
     // crashes on some platforms, notably OSX
-#ifdef Q_OS_MAC
-    const QString bundlepath = QStandardPaths::findExecutable(QFile::decodeName(execpath));
-#endif
 
     d.errorMsg = 0;
     d.fork = fork();
@@ -609,14 +568,6 @@ static pid_t launch(int argc, const char *_name, const char *args,
             QByteArray procTitle;
             d.argv = (char **) malloc(sizeof(char *) * (argc + 1));
             d.argv[0] = (char *) _name;
-#ifdef Q_OS_MAC
-            QString argvexe = QStandardPaths::findExecutable(QString::fromLatin1(d.argv[0]));
-            if (!argvexe.isEmpty()) {
-                QByteArray cstr = argvexe.toLocal8Bit();
-                // qDebug() << "kdeinit5: launch() setting argv: " << cstr.data();
-                d.argv[0] = strdup(cstr.data());
-            }
-#endif
             for (int i = 1;  i < argc; i++) {
                 d.argv[i] = (char *) args;
                 procTitle += ' ';
@@ -698,11 +649,6 @@ static pid_t launch(int argc, const char *_name, const char *args,
             setup_tty(tty);
 
             QByteArray executable = execpath;
-#ifdef Q_OS_MAC
-            if (!bundlepath.isEmpty()) {
-                executable = QFile::encodeName(bundlepath);
-            }
-#endif
 
             if (!executable.isEmpty()) {
                 execvp(executable.constData(), d.argv);
@@ -810,6 +756,7 @@ static pid_t launch(int argc, const char *_name, const char *args,
 #endif
     return d.fork;
 }
+#endif // !Q_OS_OSX
 
 extern "C" {
 
@@ -1029,7 +976,7 @@ static void start_klauncher()
     char args[32];
     strcpy(args, "--fd=");
     sprintf(args + 5, "%d", d.launcher[1]);
-    d.launcher_pid = launch(2, "klauncher", args);
+    d.launcher_pid = launch(2, CMAKE_INSTALL_FULL_LIBEXECDIR_KF5 "/klauncher", args);
     close(d.launcher[1]);
 #ifndef NDEBUG
     fprintf(stderr, "kdeinit5: Launched KLauncher, pid = %ld, result = %d\n",
@@ -1168,6 +1115,7 @@ static bool handle_launcher_request(int sock, const char *who)
             return true; // sure?
         }
 
+#if HAVE_X11 || HAVE_XCB
         // support for the old a bit broken way of setting DISPLAY for multihead
         QByteArray olddisplay = qgetenv(displayEnvVarName_c());
         QByteArray kdedisplay = qgetenv("KDE_DISPLAY");
@@ -1178,15 +1126,17 @@ static bool handle_launcher_request(int sock, const char *who)
         if (reset_display) {
             qputenv(displayEnvVarName_c(), kdedisplay);
         }
-
+#endif
         pid = launch(argc, name, args, cwd, envc, envs,
                      request_header.cmd == LAUNCHER_SHELL || request_header.cmd == LAUNCHER_KWRAPPER,
                      tty, avoid_loops, startup_id_str);
 
+#if HAVE_X11 || HAVE_XCB
         if (reset_display) {
             unsetenv("KDE_DISPLAY");
             qputenv(displayEnvVarName_c(), olddisplay);
         }
+#endif
 
         if (pid && (d.result == 0)) {
             response_header.cmd = LAUNCHER_OK;
@@ -1395,12 +1345,11 @@ static void handle_requests(pid_t waitForPid)
 static void generate_socket_name()
 {
 
+#if HAVE_X11 || HAVE_XCB // qt5: see displayEnvVarName_c()
     QByteArray display = qgetenv(displayEnvVarName_c());
     if (display.isEmpty()) {
-#if HAVE_X11 // qt5: see displayEnvVarName_c()
         fprintf(stderr, "kdeinit5: Aborting. $%s is not set. \n", displayEnvVarName_c());
         exit(255);
-#endif
     }
     int i;
     if ((i = display.lastIndexOf('.')) > display.lastIndexOf(':') && i >= 0) {
@@ -1409,8 +1358,13 @@ static void generate_socket_name()
 
     display.replace(':', '_');
 #ifdef __APPLE__
+    // not entirely impossible, so let's leave it
     display.replace('/', '_');
 #endif
+#else
+    // not using a DISPLAY variable; use an empty string instead
+    QByteArray display = "";
+#endif
     // WARNING, if you change the socket name, adjust kwrapper too
     const QString socketFileName = QStringLiteral("kdeinit5_%1").arg(QLatin1String(display));
     const QByteArray socketName = QFile::encodeName(QStandardPaths::writableLocation(QStandardPaths::RuntimeLocation) + QLatin1Char('/') + socketFileName);
@@ -1491,9 +1445,7 @@ int kdeinit_x_errhandler(Display *dpy, XErrorEvent *err)
 #endif
     return 0;
 }
-#endif
 
-#if HAVE_X11
 // needs to be done sooner than initXconnection() because of also opening
 // another X connection for startup notification purposes
 static void setupX()
@@ -1563,6 +1515,7 @@ static int initXconnection()
 }
 #endif
 
+#ifndef Q_OS_OSX
 // Find a shared lib in the lib dir, e.g. libkio.so.
 // Completely unrelated to plugins.
 static QString findSharedLib(const QString &lib)
@@ -1574,57 +1527,6 @@ static QString findSharedLib(const QString &lib)
     // We could also look in LD_LIBRARY_PATH, but really, who installs the main libs in different prefixes?
     return QString();
 }
-
-#ifdef Q_OS_MAC
-/**
- Calling CoreFoundation APIs (which is unavoidable in Qt/Mac) has always had issues
- on Mac OS X, but as of 10.5 is explicitly disallowed with an exception.  As a
- result, in the case where we would normally fork and then dlopen code, or continue
- to run other code, we must now fork-and-exec.
-
- See "CoreFoundation and fork()" at http://developer.apple.com/releasenotes/CoreFoundation/CoreFoundation.html
-*/
-// Copied from kkernel_mac.cpp
-void
-mac_fork_and_reexec_self()
-{
-    int argc = *_NSGetArgc();
-    char **argv = *_NSGetArgv();
-    char *newargv[argc + 2];
-    char progname[PATH_MAX];
-    uint32_t buflen = PATH_MAX;
-    _NSGetExecutablePath(progname, &buflen);
-    bool found_psn = false;
-
-    for (int i = 0; i < argc; i++) {
-        newargv[i] = argv[i];
-    }
-
-    newargv[argc] = "--nofork";
-    newargv[argc + 1] = NULL;
-
-    int x_fork_result = fork();
-    switch (x_fork_result) {
-
-    case -1:
-#ifndef NDEBUG
-        fprintf(stderr, "Mac OS X workaround fork() failed!\n");
-#endif
-        ::_exit(255);
-        break;
-
-    case 0:
-        // Child
-        execvp(progname, newargv);
-        break;
-
-    default:
-        // Parent
-        _exit(0);
-        break;
-
-    }
-}
 #endif
 
 extern "C" {
@@ -1703,7 +1605,7 @@ int main(int argc, char **argv)
     (void)dup2(2, 1);
 
     if (do_fork) {
-#ifdef Q_OS_MAC
+#ifdef Q_OS_OSX
         mac_fork_and_reexec_self();
 #else
         if (pipe(d.initpipe) != 0) {
@@ -1768,7 +1670,7 @@ int main(int argc, char **argv)
          */
         init_kdeinit_socket();
     }
-#ifdef Q_OS_UNIX
+#if defined(Q_OS_UNIX) && !defined(Q_OS_OSX)
     if (!d.suicide && qEnvironmentVariableIsEmpty("KDE_IS_PRELINKED")) {
         const int extrasCount = sizeof(extra_libs) / sizeof(extra_libs[0]);
         for (int i = 0; i < extrasCount; i++) {
diff --git src/kdeinit/kinit.h src/kdeinit/kinit.h
new file mode 100644
index 0000000..03e55ed
--- /dev/null
+++ src/kdeinit/kinit.h
@@ -0,0 +1,65 @@
+/*
+ * This file is part of the KDE libraries
+ * Copyright (c) 1999-2000 Waldo Bastian <bastian@kde.org>
+ *           (c) 1999 Mario Weilguni <mweilguni@sime.com>
+ *           (c) 2001 Lubos Lunak <l.lunak@kde.org>
+ *           (c) 2016 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License version 2 as published by the Free Software Foundation.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this library; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifndef _KINIT_H
+#define _KINIT_H
+
+/* Group data */
+static struct {
+    int maxname;
+    int fd[2];
+    int launcher[2]; /* socket pair for launcher communication */
+    int deadpipe[2]; /* pipe used to detect dead children */
+    int initpipe[2];
+    int wrapper; /* socket for wrapper communication */
+    int accepted_fd; /* socket accepted and that must be closed in the child process */
+    char result;
+    int exit_status;
+    pid_t fork;
+    pid_t launcher_pid;
+    pid_t kded_pid;
+    int n;
+    char **argv;
+    int (*func)(int, char *[]);
+    int (*launcher_func)(int);
+    bool debug_wait;
+    QByteArray errorMsg;
+    bool launcher_ok;
+    bool suicide;
+} d;
+
+struct child {
+    pid_t pid;
+    int sock; /* fd to write message when child is dead*/
+    struct child *next;
+};
+
+/*
+ * Close fd's which are only useful for the parent process.
+ * Restore default signal handlers.
+ */
+extern void close_fds();
+extern void setup_tty(const char *tty);
+extern QByteArray execpath_avoid_loops(const QByteArray &exec, int envc, const char *envs, bool avoid_loops);
+extern void reset_oom_protect();
+
+#endif
diff --git src/kdeinit/kinit_mac.h src/kdeinit/kinit_mac.h
new file mode 100644
index 0000000..c980f85
--- /dev/null
+++ src/kdeinit/kinit_mac.h
@@ -0,0 +1,34 @@
+/*
+ * This file is part of the KDE libraries
+ * Copyright (c) 1999-2000 Waldo Bastian <bastian@kde.org>
+ *           (c) 1999 Mario Weilguni <mweilguni@sime.com>
+ *           (c) 2001 Lubos Lunak <l.lunak@kde.org>
+ *           (c) 2015,2016 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License version 2 as published by the Free Software Foundation.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this library; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#ifndef _KINIT_MAC_H
+#define _KINIT_MAC_H
+
+extern pid_t launch(int argc, const char *_name, const char *args,
+                    const char *cwd = 0, int envc = 0, const char *envs = 0,
+                    bool reset_env = false,
+                    const char *tty = 0, bool avoid_loops = false,
+                    const char *startup_id_str = "0");
+
+extern void mac_fork_and_reexec_self();
+
+#endif
diff --git src/kdeinit/kinit_mac.mm src/kdeinit/kinit_mac.mm
new file mode 100644
index 0000000..4b593fa
--- /dev/null
+++ src/kdeinit/kinit_mac.mm
@@ -0,0 +1,420 @@
+/*
+ * This file is part of the KDE libraries
+ * Copyright (c) 1999-2000 Waldo Bastian <bastian@kde.org>
+ *           (c) 1999 Mario Weilguni <mweilguni@sime.com>
+ *           (c) 2001 Lubos Lunak <l.lunak@kde.org>
+ *           (c) 2015,2016 René J.V. Bertin <rjvbertin@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Library General Public
+ * License version 2 as published by the Free Software Foundation.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Library General Public License for more details.
+ *
+ * You should have received a copy of the GNU Library General Public License
+ * along with this library; see the file COPYING.LIB.  If not, write to
+ * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ * Boston, MA 02110-1301, USA.
+ */
+
+#include <config-kdeinit.h>
+
+#include <sys/types.h>
+#include <sys/time.h>
+#include <sys/resource.h>
+#include <sys/stat.h>
+#include <sys/socket.h>
+#include <sys/un.h>
+#include <sys/wait.h>
+#if HAVE_SYS_SELECT_H
+#include <sys/select.h>     // Needed on some systems.
+#endif
+
+#include <ctype.h>
+#include <errno.h>
+#include <fcntl.h>
+#include "proctitle.h"
+#include <dlfcn.h>
+#include <signal.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <locale.h>
+
+#include <QtCore/QLibrary>
+#include <QtCore/QString>
+#include <QtCore/QFile>
+#include <QtCore/QDate>
+#include <QtCore/QDir>
+#include <QtCore/QFileInfo>
+#include <QtCore/QRegExp>
+#include <QCoreApplication>
+#include <QFont>
+#include <kconfig.h>
+#include <klocalizedstring.h>
+#include <QDebug>
+#include <qsavefile.h>
+
+#import <Foundation/Foundation.h>
+#import <AppKit/AppKit.h>
+#include <CoreFoundation/CFBundle.h>
+#include <CoreFoundation/CFString.h>
+#include <CoreFoundation/CFURL.h>
+#include <crt_externs.h> // for _NSGetArgc and friends
+#include <mach-o/dyld.h> // for _NSGetExecutablePath
+
+#include <kinit_version.h>
+
+#include "klauncher_cmds.h"
+
+#include <qstandardpaths.h>
+
+#include "kinit.h"
+#include "kinit_mac.h"
+
+extern char **environ;
+
+static int show_message_box( const QString &title, const QString &message )
+{
+    int (*_CGSDefaultConnection_p)();
+    _CGSDefaultConnection_p = (int (*)()) dlsym(RTLD_DEFAULT, "_CGSDefaultConnection");
+    if (!_CGSDefaultConnection_p) {
+        NSLog(@"qt_fatal_message_box(%@,%@): couldn't load _CGSDefaultConnection: %s",
+            [NSString stringWithCString:message.toUtf8().constData() encoding:NSUTF8StringEncoding],
+            [NSString stringWithCString:title.toUtf8().constData() encoding:NSUTF8StringEncoding], dlerror());
+    }
+    if (_CGSDefaultConnection_p && (*_CGSDefaultConnection_p)()) {
+        @autoreleasepool {
+            NSAlert* alert = [[[NSAlert alloc] init] autorelease];
+            NSString *msg, *tit;
+            @synchronized([NSAlert class]){
+                [alert addButtonWithTitle:@"OK"];
+                [alert setAlertStyle:NSCriticalAlertStyle];
+                [alert setMessageText:@"" ];
+                if( !(msg = [NSString stringWithCString:message.toUtf8().constData() encoding:NSUTF8StringEncoding]) ){
+                    msg = [NSString stringWithCString:message.toLatin1().constData() encoding:NSASCIIStringEncoding];
+                }
+                if( !(tit = [NSString stringWithCString:title.toUtf8().constData() encoding:NSUTF8StringEncoding]) ){
+                    tit = [NSString stringWithCString:title.toLatin1().constData() encoding:NSASCIIStringEncoding];
+                }
+                if( msg ){
+                    [alert setInformativeText:msg];
+                }
+                else{
+                    NSLog( @"msg=%@ tit=%@", msg, tit );
+                }
+                [[alert window] setTitle:tit];
+                return NSAlertSecondButtonReturn == [alert runModal];
+            }
+        }
+    }
+    return 0;
+}
+
+static void exitWithErrorMsg(const QString &errorMsg, bool doExit)
+{
+    fprintf(stderr, "%s\n", errorMsg.toLocal8Bit().data());
+    QByteArray utf8ErrorMsg = errorMsg.toUtf8();
+    d.result = 3; // Error with msg
+    write(d.fd[1], &d.result, 1);
+    int l = utf8ErrorMsg.length();
+    write(d.fd[1], &l, sizeof(int));
+    write(d.fd[1], utf8ErrorMsg.data(), l);
+    close(d.fd[1]);
+    show_message_box(QStringLiteral("kdeinit5"), errorMsg);
+    if (doExit) {
+        exit(255);
+    }
+}
+
+pid_t launch(int argc, const char *_name, const char *args,
+                    const char *cwd, int envc, const char *envs,
+                    bool reset_env, const char *tty, bool avoid_loops,
+                    const char *startup_id_str)  // krazy:exclude=doublequote_chars
+{
+    QString bin, libpath;
+    QByteArray name;
+    QByteArray execpath;
+
+    if (_name[0] != '/') {
+        name = _name;
+        bin = QFile::decodeName(name);
+        execpath = execpath_avoid_loops(name, envc, envs, avoid_loops);
+    } else {
+        name = _name;
+        bin = QFile::decodeName(name);
+        name = name.mid(name.lastIndexOf('/') + 1);
+
+        // FIXME: this .so extension stuff is very Linux-specific
+        // a .so extension can occur on OS X, but the typical extension is .dylib
+        if (bin.endsWith(QStringLiteral(".so")) || bin.endsWith(QStringLiteral(".dylib"))) {
+            libpath = bin;
+        } else {
+            execpath = _name;
+        }
+    }
+#ifndef NDEBUG
+    fprintf(stderr, "kdeinit5: preparing to launch '%s'\n", libpath.isEmpty()
+            ? execpath.constData() : libpath.toUtf8().constData());
+#endif
+    if (!args) {
+        argc = 1;
+    }
+
+    // do certain checks before forking
+    if (execpath.isEmpty()) {
+        QString errorMsg = i18n("Could not find '%1' executable.", QFile::decodeName(_name));
+        exitWithErrorMsg(errorMsg, false);
+        d.result = 3;
+        d.fork = 0;
+        return d.fork;
+    } else if (!libpath.isEmpty()) {
+        QString errorMsg = i18n("Launching library '%1' is not supported on OS X.", libpath);
+        exitWithErrorMsg(errorMsg, false);
+        d.result = 3;
+        d.fork = 0;
+        return d.fork;
+    }
+
+    if (0 > pipe(d.fd)) {
+        perror("kdeinit5: pipe() failed");
+        d.result = 3;
+        d.errorMsg = i18n("Unable to start new process.\n"
+                          "The system may have reached the maximum number of open files possible or the maximum number of open files that you are allowed to use has been reached.").toUtf8();
+        d.fork = 0;
+        return d.fork;
+    }
+
+    // find out this path before forking, doing it afterwards
+    // crashes on some platforms, notably OSX
+    const QString bundlepath = QStandardPaths::findExecutable(QFile::decodeName(execpath));
+
+    const QString argvexe = QStandardPaths::findExecutable(QLatin1String(_name));
+
+    d.errorMsg = 0;
+    d.fork = fork();
+    switch (d.fork) {
+    case -1:
+        perror("kdeinit5: fork() failed");
+        d.result = 3;
+        d.errorMsg = i18n("Unable to create new process.\n"
+                          "The system may have reached the maximum number of processes possible or the maximum number of processes that you are allowed to use has been reached.").toUtf8();
+        close(d.fd[0]);
+        close(d.fd[1]);
+        d.fork = 0;
+        break;
+    case 0: {
+        /** Child **/
+        close(d.fd[0]);
+        close_fds();
+        reset_oom_protect();
+
+        // Try to chdir, either to the requested directory or to the user's document path by default.
+        // We ignore errors - if you write a desktop file with Exec=foo and Path=/doesnotexist,
+        // we still want to execute `foo` even if the chdir() failed.
+        if (cwd && *cwd) {
+            (void)chdir(cwd);
+        }
+
+        if (reset_env) { // KWRAPPER/SHELL
+
+            QList<QByteArray> unset_envs;
+            for (int tmp_env_count = 0;
+                    environ[tmp_env_count];
+                    tmp_env_count++) {
+                unset_envs.append(environ[ tmp_env_count ]);
+            }
+            foreach (const QByteArray &tmp, unset_envs) {
+                int pos = tmp.indexOf('=');
+                if (pos >= 0) {
+                    unsetenv(tmp.left(pos).constData());
+                }
+            }
+        }
+
+        for (int i = 0;  i < envc; i++) {
+            putenv((char *)envs);
+            while (*envs != 0) {
+                envs++;
+            }
+            envs++;
+        }
+
+        {
+            QByteArray procTitle;
+            // launching an executable: can do an exec directly
+            d.argv = (char **) malloc(sizeof(char *) * (argc + 1));
+            if (!argvexe.isEmpty()) {
+                QByteArray cstr = argvexe.toLocal8Bit();
+                d.argv[0] = strdup(cstr.data());
+            } else {
+                d.argv[0] = (char *) _name;
+            }
+            for (int i = 1;  i < argc; i++) {
+                d.argv[i] = (char *) args;
+                procTitle += ' ';
+                procTitle += (char *) args;
+                while (*args != 0) {
+                    args++;
+                }
+                args++;
+            }
+            d.argv[argc] = 0;
+
+#ifndef SKIP_PROCTITLE
+            /** Give the process a new name **/
+            proctitle_set("%s%s", name.data(), procTitle.data() ? procTitle.data() : "");
+#endif
+        }
+
+        if (!execpath.isEmpty()) {
+            // we're launching an executable; even after a fork and being exec'ed, that
+            // executable is allowed to use non-POSIX APIs.
+            d.result = 2; // Try execing
+            write(d.fd[1], &d.result, 1);
+
+            // We set the close on exec flag.
+            // Closing of d.fd[1] indicates that the execvp succeeded!
+            fcntl(d.fd[1], F_SETFD, FD_CLOEXEC);
+
+            setup_tty(tty);
+
+            QByteArray executable = execpath;
+            if (!bundlepath.isEmpty()) {
+                executable = QFile::encodeName(bundlepath);
+            }
+            // TODO: we probably want to use [[NSProcessInfo processInfo] setProcessName:NSString*] here to
+            // make the new app show up under its own name in non-POSIX process listings.
+
+            if (!executable.isEmpty()) {
+#ifndef NDEBUG
+                qDebug() << "execvp" << executable;
+                for (int i = 0 ; i < argc ; ++i) {
+                    qDebug() << "arg #" << i << "=" << d.argv[i];
+                }
+#endif
+                // attempt to the correct application name
+                QFileInfo fi(QString::fromUtf8(executable));
+                [[NSProcessInfo processInfo] setProcessName:(NSString*)fi.baseName().toCFString()];
+                qApp->setApplicationName(fi.baseName());
+                execvp(executable.constData(), d.argv);
+            }
+
+            d.result = 1; // Error
+            write(d.fd[1], &d.result, 1);
+            close(d.fd[1]);
+            exit(255);
+        }
+
+        break;
+    }
+    default:
+        /** Parent **/
+        close(d.fd[1]);
+        bool exec = false;
+        for (;;) {
+            d.n = read(d.fd[0], &d.result, 1);
+            if (d.n == 1) {
+                if (d.result == 2) {
+#ifndef NDEBUG
+                    //fprintf(stderr, "kdeinit5: no kdeinit module, trying exec....\n");
+#endif
+                    exec = true;
+                    continue;
+                }
+                if (d.result == 3) {
+                    int l = 0;
+                    d.n = read(d.fd[0], &l, sizeof(int));
+                    if (d.n == sizeof(int)) {
+                        QByteArray tmp;
+                        tmp.resize(l + 1);
+                        d.n = read(d.fd[0], tmp.data(), l);
+                        tmp[l] = 0;
+                        if (d.n == l) {
+                            d.errorMsg = tmp;
+                        }
+                    }
+                }
+                // Finished
+                break;
+            }
+            if (d.n == -1) {
+                if (errno == ECHILD) {  // a child died.
+                    continue;
+                }
+                if (errno == EINTR || errno == EAGAIN) { // interrupted or more to read
+                    continue;
+                }
+            }
+            if (d.n == 0) {
+                if (exec) {
+                    d.result = 0;
+                } else {
+                    fprintf(stderr, "kdeinit5: (%s %s) Pipe closed unexpectedly", name.constData(), execpath.constData());
+                    perror("kdeinit5: Pipe closed unexpectedly");
+                    d.result = 1; // Error
+                }
+                break;
+            }
+            perror("kdeinit5: Error reading from pipe");
+            d.result = 1; // Error
+            break;
+        }
+        close(d.fd[0]);
+    }
+    return d.fork;
+}
+
+/**
+ Calling CoreFoundation and other non-POSIX APIs (which is unavoidable) has always caused issues
+ with fork/exec on Mac OS X, but as of 10.5 is explicitly disallowed with an exception. As a
+ result, in the case where we would normally fork and then dlopen code, or continue
+ to run other code, we must now fork-and-exec, and even then we need to use a helper (proxy)
+ to launch the actual application we wish to launch, a proxy that will only have used POSIX APIs.
+ This probably cancels the whole idea of preloading libraries, but it is as it is.
+ Note that this function is called only when kdeinit5 is forking itself,
+ in order to disappear into the background.
+*/
+// Copied from kkernel_mac.cpp
+void mac_fork_and_reexec_self()
+{
+    int argc = *_NSGetArgc();
+    char **argv = *_NSGetArgv();
+    char *newargv[argc + 2];
+    char progname[PATH_MAX];
+    uint32_t buflen = PATH_MAX;
+    _NSGetExecutablePath(progname, &buflen);
+
+    for (int i = 0; i < argc; i++) {
+        newargv[i] = argv[i];
+    }
+
+    newargv[argc] = (char*)"--nofork";
+    newargv[argc + 1] = 0;
+
+    int x_fork_result = fork();
+    switch (x_fork_result) {
+
+    case -1:
+#ifndef NDEBUG
+        fprintf(stderr, "Mac OS X workaround fork() failed!\n");
+#endif
+        ::_exit(255);
+        break;
+
+    case 0:
+        // Child
+        execvp(progname, newargv);
+        break;
+
+    default:
+        // Parent
+        _exit(0);
+        break;
+
+    }
+}
diff --git src/klauncher/CMakeLists.txt src/klauncher/CMakeLists.txt
index a8e6c3e..cf8dd5e 100644
--- src/klauncher/CMakeLists.txt
+++ src/klauncher/CMakeLists.txt
@@ -23,6 +23,9 @@ target_link_libraries(kdeinit_klauncher
    KF5::I18n   # i18n()
    Qt5::DBus
 )
+if (APPLE)
+    target_link_libraries(kdeinit_klauncher "-framework CoreFoundation")
+endif()
 
 if (HAVE_XCB)
     target_link_libraries(kdeinit_klauncher XCB::XCB)
diff --git src/klauncher/klauncher.cpp src/klauncher/klauncher.cpp
index baa5649..4d563d9 100644
--- src/klauncher/klauncher.cpp
+++ src/klauncher/klauncher.cpp
@@ -563,7 +563,7 @@ KLauncher::requestStart(KLaunchRequest *request)
     }
 
     QString executable = request->name;
-#ifdef Q_OS_MAC
+#ifdef Q_OS_OSX
     const QString bundlepath = QStandardPaths::findExecutable(executable);
     if (!bundlepath.isEmpty()) {
         executable = bundlepath;
@@ -1073,7 +1073,7 @@ KLauncher::requestSlave(const QString &protocol,
         if (!mSlaveValgrindSkin.isEmpty()) {
             arg_list.prepend(QLatin1String("--tool=") + mSlaveValgrindSkin);
         } else {
-            arg_list.prepend(QStringLiteral("--tool=memcheck"));
+            arg_list.prepend(QLatin1String("--tool=memcheck"));
         }
     }
 #endif
diff --git src/klauncher/klauncher.h src/klauncher/klauncher.h
index 92f57fa..7690c13 100644
--- src/klauncher/klauncher.h
+++ src/klauncher/klauncher.h
@@ -26,7 +26,7 @@
 
 #include <config-kdeinit.h> // HAVE_X11
 
-#if defined(Q_OS_WIN) || defined(Q_OS_MAC)
+#if defined(Q_OS_WIN) || defined(Q_OS_OSX)
 #define USE_KPROCESS_FOR_KIOSLAVES
 #endif
 #ifdef Q_CC_MSVC
diff --git src/klauncher/klauncher_main.cpp src/klauncher/klauncher_main.cpp
index 710c889..5a7c248 100644
--- src/klauncher/klauncher_main.cpp
+++ src/klauncher/klauncher_main.cpp
@@ -35,6 +35,10 @@
 #include <QDBusConnectionInterface>
 #include <QThread>
 
+#ifdef Q_OS_OSX
+#include <CoreFoundation/CoreFoundation.h>
+#endif
+
 #ifndef USE_KPROCESS_FOR_KIOSLAVES
 static int sigpipe[ 2 ];
 static void sig_handler(int sig_num)
@@ -48,7 +52,7 @@ static void sig_handler(int sig_num)
 }
 #endif
 
-#if defined(Q_OS_DARWIN) || defined (Q_OS_MAC)
+#if defined(Q_OS_DARWIN)
 // Copied from kkernel_mac.cpp
 bool dbus_initialized = false;
 
@@ -145,7 +149,19 @@ extern "C" Q_DECL_EXPORT int kdemain(int argc, char **argv)
     }
 #endif
 
-#if defined(Q_OS_DARWIN) || defined (Q_OS_MAC)
+#if defined(Q_OS_DARWIN)
+    CFBundleRef mainBundle = CFBundleGetMainBundle();
+    if (mainBundle) {
+        // get the application's Info Dictionary. For app bundles this would live in the bundle's Info.plist,
+        // for regular executables it is obtained in another way.
+        CFMutableDictionaryRef infoDict = (CFMutableDictionaryRef) CFBundleGetInfoDictionary(mainBundle);
+        if (infoDict) {
+            // Add or set the "LSUIElement" key with/to value "1". This can simply be a CFString.
+            CFDictionarySetValue(infoDict, CFSTR("LSUIElement"), CFSTR("1"));
+            // That's it. We're now considered as an "agent" by the window server, and thus will have
+            // neither menubar nor presence in the Dock or App Switcher.
+        }
+    }
     mac_initialize_dbus();
 #endif
 
diff --git src/start_kdeinit/CMakeLists.txt src/start_kdeinit/CMakeLists.txt
index 46d6cb3..74fddc5 100644
--- src/start_kdeinit/CMakeLists.txt
+++ src/start_kdeinit/CMakeLists.txt
@@ -1,8 +1,10 @@
 add_executable(start_kdeinit start_kdeinit.c)
+ecm_mark_nongui_executable(start_kdeinit)
 if (Libcap_FOUND)
    target_link_libraries(start_kdeinit ${Libcap_LIBRARIES})
 endif()
 add_executable(start_kdeinit_wrapper start_kdeinit_wrapper.c)
+ecm_mark_nongui_executable(start_kdeinit_wrapper)
 
 install(TARGETS start_kdeinit DESTINATION ${CMAKE_INSTALL_FULL_LIBEXECDIR_KF5})
 install(TARGETS start_kdeinit_wrapper DESTINATION ${CMAKE_INSTALL_FULL_LIBEXECDIR_KF5})
diff --git src/wrapper.cpp src/wrapper.cpp
index 9cb0a71..ebe4f3f 100644
--- src/wrapper.cpp
+++ src/wrapper.cpp
@@ -42,42 +42,47 @@
 
 extern char **environ;
 
-static char *getDisplay()
+// copied from kdeinit/kinit.cpp
+static const char* displayEnvVarName_c()
 {
-    const char *display;
-    char *result;
-    char *screen;
-    char *colon;
-    char *i;
-
-#if defined(NO_DISPLAY)
-    display = "NODISPLAY";
-#else
-    display = getenv("DISPLAY");
+    // Can't use QGuiApplication::platformName() here, there is no app instance.
+#if HAVE_X11
+    return "DISPLAY";
+#elif defined(Q_OS_OSX)
+    return "MAC_DISPLAY";
+#elif defined(Q_OS_WIN)
+    return "WIN_DISPLAY";
 #endif
-    if (!display || !*display) {
-        display = ":0";
-    }
-    result = (char *)malloc(strlen(display) + 1);
-    if (result == NULL) {
-        return NULL;
-    }
+}
 
-    strcpy(result, display);
-    screen = strrchr(result, '.');
-    colon = strrchr(result, ':');
-    if (screen && (screen > colon)) {
-        *screen = '\0';
+// adapted from kdeinit/kinit.cpp
+// WARNING, if you change the socket name, adjust kinit.cpp too
+static const QString generate_socket_file_name()
+{
+
+#if HAVE_X11 || HAVE_XCB // qt5: see displayEnvVarName_c()
+    QByteArray display = qgetenv(displayEnvVarName_c());
+    if (display.isEmpty()) {
+        fprintf(stderr, "Error: could not determine $%s.\n", displayEnvVarName_c());
+        return QString();
     }
-    while ((i = strchr(result, ':'))) {
-        *i = '_';
+    int i;
+    if ((i = display.lastIndexOf('.')) > display.lastIndexOf(':') && i >= 0) {
+        display.truncate(i);
     }
+
+    display.replace(':', '_');
 #ifdef __APPLE__
-    while ((i = strchr(result, '/'))) {
-        *i = '_';
-    }
+    // not entirely impossible, so let's leave it
+    display.replace('/', '_');
 #endif
-    return result;
+#else
+    // not using a DISPLAY variable; use an empty string instead
+    QByteArray display = "";
+#endif
+    // WARNING, if you change the socket name, adjust kwrapper too
+    const QString socketFileName = QStringLiteral("kdeinit5_%1").arg(QLatin1String(display));
+    return socketFileName;
 }
 
 /*
@@ -126,23 +131,14 @@ static int read_socket(int sock, char *buffer, int len)
 
 static int openSocket()
 {
-    char *display = getDisplay();
-#if !defined (NO_DISPLAY)
-    if (display == NULL) {
-        fprintf(stderr, "Error: Could not determine display.\n");
+    const QString socketFileName = generate_socket_file_name();
+    if (socketFileName.isEmpty()) {
         return -1;
     }
-#endif
-
-    const QString socketFileName = QStringLiteral("kdeinit5_%1").arg(QLatin1String(display));
     QByteArray socketName = QFile::encodeName(QStandardPaths::writableLocation(QStandardPaths::RuntimeLocation) +
                             QLatin1Char('/') + socketFileName);
     const char *sock_file = socketName.constData();
 
-#if !defined (NO_DISPLAY)
-    free(display);
-#endif
-
     struct sockaddr_un server;
     if (strlen(sock_file) >= sizeof(server.sun_path)) {
         fprintf(stderr, "Warning: Path of socketfile exceeds UNIX_PATH_MAX.\n");
@@ -252,7 +248,7 @@ static int kwrapper_run(pid_t wrapped, int sock)
 
     buffer = (char *) malloc(header.arg_length);
     if (buffer == NULL) {
-        fprintf(stderr, "Error: malloc() failed\n");
+        perror("Error: malloc() failed\n");
         exit(255);
     }
 
@@ -408,7 +404,7 @@ int main(int argc, char **argv)
 
     buffer = (char *) malloc(size);
     if (buffer == NULL) {
-        fprintf(stderr, "Error: malloc() failed.");
+        perror("Error: malloc() failed.");
         exit(255);
     }
     p = buffer;
@@ -475,7 +471,7 @@ int main(int argc, char **argv)
         long pid;
         buffer = (char *) malloc(header.arg_length);
         if (buffer == NULL) {
-            fprintf(stderr, "Error: malloc() failed\n");
+            perror("Error: malloc() failed\n");
             exit(255);
         }
         read_socket(sock, buffer, header.arg_length);
