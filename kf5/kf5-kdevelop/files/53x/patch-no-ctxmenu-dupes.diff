diff --git kdevplatform/shell/textdocument.h kdevplatform/shell/textdocument.h
index 04d12abfca11f276ae475fd02dd873901a95133c..b9c1fdb3f01288224dd792d852c333804f07d757 100644
--- kdevplatform/shell/textdocument.h
+++ kdevplatform/shell/textdocument.h
@@ -85,7 +85,6 @@ private:
     Q_PRIVATE_SLOT(d, void modifiedOnDisk(KTextEditor::Document *, bool, KTextEditor::ModificationInterface::ModifiedOnDiskReason))
 
     void newDocumentStatus(KTextEditor::Document*);
-    void populateContextMenu(KTextEditor::View*, QMenu*);
     void textChanged(KTextEditor::Document*);
     void documentUrlChanged(KTextEditor::Document*);
     void slotDocumentLoaded();
diff --git kdevplatform/shell/textdocument.cpp kdevplatform/shell/textdocument.cpp
index e5f92beee45e5fec5823447d727b34b4069339bd..0aef6b78a4d0d5f1b86866068086b4a099faab49 100644
--- kdevplatform/shell/textdocument.cpp
+++ kdevplatform/shell/textdocument.cpp
@@ -76,19 +76,69 @@ static void selectAndReveal( KTextEditor::View* view, const KTextEditor::Range&
     }
 }
 
+class TextDocumentContextMenuData : public QObject
+{
+    Q_OBJECT
+public:
+    TextDocumentContextMenuData(QObject* parent)
+        : QObject(parent)
+        , addedContextMenu(nullptr)
+    {
+        lastShownMenu.clear();
+    }
+
+    // dtor has to be out-of-line, after 
+    ~TextDocumentContextMenuData();
+
+    void populateContextMenu( KTextEditor::View* v, QMenu* menu )
+    {
+        if (!lastShownMenu.isNull() && addedContextMenu) {
+            qCDebug(SHELL) << "Removing items from previous contextmenu" << lastShownMenu;
+            foreach ( QAction* action, addedContextMenu->actions() ) {
+                lastShownMenu->removeAction(action);
+            }
+        }
+
+        delete addedContextMenu;
+        addedContextMenu = new QMenu();
+
+        EditorContext c(v, v->cursorPosition());
+        auto extensions = Core::self()->pluginController()->queryPluginsForContextMenuExtensions(&c, addedContextMenu);
+
+        ContextMenuExtension::populateMenu(addedContextMenu, extensions);
+
+        foreach ( QAction* action, addedContextMenu->actions() ) {
+            menu->addAction(action);
+        }
+        if (menu != lastShownMenu.data()) {
+            qCDebug(SHELL) << "Added items to new contextmenu" << menu;
+            lastShownMenu = menu;
+        }
+
+        menu->setTearOffEnabled(true);
+    }
+
+    // we want to remove the previously added stuff before
+    // the menu shows again.
+    // This has to be a static instance because multiple views
+    // can share the same context menu instance.
+    QMenu* addedContextMenu;
+    QPointer<QMenu> lastShownMenu;
+};
+
 class TextDocumentPrivate
 {
 public:
-    explicit TextDocumentPrivate(TextDocument *textDocument)
+    explicit TextDocumentPrivate(TextDocument *textDocument, ICore* core)
         : q(textDocument)
     {
+        if (!contextMenuData) {
+            contextMenuData = new TextDocumentContextMenuData(core->uiController()->activeMainWindow());
+        }
     }
 
     ~TextDocumentPrivate()
     {
-        delete addedContextMenu;
-        addedContextMenu = nullptr;
-
         saveSessionConfig();
         delete document;
     }
@@ -231,10 +281,27 @@ public:
     IDocument::DocumentState state = IDocument::Clean;
     QString encoding;
     bool loaded = false;
-    // we want to remove the added stuff when the menu hides
-    QMenu* addedContextMenu = nullptr;
+    // there is only a single contextmenu at a time so use a single (static)
+    // instance of the class keeping track of added menu actions.
+    static TextDocumentContextMenuData* contextMenuData;
 };
 
+TextDocumentContextMenuData* TextDocumentPrivate::contextMenuData = nullptr;
+
+TextDocumentContextMenuData::~TextDocumentContextMenuData()
+{
+    //qWarning() << Q_FUNC_INFO << parent();
+    // don't assume there will ever be only 1 MainWindow in KDevelop:
+    // (this is why we have to be out-of-line)
+    if (TextDocumentPrivate::contextMenuData == this) {
+        TextDocumentPrivate::contextMenuData = nullptr;
+    }
+    delete addedContextMenu;
+    addedContextMenu = nullptr;
+
+    lastShownMenu.clear();
+}
+
 class TextViewPrivate
 {
 public:
@@ -246,7 +313,7 @@ public:
 };
 
 TextDocument::TextDocument(const QUrl &url, ICore* core, const QString& encoding)
-    :PartDocument(url, core), d(new TextDocumentPrivate(this))
+    :PartDocument(url, core), d(new TextDocumentPrivate(this, core))
 {
     d->encoding = encoding;
 }
@@ -259,7 +326,7 @@ bool TextDocument::isTextDocument() const
     {
         /// @todo Somehow it can happen that d->document is zero, which makes
         /// code relying on "isTextDocument() == (bool)textDocument()" crash
-        qCWarning(SHELL) << "Broken text-document: " << url();
+        qCDebug(SHELL) << "Broken text-document: " << url();
         return false;
     }
 
@@ -345,7 +412,7 @@ QWidget *TextDocument::createViewWidget(QWidget *parent)
 
     view->setStatusBarEnabled(Core::self()->partControllerInternal()->showTextEditorStatusBar());
 
-    connect(view, &KTextEditor::View::contextMenuAboutToShow, this, &TextDocument::populateContextMenu);
+    connect(view, &KTextEditor::View::contextMenuAboutToShow, d->contextMenuData, &TextDocumentContextMenuData::populateContextMenu);
 
     if (KTextEditor::CodeCompletionInterface* cc = dynamic_cast<KTextEditor::CodeCompletionInterface*>(view))
         cc->setAutomaticInvocationEnabled(core()->languageController()->completionSettings()->automaticCompletionEnabled());
@@ -670,27 +737,6 @@ void KDevelop::TextDocument::textChanged(KTextEditor::Document *document)
     notifyContentChanged();
 }
 
-void KDevelop::TextDocument::populateContextMenu( KTextEditor::View* v, QMenu* menu )
-{
-    if (d->addedContextMenu) {
-        foreach ( QAction* action, d->addedContextMenu->actions() ) {
-            menu->removeAction(action);
-        }
-        delete d->addedContextMenu;
-    }
-
-    d->addedContextMenu = new QMenu();
-
-    EditorContext c(v, v->cursorPosition());
-    auto extensions = Core::self()->pluginController()->queryPluginsForContextMenuExtensions(&c, d->addedContextMenu);
-
-    ContextMenuExtension::populateMenu(d->addedContextMenu, extensions);
-
-    foreach ( QAction* action, d->addedContextMenu->actions() ) {
-        menu->addAction(action);
-    }
-}
-
 void KDevelop::TextDocument::repositoryCheckFinished(bool canRecreate) {
     if ( d->state != IDocument::Dirty && d->state != IDocument::DirtyAndModified ) {
         // document is not dirty for whatever reason, nothing to do.
@@ -737,3 +783,4 @@ void KDevelop::TextDocument::documentUrlChanged(KTextEditor::Document* document)
 }
 
 #include "moc_textdocument.cpp"
+#include "textdocument.moc"
