diff --git a/kdevplatform/vcs/widgets/vcsdiffpatchsources.cpp b/kdevplatform/vcs/widgets/vcsdiffpatchsources.cpp
index 0b9b093..a3c3f5c 100644
--- a/kdevplatform/vcs/widgets/vcsdiffpatchsources.cpp
+++ b/kdevplatform/vcs/widgets/vcsdiffpatchsources.cpp
@@ -20,6 +20,7 @@
 
 #include <QHBoxLayout>
 #include <QVBoxLayout>
+#include <QSizePolicy>
 #include <QDir>
 #include <QFontDatabase>
 #include <QLabel>
@@ -44,6 +45,25 @@
 
 using namespace KDevelop;
 
+class VCSCommitMessageEditor : public KTextEdit {
+    Q_OBJECT
+public:
+    VCSCommitMessageEditor()
+        : m_minWidth(KTextEdit::minimumSizeHint().width())
+    {}
+    void setMinWidth(int w)
+    {
+        m_minWidth = w;
+        setSizePolicy(QSizePolicy::Preferred, QSizePolicy::Preferred);
+    }
+    QSize minimumSizeHint() const override
+    {
+        return QSize(m_minWidth, KTextEdit::minimumSizeHint().height());
+    }
+protected:
+    int m_minWidth;
+};
+
 VCSCommitDiffPatchSource::VCSCommitDiffPatchSource(VCSDiffUpdater* updater)
     : VCSDiffPatchSource(updater), m_vcs(updater->vcs())
 {
@@ -52,15 +72,23 @@ VCSCommitDiffPatchSource::VCSCommitDiffPatchSource(VCSDiffUpdater* updater)
     QVBoxLayout* layout = new QVBoxLayout(m_commitMessageWidget.data());
     layout->setMargin(0);
 
-    m_commitMessageEdit = new KTextEdit;
-    m_commitMessageEdit.data()->setFont(QFontDatabase::systemFont(QFontDatabase::FixedFont));
-    m_commitMessageEdit.data()->setLineWrapMode(QTextEdit::NoWrap);
-    m_vcs->setupCommitMessageEditor(updater->url(), m_commitMessageEdit.data());
+    VCSCommitMessageEditor *editor = new VCSCommitMessageEditor;
+    m_commitMessageEdit = editor;
+    editor->setFont(QFontDatabase::systemFont(QFontDatabase::FixedFont));
+    editor->setLineWrapMode(QTextEdit::NoWrap);
+    // set the message editor to be 72 characters wide.
+    // Given the widget margins that requires 74 actual characters.
+    editor->setMinWidth(editor->fontMetrics().width(QString(74, QLatin1Char('m'))));
+    m_vcs->setupCommitMessageEditor(updater->url(), editor);
+    editor->setCheckSpellingEnabled(false);
 
     QHBoxLayout* titleLayout = new QHBoxLayout;
-    titleLayout->addWidget(new QLabel(i18n("Commit Message:")));
+    QLabel *label = new QLabel(i18n("Commit Message:"));
+    // Copy the message editor tooltip to the label to increase its chances of being seen
+    label->setToolTip(editor->toolTip());
+    titleLayout->addWidget(label);
 
-    m_oldMessages = new KComboBox(m_commitMessageWidget.data());
+    m_oldMessages = new KComboBox(editor);
 
     m_oldMessages->addItem(i18n("Old Messages"));
     foreach(const QString& message, oldMessages())
@@ -72,7 +100,7 @@ VCSCommitDiffPatchSource::VCSCommitDiffPatchSource(VCSDiffUpdater* updater)
     titleLayout->addWidget(m_oldMessages);
 
     layout->addLayout(titleLayout);
-    layout->addWidget(m_commitMessageEdit.data());
+    layout->addWidget(editor);
     connect(this, &VCSCommitDiffPatchSource::reviewCancelled, this, &VCSCommitDiffPatchSource::addMessageToHistory);
     connect(this, &VCSCommitDiffPatchSource::reviewFinished, this, &VCSCommitDiffPatchSource::addMessageToHistory);
 }
@@ -324,3 +359,4 @@ VCSStandardDiffUpdater::~VCSStandardDiffUpdater() {
 VCSDiffUpdater::~VCSDiffUpdater() {
 }
 
+#include "vcsdiffpatchsources.moc"
diff --git a/plugins/git/gitmessagehighlighter.cpp b/plugins/git/gitmessagehighlighter.cpp
index 078fdcb..fd3eefc 100644
--- a/plugins/git/gitmessagehighlighter.cpp
+++ b/plugins/git/gitmessagehighlighter.cpp
@@ -35,15 +35,35 @@ static const int lineLenLimit = 72;
 void GitMessageHighlighter::applyErrorFormat(GitMessageHighlighter* text, bool warning, const QString& tooltip, int startPos, int endPos)
 {
     QTextCharFormat format;
-    format.setFontUnderline(true);
-    format.setUnderlineStyle(QTextCharFormat::SpellCheckUnderline);
-    format.setUnderlineColor(warning ? Qt::yellow : Qt::red);
+    format.setFontLetterSpacing(125);
+    if (!warning) {
+        format.setFontItalic(true);
+    } else {
+        // make the 1st character stand out too
+        // (letterspacing is applied *after* the startPos character)
+        if (startPos > 0) {
+            startPos -= 1;
+        }
+    }
     format.setToolTip(tooltip);
     text->setFormat(startPos, endPos, format);
 }
 
 GitMessageHighlighter::GitMessageHighlighter(QTextEdit* parent): Sonnet::Highlighter(parent)
 {
+    if (parent) {
+        parent->setToolTip(i18n("Suggested commit format: a summary line of about %1 characters maximum,\n"
+            "an empty line, and optional details with a max. line length of %2 characters.",
+            summarySoftLimit, lineLenLimit));
+        parent->setPlaceholderText(QString(summarySoftLimit, QLatin1Char('_'))
+            + i18n("\n(empty line)")
+            + QStringLiteral("\n") + QString(lineLenLimit, QLatin1Char('_'))
+            + QStringLiteral("\n") + QString(lineLenLimit, QLatin1Char('_'))
+            + QStringLiteral("\n") + QString(lineLenLimit, QLatin1Char('_'))
+            + QStringLiteral("\n") + QString(lineLenLimit, QLatin1Char('_')));
+    }
+    setAutomatic(false);
+    setActive(false);
 }
 
 GitMessageHighlighter::~GitMessageHighlighter()
@@ -77,7 +97,7 @@ void GitMessageHighlighter::highlightBlock(const QString& text)
                     applyErrorFormat(this,
                         lineLength <= summaryHardLimit,
                         i18n("Try to keep summary length below %1 characters.", summarySoftLimit),
-                        startPos, endPos
+                        startPos+summarySoftLimit, endPos
                     );
                 } else {
                     for(int i=startPos; i<endPos; i++) {
