diff --git kdevplatform/shell/textdocument.h kdevplatform/shell/textdocument.h
--- kdevplatform/shell/textdocument.h
+++ kdevplatform/shell/textdocument.h
@@ -89,6 +89,7 @@
 
     void newDocumentStatus(KTextEditor::Document*);
     void populateContextMenu(KTextEditor::View*, QMenu*);
+    void unpopulateContextMenu();
     void textChanged(KTextEditor::Document*);
     void documentUrlChanged(KTextEditor::Document*);
     void slotDocumentLoaded();
diff --git kdevplatform/shell/textdocument.cpp kdevplatform/shell/textdocument.cpp
index e5f92beee45e5fec5823447d727b34b4069339bd..b6cd9431325b9f3a79b7d991d8646a8454705de9 100644
--- kdevplatform/shell/textdocument.cpp
+++ kdevplatform/shell/textdocument.cpp
@@ -86,8 +86,11 @@ public:
 
     ~TextDocumentPrivate()
     {
-        delete addedContextMenu;
-        addedContextMenu = nullptr;
+        // handle case we are deleted while context menu is not yet hidden
+        // we want to remove all actions we added, especially those not owned by the document
+        // (i.e. created on-the-fly during ContextMenuExtension::populateMenu with ownership
+        // set to our addedContextMenu) but owned by the plugins
+        cleanContextMenu(true);
 
         saveSessionConfig();
         delete document;
@@ -225,6 +228,34 @@ public:
         setStatus(document, dirty);
     }
 
+    void cleanContextMenu(bool forceDeleteNow = false)
+    {
+        if (!addedContextMenu) {
+            return;
+        }
+
+        if (currentContextMenu) {
+            const auto actions = addedContextMenu->actions();
+            for (QAction* action : actions) {
+                currentContextMenu->removeAction(action);
+            }
+            currentContextMenu.clear();
+        }
+
+        // the addedContextMenu owns actions created on-the-fly for the context menu
+        // and thuse deletes them as well on destruction.
+        // As some actions potentially could be connected to triggered-signal handlers
+        // using Qt::QueuedConnection (at least SwitchToBuddyPlugin does so currently)
+        // deleting them here also deletes the connection before the handler is triggered
+        // so by default we delay the destruction to next eventloop as well
+        if (forceDeleteNow) {
+            delete addedContextMenu;
+        } else {
+            addedContextMenu->deleteLater();
+        }
+        addedContextMenu = nullptr;
+    }
+
     TextDocument * const q;
 
     QPointer<KTextEditor::Document> document;
@@ -233,6 +264,7 @@ public:
     bool loaded = false;
     // we want to remove the added stuff when the menu hides
     QMenu* addedContextMenu = nullptr;
+    QPointer<QMenu> currentContextMenu;
 };
 
 class TextViewPrivate
@@ -670,15 +702,27 @@ void KDevelop::TextDocument::textChanged(KTextEditor::Document *document)
     notifyContentChanged();
 }
 
+void KDevelop::TextDocument::unpopulateContextMenu()
+{
+    auto* menu = qobject_cast<QMenu*>(sender());
+    if (menu == d->currentContextMenu) {
+        disconnect(menu, &QMenu::aboutToHide, this, &TextDocument::unpopulateContextMenu);
+        d->cleanContextMenu();
+    } else {
+        qWarning() << Q_FUNC_INFO << "unexpected context menu" << menu << "!=" << d->currentContextMenu;
+    }
+}
+
 void KDevelop::TextDocument::populateContextMenu( KTextEditor::View* v, QMenu* menu )
 {
     if (d->addedContextMenu) {
-        foreach ( QAction* action, d->addedContextMenu->actions() ) {
-            menu->removeAction(action);
-        }
-        delete d->addedContextMenu;
+        qWarning() << Q_FUNC_INFO << "unexpectedly populated context menu";
+        unpopulateContextMenu();
     }
 
+    d->currentContextMenu = menu;
+    connect(menu, &QMenu::aboutToHide, this, &TextDocument::unpopulateContextMenu);
+
     d->addedContextMenu = new QMenu();
 
     EditorContext c(v, v->cursorPosition());
