diff --git plugins/clang/duchain/builder.cpp plugins/clang/duchain/builder.cpp
index c2b6255915737469483522d38a1c1a3930fb83ae..57f8d131170032069cbab0a4a18342935bfea3d9 100644
--- plugins/clang/duchain/builder.cpp
+++ plugins/clang/duchain/builder.cpp
@@ -1204,7 +1204,7 @@ CXChildVisitResult Visitor::buildParmDecl(CXCursor cursor)
 CXChildVisitResult Visitor::buildUse(CXCursor cursor)
 {
     m_uses[m_parentContext->context].push_back(cursor);
-    return cursor.kind == CXCursor_DeclRefExpr || cursor.kind == CXCursor_MemberRefExpr ?
+    return cursor.kind == CXCursor_DeclRefExpr || cursor.kind == CXCursor_MemberRefExpr || cursor.kind == CXCursor_ObjCMessageExpr ?
         CXChildVisit_Recurse : CXChildVisit_Continue;
 }
 
@@ -1223,9 +1223,9 @@ CXChildVisitResult Visitor::buildMacroExpansion(CXCursor cursor)
 template<CXCursorKind CK>
 CXChildVisitResult Visitor::buildCompoundStatement(CXCursor cursor)
 {
-    if (CK == CXCursor_LambdaExpr || m_parentContext->context->type() == DUContext::Function)
+    if (CK == CXCursor_LambdaExpr || CK == CXCursor_BlockExpr || m_parentContext->context->type() == DUContext::Function)
     {
-        auto context = createContext<CK, CK == CXCursor_LambdaExpr ? DUContext::Function : DUContext::Other>(cursor);
+        auto context = createContext<CK, CK == CXCursor_LambdaExpr || CK == CXCursor_BlockExpr ? DUContext::Function : DUContext::Other>(cursor);
         CurrentContext newParent(context, m_parentContext->keepAliveContexts);
         PushValue<CurrentContext*> pushCurrent(m_parentContext, &newParent);
         clang_visitChildren(cursor, &visitCursor, this);
@@ -1562,6 +1562,7 @@ CXChildVisitResult visitCursor(CXCursor cursor, CXCursor parent, CXClientData da
     case CXCursor_DeclRefExpr:
     case CXCursor_MemberRefExpr:
     case CXCursor_ObjCClassRef:
+    case CXCursor_ObjCMessageExpr:
         return visitor->buildUse(cursor);
     case CXCursor_MacroExpansion:
         return visitor->buildMacroExpansion(cursor);
@@ -1569,6 +1570,8 @@ CXChildVisitResult visitCursor(CXCursor cursor, CXCursor parent, CXClientData da
         return visitor->buildCompoundStatement<CXCursor_CompoundStmt>(cursor);
     case CXCursor_LambdaExpr:
         return visitor->buildCompoundStatement<CXCursor_LambdaExpr>(cursor);
+    case CXCursor_BlockExpr:
+        return visitor->buildCompoundStatement<CXCursor_BlockExpr>(cursor);
     case CXCursor_CXXBaseSpecifier:
         return visitor->buildCXXBaseSpecifier(cursor);
     case CXCursor_ParmDecl:
diff --git plugins/clang/duchain/cursorkindtraits.h plugins/clang/duchain/cursorkindtraits.h
index a5219d1a01775de3ea8ad6ef9a196409035f93c3..c8650c9072d266a0de1e70642076893902b93ab5 100644
--- plugins/clang/duchain/cursorkindtraits.h
+++ plugins/clang/duchain/cursorkindtraits.h
@@ -55,6 +55,19 @@ constexpr bool isClass(CXCursorKind CK)
     || CK == CXCursor_ObjCCategoryImplDecl;
 }
 
+// TODO: somehow this is (probably) the function to call in isKDevForwardDeclaration() but
+// I cannot seem to understand how to achieve that without raising a ton of 
+// uncomprehensible errors in builder.cpp (I can't even remove the ObjC cursor
+// kinds from the isClass function above?!)
+// TODO: remove this comment.
+constexpr bool isClassNoObjC(CXCursorKind CK)
+{
+    return isClassTemplate(CK)
+    || CK == CXCursor_StructDecl
+    || CK == CXCursor_ClassDecl
+    || CK == CXCursor_UnionDecl;
+}
+
 constexpr bool isFunction(CXCursorKind CK)
 {
     return CK == CXCursor_FunctionDecl
diff --git plugins/clang/duchain/documentfinderhelpers.cpp plugins/clang/duchain/documentfinderhelpers.cpp
index 755b719d2c8d24c4f96de42881925d336ed38dcb..cfd00647423b9d7421f281e1e1e51307f35a4ef8 100644
--- plugins/clang/duchain/documentfinderhelpers.cpp
+++ plugins/clang/duchain/documentfinderhelpers.cpp
@@ -183,7 +183,8 @@ QStringList mimeTypesList()
         QStringLiteral("text/x-csrc"),
         QStringLiteral("text/x-c++src"),
         QStringLiteral("text/vnd.nvidia.cuda.csrc"),
-        QStringLiteral("text/x-objcsrc")
+        QStringLiteral("text/x-objcsrc"),
+        QStringLiteral("text/x-objc++src")
     };
     return mimeTypes;
 }
diff --git plugins/clang/duchain/parsesession.cpp plugins/clang/duchain/parsesession.cpp
index 9674ea0dcb26678971a2ae8ac3b4cbcc97fcbcfb..52716e1e53ec9e9ff63da33599d7111ac98cdda9 100644
--- plugins/clang/duchain/parsesession.cpp
+++ plugins/clang/duchain/parsesession.cpp
@@ -90,10 +90,6 @@ void sanitizeArguments(QVector<QByteArray>& arguments)
 QVector<QByteArray> argsForSession(const QString& path, ParseSessionData::Options options, const ParserSettings& parserSettings)
 {
     QMimeDatabase db;
-    if(db.mimeTypeForFile(path).name() == QStringLiteral("text/x-objcsrc")) {
-        return {QByteArrayLiteral("-xobjective-c++")};
-    }
-
     // TODO: No proper mime type detection possible yet
     // cf. https://bugs.freedesktop.org/show_bug.cgi?id=26913
     if (path.endsWith(QLatin1String(".cl"), Qt::CaseInsensitive)) {
@@ -109,19 +105,12 @@ QVector<QByteArray> argsForSession(const QString& path, ParseSessionData::Option
         return result;
     }
 
+    auto result = parserSettings.toClangAPI();
     if (parserSettings.parserOptions.isEmpty()) {
         // The parserOptions can be empty for some unit tests that use ParseSession directly
-        auto defaultArguments = ClangSettingsManager::self()->parserSettings(path).toClangAPI();
-
-        defaultArguments.append(QByteArrayLiteral("-nostdinc"));
-        defaultArguments.append(QByteArrayLiteral("-nostdinc++"));
-        defaultArguments.append(QByteArrayLiteral("-xc++"));
-
-        sanitizeArguments(defaultArguments);
-        return defaultArguments;
+        result = ClangSettingsManager::self()->parserSettings(path).toClangAPI();
     }
 
-    auto result = parserSettings.toClangAPI();
     result.append(QByteArrayLiteral("-nostdinc"));
     if (parserSettings.isCpp()) {
         result.append(QByteArrayLiteral("-nostdinc++"));
@@ -134,7 +123,18 @@ QVector<QByteArray> argsForSession(const QString& path, ParseSessionData::Option
         return result;
     }
 
-    result.append(parserSettings.isCpp() ? QByteArrayLiteral("-xc++") : QByteArrayLiteral("-xc"));
+    // check the C family membership and set the appropriate mode
+    // overriding any inappropriate modes set earlier in the args list.
+    const auto mimeType = db.mimeTypeForFile(path).name();
+    if (mimeType == QStringLiteral("text/x-objc++src")) {
+        result.append(QByteArrayLiteral("-xobjective-c++"));
+    } else if (mimeType == QStringLiteral("text/x-objcsrc")) {
+        result.append(QByteArrayLiteral(" -ObjC"));
+    } else if (parserSettings.isCpp()) {
+       result.append(QByteArrayLiteral("-xc++"));
+    } else {
+       result.append(QByteArrayLiteral("-xc"));
+    }
 
     sanitizeArguments(result);
     return result;
diff --git plugins/clang/kdevclang.xml plugins/clang/kdevclang.xml
index 96ac4ed97b274e30a5217819f6b269a882152345..9801819bc17eddb3283f31e2a2da20dd2e4bf880 100644
--- plugins/clang/kdevclang.xml
+++ plugins/clang/kdevclang.xml
@@ -75,4 +75,18 @@
         <sub-class-of type="text/x-c++hdr"/>
         <glob pattern="*.cuh"/>
     </mime-type>
+
+    <!--
+    Not yet registered, mimetype derived from the x-objcsrc type and also used in Qt Creator.
+    See https://bugs.freedesktop.org/show_bug.cgi?id=98823
+    -->
+    <mime-type type="text/x-objc++src">
+        <comment>Objective-C++ source code</comment>
+        <sub-class-of type="text/x-c++src"/>
+        <sub-class-of type="text/x-objcsrc"/>
+        <magic priority="30">
+          <match value="#import" type="string" offset="0"/>
+        </magic>
+        <glob pattern="*.mm"/>
+    </mime-type>
 </mime-info>
diff --git plugins/clang/kdevclangsupport.json plugins/clang/kdevclangsupport.json
index dd1bfec608026542397183bf876d640e1c01cfbe..7a920eeadcfc2efd9ac995044787d51cd21c6ba5 100644
--- plugins/clang/kdevclangsupport.json
+++ plugins/clang/kdevclangsupport.json
@@ -61,7 +61,8 @@
         "C++",
         "OpenCL C",
         "CUDA C",
-        "Objective-C"
+        "Objective-C",
+        "Objective-C++"
     ],
     "X-KDevelop-LoadMode": "AlwaysOn",
     "X-KDevelop-Mode": "NoGUI",
@@ -70,9 +71,10 @@
         "text/x-c++hdr",
         "text/x-csrc",
         "text/x-c++src",
+        "text/x-objcsrc",
+        "text/x-objc++src",
         "text/x-opencl-src",
         "text/vnd.nvidia.cuda.csrc",
-        "text/vnd.nvidia.cuda.chdr",
-        "text/x-objcsrc"
+        "text/vnd.nvidia.cuda.chdr"
     ]
 }
diff --git plugins/clang/tests/files/objc.m plugins/clang/tests/files/objc.m
new file mode 100644
index 0000000000000000000000000000000000000000..bb9fbdfa47ba2a277a62c2aa92722d97873d6d32
--- /dev/null
+++ plugins/clang/tests/files/objc.m
@@ -0,0 +1,17 @@
+
+/// "type" : { "toString" : "NSString" },
+/// "useCount" : 2
+@interface NSString
+{
+}
+@end
+
+/// "identifiedTypeDeclaration" : { "isDefinition" : false }
+NSString* f;
+
+/// "type" : { "toString" : "NSString*" }
+NSString *strn = @"NSString or CFString";
+
+#ifndef __OBJC__
+NSString *strn2 = "C String";  // in ObjC this would raise the error "String literal must be prefixed by '@'"
+#endif
diff --git plugins/clang/tests/files/objcpp.mm plugins/clang/tests/files/objcpp.mm
new file mode 100644
index 0000000000000000000000000000000000000000..67cd4cf30657b95307cab4a4d8940199aa15a19f
--- /dev/null
+++ plugins/clang/tests/files/objcpp.mm
@@ -0,0 +1,113 @@
+/**
+ * "identifier" : "main",
+ * "internalContext" : { "type" : "Function", "range" : "[(5, 0), (8, 1)]" },
+ * "range" : "[(5, 4), (5, 8)]"
+ */
+int main()
+{
+    return 0;
+}
+
+/**
+ * "identifier" : "bar",
+ * "internalContext" : { "type" : "Namespace", "range" : "[(15, 0), (93, 1)]" },
+ * "kind" : "Namespace"
+ */
+namespace bar
+{
+    /**
+     * "identifier" : "foo",
+     * "internalContext" : { "null" : false, "range" : "[(21, 4), (21, 14)]" }
+     */
+    void foo();
+
+    /**
+     * "identifier" : "foostruct",
+     * "internalContext" : { "type" : "Class", "range" : "[(27, 4), (92, 5)]" }
+     */
+    struct foostruct
+    {
+        /**
+         * "identifier" : "foostruct",
+         * "internalContext" : { "type" : "Function", "range" : "[(33, 8), (35, 9)]" }
+         */
+        foostruct()
+        {
+        }
+
+        /**
+         * "identifier" : "~foostruct", "range" : "[(41, 8), (41, 18)]",
+         * "internalContext" : { "type" : "Function", "range" : "[(41, 8), (43, 9)]" }
+         */
+        ~foostruct()
+        {
+        }
+
+        /**
+         * "identifier" : "operator int",
+         * "internalContext" : { "type" : "Function", "range" : "[(49, 8), (52, 9)]" }
+         */
+        operator int()
+        {
+            return 0;
+        }
+
+        /**
+         * "identifier" : "templateFunction",
+         * "internalContext" : { "type" : "Function", "range" : "[(58, 8), (61, 9)]" }
+         */
+        template<class T>
+        void templateFunction()
+        {
+        }
+
+        /**
+         * "identifier" : "fooenum",
+         * "internalContext" : { "type" : "Enum", "range" : "[(67, 8), (69, 9)]" }
+         */
+        enum fooenum
+        {
+        };
+
+        /**
+         * "identifier" : "foomethod",
+         * "internalContext" : { "type" : "Function", "range" : "[(75, 8), (75, 23)]" }
+         */
+        int foomethod();
+
+        /**
+         * "identifier" : "deffoomethod",
+         * "internalContext" : { "type" : "Function", "range" : "[(81, 8), (83, 9)]" }
+         */
+        void deffoomethod()
+        {
+        }
+
+        /**
+         * "identifier" : "operator=", "range" : "[(89, 19), (89, 28)]",
+         * "internalContext" : { "type" : "Function", "range" : "[(89, 8), (91, 9)]" }
+         */
+        foostruct& operator=(const foostruct& other)
+        { return *this;
+        }
+    };
+}
+
+/// "identifier" : "", "range" : "[(96, 0), (96, 0)]"
+struct {} unnamedStructObject;
+
+/// "identifier" : "", "range" : "[(99, 0), (99, 0)]"
+union {} unnamedUnionObject;
+
+/// "type" : { "toString" : "NSString" },
+/// "useCount" : 1
+@class NSString;
+
+/// "type" : { "toString" : "NSString*" }
+NSString *strn = @"NSString or CFString";
+
+/// "type" : { "toString" : "NSString*" }
+auto b = @"Another string";
+
+
+
diff --git plugins/clang/tests/test_files.cpp plugins/clang/tests/test_files.cpp
index 698c7dcf15263e34c4cf9f0f44d7c9a3017d4d7e..1a62a14041dee3547e5a98dc3ce03b4f40b0a9cd 100644
--- plugins/clang/tests/test_files.cpp
+++ plugins/clang/tests/test_files.cpp
@@ -66,7 +66,7 @@ void TestFiles::testFiles_data()
 {
     QTest::addColumn<QString>("fileName");
     const QString testDirPath = TEST_FILES_DIR;
-    const QStringList files = QDir(testDirPath).entryList({"*.h", "*.cpp", "*.c", "*.cl", "*.cu"}, QDir::Files);
+    const QStringList files = QDir(testDirPath).entryList({"*.h", "*.cpp", "*.c", "*.cl", "*.cu", "*.m", "*.mm"}, QDir::Files);
     for (const QString& file : files) {
         QTest::newRow(file.toUtf8().constData()) << QString(testDirPath + '/' + file);
     }
