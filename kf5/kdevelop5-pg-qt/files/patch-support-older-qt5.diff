diff --git a/CMakeLists.txt b/CMakeLists.txt
index acee3bc..0c783ca 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -42,7 +42,7 @@ install(FILES
 if(BUILD_TESTING)
   set(REQUIRED_QT_TESTCOMPONENTS Test)
 endif()
-set(REQUIRED_QT_VERSION 5.15.2)
+set(REQUIRED_QT_VERSION 5.9.8)
 find_package(Qt${QT_MAJOR_VERSION} ${REQUIRED_QT_VERSION} CONFIG REQUIRED
   COMPONENTS
     Core
diff --git a/kdev-pg/CMakeLists.txt b/kdev-pg/CMakeLists.txt
index 1f5f17b..e96630b 100644
--- a/kdev-pg/CMakeLists.txt
+++ b/kdev-pg/CMakeLists.txt
@@ -2,7 +2,7 @@ INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
 REMOVE_DEFINITIONS(-DQT_NO_STL)
 ADD_DEFINITIONS(-DQT_STL)
 
-qt_add_resources(kdevpg_rcc_srcs ../unidata.qrc)
+QT5_ADD_RESOURCES(kdevpg_rcc_srcs ../unidata.qrc)
 kde_enable_exceptions()
 
 SET(kdevpg_srcs
diff --git a/kdev-pg/kdev-pg-ast-gen.cpp b/kdev-pg/kdev-pg-ast-gen.cpp
index e8d7ca0..3645d46 100644
--- a/kdev-pg/kdev-pg-ast-gen.cpp
+++ b/kdev-pg/kdev-pg-ast-gen.cpp
@@ -28,12 +28,12 @@ namespace KDevPG
 {
 void GenerateAst::operator()()
 {
-  out << globalSystem.namespaceCode << Qt::endl;
+  out << globalSystem.namespaceCode << endl;
 
   out << "struct " << globalSystem.exportMacro << " AstNode";
 
-  out << "{" << Qt::endl
-      << "enum AstNodeKind {" << Qt::endl;
+  out << "{" << endl
+      << "enum AstNodeKind {" << endl;
 
   int node_id = 1000;
   for (QMap<QString, Model::SymbolItem*>::iterator it = globalSystem.symbols.begin();
@@ -42,27 +42,27 @@ void GenerateAst::operator()()
       Model::SymbolItem *sym = (*it);
       if(isOperatorSymbol(sym))
       {
-        out << "Prefix" << sym->mCapitalizedName << "Kind" << " = " << node_id << "," << Qt::endl;
+        out << "Prefix" << sym->mCapitalizedName << "Kind" << " = " << node_id << "," << endl;
         ++node_id;
-        out << "Postfix" << sym->mCapitalizedName << "Kind" << " = " << node_id << "," << Qt::endl;
+        out << "Postfix" << sym->mCapitalizedName << "Kind" << " = " << node_id << "," << endl;
         ++node_id;
-        out << "Binary" << sym->mCapitalizedName << "Kind" << " = " << node_id << "," << Qt::endl;
+        out << "Binary" << sym->mCapitalizedName << "Kind" << " = " << node_id << "," << endl;
         ++node_id;
-        out << "Ternary" << sym->mCapitalizedName << "Kind" << " = " << node_id << "," << Qt::endl;
+        out << "Ternary" << sym->mCapitalizedName << "Kind" << " = " << node_id << "," << endl;
         ++node_id;
       }
-      out << sym->mCapitalizedName << "Kind" << " = " << node_id << "," << Qt::endl;
+      out << sym->mCapitalizedName << "Kind" << " = " << node_id << "," << endl;
       ++node_id;
     }
 
-  out << "AST_NODE_KIND_COUNT" << Qt::endl
-      << "};" << Qt::endl << Qt::endl
-      << "int kind;" << Qt::endl
-      << "qint64 startToken;" << Qt::endl
-      << "qint64 endToken;" << Qt::endl
-      << globalSystem.astCode << Qt::endl
-      << "};" << Qt::endl
-      << Qt::endl;
+  out << "AST_NODE_KIND_COUNT" << endl
+      << "};" << endl << endl
+      << "int kind;" << endl
+      << "qint64 startToken;" << endl
+      << "qint64 endToken;" << endl
+      << globalSystem.astCode << endl
+      << "};" << endl
+      << endl;
 
   GenerateAstRule gen(out);
   for( World::SymbolSet::const_iterator it = globalSystem.symbols.constBegin(); it != globalSystem.symbols.constEnd(); ++it )
@@ -91,7 +91,7 @@ void GenerateAst::operator()()
     gen(*i);
     i = next;
   }
-  out << Qt::endl;
+  out << endl;
 }
 
 void GenerateAstRule::operator()(Model::SymbolItem *sym)
@@ -132,72 +132,72 @@ void GenerateAstRule::visitEvolve(Model::EvolveItem *node)
   {
     out << "struct " << globalSystem.exportMacro << " " << sym->mCapitalizedName << "Ast: public "
         << globalSystem.astBaseClasses.value(sym->mName, "AstNode")
-        << "{ enum { KIND = " << sym->mCapitalizedName << "Kind }; };" << Qt::endl << Qt::endl;
+        << "{ enum { KIND = " << sym->mCapitalizedName << "Kind }; };" << endl << endl;
     #define O(thestr) \
     out << "struct " << globalSystem.exportMacro << thestr << sym->mCapitalizedName << "Ast: public " \
         << sym->mCapitalizedName << "Ast" \
-        << " {" << Qt::endl \
-        << "enum { KIND =" << thestr << sym->mCapitalizedName << "Kind };" << Qt::endl \
-        << "AstNode *first;" << Qt::endl \
+        << " {" << endl \
+        << "enum { KIND =" << thestr << sym->mCapitalizedName << "Kind };" << endl \
+        << "AstNode *first;" << endl \
         << thestr << sym->mCapitalizedName << "Ast(" \
-        << ")" << Qt::endl \
-        << "{\n}" << Qt::endl \
+        << ")" << endl \
+        << "{\n}" << endl \
         << thestr << sym->mCapitalizedName << "Ast(" \
-        << "AstNode *first)" << Qt::endl \
-        << ": first(first)" << Qt::endl \
-        << "{\n}" << Qt::endl;\
+        << "AstNode *first)" << endl \
+        << ": first(first)" << endl \
+        << "{\n}" << endl;\
         mGenerated.insert(thestr);
         
     O(" Prefix")
 
     DefaultVisitor::visitEvolve(node);
       
-    out << "};" << Qt::endl << Qt::endl;
+    out << "};" << endl << endl;
     O(" Postfix")
 
     DefaultVisitor::visitEvolve(node);
       
-    out << "};" << Qt::endl << Qt::endl;
+    out << "};" << endl << endl;
     
     #undef O
     
     out << "struct " << globalSystem.exportMacro << " Binary" << sym->mCapitalizedName << "Ast: public "
         << sym->mCapitalizedName << "Ast"
-        << " {" << Qt::endl
-        << "enum { KIND = Binary" << sym->mCapitalizedName << "Kind };" << Qt::endl
-        << "AstNode *first;" << Qt::endl
-        << "AstNode *second;" << Qt::endl
+        << " {" << endl
+        << "enum { KIND = Binary" << sym->mCapitalizedName << "Kind };" << endl
+        << "AstNode *first;" << endl
+        << "AstNode *second;" << endl
         << "Binary" << sym->mCapitalizedName << "Ast("
-        << "AstNode *first)" << Qt::endl
-        << ": first(first)" << Qt::endl
-        << "{\n}" << Qt::endl;
+        << "AstNode *first)" << endl
+        << ": first(first)" << endl
+        << "{\n}" << endl;
     DefaultVisitor::visitEvolve(node);
-    out << "};" << Qt::endl << Qt::endl;
+    out << "};" << endl << endl;
     
     out << "struct " << globalSystem.exportMacro << " Ternary" << sym->mCapitalizedName << "Ast: public "
         << sym->mCapitalizedName << "Ast"
-        << " {" << Qt::endl
-        << "enum { KIND = Ternary" << sym->mCapitalizedName << "Kind };" << Qt::endl
-        << "AstNode *first;" << Qt::endl
-        << "AstNode *second;" << Qt::endl
-        << "AstNode *third;" << Qt::endl
+        << " {" << endl
+        << "enum { KIND = Ternary" << sym->mCapitalizedName << "Kind };" << endl
+        << "AstNode *first;" << endl
+        << "AstNode *second;" << endl
+        << "AstNode *third;" << endl
         << "Ternary" << sym->mCapitalizedName << "Ast("
-        << "AstNode *first)" << Qt::endl
-        << ": first(first)" << Qt::endl
-        << "{\n}" << Qt::endl;
+        << "AstNode *first)" << endl
+        << ": first(first)" << endl
+        << "{\n}" << endl;
     DefaultVisitor::visitEvolve(node);
-    out << "};" << Qt::endl << Qt::endl;
+    out << "};" << endl << endl;
   }
   else
   {
     out << "struct " << globalSystem.exportMacro << " " << sym->mCapitalizedName << "Ast: public "
         << globalSystem.astBaseClasses.value(sym->mName, "AstNode")
-        << " {" << Qt::endl
-        << "enum { KIND = " << sym->mCapitalizedName << "Kind };" << Qt::endl << Qt::endl;
+        << " {" << endl
+        << "enum { KIND = " << sym->mCapitalizedName << "Kind };" << endl << endl;
 
     DefaultVisitor::visitEvolve(node);
 
-    out << "};" << Qt::endl << Qt::endl;
+    out << "};" << endl << endl;
   }
 }
 
@@ -209,7 +209,7 @@ void GenerateAstRule::visitVariableDeclaration(Model::VariableDeclarationItem *n
     {
       gen_var_decl(node);
 
-      out << ";" << Qt::endl;
+      out << ";" << endl;
 
       mNames.insert(node->mName);
     }
@@ -229,11 +229,11 @@ void GenerateAstRule::visitAlternative(Model::AlternativeItem *node)
 #if defined(AST_OPT_BRANCH)
   if (!in_alternative)
     {
-      out << "union" << Qt::endl
-          << "{" << Qt::endl
-          << "AstNode *__nodeCast;" << Qt::endl
-          << "qint64 __token_cast;" << Qt::endl
-          << Qt::endl;
+      out << "union" << endl
+          << "{" << endl
+          << "AstNode *__nodeCast;" << endl
+          << "qint64 __token_cast;" << endl
+          << endl;
     }
 #endif
 
@@ -241,7 +241,7 @@ void GenerateAstRule::visitAlternative(Model::AlternativeItem *node)
 
 #if defined(AST_OPT_BRANCH)
   if (!in_alternative)
-    out << "}; // union" << Qt::endl;
+    out << "}; // union" << endl;
 #endif
 
   switchAlternative(in_alternative);
@@ -254,8 +254,8 @@ void GenerateAstRule::visitCons(Model::ConsItem *node)
 #if defined(AST_OPT_BRANCH)
   if (!in_cons)
     {
-      out << "struct" << Qt::endl
-          << "{" << Qt::endl;
+      out << "struct" << endl
+          << "{" << endl;
     }
 #endif
 
@@ -264,7 +264,7 @@ void GenerateAstRule::visitCons(Model::ConsItem *node)
 #if defined(AST_OPT_BRANCH)
   if (!in_cons)
     {
-      out << "}; // struct" << Qt::endl;
+      out << "}; // struct" << endl;
       mNames.clear();
     }
 #endif
@@ -294,7 +294,7 @@ void GenerateAstFwd::operator()()
        it != globalSystem.symbols.end(); ++it)
   {
     Model::SymbolItem *sym = *it;
-    #define O(name) out << "struct " << name << "Ast;" << Qt::endl;
+    #define O(name) out << "struct " << name << "Ast;" << endl;
     O(sym->mCapitalizedName)
     if(isOperatorSymbol(sym))
     {
diff --git a/kdev-pg/kdev-pg-beautifier.cpp b/kdev-pg/kdev-pg-beautifier.cpp
index 746a869..9799664 100644
--- a/kdev-pg/kdev-pg-beautifier.cpp
+++ b/kdev-pg/kdev-pg-beautifier.cpp
@@ -86,7 +86,7 @@ void format(QTextStream& in, const QString& oname)
 
   do
   {
-    out << QString::fromStdString( f.nextLine() ) << Qt::endl;
+    out << QString::fromStdString( f.nextLine() ) << endl;
   }
   while (f.hasMoreLines());
 }
diff --git a/kdev-pg/kdev-pg-checker.cpp b/kdev-pg/kdev-pg-checker.cpp
index 25a9e36..23395cd 100644
--- a/kdev-pg/kdev-pg-checker.cpp
+++ b/kdev-pg/kdev-pg-checker.cpp
@@ -71,10 +71,10 @@ void FirstFirstConflictChecker::check(Model::Node *left, Model::Node *right)
       QTextStream& str( checkOut );
       PrettyPrinter printer(str);
       str << "** WARNING found FIRST/FIRST conflict in "
-                << mSymbol->mName << ":" << Qt::endl << "\tRule ``";
+                << mSymbol->mName << ":" << endl << "\tRule ``";
       printer(mCheckedNode);
       //      p(left);
-      str << "''" << Qt::endl << "\tTerminals [" << Qt::endl;
+      str << "''" << endl << "\tTerminals [" << endl;
 
       QSet<Model::Node*>::iterator it = U.begin();
       while (it != U.end())
@@ -84,9 +84,9 @@ void FirstFirstConflictChecker::check(Model::Node *left, Model::Node *right)
           str << "\t\t" << n;
           if (it != U.end())
             str << ", ";
-          str << Qt::endl;
+          str << endl;
         }
-      str << "\t]" << Qt::endl << Qt::endl;
+      str << "\t]" << endl << endl;
       ProblemSummaryPrinter::reportFirstFirstConflict();
     }
 }
@@ -139,12 +139,12 @@ void FirstFollowConflictChecker::check(Model::Node *node, Model::Node *sym)
 #ifdef FOLLOW_CHECKER_DEBUG
       str << "(" << (uint*)mSymbol << ")";
 #endif
-      str << ":" << Qt::endl << "\tRule ``";
+      str << ":" << endl << "\tRule ``";
       p(node);
 #ifdef FOLLOW_CHECKER_DEBUG
       str << " [[" << (uint*)node << "]]";
 #endif
-      str << "''" << Qt::endl << "\tTerminals [" << Qt::endl;
+      str << "''" << endl << "\tTerminals [" << endl;
 
       QSet<Model::Node*>::iterator it = U.begin();
       while (it != U.end())
@@ -153,12 +153,12 @@ void FirstFollowConflictChecker::check(Model::Node *node, Model::Node *sym)
           if (isZero(n))
             continue;
 
-          str << "\t\t" << ((Model::TerminalItem*)n)->mName << ": conflicts with the FIRST set of: " << Qt::endl;
+          str << "\t\t" << ((Model::TerminalItem*)n)->mName << ": conflicts with the FIRST set of: " << endl;
           FollowDepChecker(n).check(node);
           if (it != U.end())
-            str << "," << Qt::endl;
+            str << "," << endl;
         }
-      str << "\t]" << Qt::endl << Qt::endl;
+      str << "\t]" << endl << endl;
       ProblemSummaryPrinter::reportFirstFollowConflict();
     }
 }
@@ -177,7 +177,7 @@ void FollowDepChecker::check(Model::Node *node)
   PrettyPrinter p(str);
 #ifdef FOLLOW_CHECKER_DEBUG
   str << "[["; p(node); str << " | " << (uint*)node << "]] ";
-  str << "{" << node->kind << "}" << Qt::endl;
+  str << "{" << node->kind << "}" << endl;
 #endif
   for (int i = 0; i != FD.size(); ++i) // no iterator → modifiable
     {
@@ -216,7 +216,7 @@ void FollowDepChecker::check(Model::Node *node)
           p(node);
           str << " \" )";
   #endif
-          str << ", " << Qt::endl;
+          str << ", " << endl;
         }
       }
     }
@@ -233,9 +233,9 @@ void FollowDepChecker::check(Model::Node *node)
     {
       World::NodeSet first = globalSystem.first(FLD[i]);
 #ifdef FOLLOW_CHECKER_DEBUG
-      str << Qt::endl << "\t\t" << "in ";
+      str << endl << "\t\t" << "in ";
       p(FLD[i]);
-      str << Qt::endl;
+      str << endl;
 #endif
       check(FLD[i]);
     }
@@ -300,7 +300,7 @@ void UndefinedSymbolChecker::visitSymbol(Model::SymbolItem *node)
   if (globalSystem.env.count(node) == 0)
     {
       checkOut << "** ERROR Undefined symbol ``" << node->mName << "'' in "
-                << mSymbol->mName << Qt::endl;
+                << mSymbol->mName << endl;
       ProblemSummaryPrinter::reportError();
     }
 }
@@ -318,7 +318,7 @@ void UndefinedSymbolChecker::visitVariableDeclaration(Model::VariableDeclaration
     {
       checkOut << "** ERROR Undefined symbol ``" << name
                 << "'' (rule parameter declaration) in "
-                << mSymbol->mName << Qt::endl;
+                << mSymbol->mName << endl;
       ProblemSummaryPrinter::reportError();
       return;
     }
@@ -329,7 +329,7 @@ void UndefinedSymbolChecker::visitVariableDeclaration(Model::VariableDeclaration
     {
       checkOut << "** ERROR Undefined symbol ``" << node->mName
                 << "'' (rule parameter declaration) in "
-                << mSymbol->mName << Qt::endl;
+                << mSymbol->mName << endl;
       ProblemSummaryPrinter::reportError();
     }
 }
@@ -353,7 +353,7 @@ void UndefinedTokenChecker::visitTerminal(Model::TerminalItem *node)
   if (globalSystem.terminals.find(name) == globalSystem.terminals.end())
     {
       checkOut << "** ERROR Undefined token ``" << node->mName << "'' in "
-                << mSymbol->mName << Qt::endl;
+                << mSymbol->mName << endl;
       ProblemSummaryPrinter::reportError();
     }
 }
@@ -378,7 +378,7 @@ void EmptyFirstChecker::visitSymbol(Model::SymbolItem *node)
   if (globalSystem.first(node).empty())
   {
     checkOut << "** ERROR Empty FIRST set for ``" << node->mName
-              << "''" << Qt::endl;
+              << "''" << endl;
     ProblemSummaryPrinter::reportError();
   }
 }
@@ -392,7 +392,7 @@ void EmptyOperatorChecker::visitOperator(Model::OperatorItem *node)
 {
   if (reducesToEpsilon((node->mBase->mSymbol)))
   {
-    checkOut << "** ERROR Base symbol ``" << node->mBase->mSymbol->mName << "'' for operator ``" << node->mName << "'' reduces to zero" << Qt::endl;
+    checkOut << "** ERROR Base symbol ``" << node->mBase->mSymbol->mName << "'' for operator ``" << node->mName << "'' reduces to zero" << endl;
     ProblemSummaryPrinter::reportError();
   }
 }
@@ -403,19 +403,19 @@ void ProblemSummaryPrinter::operator()()
     checkOut << (mFirstFirstConflictCount + mFirstFollowConflictCount)
               << " conflicts total: " << mFirstFollowConflictCount
               << " FIRST/FOLLOW conflicts, " << mFirstFirstConflictCount
-              << " FIRST/FIRST conflicts." << Qt::endl;
+              << " FIRST/FIRST conflicts." << endl;
 
   if (mErrorCount > 0)
     {
       checkOut << mErrorCount << " fatal errors found, exiting."
-                << Qt::endl;
+                << endl;
       exit(EXIT_FAILURE);
     }
     
   if (KDevPG::globalSystem.conflictHandling == KDevPG::World::Strict && mFirstFirstConflictCount + mFirstFollowConflictCount > 0)
     {
       checkOut << "Conflicts found, exiting."
-                << Qt::endl;
+                << endl;
       exit(EXIT_FAILURE);
     }
 }
diff --git a/kdev-pg/kdev-pg-code-gen.cpp b/kdev-pg/kdev-pg-code-gen.cpp
index 53446ba..7a5d8aa 100644
--- a/kdev-pg/kdev-pg-code-gen.cpp
+++ b/kdev-pg/kdev-pg-code-gen.cpp
@@ -38,7 +38,7 @@ namespace KDevPG
     foreach (const QString &token, tokens)
       {
         if (!initial)
-          out << Qt::endl << "|| ";
+          out << endl << "|| ";
 
         out << "yytoken == Token_" << token;
         initial = false;
@@ -101,39 +101,39 @@ namespace KDevPG
         sprintf(__var, "__node_%d", __id);
         ++__id;
 
-        out << capSymbolName << "Ast *" << __var << " = nullptr;" << Qt::endl
+        out << capSymbolName << "Ast *" << __var << " = nullptr;" << endl
             << "if (!parse" << capSymbolName << "(&" << __var;
 
         if (!node->mArguments.isEmpty())
             out << ", " << node->mArguments;
 
-        out << "))" << Qt::endl;
+        out << "))" << endl;
       }
     else
       {
         out << "if (!parse" << capSymbolName << "(" << node->mArguments << "))"
-            << Qt::endl;
+            << endl;
       }
 
     if (!catch_id)
       {
-        out << "{" << Qt::endl;
+        out << "{" << endl;
 
         if (globalSystem.needStateManagement)
-          out <<   "if (!mBlockErrors) {" << Qt::endl;
+          out <<   "if (!mBlockErrors) {" << endl;
 
         out << "expectedSymbol(AstNode::" << capSymbolName << "Kind"
-            << ", QStringLiteral(\"" << symbol_name << "\")" << ");" << Qt::endl;
+            << ", QStringLiteral(\"" << symbol_name << "\")" << ");" << endl;
 
         if (globalSystem.needStateManagement)
-          out << "}" << Qt::endl;
+          out << "}" << endl;
 
-        out << "return false;" << Qt::endl
-            << "}" << Qt::endl;
+        out << "return false;" << endl
+            << "}" << endl;
       }
     else
       {
-        out << "{ goto __catch_" << catch_id << "; }" << Qt::endl;
+        out << "{ goto __catch_" << catch_id << "; }" << endl;
       }
 
     return __var;
@@ -141,26 +141,26 @@ namespace KDevPG
 
   void generateTokenTest(Model::TerminalItem *node, int catch_id, QTextStream& out)
   {
-    out << "if (yytoken != Token_" << node->mName << ")" << Qt::endl;
+    out << "if (yytoken != Token_" << node->mName << ")" << endl;
     if (!catch_id)
       {
-        out << "{" << Qt::endl;
+        out << "{" << endl;
 
         if (globalSystem.needStateManagement)
-          out << "if (!mBlockErrors) {" << Qt::endl;
+          out << "if (!mBlockErrors) {" << endl;
 
         out << "expectedToken(yytoken, Token_" << node->mName
-            << ", QStringLiteral(\"" << node->mDescription << "\"));" << Qt::endl;
+            << ", QStringLiteral(\"" << node->mDescription << "\"));" << endl;
 
         if (globalSystem.needStateManagement)
-          out << "}" << Qt::endl;
+          out << "}" << endl;
 
-        out << "return false;" << Qt::endl
-            << "}" << Qt::endl;
+        out << "return false;" << endl
+            << "}" << endl;
       }
     else
       {
-        out << "goto __catch_" << catch_id << ";" << Qt::endl;
+        out << "goto __catch_" << catch_id << ";" << endl;
       }
   }
 
@@ -170,9 +170,9 @@ namespace KDevPG
     Model::Node *item = globalSystem.zero();
 
     out << "if (try_startToken_" << catch_id
-        << " == tokenStream->index() - 1  && yytoken != Token_EOF)" << Qt::endl
-        << "yylex();" << Qt::endl
-        << Qt::endl;
+        << " == tokenStream->index() - 1  && yytoken != Token_EOF)" << endl
+        << "yylex();" << endl
+        << endl;
 
     out << "while (yytoken != Token_EOF";
 
@@ -183,11 +183,11 @@ namespace KDevPG
         ++it;
 
         if (Model::TerminalItem *t = nodeCast<Model::TerminalItem*>(item))
-          out << Qt::endl << "&& yytoken != Token_" << t->mName;
+          out << endl << "&& yytoken != Token_" << t->mName;
       }
 
-    out << ")" << Qt::endl
-        << "{ yylex(); }" << Qt::endl;
+    out << ")" << endl
+        << "{ yylex(); }" << endl;
   }
 
 
@@ -219,26 +219,26 @@ void CodeGenerator::visitTerminal(Model::TerminalItem *node)
 {
   generateTokenTest(node, mCurrentCatchId, out);
 
-  out << "yylex();" << Qt::endl
-      << Qt::endl;
+  out << "yylex();" << endl
+      << endl;
 }
 
 void CodeGenerator::visitPlus(Model::PlusItem *node)
 {
-  out << "do {" << Qt::endl;
+  out << "do {" << endl;
   visitNode(node->mItem);
   out << "} while (";
   generateTestCondition(node, out);
-  out << ");" << Qt::endl;
+  out << ");" << endl;
 }
 
 void CodeGenerator::visitStar(Model::StarItem *node)
 {
   out << "while (";
   generateTestCondition(node, out);
-  out << ") {" << Qt::endl;
+  out << ") {" << endl;
   visitNode(node->mItem);
-  out << "}" << Qt::endl;
+  out << "}" << endl;
 }
 
 void CodeGenerator::visitAction(Model::ActionItem *node)
@@ -293,7 +293,7 @@ void CodeGenerator::visitAlternative(Model::AlternativeItem *node)
       if (cond)
         out << ") && (" << cond->mCode << ")";
 
-      out << ") {" << Qt::endl;
+      out << ") {" << endl;
       visitNode(n);
       out << "}";
 
@@ -301,14 +301,14 @@ void CodeGenerator::visitAlternative(Model::AlternativeItem *node)
         out << "else ";
       else
         {
-          out << "else {" << Qt::endl;
+          out << "else {" << endl;
 
           if (!mCurrentCatchId)
-              out << "return false;" << Qt::endl;
+              out << "return false;" << endl;
           else
               out << "goto __catch_" << mCurrentCatchId << ";";
 
-          out << "}" << Qt::endl;
+          out << "}" << endl;
         }
     }
 }
@@ -338,7 +338,7 @@ void CodeGenerator::visitEvolve(Model::EvolveItem *node)
   if (cond)
     out << ") && (" << cond->mCode << ")";
 
-  out << ") {" << Qt::endl;
+  out << ") {" << endl;
 
   GenerateLocalDeclarations gen_locals(out, mNames);
   gen_locals(node->mItem);
@@ -348,9 +348,9 @@ void CodeGenerator::visitEvolve(Model::EvolveItem *node)
   visitNode(node->mItem);
 
   if (globalSystem.start.contains(node->mSymbol))
-    out << "if (Token_EOF != yytoken) { return false; }" << Qt::endl;
+    out << "if (Token_EOF != yytoken) { return false; }" << endl;
 
-  out << "}" << Qt::endl;
+  out << "}" << endl;
 }
 
 void CodeGenerator::visitTryCatch(Model::TryCatchItem *node)
@@ -361,45 +361,45 @@ void CodeGenerator::visitTryCatch(Model::TryCatchItem *node)
   if (node->mCatchItem) // node is a try/rollback block
     {
       out << "bool blockErrors_" << mCurrentCatchId
-          << " = blockErrors(true);" << Qt::endl;
+          << " = blockErrors(true);" << endl;
     }
 
   out << "qint64 try_startToken_" << mCurrentCatchId
-      << " = tokenStream->index() - 1;" << Qt::endl;
+      << " = tokenStream->index() - 1;" << endl;
 
   if (!node->mUnsafe)
     {
       out << "ParserState *try_startState_" << mCurrentCatchId
-          << " = copyCurrentState();" << Qt::endl;
+          << " = copyCurrentState();" << endl;
     }
 
-  out << "{" << Qt::endl;
+  out << "{" << endl;
   visitNode(node->mTryItem);
-  out << "}" << Qt::endl;
+  out << "}" << endl;
 
   if (node->mCatchItem)
     {
-      out << "blockErrors(blockErrors_" << mCurrentCatchId << ");" << Qt::endl;
+      out << "blockErrors(blockErrors_" << mCurrentCatchId << ");" << endl;
     }
 
   if (!node->mUnsafe)
     {
-      out << "if (try_startState_" << mCurrentCatchId << ")" << Qt::endl
-          << "delete try_startState_" <<  mCurrentCatchId << ";" << Qt::endl
-          << Qt::endl;
+      out << "if (try_startState_" << mCurrentCatchId << ")" << endl
+          << "delete try_startState_" <<  mCurrentCatchId << ";" << endl
+          << endl;
     }
 
-  out << "if (false) // the only way to enter here is using goto" << Qt::endl
-      << "{" << Qt::endl
-      << "__catch_" << mCurrentCatchId << ":" << Qt::endl;
+  out << "if (false) // the only way to enter here is using goto" << endl
+      << "{" << endl
+      << "__catch_" << mCurrentCatchId << ":" << endl;
 
   if (!node->mUnsafe)
     {
-      out << "if (try_startState_" << mCurrentCatchId << ")" << Qt::endl
-          << "{" << Qt::endl
-          << "restoreState(try_startState_" <<  mCurrentCatchId << ");" << Qt::endl
-          << "delete try_startState_" <<  mCurrentCatchId << ";" << Qt::endl
-          << "}" << Qt::endl;
+      out << "if (try_startState_" << mCurrentCatchId << ")" << endl
+          << "{" << endl
+          << "restoreState(try_startState_" <<  mCurrentCatchId << ");" << endl
+          << "delete try_startState_" <<  mCurrentCatchId << ";" << endl
+          << "}" << endl;
     }
 
   if (!node->mCatchItem)
@@ -409,16 +409,16 @@ void CodeGenerator::visitTryCatch(Model::TryCatchItem *node)
     }
   else
     {
-      out << "blockErrors(blockErrors_" << mCurrentCatchId << ");" << Qt::endl
-          << "rewind(try_startToken_" << mCurrentCatchId << ");" << Qt::endl
-          << Qt::endl;
+      out << "blockErrors(blockErrors_" << mCurrentCatchId << ");" << endl
+          << "rewind(try_startToken_" << mCurrentCatchId << ");" << endl
+          << endl;
 
       setCatchId(previous_catch_id);
       visitNode(node->mCatchItem);
     }
 
-  out << "}" << Qt::endl
-      << Qt::endl;
+  out << "}" << endl
+      << endl;
 }
 
 int CodeGenerator::setCatchId(int catch_id)
@@ -458,9 +458,9 @@ void CodeGenerator::visitAnnotation(Model::AnnotationItem *node)
           target += "Sequence";
 
           out << target << " = snoc(" << target << ", "
-              << "tokenStream->index() - 1, memoryPool);" << Qt::endl
-              << "yylex();" << Qt::endl
-              << Qt::endl;
+              << "tokenStream->index() - 1, memoryPool);" << endl
+              << "yylex();" << endl
+              << endl;
         }
       else
         {
@@ -468,9 +468,9 @@ void CodeGenerator::visitAnnotation(Model::AnnotationItem *node)
             out << "(*yynode)->";
 
           out << node->mDeclaration->mName
-              << " = tokenStream->index() - 1;" << Qt::endl
-              << "yylex();" << Qt::endl
-              << Qt::endl;
+              << " = tokenStream->index() - 1;" << endl
+              << "yylex();" << endl
+              << endl;
         }
     }
   else if (Model::NonTerminalItem *nt = nodeCast<Model::NonTerminalItem*>(node->mItem))
@@ -529,8 +529,8 @@ void CodeGenerator::visitAnnotation(Model::AnnotationItem *node)
 
       if (check_startToken == true)
         {
-          out << "if (" << __var << "->startToken < (*yynode)->startToken)" << Qt::endl
-              << "(*yynode)->startToken = " << __var << "->startToken;" << Qt::endl;
+          out << "if (" << __var << "->startToken < (*yynode)->startToken)" << endl
+              << "(*yynode)->startToken = " << __var << "->startToken;" << endl;
         }
 
       QString target;
@@ -544,13 +544,13 @@ void CodeGenerator::visitAnnotation(Model::AnnotationItem *node)
           target += "Sequence";
 
           out << target << " = " << "snoc(" << target << ", "
-              << __var << ", memoryPool);" << Qt::endl
-              << Qt::endl;
+              << __var << ", memoryPool);" << endl
+              << endl;
         }
       else
         {
-          out << target << " = " << __var << ";" << Qt::endl
-              << Qt::endl;
+          out << target << " = " << __var << ";" << endl
+              << endl;
         }
     }
   else
@@ -729,7 +729,7 @@ void CodeGenerator::visitOperator(Model::OperatorItem *node)
            "opStack.push_back(OperatorStackItem(node, priority));"
            "node->startToken = tokenStream->index() - 1;"
            "yylex();"
-           "}" << Qt::endl;
+           "}" << endl;
   }
   for(auto i = node->mParen.begin(); i != node->mParen.end(); ++i)
   {
@@ -761,7 +761,7 @@ if(!opStack.isEmpty())\
 {\
   void *last = opStack.last().n;\
   if(reinterpret_cast<Prefix" << nodeType << "*>(last)->first == nullptr)\n\
-    reinterpret_cast<Prefix" << nodeType << "*>(last)->first = " << __var << ";" << Qt::endl; \
+    reinterpret_cast<Prefix" << nodeType << "*>(last)->first = " << __var << ";" << endl; \
   out << "else if(reinterpret_cast<Binary" << nodeType << "*>(last)->second == nullptr)\n\
   reinterpret_cast<Binary" << nodeType << "*>(last)->second = " << __var << ";\
   else\nreinterpret_cast<Ternary" << nodeType << "*>(last)->third = " << __var << ";}\
@@ -797,7 +797,7 @@ void GenerateForwardParserRule::operator()(QPair<QString, Model::SymbolItem*> co
   GenerateParseMethodSignature gen_signature(out, nullptr);
   gen_signature(sym);
 
-  out << ");" << Qt::endl;
+  out << ");" << endl;
 }
 
 void GenerateParserRule::operator()(QPair<QString, Model::SymbolItem*> const &__it)
@@ -811,21 +811,21 @@ void GenerateParserRule::operator()(QPair<QString, Model::SymbolItem*> const &__
   GenerateParseMethodSignature gen_signature(out, &mNames);
   gen_signature(sym);
 
-  out << ")" << Qt::endl
-      << "{" << Qt::endl;
+  out << ")" << endl
+      << "{" << endl;
 
   if (globalSystem.generateAst)
     {
       if(isOperatorSymbol(sym))
-        out << "QVector<OperatorStackItem> opStack;" << Qt::endl;
+        out << "QVector<OperatorStackItem> opStack;" << endl;
       else
       {
-        out << "*yynode = create<" << sym->mCapitalizedName << "Ast" << ">();" << Qt::endl << Qt::endl
-            << "(*yynode)->startToken = tokenStream->index() - 1;" << Qt::endl;
+        out << "*yynode = create<" << sym->mCapitalizedName << "Ast" << ">();" << endl << endl
+            << "(*yynode)->startToken = tokenStream->index() - 1;" << endl;
         //Generate initialization for this ast nodes token-members using -1 as invalid value
         GenerateTokenVariableInitialization gentokenvar( out );
         gentokenvar(sym);
-        out << Qt::endl;
+        out << endl;
       }
     }
 
@@ -858,8 +858,8 @@ void GenerateParserRule::operator()(QPair<QString, Model::SymbolItem*> const &__
       initial = false;
     }
 
-  out << "else" << Qt::endl << "{ return false; }" << Qt::endl
-      << Qt::endl;
+  out << "else" << endl << "{ return false; }" << endl
+      << endl;
 
 
   if (globalSystem.generateAst)
@@ -874,18 +874,18 @@ void GenerateParserRule::operator()(QPair<QString, Model::SymbolItem*> const &__
                "if(olast)\n"
                "last->endToken = olast->endToken;"
                "opStack.pop_back();"
-               "}" << Qt::endl;
+               "}" << endl;
       }
       else
       {
-        out << "(*yynode)->endToken = tokenStream->index() - 2;" << Qt::endl
-            << Qt::endl;
+        out << "(*yynode)->endToken = tokenStream->index() - 2;" << endl
+            << endl;
       }
     }
 
-  out << "return true;" << Qt::endl
-      << "}" << Qt::endl
-      << Qt::endl;
+  out << "return true;" << endl
+      << "}" << endl
+      << endl;
 }
 
 void GenerateLocalDeclarations::operator()(Model::Node *node)
@@ -911,7 +911,7 @@ void GenerateLocalDeclarations::visitVariableDeclaration(Model::VariableDeclarat
               out << " = 0";
             }
 
-          out << ";" << Qt::endl << Qt::endl;
+          out << ";" << endl << endl;
 
           if (mNames != nullptr)
             mNames->insert(node->mName);
@@ -926,7 +926,7 @@ void GenerateLocalDeclarations::visitVariableDeclaration(Model::VariableDeclarat
       QString sequence_suffix = (node->mIsSequence) ? "Sequence" : "";
 
       out << "(*yynode)->" << node->mName << sequence_suffix << " = "
-          << node->mName << sequence_suffix << ";" << Qt::endl;
+          << node->mName << sequence_suffix << ";" << endl;
 
       if (node->mVariableType != Model::VariableDeclarationItem::TypeVariable)
         {
@@ -946,9 +946,9 @@ void GenerateLocalDeclarations::visitVariableDeclaration(Model::VariableDeclarat
               out << node->mName << sequence_suffix << " && ";
             }
 
-          out << argument_startToken << " < (*yynode)->startToken)" << Qt::endl
+          out << argument_startToken << " < (*yynode)->startToken)" << endl
               << "(*yynode)->startToken = " << argument_startToken << ";"
-            << Qt::endl << Qt::endl;
+            << endl << endl;
         }
     }
 
@@ -1049,13 +1049,13 @@ void GenerateMemberCode::operator()(Settings::MemberItem* m)
   if ((mKindMask & m->mMemberKind) != 0)
     {
       if (m->mMemberKind == Settings::MemberItem::PublicDeclaration)
-        out << "public:" << Qt::endl;
+        out << "public:" << endl;
       else if (m->mMemberKind == Settings::MemberItem::ProtectedDeclaration)
-        out << "protected:" << Qt::endl;
+        out << "protected:" << endl;
       else if (m->mMemberKind == Settings::MemberItem::PrivateDeclaration)
-        out << "private:" << Qt::endl;
+        out << "private:" << endl;
 
-      out << m->mCode << Qt::endl;
+      out << m->mCode << endl;
     }
 }
 
@@ -1065,10 +1065,10 @@ void GenerateParserDeclarations::operator()()
   if(!globalSystem.parserBaseClass.isEmpty())
     out << "public " << globalSystem.parserBaseClass << ", ";
   out << "public TokenTypeWrapper\n{"
-      << "public:" << Qt::endl
-      << "typedef " << globalSystem.tokenStream << "::Token Token;" << Qt::endl
-      << globalSystem.tokenStream << " *tokenStream;" << Qt::endl
-      << "int yytoken;" << Qt::endl;
+      << "public:" << endl
+      << "typedef " << globalSystem.tokenStream << "::Token Token;" << endl
+      << globalSystem.tokenStream << " *tokenStream;" << endl
+      << "int yytoken;" << endl;
   if(globalSystem.needOperatorStack)
     out << "struct OperatorStackItem{AstNode *n; int unsigned p;"
            "inline OperatorStackItem(AstNode *n, int unsigned p)\n"
@@ -1076,66 +1076,66 @@ void GenerateParserDeclarations::operator()()
            "inline OperatorStackItem()\n{}\n"
            "inline OperatorStackItem(const OperatorStackItem& o)\n"
            ": n(o.n), p(o.p)\n"
-           "{}\n};" << Qt::endl;
-  out << Qt::endl
-      << "inline Token LA(qint64 k = 1) const" << Qt::endl
+           "{}\n};" << endl;
+  out << endl
+      << "inline Token LA(qint64 k = 1) const" << endl
       << "{ qint64 idx = tokenStream->index() - 1 + k - 1; qint64 oldidx = tokenStream->index(); tokenStream->rewind(tokenStream->size()); while(idx >= tokenStream->size()) tokenStream->read(); tokenStream->rewind(oldidx); return tokenStream->at(idx); }"
-      << Qt::endl
-      << "inline int yylex() {" << Qt::endl
-      << "yytoken = tokenStream->read().kind; return yytoken;" << Qt::endl
-      << "}" << Qt::endl
-      << "inline void rewind(qint64 index) {" << Qt::endl
-      << "tokenStream->rewind(index);" << Qt::endl
-      << "yylex();" << Qt::endl
-      << "}" << Qt::endl
-      << Qt::endl;
-
-  out << "// token stream" << Qt::endl
-      << "void setTokenStream(" << globalSystem.tokenStream << " *s)" << Qt::endl
-      << "{ tokenStream = s; }" << Qt::endl
-      << Qt::endl;
-
-  out << "// error handling" << Qt::endl
-      << "void expectedSymbol(int kind, const QString& name);" << Qt::endl
-      << "void expectedToken(int kind, qint64 token, const QString& name);" << Qt::endl
-      << Qt::endl
-      << "bool mBlockErrors;" << Qt::endl
-      << "inline bool blockErrors(bool block) {" << Qt::endl
-      << "bool previous = mBlockErrors;" << Qt::endl
-      << "mBlockErrors = block;" << Qt::endl
-      << "return previous;" << Qt::endl
-      << "}" << Qt::endl;
-
-  out << Qt::endl;
+      << endl
+      << "inline int yylex() {" << endl
+      << "yytoken = tokenStream->read().kind; return yytoken;" << endl
+      << "}" << endl
+      << "inline void rewind(qint64 index) {" << endl
+      << "tokenStream->rewind(index);" << endl
+      << "yylex();" << endl
+      << "}" << endl
+      << endl;
+
+  out << "// token stream" << endl
+      << "void setTokenStream(" << globalSystem.tokenStream << " *s)" << endl
+      << "{ tokenStream = s; }" << endl
+      << endl;
+
+  out << "// error handling" << endl
+      << "void expectedSymbol(int kind, const QString& name);" << endl
+      << "void expectedToken(int kind, qint64 token, const QString& name);" << endl
+      << endl
+      << "bool mBlockErrors;" << endl
+      << "inline bool blockErrors(bool block) {" << endl
+      << "bool previous = mBlockErrors;" << endl
+      << "mBlockErrors = block;" << endl
+      << "return previous;" << endl
+      << "}" << endl;
+
+  out << endl;
 
     if (globalSystem.generateAst)
       {
-        out << "// memory pool" << Qt::endl
-            << "typedef KDevPG::MemoryPool memoryPoolType;" << Qt::endl
-            << Qt::endl
-            << "KDevPG::MemoryPool *memoryPool;" << Qt::endl
-            << "void setMemoryPool(KDevPG::MemoryPool *p)" << Qt::endl
-            << "{ memoryPool = p; }" << Qt::endl
-            << "template <class T>" << Qt::endl
-            << "inline T *create()" << Qt::endl
-            << "{" << Qt::endl
-            << "T *node = new (memoryPool->allocate(sizeof(T))) T();" << Qt::endl
-            << "node->kind = T::KIND;" << Qt::endl
-            << "return node;" << Qt::endl
-            << "}" << Qt::endl
-            << "template <class T>" << Qt::endl
-            << "inline T *create(AstNode *u)" << Qt::endl
-            << "{" << Qt::endl
-            << "T *node = new (memoryPool->allocate(sizeof(T))) T(u);" << Qt::endl
-            << "node->kind = T::KIND;" << Qt::endl
-            << "return node;" << Qt::endl
-            << "}" << Qt::endl
-            << Qt::endl;
+        out << "// memory pool" << endl
+            << "typedef KDevPG::MemoryPool memoryPoolType;" << endl
+            << endl
+            << "KDevPG::MemoryPool *memoryPool;" << endl
+            << "void setMemoryPool(KDevPG::MemoryPool *p)" << endl
+            << "{ memoryPool = p; }" << endl
+            << "template <class T>" << endl
+            << "inline T *create()" << endl
+            << "{" << endl
+            << "T *node = new (memoryPool->allocate(sizeof(T))) T();" << endl
+            << "node->kind = T::KIND;" << endl
+            << "return node;" << endl
+            << "}" << endl
+            << "template <class T>" << endl
+            << "inline T *create(AstNode *u)" << endl
+            << "{" << endl
+            << "T *node = new (memoryPool->allocate(sizeof(T))) T(u);" << endl
+            << "node->kind = T::KIND;" << endl
+            << "return node;" << endl
+            << "}" << endl
+            << endl;
       }
 
   if (globalSystem.parserclassMembers.declarations.empty() == false)
     {
-      out << "// user defined declarations:" << Qt::endl;
+      out << "// user defined declarations:" << endl;
       GenerateMemberCode gen(out, Settings::MemberItem::PublicDeclaration
                             | Settings::MemberItem::ProtectedDeclaration
                             | Settings::MemberItem::PrivateDeclaration);
@@ -1144,38 +1144,38 @@ void GenerateParserDeclarations::operator()()
       {
                     gen(*it);
       }
-      out << Qt::endl << "public:" << Qt::endl;
+      out << endl << "public:" << endl;
     }
 
   if (globalSystem.needStateManagement)
     {
-      out << "// The copyCurrentState() and restoreState() methods are only declared" << Qt::endl
-          << "// if you are using try blocks in your grammar, and have to be" << Qt::endl
-          << "// implemented by yourself, and you also have to define a" << Qt::endl
-          << "// \"struct ParserState\" inside a %parserclass directive." << Qt::endl
-          << Qt::endl
-          << "// This method should create a new ParserState object and return it," << Qt::endl
-          << "// or return 0 if no state variables need to be saved." << Qt::endl
-          << "ParserState *copyCurrentState();" << Qt::endl
-          << Qt::endl
-          << "// This method is only called for ParserState objects != 0" << Qt::endl
-          << "// and should restore the parser state given as argument." << Qt::endl
-          << "void restoreState(ParserState *state);" << Qt::endl;
+      out << "// The copyCurrentState() and restoreState() methods are only declared" << endl
+          << "// if you are using try blocks in your grammar, and have to be" << endl
+          << "// implemented by yourself, and you also have to define a" << endl
+          << "// \"struct ParserState\" inside a %parserclass directive." << endl
+          << endl
+          << "// This method should create a new ParserState object and return it," << endl
+          << "// or return 0 if no state variables need to be saved." << endl
+          << "ParserState *copyCurrentState();" << endl
+          << endl
+          << "// This method is only called for ParserState objects != 0" << endl
+          << "// and should restore the parser state given as argument." << endl
+          << "void restoreState(ParserState *state);" << endl;
     }
 
-  out << "Parser() {" << Qt::endl;
+  out << "Parser() {" << endl;
   if (globalSystem.generateAst)
     {
-      out << "memoryPool = nullptr;" << Qt::endl;
+      out << "memoryPool = nullptr;" << endl;
     }
 
-  out << "tokenStream = nullptr;" << Qt::endl
-      << "yytoken = Token_EOF;" << Qt::endl
-      << "mBlockErrors = false;" << Qt::endl;
+  out << "tokenStream = nullptr;" << endl
+      << "yytoken = Token_EOF;" << endl
+      << "mBlockErrors = false;" << endl;
 
   if (globalSystem.parserclassMembers.constructorCode.empty() == false)
     {
-      out << Qt::endl << "// user defined constructor code:" << Qt::endl;
+      out << endl << "// user defined constructor code:" << endl;
       GenerateMemberCode gen(out, Settings::MemberItem::ConstructorCode);
       for(QList<Settings::MemberItem*>::iterator it =
             globalSystem.parserclassMembers.constructorCode.begin();
@@ -1185,14 +1185,14 @@ void GenerateParserDeclarations::operator()()
       }
     }
 
-  out << "}" << Qt::endl << Qt::endl;
+  out << "}" << endl << endl;
 
   out << "virtual ~Parser() {";
 
   if (globalSystem.parserclassMembers.destructorCode.empty() == false)
     {
-      out << Qt::endl
-          << "// user defined destructor code:" << Qt::endl;
+      out << endl
+          << "// user defined destructor code:" << endl;
 
       GenerateMemberCode gen(out, Settings::MemberItem::DestructorCode);
       for(QList<Settings::MemberItem*>::iterator it = globalSystem.parserclassMembers.destructorCode.begin();
@@ -1202,7 +1202,7 @@ void GenerateParserDeclarations::operator()()
       }
     }
 
-  out << "}" << Qt::endl << Qt::endl;
+  out << "}" << endl << endl;
 
   GenerateForwardParserRule genfwdparserrule(out);
   for( World::SymbolSet::iterator it = globalSystem.symbols.begin();
@@ -1211,7 +1211,7 @@ void GenerateParserDeclarations::operator()()
     genfwdparserrule(qMakePair(it.key(), *it));
   }
 
-  out << "};" << Qt::endl;
+  out << "};" << endl;
 }
 
 void GenerateParserBits::operator()()
@@ -1243,25 +1243,25 @@ void GenerateTokenVariableInitialization::visitVariableDeclaration(Model::Variab
   if( node->mVariableType == Model::VariableDeclarationItem::TypeToken )
   {
     if( !node->mIsSequence )
-      out << "(*yynode)->" << node->mName << " = -1;" << Qt::endl;
+      out << "(*yynode)->" << node->mName << " = -1;" << endl;
   }
 }
 
 
 void GenerateTokenTexts::operator()()
 {
-  out << "switch (token) {" << Qt::endl;
+  out << "switch (token) {" << endl;
   for(World::TerminalSet::iterator it = globalSystem.terminals.begin(); it != globalSystem.terminals.end(); ++it )
   {
     Model::TerminalItem* t = *it;
-    out << "    case TokenTypeWrapper::Token_" << t->mName << ":" << Qt::endl;
+    out << "    case TokenTypeWrapper::Token_" << t->mName << ":" << endl;
     QString text = t->mDescription;
     text.replace('\\', "\\\\").replace('"', "\\\"");
-    out << "        return QStringLiteral(\"" <<  text << "\");" << Qt::endl;
+    out << "        return QStringLiteral(\"" <<  text << "\");" << endl;
   }
-  out << "    default:" << Qt::endl;
-  out << "        return QStringLiteral(\"unknown token\");" << Qt::endl;
-  out << "}" << Qt::endl;
+  out << "    default:" << endl;
+  out << "        return QStringLiteral(\"unknown token\");" << endl;
+  out << "}" << endl;
 }
 
 
diff --git a/kdev-pg/kdev-pg-debug-visitor-gen.cpp b/kdev-pg/kdev-pg-debug-visitor-gen.cpp
index d4394f7..deb964d 100644
--- a/kdev-pg/kdev-pg-debug-visitor-gen.cpp
+++ b/kdev-pg/kdev-pg-debug-visitor-gen.cpp
@@ -27,11 +27,11 @@ namespace KDevPG
 void GenerateDebugVisitor::operator()()
 {
   // the debug visitor class is header-only, thus we don't need an export macro here
-  out << "class DebugVisitor: public DefaultVisitor {" << Qt::endl
-      << "public:" << Qt::endl;
+  out << "class DebugVisitor: public DefaultVisitor {" << endl
+      << "public:" << endl;
 
-  out << "DebugVisitor("<< globalSystem.tokenStream << " *str, const QString& content = QString())" << Qt::endl;
-  out << "    : m_str(str), m_indent(0), m_content(content) {}" << Qt::endl;
+  out << "DebugVisitor("<< globalSystem.tokenStream << " *str, const QString& content = QString())" << endl;
+  out << "    : m_str(str), m_indent(0), m_content(content) {}" << endl;
   GenerateDebugVisitorRule gen(out);
   for( World::SymbolSet::iterator it = globalSystem.symbols.begin();
        it != globalSystem.symbols.end(); ++it )
@@ -39,57 +39,57 @@ void GenerateDebugVisitor::operator()()
     gen(qMakePair(it.key(), *it));
   }
 
-  out << "private:" << Qt::endl;
-  out << "void printToken(const AstNode *node, const QString &mType, const QString &mName = QString())" << Qt::endl;
-  out << "{" << Qt::endl;
-  out << "        KDevPG::TokenStream::Token startToken;" << Qt::endl;
-  out << "        KDevPG::TokenStream::Token endToken;" << Qt::endl;
-  out << "        qint64 line, column;" << Qt::endl;
-  out << "        const bool isValidStartToken = (0 <= node->startToken && node->startToken < m_str->size());" << Qt::endl;
-  out << "        QString startTokenString;" << Qt::endl;
-  out << "        if (isValidStartToken) {" << Qt::endl;
-  out << "            startToken = m_str->at(node->startToken);" << Qt::endl;
-  out << "            m_str->startPosition(node->startToken, &line, &column);" << Qt::endl;
-  out << "            startTokenString = QString::number(startToken.begin) + QLatin1String(\", \") + QString::number(line) + QLatin1String(\", \") + QString::number(column);" << Qt::endl;
-  out << "        } else {" << Qt::endl;
-  out << "            startTokenString = QLatin1String(\"invalid token index: \") + QString::number(node->startToken);" << Qt::endl;
-  out << "        }" << Qt::endl;
-  out << "        const bool isValidEndToken = (0 <= node->endToken && node->endToken < m_str->size());" << Qt::endl;
-  out << "        QString endTokenString;" << Qt::endl;
-  out << "        if (isValidEndToken) {" << Qt::endl;
-  out << "            endToken = m_str->at(node->endToken);" << Qt::endl;
-  out << "            m_str->startPosition(node->endToken, &line, &column);" << Qt::endl;
-  out << "            endTokenString = QString::number(endToken.begin) + QLatin1String(\", \") + QString::number(line) + QLatin1String(\", \") + QString::number(column);" << Qt::endl;
-  out << "        } else {" << Qt::endl;
-  out << "            endTokenString = QLatin1String(\"invalid token index: \") + QString::number(node->endToken);" << Qt::endl;
-  out << "        }" << Qt::endl;
-  out << "        QString tokenString;" << Qt::endl;
-  out << "        if (!m_content.isEmpty() && isValidStartToken && isValidEndToken) {" << Qt::endl;
-  out << "            const int begin = startToken.begin;" << Qt::endl;
-  out << "            const int end = endToken.end;" << Qt::endl;
-  out << "            if (end-begin > 30) {" << Qt::endl;
-  out << "                tokenString = m_content.mid(begin, 10);" << Qt::endl;
-  out << "                tokenString += QStringLiteral(\" ...\");" << Qt::endl;
-  out << "                tokenString += QStringLiteral(\"%1 more\").arg(end-begin-20);" << Qt::endl;
-  out << "                tokenString += QStringLiteral(\"... \");" << Qt::endl;
-  out << "                tokenString += QStringView(m_content).mid(end-10, 10);" << Qt::endl;
-  out << "            }" << Qt::endl;
-  out << "            else {" << Qt::endl;
-  out << "                tokenString = m_content.mid(begin, end-begin+1);" << Qt::endl;
-  out << "            }" << Qt::endl;
-  out << "            tokenString.replace('\\n', QStringLiteral(\"\\\\n\"));" << Qt::endl;
-  out << "            tokenString.replace('\\r', QStringLiteral(\"\\\\r\"));" << Qt::endl;
-  out << "        }" << Qt::endl;
+  out << "private:" << endl;
+  out << "void printToken(const AstNode *node, const QString &mType, const QString &mName = QString())" << endl;
+  out << "{" << endl;
+  out << "        KDevPG::TokenStream::Token startToken;" << endl;
+  out << "        KDevPG::TokenStream::Token endToken;" << endl;
+  out << "        qint64 line, column;" << endl;
+  out << "        const bool isValidStartToken = (0 <= node->startToken && node->startToken < m_str->size());" << endl;
+  out << "        QString startTokenString;" << endl;
+  out << "        if (isValidStartToken) {" << endl;
+  out << "            startToken = m_str->at(node->startToken);" << endl;
+  out << "            m_str->startPosition(node->startToken, &line, &column);" << endl;
+  out << "            startTokenString = QString::number(startToken.begin) + QLatin1String(\", \") + QString::number(line) + QLatin1String(\", \") + QString::number(column);" << endl;
+  out << "        } else {" << endl;
+  out << "            startTokenString = QLatin1String(\"invalid token index: \") + QString::number(node->startToken);" << endl;
+  out << "        }" << endl;
+  out << "        const bool isValidEndToken = (0 <= node->endToken && node->endToken < m_str->size());" << endl;
+  out << "        QString endTokenString;" << endl;
+  out << "        if (isValidEndToken) {" << endl;
+  out << "            endToken = m_str->at(node->endToken);" << endl;
+  out << "            m_str->startPosition(node->endToken, &line, &column);" << endl;
+  out << "            endTokenString = QString::number(endToken.begin) + QLatin1String(\", \") + QString::number(line) + QLatin1String(\", \") + QString::number(column);" << endl;
+  out << "        } else {" << endl;
+  out << "            endTokenString = QLatin1String(\"invalid token index: \") + QString::number(node->endToken);" << endl;
+  out << "        }" << endl;
+  out << "        QString tokenString;" << endl;
+  out << "        if (!m_content.isEmpty() && isValidStartToken && isValidEndToken) {" << endl;
+  out << "            const int begin = startToken.begin;" << endl;
+  out << "            const int end = endToken.end;" << endl;
+  out << "            if (end-begin > 30) {" << endl;
+  out << "                tokenString = m_content.mid(begin, 10);" << endl;
+  out << "                tokenString += QStringLiteral(\" ...\");" << endl;
+  out << "                tokenString += QStringLiteral(\"%1 more\").arg(end-begin-20);" << endl;
+  out << "                tokenString += QStringLiteral(\"... \");" << endl;
+  out << "                tokenString += m_content.midRef(end-10, 10);" << endl;
+  out << "            }" << endl;
+  out << "            else {" << endl;
+  out << "                tokenString = m_content.mid(begin, end-begin+1);" << endl;
+  out << "            }" << endl;
+  out << "            tokenString.replace('\\n', QStringLiteral(\"\\\\n\"));" << endl;
+  out << "            tokenString.replace('\\r', QStringLiteral(\"\\\\r\"));" << endl;
+  out << "        }" << endl;
   out << "        qDebug() <<"
       << " QString(QString().fill(QLatin1Char(' '), m_indent) +"
       << " mName + QLatin1String(!mName.isEmpty() ? \"->\" : \"\") + mType +"
       << " QLatin1Char('[') + startTokenString + QLatin1String(\"] --- [\") + endTokenString + QLatin1String(\"] \")).toUtf8().constData()"
-      << " << tokenString;" << Qt::endl;
-  out << "}" << Qt::endl;
-  out << globalSystem.tokenStream << " *m_str;" << Qt::endl;
-  out << "int m_indent;" << Qt::endl;
-  out << "QString m_content;" << Qt::endl;
-  out << "};" << Qt::endl;
+      << " << tokenString;" << endl;
+  out << "}" << endl;
+  out << globalSystem.tokenStream << " *m_str;" << endl;
+  out << "int m_indent;" << endl;
+  out << "QString m_content;" << endl;
+  out << "};" << endl;
 }
 
 void GenerateDebugVisitorRule::operator()(QPair<QString,
@@ -105,19 +105,19 @@ void GenerateDebugVisitorRule::operator()(QPair<QString,
   #define O1(name) \
       out << "void visit" << name \
           << "(" << name << "Ast *" << "node" \
-          << ") override {" << Qt::endl;
+          << ") override {" << endl;
   #define O2(name) \
-  out << "printToken(node, QStringLiteral(\"" << name << "\"));" << Qt::endl;
+  out << "printToken(node, QStringLiteral(\"" << name << "\"));" << endl;
   #define O3(name) \
     out << "++m_indent;"; \
         \
     out << "DefaultVisitor::visit" << name \
         << "(" << "node" \
-        << ");" << Qt::endl; \
+        << ");" << endl; \
         \
     out << "m_indent--;"; \
         \
-    out << "}" << Qt::endl << Qt::endl;
+    out << "}" << endl << endl;
   
   if(isOperatorSymbol(sym))
   {
@@ -179,16 +179,16 @@ void GenerateDebugVisitorRule::visitVariableDeclaration(Model::VariableDeclarati
         out << "if (" << "node->" << node->mName << "Sequence" << ") {"
             << "const KDevPG::ListNode<" << base_type << "> *__it = "
             << "node->" << node->mName << "Sequence" << "->front()"
-            << ", *__end = __it;" << Qt::endl
-            << "do {" << Qt::endl
-            << "printToken(__it->element, QStringLiteral(\"" << node->mType << "\"), QStringLiteral(\"" << node->mName << "[]\"));" << Qt::endl
-            << "__it = __it->next;" << Qt::endl
-            << "} while (__it != __end);" << Qt::endl
-            << "}" << Qt::endl;
+            << ", *__end = __it;" << endl
+            << "do {" << endl
+            << "printToken(__it->element, QStringLiteral(\"" << node->mType << "\"), QStringLiteral(\"" << node->mName << "[]\"));" << endl
+            << "__it = __it->next;" << endl
+            << "} while (__it != __end);" << endl
+            << "}" << endl;
       }
     else
       {
-        out << "if (node->" << node->mName << ") printToken(node->" << node->mName << ", QStringLiteral(\"" << node->mType << "\"), QStringLiteral(\"" << node->mName << "\"));" << Qt::endl;
+        out << "if (node->" << node->mName << ") printToken(node->" << node->mName << ", QStringLiteral(\"" << node->mType << "\"), QStringLiteral(\"" << node->mName << "\"));" << endl;
       }
 
     mNames.insert(node->mName);
diff --git a/kdev-pg/kdev-pg-default-visitor-bits-gen.cpp b/kdev-pg/kdev-pg-default-visitor-bits-gen.cpp
index 5f3d6ce..d30a03c 100644
--- a/kdev-pg/kdev-pg-default-visitor-bits-gen.cpp
+++ b/kdev-pg/kdev-pg-default-visitor-bits-gen.cpp
@@ -39,18 +39,18 @@ void GenerateDefaultVisitorBitsRule::operator()(QPair<QString,Model::SymbolItem*
   #define O(ast) \
       out << "void " << name << "::visit" << ast \
       << "(" << ast << "Ast *" << (has_members ? "node" : "") \
-      << ") {" << Qt::endl;
+      << ") {" << endl;
       
   if(isOperatorSymbol(sym))
   {
     O("Prefix" + sym->mCapitalizedName)
-    out << "visitNode(node->first);" << Qt::endl << "}" << Qt::endl << Qt::endl;
+    out << "visitNode(node->first);" << endl << "}" << endl << endl;
     O("Postfix" + sym->mCapitalizedName)
-    out << "visitNode(node->first);" << Qt::endl << "}" << Qt::endl << Qt::endl;
+    out << "visitNode(node->first);" << endl << "}" << endl << endl;
     O("Binary" + sym->mCapitalizedName)
-    out << "visitNode(node->first);" << Qt::endl << "visitNode(node->second); }" << Qt::endl << Qt::endl;
+    out << "visitNode(node->first);" << endl << "visitNode(node->second); }" << endl << endl;
     O("Ternary" + sym->mCapitalizedName)
-    out << "visitNode(node->first);" << Qt::endl << "visitNode(node->second);" << Qt::endl << "visitNode(node->third);";
+    out << "visitNode(node->first);" << endl << "visitNode(node->second);" << endl << "visitNode(node->third);";
   }
   else
   {
@@ -69,7 +69,7 @@ void GenerateDefaultVisitorBitsRule::operator()(QPair<QString,Model::SymbolItem*
       }
   }
 
-  out << "}" << Qt::endl << Qt::endl;
+  out << "}" << endl << endl;
   
   #undef O
 }
@@ -94,16 +94,16 @@ void GenerateDefaultVisitorBitsRule::visitVariableDeclaration(Model::VariableDec
         out << "if (" << "node->" << node->mName << "Sequence" << ") {"
             << "const KDevPG::ListNode<" << base_type << "> *__it = "
             << "node->" << node->mName << "Sequence" << "->front()"
-            << ", *__end = __it;" << Qt::endl
-            << "do {" << Qt::endl
-            << "visitNode(__it->element);" << Qt::endl
-            << "__it = __it->next;" << Qt::endl
-            << "} while (__it != __end);" << Qt::endl
-            << "}" << Qt::endl;
+            << ", *__end = __it;" << endl
+            << "do {" << endl
+            << "visitNode(__it->element);" << endl
+            << "__it = __it->next;" << endl
+            << "} while (__it != __end);" << endl
+            << "}" << endl;
       }
     else
       {
-        out << "visitNode(" << "node->" << node->mName << ")" << ";" << Qt::endl;
+        out << "visitNode(" << "node->" << node->mName << ")" << ";" << endl;
       }
 
     mNames.insert(node->mName);
diff --git a/kdev-pg/kdev-pg-default-visitor-gen.cpp b/kdev-pg/kdev-pg-default-visitor-gen.cpp
index 9214939..080cc3e 100644
--- a/kdev-pg/kdev-pg-default-visitor-gen.cpp
+++ b/kdev-pg/kdev-pg-default-visitor-gen.cpp
@@ -29,8 +29,8 @@ namespace KDevPG
 
 void GenerateDefaultVisitor::operator()()
 {
-  out << "class " << globalSystem.exportMacro << " " << name << ": public Visitor {" << Qt::endl
-      << "public:" << Qt::endl;
+  out << "class " << globalSystem.exportMacro << " " << name << ": public Visitor {" << endl
+      << "public:" << endl;
 
   GenerateDefaultVisitorRule gen(out);
   for( World::SymbolSet::iterator it = globalSystem.symbols.begin();
@@ -39,7 +39,7 @@ void GenerateDefaultVisitor::operator()()
     gen(qMakePair(it.key(), *it));
   }
 
-  out << "};" << Qt::endl;
+  out << "};" << endl;
 }
 
 void GenerateDefaultVisitorRule::operator()(QPair<QString,Model::SymbolItem*> const &__it)
@@ -47,7 +47,7 @@ void GenerateDefaultVisitorRule::operator()(QPair<QString,Model::SymbolItem*> co
   Model::SymbolItem *sym = __it.second;
   
   #define O(name) \
-  out << "void visit" << name << "(" << name << "Ast *node) override;" << Qt::endl;
+  out << "void visit" << name << "(" << name << "Ast *node) override;" << endl;
   
   if(isOperatorSymbol(sym))
   {
diff --git a/kdev-pg/kdev-pg-follow.cpp b/kdev-pg/kdev-pg-follow.cpp
index d003bf8..3ed4858 100644
--- a/kdev-pg/kdev-pg-follow.cpp
+++ b/kdev-pg/kdev-pg-follow.cpp
@@ -40,7 +40,7 @@ extern QTextStream checkOut;
 #ifdef FOLLOWDEP_DEBUG
 void DebugFollowDep(Model::Node *dest, Model::Node *dep, const QString &message)
 {
-  checkOut << "=============================" << Qt::endl;
+  checkOut << "=============================" << endl;
   PrettyPrinter p(QTextStream( stderr ));
   checkOut << "adding " << message << " ";
   p(dep);
@@ -55,7 +55,7 @@ void DebugFollowDep(Model::Node *dest, Model::Node *dep, const QString &message)
     if (s)
       checkOut << "__"; p(s); checkOut << "__";
   }
-  checkOut << Qt::endl;
+  checkOut << endl;
 }
 
 void debugFirstToFollowDep(Model::Node *dest, Model::Node *dep)
diff --git a/kdev-pg/kdev-pg-generate.cpp b/kdev-pg/kdev-pg-generate.cpp
index d30cd67..a0f1747 100644
--- a/kdev-pg/kdev-pg-generate.cpp
+++ b/kdev-pg/kdev-pg-generate.cpp
@@ -57,40 +57,40 @@ void generateOutput()
 
       GenerateAst _Ast(s);
 
-      s << "// THIS FILE IS GENERATED" << Qt::endl
-        << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-        << Qt::endl
+      s << "// THIS FILE IS GENERATED" << endl
+        << "// WARNING! All changes made in this file will be lost!" << endl
+        << endl
 
-        << "#ifndef " << language << "_AST_H_INCLUDED" << Qt::endl
-        << "#define " << language << "_AST_H_INCLUDED" << Qt::endl
-        << Qt::endl
+        << "#ifndef " << language << "_AST_H_INCLUDED" << endl
+        << "#define " << language << "_AST_H_INCLUDED" << endl
+        << endl
         
-        << "#include \"" << globalSystem.language << "ast-fwd.h\"" << Qt::endl
-        << Qt::endl;
+        << "#include \"" << globalSystem.language << "ast-fwd.h\"" << endl
+        << endl;
       if (!globalSystem.exportMacroHeader.isEmpty())
         s << "#include \"" << globalSystem.exportMacroHeader << "\""
-          << Qt::endl;
+          << endl;
 
       foreach (const QString& header, globalSystem.astHeaders)
         s << "#include \"" << header << "\"\n";
       
-      s <<  "#include <QList>" << Qt::endl
-        << "#include <kdev-pg-list.h>" << Qt::endl
-        << Qt::endl;
+      s <<  "#include <QList>" << endl
+        << "#include <kdev-pg-list.h>" << endl
+        << endl;
       
       if (!globalSystem.decl.isEmpty())
-        s << globalSystem.decl << Qt::endl;
+        s << globalSystem.decl << endl;
 
-      s << "namespace " << globalSystem.ns << "{" << Qt::endl
-        << Qt::endl;
+      s << "namespace " << globalSystem.ns << "{" << endl
+        << endl;
 
       _Ast();
 
-      s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-        << Qt::endl
+      s << endl << "} // end of namespace " << globalSystem.ns << endl
+        << endl
 
-        << "#endif" << Qt::endl
-        << Qt::endl;
+        << "#endif" << endl
+        << endl;
 
       QString oname = globalSystem.language;
       oname += "ast.h";
@@ -104,27 +104,27 @@ void generateOutput()
       
       GenerateAstFwd _AstFwd(s);
       
-      s << ""// THIS FILE IS GENERATED" << Qt::endl
-        << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-        << Qt::endl
+      s << ""// THIS FILE IS GENERATED" << endl
+        << "// WARNING! All changes made in this file will be lost!" << endl
+        << endl
 
-        << "#ifndef " << language << "_AST_FWD_INCLUDED" << Qt::endl
-        << "#define " << language << "_AST_FWD_INCLUDED" << Qt::endl
-        << Qt::endl;
+        << "#ifndef " << language << "_AST_FWD_INCLUDED" << endl
+        << "#define " << language << "_AST_FWD_INCLUDED" << endl
+        << endl;
       if (!globalSystem.exportMacroHeader.isEmpty())
         s << "#include \"" << globalSystem.exportMacroHeader << "\""
-          << Qt::endl;
+          << endl;
       
-      s << "namespace " << globalSystem.ns << "{" << Qt::endl
-        << Qt::endl;
+      s << "namespace " << globalSystem.ns << "{" << endl
+        << endl;
       
       _AstFwd();
       
-      s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-        << Qt::endl
+      s << endl << "} // end of namespace " << globalSystem.ns << endl
+        << endl
       
-        << "#endif" << Qt::endl
-        << Qt::endl;
+        << "#endif" << endl
+        << endl;
       
       QString oname = globalSystem.language;
       oname += "ast-fwd.h";
@@ -138,33 +138,33 @@ void generateOutput()
 
     GenerateTokenType gen(s);
 
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
 
-      << "#ifndef " << language << "_TOKEN_TYPE_H_INCLUDED" << Qt::endl
-      << "#define " << language << "_TOKEN_TYPE_H_INCLUDED" << Qt::endl
-      << Qt::endl;
+      << "#ifndef " << language << "_TOKEN_TYPE_H_INCLUDED" << endl
+      << "#define " << language << "_TOKEN_TYPE_H_INCLUDED" << endl
+      << endl;
     if (!globalSystem.exportMacroHeader.isEmpty())
       s << "#include \"" << globalSystem.exportMacroHeader << "\""
-        << Qt::endl;
+        << endl;
 
     foreach (const QString& header, globalSystem.astHeaders)
       s << "#include \"" << header << "\"\n";
 
     if (!globalSystem.decl.isEmpty())
-      s << globalSystem.decl << Qt::endl;
+      s << globalSystem.decl << endl;
 
-    s << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl;
+    s << "namespace " << globalSystem.ns << "{" << endl
+      << endl;
 
     gen();
 
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl
 
-      << "#endif" << Qt::endl
-      << Qt::endl;
+      << "#endif" << endl
+      << endl;
 
     QString oname = globalSystem.language;
     oname += "tokentype.h";
@@ -177,54 +177,54 @@ void generateOutput()
 
     GenerateParserDeclarations __decls(s);
 
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
 
-      << "#ifndef " << language << "_H_INCLUDED" << Qt::endl
-      << "#define " << language << "_H_INCLUDED" << Qt::endl
-      << Qt::endl;
+      << "#ifndef " << language << "_H_INCLUDED" << endl
+      << "#define " << language << "_H_INCLUDED" << endl
+      << endl;
     
     
-    s << "#include \"" << globalSystem.language << "tokentype.h\"" << Qt::endl;
+    s << "#include \"" << globalSystem.language << "tokentype.h\"" << endl;
     
     if(globalSystem.hasLexer)
-      s << "#include \"" << globalSystem.language << "lexer.h\"" << Qt::endl;
+      s << "#include \"" << globalSystem.language << "lexer.h\"" << endl;
 
     if (globalSystem.generateAst)
       {
-        s << "#include \"" << globalSystem.language << "ast-fwd.h\"" << Qt::endl
-          << "#include <kdev-pg-memory-pool.h>" << Qt::endl
-          << "#include <kdev-pg-allocator.h>" << Qt::endl;
+        s << "#include \"" << globalSystem.language << "ast-fwd.h\"" << endl
+          << "#include <kdev-pg-memory-pool.h>" << endl
+          << "#include <kdev-pg-allocator.h>" << endl;
       }
 
     if (globalSystem.tokenStream == "KDevPG::TokenStream")
-      s << "#include <kdev-pg-token-stream.h>" << Qt::endl;
+      s << "#include <kdev-pg-token-stream.h>" << endl;
     
     foreach (const QString& header, globalSystem.parserDeclarationHeaders)
       s << "#include \"" << header << "\"\n";
 
-    s << Qt::endl;
+    s << endl;
     if (!globalSystem.exportMacroHeader.isEmpty())
       s << "#include \"" << globalSystem.exportMacroHeader << "\""
-        << Qt::endl;
+        << endl;
     
     if (globalSystem.needOperatorStack)
-      s << "#include <QVector>" << Qt::endl;
+      s << "#include <QVector>" << endl;
     
     if (!globalSystem.decl.isEmpty() && !globalSystem.generateAst)
-      s << globalSystem.decl << Qt::endl;
+      s << globalSystem.decl << endl;
 
-    s << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl;
+    s << "namespace " << globalSystem.ns << "{" << endl
+      << endl;
 
     __decls();
 
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl
 
-      << "#endif" << Qt::endl
-      << Qt::endl;
+      << "#endif" << endl
+      << endl;
 
     QString oname = globalSystem.language;
     oname += "parser.h";
@@ -239,30 +239,30 @@ void generateOutput()
 
     GenerateVisitor __visitor(s);
 
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
 
-      << "#ifndef " << language << "_VISITOR_H_INCLUDED" << Qt::endl
-      << "#define " << language << "_VISITOR_H_INCLUDED" << Qt::endl
-      << Qt::endl
+      << "#ifndef " << language << "_VISITOR_H_INCLUDED" << endl
+      << "#define " << language << "_VISITOR_H_INCLUDED" << endl
+      << endl
 
-      << "#include \"" << globalSystem.language << "ast.h\"" << Qt::endl
-      << Qt::endl;
+      << "#include \"" << globalSystem.language << "ast.h\"" << endl
+      << endl;
     if (!globalSystem.exportMacroHeader.isEmpty())
       s << "#include \"" << globalSystem.exportMacroHeader << "\""
-        << Qt::endl;
+        << endl;
 
-    s << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl;
+    s << "namespace " << globalSystem.ns << "{" << endl
+      << endl;
 
     __visitor();
 
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl
 
-      << "#endif" << Qt::endl
-      << Qt::endl;
+      << "#endif" << endl
+      << endl;
 
     QString oname = globalSystem.language;
     oname += "visitor.h";
@@ -277,30 +277,30 @@ void generateOutput()
 
     GenerateDefaultVisitor __DefaultVisitor(s);
 
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
 
-      << "#ifndef " << language << "_DEFAULT_VISITOR_H_INCLUDED" << Qt::endl
-      << "#define " << language << "_DEFAULT_VISITOR_H_INCLUDED" << Qt::endl
-      << Qt::endl
+      << "#ifndef " << language << "_DEFAULT_VISITOR_H_INCLUDED" << endl
+      << "#define " << language << "_DEFAULT_VISITOR_H_INCLUDED" << endl
+      << endl
 
-      << "#include \"" << globalSystem.language << "visitor.h\"" << Qt::endl
-      << Qt::endl;
+      << "#include \"" << globalSystem.language << "visitor.h\"" << endl
+      << endl;
     if (!globalSystem.exportMacroHeader.isEmpty())
       s << "#include \"" << globalSystem.exportMacroHeader << "\""
-        << Qt::endl;
+        << endl;
 
-    s << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl;
+    s << "namespace " << globalSystem.ns << "{" << endl
+      << endl;
 
     __DefaultVisitor();
 
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl
 
-      << "#endif" << Qt::endl
-      << Qt::endl;
+      << "#endif" << endl
+      << endl;
 
     QString oname = globalSystem.language;
     oname += "defaultvisitor.h";
@@ -315,34 +315,34 @@ void generateOutput()
 
     GenerateSerializeVisitor __serialize_visitor(s);
 
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
 
-      << "#ifndef " << language << "_SERIALIZATION_H_INCLUDED" << Qt::endl
-      << "#define " << language << "_SERIALIZATION_H_INCLUDED" << Qt::endl
-      << Qt::endl
+      << "#ifndef " << language << "_SERIALIZATION_H_INCLUDED" << endl
+      << "#define " << language << "_SERIALIZATION_H_INCLUDED" << endl
+      << endl
 
-      << "#include \"" << globalSystem.language << "defaultvisitor.h\"" << Qt::endl
-      << Qt::endl;
+      << "#include \"" << globalSystem.language << "defaultvisitor.h\"" << endl
+      << endl;
     if (!globalSystem.exportMacroHeader.isEmpty())
       s << "#include \"" << globalSystem.exportMacroHeader << "\""
-        << Qt::endl;
+        << endl;
 
-    s << "#include <QTextStream>" << Qt::endl
-      << "#include <QFile>" << Qt::endl
-      << Qt::endl
+    s << "#include <QTextStream>" << endl
+      << "#include <QFile>" << endl
+      << endl
 
-      << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl;
+      << "namespace " << globalSystem.ns << "{" << endl
+      << endl;
 
     __serialize_visitor();
 
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl;
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl;
 
-    s << "#endif" << Qt::endl
-      << Qt::endl;
+    s << "#endif" << endl
+      << endl;
 
     QString oname = globalSystem.language;
     oname += "serializevisitor.h";
@@ -357,36 +357,36 @@ void generateOutput()
 
     GenerateDebugVisitor __debug_visitor(s);
 
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
 
-      << "#ifndef " << language << "_DEBUG_VISITOR_H_INCLUDED" << Qt::endl
-      << "#define " << language << "_DEBUG_VISITOR_H_INCLUDED" << Qt::endl
-      << Qt::endl
+      << "#ifndef " << language << "_DEBUG_VISITOR_H_INCLUDED" << endl
+      << "#define " << language << "_DEBUG_VISITOR_H_INCLUDED" << endl
+      << endl
 
-      << "#include \"" << globalSystem.language << "defaultvisitor.h\"" << Qt::endl
-      << Qt::endl;
+      << "#include \"" << globalSystem.language << "defaultvisitor.h\"" << endl
+      << endl;
     if (!globalSystem.exportMacroHeader.isEmpty())
       s << "#include \"" << globalSystem.exportMacroHeader << "\""
-        << Qt::endl;
+        << endl;
 
-    s << "#include <kdev-pg-token-stream.h>" << Qt::endl;
+    s << "#include <kdev-pg-token-stream.h>" << endl;
     
-    s << "#include <QTextStream>" << Qt::endl
-      << "#include <QDebug>" << Qt::endl
-      << Qt::endl
+    s << "#include <QTextStream>" << endl
+      << "#include <QDebug>" << endl
+      << endl
 
-      << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl;
+      << "namespace " << globalSystem.ns << "{" << endl
+      << endl;
 
     __debug_visitor();
 
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl;
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl;
 
-    s << "#endif" << Qt::endl
-      << Qt::endl;
+    s << "#endif" << endl
+      << endl;
 
     QString oname = globalSystem.language;
     oname += "debugvisitor.h";
@@ -398,33 +398,33 @@ void generateOutput()
     QString str;
     QTextStream s(&str, QIODevice::WriteOnly);
 
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
 
-      << "#ifndef " << language << "_TOKEN_TEXT_H_INCLUDED" << Qt::endl
-      << "#define " << language << "_TOKEN_TEXT_H_INCLUDED" << Qt::endl
-      << Qt::endl;
+      << "#ifndef " << language << "_TOKEN_TEXT_H_INCLUDED" << endl
+      << "#define " << language << "_TOKEN_TEXT_H_INCLUDED" << endl
+      << endl;
     
     if (!globalSystem.exportMacroHeader.isEmpty())
-      s << "#include \"" << globalSystem.exportMacroHeader << "\"" << Qt::endl;
+      s << "#include \"" << globalSystem.exportMacroHeader << "\"" << endl;
     
-    s << "#include \"" << globalSystem.language << "tokentype.h\"" << Qt::endl
+    s << "#include \"" << globalSystem.language << "tokentype.h\"" << endl
 
-      << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl
+      << "namespace " << globalSystem.ns << "{" << endl
+      << endl
 
-      << "QString tokenText(int token)" << Qt::endl << "{" << Qt::endl;
+      << "QString tokenText(int token)" << endl << "{" << endl;
 
     GenerateTokenTexts gen(s);
     gen();
 
     s << "}"
-      << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl;
+      << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl;
 
-    s << "#endif" << Qt::endl
-      << Qt::endl;
+    s << "#endif" << endl
+      << endl;
 
     QString oname = globalSystem.language;
     oname += "tokentext.h";
@@ -437,33 +437,33 @@ void generateOutput()
 
     GenerateParserBits __bits(s);
 
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl;
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl;
 
     s << "#include \"" << globalSystem.language << "parser.h\""
-      << Qt::endl;
+      << endl;
     
     if (globalSystem.generateAst)
     {
-      s << "#include \"" << globalSystem.language << "ast.h\"" << Qt::endl;
+      s << "#include \"" << globalSystem.language << "ast.h\"" << endl;
     }
 
     foreach (const QString& header, globalSystem.parserBitsHeaders)
       s << "#include \"" << header << "\"\n";
 
-    s << Qt::endl;
+    s << endl;
 
     if (!globalSystem.bits.isEmpty())
-      s << globalSystem.bits << Qt::endl;
+      s << globalSystem.bits << endl;
 
-    s << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl;
+    s << "namespace " << globalSystem.ns << "{" << endl
+      << endl;
 
     __bits();
 
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl;
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl;
 
     QString oname = globalSystem.language;
     oname += "parser.cpp";
@@ -478,21 +478,21 @@ void generateOutput()
 
     GenerateVisitorBits __visitor_bits(s);
 
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
 
-      << "#include \"" << globalSystem.language << "visitor.h\"" << Qt::endl
+      << "#include \"" << globalSystem.language << "visitor.h\"" << endl
 
-      << Qt::endl
+      << endl
 
-      << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl;
+      << "namespace " << globalSystem.ns << "{" << endl
+      << endl;
 
     __visitor_bits();
 
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl;
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl;
 
     QString oname = globalSystem.language;
     oname += "visitor.cpp";
@@ -505,16 +505,16 @@ void generateOutput()
     QString str;
     QTextStream s(&str, QIODevice::WriteOnly);
 
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
 
-      << "#include \"" << globalSystem.language << "defaultvisitor.h\"" << Qt::endl
-      << Qt::endl
+      << "#include \"" << globalSystem.language << "defaultvisitor.h\"" << endl
+      << endl
 
-      << "namespace " << globalSystem.ns << "{" << Qt::endl
+      << "namespace " << globalSystem.ns << "{" << endl
 
-      << Qt::endl;
+      << endl;
 
     GenerateDefaultVisitorBitsRule gen(s);
     for( World::SymbolSet::iterator it = globalSystem.symbols.begin();
@@ -523,8 +523,8 @@ void generateOutput()
       gen(qMakePair(it.key(), *it));
     }
 
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl;
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl;
 
     QString oname = globalSystem.language;
     oname += "defaultvisitor.cpp";
@@ -542,44 +542,44 @@ void generateLexer()
     QString str;
     QTextStream s(&str, QIODevice::WriteOnly);
     
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
     
-      << "#ifndef " << language << "_LEXER_H_INCLUDED" << Qt::endl
-      << "#define " << language << "_LEXER_H_INCLUDED" << Qt::endl
-      << Qt::endl
+      << "#ifndef " << language << "_LEXER_H_INCLUDED" << endl
+      << "#define " << language << "_LEXER_H_INCLUDED" << endl
+      << endl
       
-      << "#include \"" << globalSystem.language << "tokentype.h\"" << Qt::endl
-      << Qt::endl
+      << "#include \"" << globalSystem.language << "tokentype.h\"" << endl
+      << endl
       
-      << "#include <kdev-pg-char-sets.h>" << Qt::endl
-      << "#include <kdev-pg-token-stream.h>" << Qt::endl
-      << Qt::endl;
+      << "#include <kdev-pg-char-sets.h>" << endl
+      << "#include <kdev-pg-token-stream.h>" << endl
+      << endl;
       
     foreach (const QString& header, globalSystem.lexerDeclarationHeaders)
       s << "#include \"" << header << "\"\n";
     
-    s << Qt::endl << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl
+    s << endl << "namespace " << globalSystem.ns << "{" << endl
+      << endl
       
       << "class " << globalSystem.exportMacro << " " << globalSystem.tokenStream << " : " 
       << (globalSystem.lexerBaseClass.isEmpty() ? QString() : " public " + globalSystem.lexerBaseClass + ",")
       << "public " << globalSystem.inputStream << ","
-      << "public TokenTypeWrapper" << Qt::endl
-      << "{" << Qt::endl
-      << "public:" << Qt::endl
-      << "typedef " << (globalSystem.lexerBaseClass.isEmpty() ? globalSystem.tokenStream : globalSystem.lexerBaseClass) << " Base;" << Qt::endl
-      << "typedef " << globalSystem.inputStream << " Iterator;" << Qt::endl << Qt::endl << "private:" << Qt::endl;
+      << "public TokenTypeWrapper" << endl
+      << "{" << endl
+      << "public:" << endl
+      << "typedef " << (globalSystem.lexerBaseClass.isEmpty() ? globalSystem.tokenStream : globalSystem.lexerBaseClass) << " Base;" << endl
+      << "typedef " << globalSystem.inputStream << " Iterator;" << endl << endl << "private:" << endl;
       
     
     if(hasStates)
     {
       foreach(QString state, globalSystem.lexerEnvs.keys())
-        s << "Base::Token& lex" << KDevPG::capitalized(state) << "();" << Qt::endl;
+        s << "Base::Token& lex" << KDevPG::capitalized(state) << "();" << endl;
       s << "public:\nenum RuleSet {\n";
       foreach(QString state, globalSystem.lexerEnvs.keys())
-        s << "State_" << state << ", /*" << globalSystem.lexerEnvs[state].size() << "*/" << Qt::endl;
+        s << "State_" << state << ", /*" << globalSystem.lexerEnvs[state].size() << "*/" << endl;
       s << "State_COUNT\n};\n"
            "private:\n"
            "RuleSet m_ruleSet;\n"
@@ -588,24 +588,24 @@ void generateLexer()
            "void setRuleSet(RuleSet rs);\n";
       foreach(QString state, globalSystem.lexerEnvs.keys())
       {
-        s << "inline void enteringRuleSet" << state << "();" << Qt::endl;
-        s << "inline void leavingRuleSet" << state << "();" << Qt::endl;
+        s << "inline void enteringRuleSet" << state << "();" << endl;
+        s << "inline void leavingRuleSet" << state << "();" << endl;
       }
     }
       
-    s << "Iterator::PlainIterator spos;" << Qt::endl
-      << "bool continueLexeme;" << Qt::endl << Qt::endl
+    s << "Iterator::PlainIterator spos;" << endl
+      << "bool continueLexeme;" << endl << endl
       
-      << "public:" << Qt::endl << globalSystem.tokenStream << "(const Iterator& iter);" << Qt::endl
+      << "public:" << endl << globalSystem.tokenStream << "(const Iterator& iter);" << endl
       // non-virtual, virtuality will be inherited
       << "~" << globalSystem.tokenStream << "();"
-      <<  Qt::endl << "Base::Token& read();" << Qt::endl;
+      <<  endl << "Base::Token& read();" << endl;
     
       /// TODO: not good that it happens in a separate file for the parser but in this file for the lexer
 #define LEXER_EXTRA_CODE_GEN(name) \
     if (globalSystem.lexerclassMembers.name.empty() == false) \
     { \
-      s << "\n// user defined code:" << Qt::endl; \
+      s << "\n// user defined code:" << endl; \
       GenerateMemberCode gen(s, Settings::MemberItem::PublicDeclaration \
                                 | Settings::MemberItem::ProtectedDeclaration \
                                 | Settings::MemberItem::PrivateDeclaration \
@@ -620,11 +620,11 @@ void generateLexer()
     
     LEXER_EXTRA_CODE_GEN(declarations)
     
-    s << "};" << Qt::endl << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl
+    s << "};" << endl << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl
       
-      << "#endif" << Qt::endl
-      << Qt::endl;
+      << "#endif" << endl
+      << endl;
       
     QString oname = globalSystem.language;
     oname += "lexer.h";
@@ -636,28 +636,28 @@ void generateLexer()
     QString str;
     QTextStream s(&str, QIODevice::WriteOnly);
     
-    s << "// THIS FILE IS GENERATED" << Qt::endl
-      << "// WARNING! All changes made in this file will be lost!" << Qt::endl
-      << Qt::endl
+    s << "// THIS FILE IS GENERATED" << endl
+      << "// WARNING! All changes made in this file will be lost!" << endl
+      << endl
     
-      << "#include \"" << globalSystem.language << "lexer.h\"" << Qt::endl
-      << Qt::endl;
+      << "#include \"" << globalSystem.language << "lexer.h\"" << endl
+      << endl;
     
     foreach (const QString& header, globalSystem.lexerBitsHeaders)
       s << "#include \"" << header << "\"\n";
     
     s << "\n#include <cassert>\n";
     
-    s << Qt::endl << "namespace " << globalSystem.ns << "{" << Qt::endl
-      << Qt::endl << globalSystem.tokenStream << "::" << globalSystem.tokenStream
-      << "(const " << globalSystem.tokenStream << "::Iterator& iter) : Base(), Iterator(iter), " << (hasStates ? "m_ruleSet(State_start), " : "") << "continueLexeme(false)" << Qt::endl
+    s << endl << "namespace " << globalSystem.ns << "{" << endl
+      << endl << globalSystem.tokenStream << "::" << globalSystem.tokenStream
+      << "(const " << globalSystem.tokenStream << "::Iterator& iter) : Base(), Iterator(iter), " << (hasStates ? "m_ruleSet(State_start), " : "") << "continueLexeme(false)" << endl
       << "{";
     LEXER_EXTRA_CODE_GEN(constructorCode)
-    s << "}" << Qt::endl << Qt::endl
+    s << "}" << endl << endl
       << globalSystem.tokenStream << "::~" << globalSystem.tokenStream
       << "()\n{";
     LEXER_EXTRA_CODE_GEN(destructorCode)
-    s << "}" << Qt::endl << Qt::endl
+    s << "}" << endl << endl
             
       << "#define PP_CONCAT_IMPL(x, y) x ## y\n" // necessary, otherwise CURRENT_RULE_SET would not get resolved
          "#define PP_CONCAT(x, y) PP_CONCAT_IMPL(x, y)\n\n"
@@ -677,16 +677,16 @@ void generateLexer()
          "#define yytoken (Base::back())\n"
          "#define lxFAIL {goto _fail;}\n"
          "#define lxSKIP {return read();}\n"
-         "#define lxNEXT_CHR(chr) { if(!Iterator::hasNext()) goto _end; chr = Iterator::next(); }\n" << Qt::endl;
+         "#define lxNEXT_CHR(chr) { if(!Iterator::hasNext()) goto _end; chr = Iterator::next(); }\n" << endl;
     
     if(hasStates)
     {
-      s << "#define lxSET_RULE_SET(r) {PP_CONCAT(leavingRuleSet, CURRENT_RULE_SET) (); m_ruleSet = State_##r; enteringRuleSet##r ();}\n" << Qt::endl << Qt::endl;
+      s << "#define lxSET_RULE_SET(r) {PP_CONCAT(leavingRuleSet, CURRENT_RULE_SET) (); m_ruleSet = State_##r; enteringRuleSet##r ();}\n" << endl << endl;
       
       foreach(QString state, globalSystem.lexerEnvs.keys())
       {
-        s << "inline void " << globalSystem.tokenStream << "::enteringRuleSet" << state << "() { " << globalSystem.enteringCode[state] << "}" << Qt::endl;
-        s << "inline void " << globalSystem.tokenStream << "::leavingRuleSet" << state << "() { " << globalSystem.leavingCode[state] << "}" << Qt::endl;
+        s << "inline void " << globalSystem.tokenStream << "::enteringRuleSet" << state << "() { " << globalSystem.enteringCode[state] << "}" << endl;
+        s << "inline void " << globalSystem.tokenStream << "::leavingRuleSet" << state << "() { " << globalSystem.leavingCode[state] << "}" << endl;
       }
       s << "\n"
            "void " << globalSystem.tokenStream << "::setRuleSet(RuleSet rs)\n"
@@ -719,36 +719,36 @@ void generateLexer()
     
 #define LEXER_CORE_IMPL(name, state, extra) \
       s << globalSystem.tokenStream << "::Base::Token& " << globalSystem.tokenStream << "::" \
-        << name << "()" << Qt::endl << "{" \
-        << extra << "if(!Iterator::hasNext())\n{\nlxFINISH\n}" << Qt::endl \
+        << name << "()" << endl << "{" \
+        << extra << "if(!Iterator::hasNext())\n{\nlxFINISH\n}" << endl \
         << "if(continueLexeme) continueLexeme = false;\nelse spos = plain();\nIterator::PlainIterator lpos = Iterator::plain();\nIterator::Int chr = 0;\nint lstate = 0;\n"; \
       globalSystem.dfaForNfa[globalSystem.lexerEnvResults[state]]->codegen(s); \
-      s << "/* assert(false);*/\nreturn Base::read();}" << Qt::endl << Qt::endl;
+      s << "/* assert(false);*/\nreturn Base::read();}" << endl << endl;
     
     if(hasStates)
     {
       foreach(QString state, globalSystem.lexerEnvs.keys())
       {
-        s << "#define CURRENT_RULE_SET " << state << Qt::endl;
+        s << "#define CURRENT_RULE_SET " << state << endl;
         LEXER_CORE_IMPL("lex" + KDevPG::capitalized(state), state, "")
-        s << "#undef CURRENT_RULE_SET" << Qt::endl;
+        s << "#undef CURRENT_RULE_SET" << endl;
       }
       s << globalSystem.tokenStream << "::Base::Token& " << globalSystem.tokenStream
-        << "::read()" << Qt::endl << "{" << Qt::endl << "if(Base::index() < Base::size())\nreturn Base::read();\nswitch(m_ruleSet)\n{" << Qt::endl;
+        << "::read()" << endl << "{" << endl << "if(Base::index() < Base::size())\nreturn Base::read();\nswitch(m_ruleSet)\n{" << endl;
       foreach(QString state, globalSystem.lexerEnvs.keys())
-        s << "case State_" << state << ": return lex" << capitalized(state) << "();" << Qt::endl;
-      s << "default:\nexit(-1);\n}\n}" << Qt::endl;
+        s << "case State_" << state << ": return lex" << capitalized(state) << "();" << endl;
+      s << "default:\nexit(-1);\n}\n}" << endl;
     }
     else
     {
       LEXER_CORE_IMPL("read", "start", "if(Base::index() < Base::size())\nreturn Base::read();\n")
     }
     
-    s << globalSystem.lexerBits << Qt::endl;
+    s << globalSystem.lexerBits << endl;
     
     if(hasStates)
     {
-      s << "#undef lxSET_RULE_SET\n" << Qt::endl;
+      s << "#undef lxSET_RULE_SET\n" << endl;
     }
     
     s << "#undef lxNEXT_CHR\n"
@@ -763,9 +763,9 @@ void generateLexer()
          "#undef lxCURR_POS\n\n"
          
          "#undef PP_CONCAT\n"
-         "#undef PP_CONCAT_IMPL\n" << Qt::endl;
+         "#undef PP_CONCAT_IMPL\n" << endl;
     
-    s << "} // end of namespace " << globalSystem.ns << Qt::endl << Qt::endl;
+    s << "} // end of namespace " << globalSystem.ns << endl << endl;
     
     QString oname = globalSystem.language;
     oname += "lexer.cpp";
@@ -788,18 +788,18 @@ void generateVisitor(const QString& name, bool inherit_default)
     QString str;
     QTextStream s(&str, QIODevice::WriteOnly);
     
-    s << "#ifndef " << language << "_" << upper_name << "_H" << Qt::endl
-      << "#define " << language << "_" << upper_name << "_H" << Qt::endl
-      << Qt::endl
+    s << "#ifndef " << language << "_" << upper_name << "_H" << endl
+      << "#define " << language << "_" << upper_name << "_H" << endl
+      << endl
     
-      << "#include \"" << globalSystem.language << (inherit_default ? "default" : "") << "visitor.h\"" << Qt::endl
-      << Qt::endl;
+      << "#include \"" << globalSystem.language << (inherit_default ? "default" : "") << "visitor.h\"" << endl
+      << endl;
     
     if (!globalSystem.exportMacroHeader.isEmpty())
       s << "#include \"" << globalSystem.exportMacroHeader << "\""
-        << Qt::endl;
+        << endl;
     
-    s << "namespace " << globalSystem.ns << "{" << Qt::endl << Qt::endl;
+    s << "namespace " << globalSystem.ns << "{" << endl << endl;
                                                             
     if (inherit_default)
     { // generate an empty visitor using the default-visitor
@@ -816,11 +816,11 @@ void generateVisitor(const QString& name, bool inherit_default)
       visitor();
     }
         
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl
         
-      << "#endif" << Qt::endl
-      << Qt::endl;
+      << "#endif" << endl
+      << endl;
         
     QString oname = globalSystem.language;
     oname += name.toLower() + ".h";
@@ -832,12 +832,12 @@ void generateVisitor(const QString& name, bool inherit_default)
     QString str;
     QTextStream s(&str, QIODevice::WriteOnly);
     
-    s << "#include \"" << globalSystem.language << "defaultvisitor.h\"" << Qt::endl
-      << Qt::endl
+    s << "#include \"" << globalSystem.language << "defaultvisitor.h\"" << endl
+      << endl
     
-      << "namespace " << globalSystem.ns << "{" << Qt::endl
+      << "namespace " << globalSystem.ns << "{" << endl
     
-      << Qt::endl;
+      << endl;
     
     if(inherit_default)
     {
@@ -858,8 +858,8 @@ void generateVisitor(const QString& name, bool inherit_default)
       }
     }
     
-    s << Qt::endl << "} // end of namespace " << globalSystem.ns << Qt::endl
-      << Qt::endl;
+    s << endl << "} // end of namespace " << globalSystem.ns << endl
+      << endl;
     
     QString oname = globalSystem.language;
     oname += name.toLower() + ".cpp";
diff --git a/kdev-pg/kdev-pg-lexer.cc b/kdev-pg/kdev-pg-lexer.cc
index d2fc22f..39d1a2c 100644
--- a/kdev-pg/kdev-pg-lexer.cc
+++ b/kdev-pg/kdev-pg-lexer.cc
@@ -2132,7 +2132,7 @@ case YY_STATE_EOF(RULE_LEXER):
 #line 245 "kdev-pg-lexer.ll"
 {
     BEGIN(INITIAL); // is not set automatically by yyrestart()
-    KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule lexer definition..." << Qt::endl;
+    KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule lexer definition..." << endl;
     yyerror("");
     return 0;
   }
@@ -2181,7 +2181,7 @@ case YY_STATE_EOF(RULE_ARGUMENTS):
 #line 267 "kdev-pg-lexer.ll"
 {
       BEGIN(INITIAL); // is not set automatically by yyrestart()
-      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule argument specification..." << Qt::endl;
+      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule argument specification..." << endl;
       yyerror("");
       return 0;
   }
@@ -2344,7 +2344,7 @@ case YY_STATE_EOF(CODE):
 #line 332 "kdev-pg-lexer.ll"
 {
       BEGIN(INITIAL); // is not set automatically by yyrestart()
-      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed code segment..." << Qt::endl;
+      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed code segment..." << endl;
       yyerror("");
       return 0;
   }
@@ -2378,7 +2378,7 @@ case 138:
 YY_RULE_SETUP
 #line 352 "kdev-pg-lexer.ll"
 {
-  KDevPG::checkOut << "Unexpected character: ``" << yytext[0] << "''" << Qt::endl;
+  KDevPG::checkOut << "Unexpected character: ``" << yytext[0] << "''" << endl;
   yyerror("");
 }
 	YY_BREAK
@@ -3445,7 +3445,7 @@ void appendLineBuffer()
 void yyerror(const char* msg )
 {
   Q_UNUSED(msg);
-  KDevPG::checkOut << "** LEXICAL ERROR at line " << yyLine << " column " << currentOffset << Qt::endl;
+  KDevPG::checkOut << "** LEXICAL ERROR at line " << yyLine << " column " << currentOffset << endl;
 
   char *current_end = yyTextLine + strlen(yyTextLine);
   char *p;
@@ -3473,7 +3473,7 @@ void yyerror(const char* msg )
   KDevPG::checkOut << yyTextLine;
 
   /* print a ^ under the most recent token */
-  KDevPG::checkOut << QString(currentOffset, ' ').append('^') << Qt::endl; /* currentOffset spaces, then ^ */
+  KDevPG::checkOut << QString(currentOffset, ' ').append('^') << endl; /* currentOffset spaces, then ^ */
 
   exit(EXIT_FAILURE);
 }
diff --git a/kdev-pg/kdev-pg-lexer.ll b/kdev-pg/kdev-pg-lexer.ll
index c515912..20ce99e 100644
--- a/kdev-pg/kdev-pg-lexer.ll
+++ b/kdev-pg/kdev-pg-lexer.ll
@@ -244,7 +244,7 @@ Char        [_a-zA-Z0-9]|\\[xXuU][0-9a-fA-F]{1,6}|\\[oO][0-7][0-7]*|\\[dD][0-9]{
   
   <<EOF>> {
     BEGIN(INITIAL); // is not set automatically by yyrestart()
-    KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule lexer definition..." << Qt::endl;
+    KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule lexer definition..." << endl;
     yyerror("");
     return 0;
   }
@@ -266,7 +266,7 @@ Char        [_a-zA-Z0-9]|\\[xXuU][0-9a-fA-F]{1,6}|\\[oO][0-7][0-7]*|\\[dD][0-9]{
   }
   <<EOF>> {
       BEGIN(INITIAL); // is not set automatically by yyrestart()
-      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule argument specification..." << Qt::endl;
+      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed rule argument specification..." << endl;
       yyerror("");
       return 0;
   }
@@ -331,7 +331,7 @@ Char        [_a-zA-Z0-9]|\\[xXuU][0-9a-fA-F]{1,6}|\\[oO][0-7][0-7]*|\\[dD][0-9]{
   }
   <<EOF>> {
       BEGIN(INITIAL); // is not set automatically by yyrestart()
-      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed code segment..." << Qt::endl;
+      KDevPG::checkOut << "** ERROR Encountered end of file in an unclosed code segment..." << endl;
       yyerror("");
       return 0;
   }
@@ -350,7 +350,7 @@ Char        [_a-zA-Z0-9]|\\[xXuU][0-9a-fA-F]{1,6}|\\[oO][0-7][0-7]*|\\[dD][0-9]{
 }
 
 . {
-  KDevPG::checkOut << "Unexpected character: ``" << yytext[0] << "''" << Qt::endl;
+  KDevPG::checkOut << "Unexpected character: ``" << yytext[0] << "''" << endl;
   yyerror("");
 }
 
@@ -433,7 +433,7 @@ void appendLineBuffer()
 void yyerror(const char* msg )
 {
   Q_UNUSED(msg);
-  KDevPG::checkOut << "** LEXICAL ERROR at line " << yyLine << " column " << currentOffset << Qt::endl;
+  KDevPG::checkOut << "** LEXICAL ERROR at line " << yyLine << " column " << currentOffset << endl;
 
   char *current_end = yyTextLine + strlen(yyTextLine);
   char *p;
@@ -461,7 +461,7 @@ void yyerror(const char* msg )
   KDevPG::checkOut << yyTextLine;
 
   /* print a ^ under the most recent token */
-  KDevPG::checkOut << QString(currentOffset, ' ').append('^') << Qt::endl; /* currentOffset spaces, then ^ */
+  KDevPG::checkOut << QString(currentOffset, ' ').append('^') << endl; /* currentOffset spaces, then ^ */
 
   exit(EXIT_FAILURE);
 }
diff --git a/kdev-pg/kdev-pg-main.cpp b/kdev-pg/kdev-pg-main.cpp
index bcaeef5..57cacf0 100644
--- a/kdev-pg/kdev-pg-main.cpp
+++ b/kdev-pg/kdev-pg-main.cpp
@@ -47,71 +47,71 @@ int yyparse();
 
 void usage()
 {
-  KDevPG::checkOut << "Usage: kdev-pg-qt [further-options] --output=<name> [further-options] <file.g>" << Qt::endl;
+  KDevPG::checkOut << "Usage: kdev-pg-qt [further-options] --output=<name> [further-options] <file.g>" << endl;
 }
 
 void help()
 {
   usage();
   KDevPG::checkOut
-           << "Options:" << Qt::endl
-           << "\t--output=<name> - Specify a prefix for all generated files" << Qt::endl
-           << "\t--namespace=<NameSpaceName> - Specify the namespace for all generated classes (default: the prefix)" << Qt::endl
-           << "\t--no-output - Do not actually generate files" << Qt::endl
-           << "Components:" << Qt::endl
-           << "\t--debug-visitor - Generate a visitor to dump the parse-tree" << Qt::endl
-           << "\t--serialize-visitor - Generate a visitor to store the parse-tree in a QTextStream" << Qt::endl
-           << "\t--no-ast - Do not generate any AST-files" << Qt::endl
-           << "\t--with-ast - Generate AST (default)" << Qt::endl
-           << "\t--no-parser - Do not create the parser, built-in-visitors etc." << Qt::endl
-           << "\t--with-parser - The default, a parser will be generated" << Qt::endl
-           << "\t--no-lexer - Do not generate the lexer" << Qt::endl
-           << "\t--with-lexer - Ensure lexer generation" << Qt::endl
-           << "\t--token-text - Generate a function converting the number of a token into its name" << Qt::endl
-           << "Informative output:" << Qt::endl
-           << "\t--terminals - Save a list of all terminals in a file named \"kdev-pg-terminals\"" << Qt::endl
-           << "\t--symbols - Save a list of all non-terminals in a file named \"kdev-pg-symbols\"" << Qt::endl
-           << "\t--rules - Save debugging-information for all rules in a file named \"kdev-pg-rules\"" << Qt::endl
-           << "\t--automata - Save DFAs for all used named regexps in \"kdev-pg-lexer-name-<name>.dot\" and for all states in \"kdev-pg-lexer-state-<name>.dot\"" << Qt::endl
-           << "Error-handling:" << Qt::endl
-           << "\t--permissive-conflicts - The default, conflicts are shown, but kdev-pg-qt will continue (default)" << Qt::endl
-           << "\t--strict-conflicts - Quit after having detected conflicts" << Qt::endl
-           << "\t--ignore-conflicts - Do not perform conflict-checking" << Qt::endl
-           << "Visitor generation:" << Qt::endl
-           << "\t--new-visitor=VisitorName - Create a new empty visitor" << Qt::endl
-           << "\t--inherit-default-visitor - Use the DefaultVisitor to visit sub-nodes" << Qt::endl
-           << "\t--inherit-abstract-visitor - Reimplement the functionality of the DefaultVisitor" << Qt::endl
-           << "Output format:" << Qt::endl
-           << "\t--error-aware-code - Line-numbers in parser.cpp related compiler-messages will correspond to line-numbers in the grammar-file (default)" << Qt::endl
-           << "\t--beautiful-code - Line-numbers in compiler-messages will be arbitrary, but the code will look more beautiful and it is probably more compiler-independent" << Qt::endl
-           << "\t--compatible-error-aware-code - Like --error-aware-code, but using #line instead of GCC-specific directives, thus not providing included-from-info to display the line number in the generated file" << Qt::endl
-           << "\t--visitor-table - Visit::visitNode will be implemented by using a lookup-array (default)" << Qt::endl
-           << "\t--visitor-switch - Visitor::visitNode will use a switch-statement" << Qt::endl
-           << "About:" << Qt::endl
-           << "\t--help - Show this messages" << Qt::endl
-           << "\t--usage - Show usage" << Qt::endl
-           << "\t--version - Show version" << Qt::endl
-           << "\t--author - Show authors" << Qt::endl << Qt::endl
-           << "See http://techbase.kde.org/Development/KDevelop-PG-Qt_Introduction for further aid." << Qt::endl;
+           << "Options:" << endl
+           << "\t--output=<name> - Specify a prefix for all generated files" << endl
+           << "\t--namespace=<NameSpaceName> - Specify the namespace for all generated classes (default: the prefix)" << endl
+           << "\t--no-output - Do not actually generate files" << endl
+           << "Components:" << endl
+           << "\t--debug-visitor - Generate a visitor to dump the parse-tree" << endl
+           << "\t--serialize-visitor - Generate a visitor to store the parse-tree in a QTextStream" << endl
+           << "\t--no-ast - Do not generate any AST-files" << endl
+           << "\t--with-ast - Generate AST (default)" << endl
+           << "\t--no-parser - Do not create the parser, built-in-visitors etc." << endl
+           << "\t--with-parser - The default, a parser will be generated" << endl
+           << "\t--no-lexer - Do not generate the lexer" << endl
+           << "\t--with-lexer - Ensure lexer generation" << endl
+           << "\t--token-text - Generate a function converting the number of a token into its name" << endl
+           << "Informative output:" << endl
+           << "\t--terminals - Save a list of all terminals in a file named \"kdev-pg-terminals\"" << endl
+           << "\t--symbols - Save a list of all non-terminals in a file named \"kdev-pg-symbols\"" << endl
+           << "\t--rules - Save debugging-information for all rules in a file named \"kdev-pg-rules\"" << endl
+           << "\t--automata - Save DFAs for all used named regexps in \"kdev-pg-lexer-name-<name>.dot\" and for all states in \"kdev-pg-lexer-state-<name>.dot\"" << endl
+           << "Error-handling:" << endl
+           << "\t--permissive-conflicts - The default, conflicts are shown, but kdev-pg-qt will continue (default)" << endl
+           << "\t--strict-conflicts - Quit after having detected conflicts" << endl
+           << "\t--ignore-conflicts - Do not perform conflict-checking" << endl
+           << "Visitor generation:" << endl
+           << "\t--new-visitor=VisitorName - Create a new empty visitor" << endl
+           << "\t--inherit-default-visitor - Use the DefaultVisitor to visit sub-nodes" << endl
+           << "\t--inherit-abstract-visitor - Reimplement the functionality of the DefaultVisitor" << endl
+           << "Output format:" << endl
+           << "\t--error-aware-code - Line-numbers in parser.cpp related compiler-messages will correspond to line-numbers in the grammar-file (default)" << endl
+           << "\t--beautiful-code - Line-numbers in compiler-messages will be arbitrary, but the code will look more beautiful and it is probably more compiler-independent" << endl
+           << "\t--compatible-error-aware-code - Like --error-aware-code, but using #line instead of GCC-specific directives, thus not providing included-from-info to display the line number in the generated file" << endl
+           << "\t--visitor-table - Visit::visitNode will be implemented by using a lookup-array (default)" << endl
+           << "\t--visitor-switch - Visitor::visitNode will use a switch-statement" << endl
+           << "About:" << endl
+           << "\t--help - Show this messages" << endl
+           << "\t--usage - Show usage" << endl
+           << "\t--version - Show version" << endl
+           << "\t--author - Show authors" << endl << endl
+           << "See http://techbase.kde.org/Development/KDevelop-PG-Qt_Introduction for further aid." << endl;
 
   exit(EXIT_SUCCESS);
 }
 
 void version()
 {
-  KDevPG::checkOut << "KDevelop-PG-Qt: " << KDEVELOP_PG_QT_VERSION_STRING << Qt::endl;
+  KDevPG::checkOut << "KDevelop-PG-Qt: " << KDEVELOP_PG_QT_VERSION_STRING << endl;
   
   exit(EXIT_SUCCESS);
 }
 
 void author()
 {
-  KDevPG::checkOut << QString::fromUtf8("KDevelop-PG-Qt: Copyright © 2005-2012 by the KDevelop-PG-Qt developers:") << Qt::endl
+  KDevPG::checkOut << QString::fromUtf8("KDevelop-PG-Qt: Copyright © 2005-2012 by the KDevelop-PG-Qt developers:") << endl
     << QString::fromUtf8("\tRoberto Raggi\n"
        "\tJakob Petsovits\n"
        "\tAndreas Pakulat\n"
        "\tJonathan Schmidt-Dominé\n"
-       "\t...and others") << Qt::endl;
+       "\t...and others") << endl;
 
   exit(EXIT_SUCCESS);
 }
@@ -128,14 +128,14 @@ public:
   {
     KDevPG::Model::EvolveItem *e = KDevPG::nodeCast<KDevPG::Model::EvolveItem*>(node);
 
-    out << Qt::endl;
+    out << endl;
     KDevPG::PrettyPrinter p(out);
     p(e);
 
     bool initial = true;
     KDevPG::World::NodeSet::iterator it;
 
-    out << Qt::endl;
+    out << endl;
     out << " FIRST:[";
     for (it = KDevPG::globalSystem.first(e).begin(); it != KDevPG::globalSystem.first(e).end(); ++it)
       {
@@ -149,7 +149,7 @@ public:
 
     initial = true;
 
-    out << Qt::endl;
+    out << endl;
     out << " FOLLOW:[";
     for (it = KDevPG::globalSystem.follow(e->mSymbol).begin();
          it != KDevPG::globalSystem.follow(e->mSymbol).end(); ++it)
@@ -161,7 +161,7 @@ public:
         initial = false;
       }
     out << "]";
-    out << Qt::endl;
+    out << endl;
   }
 };
 
@@ -330,7 +330,7 @@ int main(int argc, char **argv)
       if (!KDevPG::file.open(QIODevice::ReadOnly|QIODevice::Text))
         {
           KDevPG::checkOut << "kdev-pg-qt: file ``" << arg
-                    << "'' not found!" << Qt::endl;
+                    << "'' not found!" << endl;
           KDevPG::file.setFileName("");
         }
       else
@@ -339,7 +339,7 @@ int main(int argc, char **argv)
     else
     {
       KDevPG::checkOut << "kdev-pg-qt: unknown option ``" << arg << "''"
-                << Qt::endl;
+                << endl;
     }
   }
 
@@ -364,14 +364,14 @@ int main(int argc, char **argv)
   {
     if(KDevPG::globalSystem.rules.empty())
     {
-      KDevPG::checkOut << "** ERROR no parser rules" << Qt::endl;
+      KDevPG::checkOut << "** ERROR no parser rules" << endl;
       KDevPG::ProblemSummaryPrinter::reportError();
     }
     else
     {
       
       if(KDevPG::globalSystem.start.empty())
-        KDevPG::checkOut << "** WARNING could not detect a start-symbol, every symbol gets reused, you have to care about EOFs yourself!" << Qt::endl;
+        KDevPG::checkOut << "** WARNING could not detect a start-symbol, every symbol gets reused, you have to care about EOFs yourself!" << endl;
       
       for(QList<KDevPG::Model::EvolveItem*>::iterator it = KDevPG::globalSystem.rules.begin(); it != KDevPG::globalSystem.rules.end(); ++it)
       {
@@ -437,7 +437,7 @@ int main(int argc, char **argv)
   
   if (ensure_generate_lexer_or_not && generate_lexer && !KDevPG::globalSystem.hasLexer)
   {
-    KDevPG::checkOut << "** ERROR no lexer definiton" << Qt::endl;
+    KDevPG::checkOut << "** ERROR no lexer definiton" << endl;
     KDevPG::ProblemSummaryPrinter::reportError();
     generate_lexer = false;
   }
@@ -449,12 +449,12 @@ int main(int argc, char **argv)
   {
     if(!KDevPG::globalSystem.lexerEnvs.contains("start"))
     {
-      KDevPG::checkOut << "** ERROR missing start-state in the lexer" << Qt::endl;
+      KDevPG::checkOut << "** ERROR missing start-state in the lexer" << endl;
       KDevPG::ProblemSummaryPrinter::reportError();
     }
     if(!QRegularExpression(QStringLiteral("\\A[a-zA-Z_][a-zA-Z_0-9]*\\z")).match(KDevPG::globalSystem.tokenStream).hasMatch())
     { // primarily to exclude KDevPG::TokenStream (the default value)
-      KDevPG::checkOut << "** ERROR You have to specify a valid name for your lexer (%token_stream)" << Qt::endl;
+      KDevPG::checkOut << "** ERROR You have to specify a valid name for your lexer (%token_stream)" << endl;
       KDevPG::ProblemSummaryPrinter::reportError();
     }
     foreach(QString state, KDevPG::globalSystem.lexerEnvs.keys())
@@ -474,7 +474,7 @@ int main(int argc, char **argv)
       for (KDevPG::World::TerminalSet::iterator it = KDevPG::globalSystem.terminals.begin();
             it != KDevPG::globalSystem.terminals.end(); ++it)
         {
-          strm << it.key() << Qt::endl;
+          strm << it.key() << endl;
         }
     }
   if (dump_symbols)
@@ -485,7 +485,7 @@ int main(int argc, char **argv)
       for (KDevPG::World::SymbolSet::iterator it = KDevPG::globalSystem.symbols.begin();
             it != KDevPG::globalSystem.symbols.end(); ++it)
         {
-          strm << it.key() << Qt::endl;
+          strm << it.key() << endl;
         }
     }
   if (debug_rules)
diff --git a/kdev-pg/kdev-pg-new-visitor-bits-gen.cpp b/kdev-pg/kdev-pg-new-visitor-bits-gen.cpp
index 1b2149c..6808479 100644
--- a/kdev-pg/kdev-pg-new-visitor-bits-gen.cpp
+++ b/kdev-pg/kdev-pg-new-visitor-bits-gen.cpp
@@ -35,9 +35,9 @@ void GenerateNewVisitorBitsRule::operator()(QPair<QString,Model::SymbolItem*> co
   #define O(name) \
     out << "void " << name << "::visit" << name \
         << "(" << name << "Ast *node" \
-        << ") {" << Qt::endl << Qt::endl \
-        << "DefaultVisitor::visit" << name << "(node)" << Qt::endl \
-        << "}" << Qt::endl << Qt::endl;
+        << ") {" << endl << endl \
+        << "DefaultVisitor::visit" << name << "(node)" << endl \
+        << "}" << endl << endl;
   
   if(isOperatorSymbol(__it.second))
   {
diff --git a/kdev-pg/kdev-pg-new-visitor-gen.cpp b/kdev-pg/kdev-pg-new-visitor-gen.cpp
index 8dbf72d..777fe9b 100644
--- a/kdev-pg/kdev-pg-new-visitor-gen.cpp
+++ b/kdev-pg/kdev-pg-new-visitor-gen.cpp
@@ -28,8 +28,8 @@ namespace KDevPG
 
 void GenerateNewVisitor::operator()()
 {
-  out << "class " << globalSystem.exportMacro << " " << name << ": public DefaultVisitor {" << Qt::endl
-      << "public:" << Qt::endl;
+  out << "class " << globalSystem.exportMacro << " " << name << ": public DefaultVisitor {" << endl
+      << "public:" << endl;
 
   GenerateDefaultVisitorRule gen(out);
   for( World::SymbolSet::iterator it = globalSystem.symbols.begin();
@@ -38,7 +38,7 @@ void GenerateNewVisitor::operator()()
     gen(qMakePair(it.key(), *it));
   }
 
-  out << "};" << Qt::endl;
+  out << "};" << endl;
 }
 
 }
diff --git a/kdev-pg/kdev-pg-parser.cc b/kdev-pg/kdev-pg-parser.cc
index 6b52ca9..76123f4 100644
--- a/kdev-pg/kdev-pg-parser.cc
+++ b/kdev-pg/kdev-pg-parser.cc
@@ -1917,7 +1917,7 @@ yyreduce:
           base += 5;
         else
         {
-          KDevPG::checkOut << "** ERROR unknown codec  ``" << (yyvsp[(2) - (2)].str) << "''" << Qt::endl;
+          KDevPG::checkOut << "** ERROR unknown codec  ``" << (yyvsp[(2) - (2)].str) << "''" << endl;
           exit(-1);
         }
         KDevPG::GDFA::type = KDevPG::AutomatonType(base);
@@ -2050,9 +2050,9 @@ yyreduce:
 #line 207 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-parser.yy"
     {
               if((yyvsp[(1) - (4)].nfa)->acceptsEpsilon())
-                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << endl;
               else if((yyvsp[(1) - (4)].nfa)->isEmpty())
-                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << endl;
               QString s = QString((yyvsp[(2) - (4)].str)) + QString(r);
               KDevPG::globalSystem.lexerEnvs[lexerEnv].push_back((yyvsp[(1) - (4)].nfa));
               KDevPG::globalSystem.lexerActions[lexerEnv].push_back(s);
@@ -2065,19 +2065,19 @@ yyreduce:
 #line 217 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-parser.yy"
     {
               if((yyvsp[(1) - (8)].nfa)->acceptsEpsilon())
-                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << endl;
               else if((yyvsp[(1) - (8)].nfa)->isEmpty())
-                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << endl;
               bool ignore = false;
               auto minLen = (yyvsp[(4) - (8)].nfa)->minLength(), maxLen = (yyvsp[(4) - (8)].nfa)->maxLength();
               if(minLen == 0)
               {
-                KDevPG::checkOut << "** WARNING Lexer rule specifying epsilon-lookahead at line " << yyLine << ", ignore the lookahead." << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule specifying epsilon-lookahead at line " << yyLine << ", ignore the lookahead." << endl;
                 ignore = true;
               }
               else if(minLen != maxLen)
               {
-                KDevPG::checkOut << "** WARNING Invalid lookahead (no fixed length) at line " << yyLine << " (min length: " << (minLen == -1 ? "none" : QString::number(minLen)) << ", max length: " << (maxLen == -2 ? "infinity" : (maxLen == -1 ? "none" : QString::number(maxLen))) << "), ignore the lookahead." << Qt::endl;
+                KDevPG::checkOut << "** WARNING Invalid lookahead (no fixed length) at line " << yyLine << " (min length: " << (minLen == -1 ? "none" : QString::number(minLen)) << ", max length: " << (maxLen == -2 ? "infinity" : (maxLen == -1 ? "none" : QString::number(maxLen))) << "), ignore the lookahead." << endl;
                 ignore = true;
               }
               if(ignore)
@@ -2102,19 +2102,19 @@ yyreduce:
 #line 249 "/home/jonathan/gitKDE/kdevelop-pg-qt/kdev-pg/kdev-pg-parser.yy"
     {
               if((yyvsp[(1) - (8)].nfa)->acceptsEpsilon())
-                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << endl;
               else if((yyvsp[(1) - (8)].nfa)->isEmpty())
-                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << endl;
               bool ignore = false;
               auto minLen = (yyvsp[(4) - (8)].nfa)->minLength(), maxLen = (yyvsp[(4) - (8)].nfa)->maxLength();
               if(minLen == 0)
               {
-                KDevPG::checkOut << "** WARNING Lexer rule specifying epsilon-barrier at line " << yyLine << ", ignore the barrier." << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule specifying epsilon-barrier at line " << yyLine << ", ignore the barrier." << endl;
                 ignore = true;
               }
               else if(minLen != maxLen)
               {
-                KDevPG::checkOut << "** WARNING Invalid barrier (no fixed length) at line " << yyLine << " (min length: " << (minLen == -1 ? "none" : QString::number(minLen)) << ", max length: " << (maxLen == -2 ? "infinity" : (maxLen == -1 ? "none" : QString::number(maxLen))) << "), ignore the barrier." << Qt::endl;
+                KDevPG::checkOut << "** WARNING Invalid barrier (no fixed length) at line " << yyLine << " (min length: " << (minLen == -1 ? "none" : QString::number(minLen)) << ", max length: " << (maxLen == -2 ? "infinity" : (maxLen == -1 ? "none" : QString::number(maxLen))) << "), ignore the barrier." << endl;
                 ignore = true;
               }
               if(ignore)
@@ -2349,7 +2349,7 @@ yyreduce:
     {
                               if(!KDevPG::globalSystem.regexpById.contains((yyvsp[(1) - (1)].str)))
                               {
-                                KDevPG::checkOut << "** ERROR: no named regexp " << (yyvsp[(1) - (1)].str) << Qt::endl;
+                                KDevPG::checkOut << "** ERROR: no named regexp " << (yyvsp[(1) - (1)].str) << endl;
                                 exit(-1);
                               }
                               KDevPG::GNFA *regexp = KDevPG::globalSystem.regexpById[(yyvsp[(1) - (1)].str)];
@@ -2546,7 +2546,7 @@ yyreduce:
     {
                               if(!KDevPG::globalSystem.regexpById.contains((yyvsp[(1) - (1)].str)))
                               {
-                                KDevPG::checkOut << "** ERROR: no named regexp " << (yyvsp[(1) - (1)].str) << Qt::endl;
+                                KDevPG::checkOut << "** ERROR: no named regexp " << (yyvsp[(1) - (1)].str) << endl;
                                 exit(-1);
                               }
                               KDevPG::GNFA *regexp = KDevPG::globalSystem.regexpById[(yyvsp[(1) - (1)].str)];
diff --git a/kdev-pg/kdev-pg-parser.yy b/kdev-pg/kdev-pg-parser.yy
index 498a3be..71955ed 100644
--- a/kdev-pg/kdev-pg-parser.yy
+++ b/kdev-pg/kdev-pg-parser.yy
@@ -162,7 +162,7 @@ declaration
           base += 5;
         else
         {
-          KDevPG::checkOut << "** ERROR unknown codec  ``" << $2 << "''" << Qt::endl;
+          KDevPG::checkOut << "** ERROR unknown codec  ``" << $2 << "''" << endl;
           exit(-1);
         }
         KDevPG::GDFA::type = KDevPG::AutomatonType(base);
@@ -206,9 +206,9 @@ lexer_declaration_rest
     | regexp code_opt opt_lexer_action ';'
             {
               if($1->acceptsEpsilon())
-                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << endl;
               else if($1->isEmpty())
-                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << endl;
               QString s = QString($2) + QString(r);
               KDevPG::globalSystem.lexerEnvs[lexerEnv].push_back($1);
               KDevPG::globalSystem.lexerActions[lexerEnv].push_back(s);
@@ -216,19 +216,19 @@ lexer_declaration_rest
     | regexp T_LOOKAHEAD '(' regexp ')' code_opt opt_lexer_action ';'
             {
               if($1->acceptsEpsilon())
-                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << endl;
               else if($1->isEmpty())
-                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << endl;
               bool ignore = false;
               auto minLen = $4->minLength(), maxLen = $4->maxLength();
               if(minLen == 0)
               {
-                KDevPG::checkOut << "** WARNING Lexer rule specifying epsilon-lookahead at line " << yyLine << ", ignore the lookahead." << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule specifying epsilon-lookahead at line " << yyLine << ", ignore the lookahead." << endl;
                 ignore = true;
               }
               else if(minLen != maxLen)
               {
-                KDevPG::checkOut << "** WARNING Invalid lookahead (no fixed length) at line " << yyLine << " (min length: " << (minLen == -1 ? "none" : QString::number(minLen)) << ", max length: " << (maxLen == -2 ? "infinity" : (maxLen == -1 ? "none" : QString::number(maxLen))) << "), ignore the lookahead." << Qt::endl;
+                KDevPG::checkOut << "** WARNING Invalid lookahead (no fixed length) at line " << yyLine << " (min length: " << (minLen == -1 ? "none" : QString::number(minLen)) << ", max length: " << (maxLen == -2 ? "infinity" : (maxLen == -1 ? "none" : QString::number(maxLen))) << "), ignore the lookahead." << endl;
                 ignore = true;
               }
               if(ignore)
@@ -248,19 +248,19 @@ lexer_declaration_rest
     | regexp T_BARRIER '(' regexp ')' code_opt opt_lexer_action ';'
             {
               if($1->acceptsEpsilon())
-                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule accepting the empty word at line " << yyLine << endl;
               else if($1->isEmpty())
-                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule not accepting anything at line " << yyLine << endl;
               bool ignore = false;
               auto minLen = $4->minLength(), maxLen = $4->maxLength();
               if(minLen == 0)
               {
-                KDevPG::checkOut << "** WARNING Lexer rule specifying epsilon-barrier at line " << yyLine << ", ignore the barrier." << Qt::endl;
+                KDevPG::checkOut << "** WARNING Lexer rule specifying epsilon-barrier at line " << yyLine << ", ignore the barrier." << endl;
                 ignore = true;
               }
               else if(minLen != maxLen)
               {
-                KDevPG::checkOut << "** WARNING Invalid barrier (no fixed length) at line " << yyLine << " (min length: " << (minLen == -1 ? "none" : QString::number(minLen)) << ", max length: " << (maxLen == -2 ? "infinity" : (maxLen == -1 ? "none" : QString::number(maxLen))) << "), ignore the barrier." << Qt::endl;
+                KDevPG::checkOut << "** WARNING Invalid barrier (no fixed length) at line " << yyLine << " (min length: " << (minLen == -1 ? "none" : QString::number(minLen)) << ", max length: " << (maxLen == -2 ? "infinity" : (maxLen == -1 ? "none" : QString::number(maxLen))) << "), ignore the barrier." << endl;
                 ignore = true;
               }
               if(ignore)
@@ -358,7 +358,7 @@ regexp7
     | T_NAMED_REGEXP        {
                               if(!KDevPG::globalSystem.regexpById.contains($1))
                               {
-                                KDevPG::checkOut << "** ERROR: no named regexp " << $1 << Qt::endl;
+                                KDevPG::checkOut << "** ERROR: no named regexp " << $1 << endl;
                                 exit(-1);
                               }
                               KDevPG::GNFA *regexp = KDevPG::globalSystem.regexpById[$1];
@@ -442,7 +442,7 @@ aregexp7
     | T_NAMED_REGEXP        {
                               if(!KDevPG::globalSystem.regexpById.contains($1))
                               {
-                                KDevPG::checkOut << "** ERROR: no named regexp " << $1 << Qt::endl;
+                                KDevPG::checkOut << "** ERROR: no named regexp " << $1 << endl;
                                 exit(-1);
                               }
                               KDevPG::GNFA *regexp = KDevPG::globalSystem.regexpById[$1];
diff --git a/kdev-pg/kdev-pg-regexp-helper.h b/kdev-pg/kdev-pg-regexp-helper.h
index fc766b9..cf7b031 100644
--- a/kdev-pg/kdev-pg-regexp-helper.h
+++ b/kdev-pg/kdev-pg-regexp-helper.h
@@ -64,7 +64,7 @@ inline void printChar(QTextStream& o, uint x)
   else if(x >= 32 && x <= 126)
     o << '\'' << (char)x << '\'';
   else
-    o << Qt::hex << "\\" << qSetFieldWidth(2) << qSetPadChar('0') << x;
+    o << hex << "\\" << qSetFieldWidth(2) << qSetPadChar('0') << x;
   o.setPadChar(pad);
   o.setFieldWidth(width);
   o.setIntegerBase(base);
diff --git a/kdev-pg/kdev-pg-regexp.cpp b/kdev-pg/kdev-pg-regexp.cpp
index 808018f..d549c38 100644
--- a/kdev-pg/kdev-pg-regexp.cpp
+++ b/kdev-pg/kdev-pg-regexp.cpp
@@ -71,10 +71,10 @@ inline QString codeForDot(QString str)
     int npos = str.indexOf("\n\01!ASIgnore\"!!\n# ", pos);
     if(npos == -1)
     {
-      out += QStringView(str).mid(pos);
+      out += str.midRef(pos);
       break;
     }
-    out += QStringView(str).mid(pos, npos - pos);
+    out += str.midRef(pos, npos - pos);
     int nlpos = str.indexOf('\n', npos + 17);
     int codeendpos = str.indexOf("\n\01!AS/Ignore\"!!\n", nlpos);
     if(nlpos == -1 || codeendpos == -1)
@@ -82,7 +82,7 @@ inline QString codeForDot(QString str)
       out += "<junk>";
       break;
     }
-    out += QStringView(str).mid(nlpos + 1, codeendpos - nlpos - 1);
+    out += str.midRef(nlpos + 1, codeendpos - nlpos - 1);
     pos = codeendpos + 17;
   }
   return out.replace('\"', "\\\"").replace('\n', '\t').trimmed();
@@ -136,7 +136,7 @@ public:
     /// .dot-output
     void dotOutput(QTextStream& out, const QString& name)
     {
-      out << "digraph " << name << "{" << Qt::endl;
+      out << "digraph " << name << "{" << endl;
       for(size_t i = 0; i != nstates; ++i)
       {
         out << "s" << i << " [ label = \"" << i << "\"";
@@ -146,24 +146,24 @@ public:
           out << ", shape=oval";
         if(accept[i] != 0)
           out << ", penwidth=4";
-        out << " ];" << Qt::endl;
+        out << " ];" << endl;
       }
       for(size_t i = 1; i <= numActions; ++i)
       {
-        out << "f" << i << " [ label = \"" << codeForDot(actions[i]) << "\", shape=rect, penwidth=2 ];" << Qt::endl;
+        out << "f" << i << " [ label = \"" << codeForDot(actions[i]) << "\", shape=rect, penwidth=2 ];" << endl;
       }
       for(size_t i = 0; i != nstates; ++i)
       {
         for(auto j = rules[i].begin(); j != rules[i].end(); ++j)
         {
-          out << "s" << i << " -> " << "s" << j->second << " [ label = \"" << j->first << "\" ];" << Qt::endl;
+          out << "s" << i << " -> " << "s" << j->second << " [ label = \"" << j->first << "\" ];" << endl;
         }
         if(accept[i] != 0)
         {
-          out << "s" << i << " -> " << "f" << accept[i] << ";" << Qt::endl;
+          out << "s" << i << " -> " << "f" << accept[i] << ";" << endl;
         }
       }
-      out << "}" << Qt::endl;
+      out << "}" << endl;
     }
     /// Debugging output
     void inspect()
@@ -408,7 +408,7 @@ public:
     }
     void dotOutput(QTextStream& out, const QString& name)
     {
-      out << "digraph " << name << "{" << Qt::endl;
+      out << "digraph " << name << "{" << endl;
       for(size_t i = 0; i != nstates; ++i)
       {
         out << "s" << i << " [ label = \"" << i << "\"";
@@ -418,16 +418,16 @@ public:
           out << ", shape=oval";
         if(i >= accept)
           out << ", penwidth=4";
-        out << " ];" << Qt::endl;
+        out << " ];" << endl;
       }
       for(size_t i = 0; i != nstates; ++i)
       {
         for(auto j = rules[i].begin(); j != rules[i].end(); ++j)
         {
-          out << "s" << i << " -> " << "s" << j->second << " [ label = \"" << j->first << "\" ];" << Qt::endl;
+          out << "s" << i << " -> " << "s" << j->second << " [ label = \"" << j->first << "\" ];" << endl;
         }
       }
-      out << "}" << Qt::endl;
+      out << "}" << endl;
     }
     /**
      * Accepts no words.
diff --git a/kdev-pg/kdev-pg-serialize-visitor-gen.cpp b/kdev-pg/kdev-pg-serialize-visitor-gen.cpp
index 200cc9a..ff78863 100644
--- a/kdev-pg/kdev-pg-serialize-visitor-gen.cpp
+++ b/kdev-pg/kdev-pg-serialize-visitor-gen.cpp
@@ -27,114 +27,114 @@ namespace KDevPG
 
 void GenerateSerializeVisitor::operator()()
 {
-  out << "class " << globalSystem.exportMacro << " Serialize: public DefaultVisitor {" << Qt::endl
-      << "public:" << Qt::endl;
-
-  out << "static void read(KDevPG::MemoryPool *p," << Qt::endl
-      << "AstNode *node, QIODevice* i) { " << Qt::endl
-      << "Serialize(p, node, i); " << Qt::endl
-      << "}" << Qt::endl << Qt::endl;
-
-  out << "static void write(AstNode *node, QIODevice* o) { " << Qt::endl
-      << "Serialize(node, o); " << Qt::endl
-      << "}" << Qt::endl << Qt::endl;
-
-  out << "private:" << Qt::endl;
-  out << "Serialize(KDevPG::MemoryPool *p," << Qt::endl
-      << "AstNode *node, QIODevice* i) : in(i) {" << Qt::endl
-      << "memoryPool = p;" << Qt::endl
-      << "if ( !node )" << Qt::endl
-      << "node = create<" << (*globalSystem.start.begin())->mCapitalizedName << "Ast>();" << Qt::endl
-      << "visitNode( node );" << Qt::endl
-      << "}" << Qt::endl << Qt::endl;
-
-  out << "Serialize(AstNode *node, QIODevice *o) : out(o) {" << Qt::endl
-      << "visitNode( node );" << Qt::endl
-      << "}" << Qt::endl << Qt::endl;
-
-  out << "QDataStream in;" << Qt::endl;
-  out << "QDataStream out;" << Qt::endl << Qt::endl;
-
-  out << "// memory pool" << Qt::endl
-      << "typedef KDevPG::MemoryPool memoryPoolType;" << Qt::endl
-      << "KDevPG::MemoryPool *memoryPool;" << Qt::endl
-      << "template <class T>" << Qt::endl
-      << "inline T *create() {" << Qt::endl
-      << "T *node = new (memoryPool->allocate(sizeof(T))) T();" << Qt::endl
-      << "node->kind = T::KIND;" << Qt::endl
-      << "return node;" << Qt::endl
-      << "}" << Qt::endl;
-
-  out << "template <class T, class E>" << Qt::endl
-      << "void handleListNode(const KDevPG::ListNode<T> *t, E *e) {" << Qt::endl
-      << "if (in) {" << Qt::endl
+  out << "class " << globalSystem.exportMacro << " Serialize: public DefaultVisitor {" << endl
+      << "public:" << endl;
+
+  out << "static void read(KDevPG::MemoryPool *p," << endl
+      << "AstNode *node, QIODevice* i) { " << endl
+      << "Serialize(p, node, i); " << endl
+      << "}" << endl << endl;
+
+  out << "static void write(AstNode *node, QIODevice* o) { " << endl
+      << "Serialize(node, o); " << endl
+      << "}" << endl << endl;
+
+  out << "private:" << endl;
+  out << "Serialize(KDevPG::MemoryPool *p," << endl
+      << "AstNode *node, QIODevice* i) : in(i) {" << endl
+      << "memoryPool = p;" << endl
+      << "if ( !node )" << endl
+      << "node = create<" << (*globalSystem.start.begin())->mCapitalizedName << "Ast>();" << endl
+      << "visitNode( node );" << endl
+      << "}" << endl << endl;
+
+  out << "Serialize(AstNode *node, QIODevice *o) : out(o) {" << endl
+      << "visitNode( node );" << endl
+      << "}" << endl << endl;
+
+  out << "QDataStream in;" << endl;
+  out << "QDataStream out;" << endl << endl;
+
+  out << "// memory pool" << endl
+      << "typedef KDevPG::MemoryPool memoryPoolType;" << endl
+      << "KDevPG::MemoryPool *memoryPool;" << endl
+      << "template <class T>" << endl
+      << "inline T *create() {" << endl
+      << "T *node = new (memoryPool->allocate(sizeof(T))) T();" << endl
+      << "node->kind = T::KIND;" << endl
+      << "return node;" << endl
+      << "}" << endl;
+
+  out << "template <class T, class E>" << endl
+      << "void handleListNode(const KDevPG::ListNode<T> *t, E *e) {" << endl
+      << "if (in) {" << endl
 
       //list in
-      << "bool b;" << Qt::endl
-      << "in >> b;" << Qt::endl
-      << "if (b) {" << Qt::endl
-      << "qint64 count;" << Qt::endl
-      << "in >> count;" << Qt::endl
-      << "for ( qint64 i = 0; i < count; ++i ) {" << Qt::endl
-      << "    e = create<E>();" << Qt::endl // FIXME: what about token
-      << "    t = KDevPG::snoc(t, e, memoryPool);" << Qt::endl
-      << "}" << Qt::endl
-      << "}" << Qt::endl
+      << "bool b;" << endl
+      << "in >> b;" << endl
+      << "if (b) {" << endl
+      << "qint64 count;" << endl
+      << "in >> count;" << endl
+      << "for ( qint64 i = 0; i < count; ++i ) {" << endl
+      << "    e = create<E>();" << endl // FIXME: what about token
+      << "    t = KDevPG::snoc(t, e, memoryPool);" << endl
+      << "}" << endl
+      << "}" << endl
       //end list in
 
-      << "} else if (out) {" << Qt::endl
+      << "} else if (out) {" << endl
 
       //list out
-      <<"if (t) {" << Qt::endl
-      << "out << true;" << Qt::endl
-      << "out << t->count();" << Qt::endl
-      << "} else {" << Qt::endl
-      << "out << false;" << Qt::endl
-      << "}" << Qt::endl << Qt::endl
+      <<"if (t) {" << endl
+      << "out << true;" << endl
+      << "out << t->count();" << endl
+      << "} else {" << endl
+      << "out << false;" << endl
+      << "}" << endl << endl
       //end list out
 
-      << "}" << Qt::endl
-      << "}" << Qt::endl << Qt::endl;
+      << "}" << endl
+      << "}" << endl << endl;
 
-  out << "template <class T>" << Qt::endl
-      << "void handleAstNode(T *t) {" << Qt::endl
-      << "if (in) {" << Qt::endl
+  out << "template <class T>" << endl
+      << "void handleAstNode(T *t) {" << endl
+      << "if (in) {" << endl
 
       //ast in
-      << "bool b;" << Qt::endl
-      << "in >> b;" << Qt::endl
-      << "if (b) {" << Qt::endl
-      << "t = create<T>();" << Qt::endl
-
-      << "in >> t->startToken;" << Qt::endl
-      << "in >> t->endToken;" << Qt::endl
-      << "}" << Qt::endl
+      << "bool b;" << endl
+      << "in >> b;" << endl
+      << "if (b) {" << endl
+      << "t = create<T>();" << endl
+
+      << "in >> t->startToken;" << endl
+      << "in >> t->endToken;" << endl
+      << "}" << endl
       //end ast in
 
-      << "} else if (out) {" << Qt::endl
+      << "} else if (out) {" << endl
 
       //ast out
-      << "if (t) {" << Qt::endl
-      << "bool b = true;" << Qt::endl
-      << "out << true;" << Qt::endl
-      << "out << t->startToken;" << Qt::endl
-      << "out << t->endToken;" << Qt::endl
-      << "} else {" << Qt::endl
-      << "out << false;" << Qt::endl
-      << "}" << Qt::endl << Qt::endl
+      << "if (t) {" << endl
+      << "bool b = true;" << endl
+      << "out << true;" << endl
+      << "out << t->startToken;" << endl
+      << "out << t->endToken;" << endl
+      << "} else {" << endl
+      << "out << false;" << endl
+      << "}" << endl << endl
       //end ast out
 
-      << "}" << Qt::endl
-      << "}" << Qt::endl << Qt::endl;
+      << "}" << endl
+      << "}" << endl << endl;
 
-  out << "template <class T>" << Qt::endl
-      << "void handleVariable(T *t) {" << Qt::endl
-      << "if (in) {" << Qt::endl
-      << "in >> t;" << Qt::endl
-      << "} else if (out) {" << Qt::endl
-      << "out << t;" << Qt::endl
-      << "}" << Qt::endl
-      << "}" << Qt::endl << Qt::endl;
+  out << "template <class T>" << endl
+      << "void handleVariable(T *t) {" << endl
+      << "if (in) {" << endl
+      << "in >> t;" << endl
+      << "} else if (out) {" << endl
+      << "out << t;" << endl
+      << "}" << endl
+      << "}" << endl << endl;
 
 
   GenerateSerializeVisitorRule gen(out);
@@ -144,7 +144,7 @@ void GenerateSerializeVisitor::operator()()
     gen(qMakePair(it.key(), *it));
   }
 
-  out << "};" << Qt::endl;
+  out << "};" << endl;
 }
 
 void GenerateSerializeVisitorRule::operator()(QPair<QString,
@@ -161,16 +161,16 @@ void GenerateSerializeVisitorRule::operator()(QPair<QString,
 
   out << "void visit" << sym->mCapitalizedName
       << "(" << sym->mCapitalizedName << "Ast *" << "node"
-      << ") override {" << Qt::endl;
+      << ") override {" << endl;
 
   Model::EvolveItem *e = globalSystem.searchRule(sym);
   visitNode(e);
   
   out << "DefaultVisitor::visit" << sym->mCapitalizedName
       << "(" << "node"
-      << ");" << Qt::endl;
+      << ");" << endl;
 
-  out << "}" << Qt::endl << Qt::endl;
+  out << "}" << endl << endl;
 }
 
 void GenerateSerializeVisitorRule::visitVariableDeclaration(Model::VariableDeclarationItem *node)
@@ -195,19 +195,19 @@ void GenerateSerializeVisitorRule::visitVariableDeclaration(Model::VariableDecla
 
     if (node->mIsSequence)
     {
-      out << "{" << Qt::endl
-          << type << " *e = 0;" << Qt::endl
-          << "handleListNode(node->" << name << "Sequence, e);" << Qt::endl
-          << "}" << Qt::endl;
+      out << "{" << endl
+          << type << " *e = 0;" << endl
+          << "handleListNode(node->" << name << "Sequence, e);" << endl
+          << "}" << endl;
     }
     else if (node->mVariableType == Model::VariableDeclarationItem::TypeNode)
     {
-      out << "handleAstNode(node->" << name << ");" << Qt::endl;
+      out << "handleAstNode(node->" << name << ");" << endl;
     }
     else if (node->mVariableType == Model::VariableDeclarationItem::TypeVariable
              || node->mVariableType == Model::VariableDeclarationItem::TypeToken)
     {
-      out << "handleVariable(&node->" << name << ");" << Qt::endl;
+      out << "handleVariable(&node->" << name << ");" << endl;
     }
     else
     {
diff --git a/kdev-pg/kdev-pg-token-type-gen.cpp b/kdev-pg/kdev-pg-token-type-gen.cpp
index 1a54f96..d126ec5 100644
--- a/kdev-pg/kdev-pg-token-type-gen.cpp
+++ b/kdev-pg/kdev-pg-token-type-gen.cpp
@@ -50,7 +50,7 @@ void GenerateToken::operator()(QPair<QString, Model::TerminalItem*> const &__it)
     out << mTokenValue;
     ++mTokenValue;
   }
-  out << "," << Qt::endl;
+  out << "," << endl;
 }
 
 void GenerateTokenType::operator()()
diff --git a/kdev-pg/kdev-pg-visitor-bits-gen.cpp b/kdev-pg/kdev-pg-visitor-bits-gen.cpp
index 86e6212..3aa3685 100644
--- a/kdev-pg/kdev-pg-visitor-bits-gen.cpp
+++ b/kdev-pg/kdev-pg-visitor-bits-gen.cpp
@@ -34,7 +34,7 @@ void GenerateVisitorBits::operator()()
   
   if (globalSystem.visitorTable)
   {
-    out << "Visitor::ParserFuncType Visitor::sParserTable[] = {" << Qt::endl;
+    out << "Visitor::ParserFuncType Visitor::sParserTable[] = {" << endl;
 
     while (it != globalSystem.symbols.end())
       {
@@ -60,16 +60,16 @@ void GenerateVisitorBits::operator()()
         if (it != globalSystem.symbols.end())
           out << ",";
 
-        out << Qt::endl;
+        out << endl;
         
         #undef O
       }
 
-    out << "}; // sParserTable[]" << Qt::endl;
+    out << "}; // sParserTable[]" << endl;
     
     out << "void Visitor::visitNode(AstNode *node) { "
         << "if (node) (this->*sParserTable[node->kind - 1000])(node); "
-        << "}" << Qt::endl;
+        << "}" << endl;
   }
   else
   {
@@ -97,7 +97,7 @@ void GenerateVisitorBits::operator()()
     }
       
     out << "default: Q_ASSERT(false); } } }"
-        << Qt::endl;
+        << endl;
   }
 }
 
diff --git a/kdev-pg/kdev-pg-visitor-gen.cpp b/kdev-pg/kdev-pg-visitor-gen.cpp
index 6f0e031..ed70642 100644
--- a/kdev-pg/kdev-pg-visitor-gen.cpp
+++ b/kdev-pg/kdev-pg-visitor-gen.cpp
@@ -28,24 +28,24 @@ namespace KDevPG
 
 void GenerateVisitor::operator()()
 {
-  out << "class " << globalSystem.exportMacro << " Visitor {" << Qt::endl;
+  out << "class " << globalSystem.exportMacro << " Visitor {" << endl;
   if (globalSystem.visitorTable)
   {
-    out << "typedef void (Visitor::*ParserFuncType)(AstNode *);" << Qt::endl
-        << "static ParserFuncType sParserTable[];" << Qt::endl
-        << Qt::endl;
+    out << "typedef void (Visitor::*ParserFuncType)(AstNode *);" << endl
+        << "static ParserFuncType sParserTable[];" << endl
+        << endl;
   }
-  out << "public:" << Qt::endl
-      << "virtual ~Visitor() {}" << Qt::endl;
+  out << "public:" << endl
+      << "virtual ~Visitor() {}" << endl;
 
-  out << "virtual void visitNode(AstNode *node);" << Qt::endl;
+  out << "virtual void visitNode(AstNode *node);" << endl;
 
   for (QMap<QString, Model::SymbolItem*>::iterator it = globalSystem.symbols.begin();
        it != globalSystem.symbols.end(); ++it)
     {
       Model::SymbolItem *sym = (*it);
       #define O(str) \
-          out << "virtual void visit" << str << "(" << str << "Ast *) {}" << Qt::endl;
+          out << "virtual void visit" << str << "(" << str << "Ast *) {}" << endl;
       if(isOperatorSymbol(sym))
       {
         O("Prefix" + sym->mCapitalizedName)
@@ -58,7 +58,7 @@ void GenerateVisitor::operator()()
       #undef O
     }
 
-  out << "};" << Qt::endl;
+  out << "};" << endl;
 }
 
 }
