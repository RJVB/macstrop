diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2f61a45..ba58cd3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -60,7 +60,7 @@ if (APPLE)
     set(CMAKE_MACOSX_RPATH 1)
     set(BUILD_WITH_INSTALL_RPATH 1)
     set(MACOS_GUI_TEST "GUI")
-    add_definitions(-mmacosx-version-min=10.13 -Wno-macro-redefined -Wno-deprecated-register)
+    add_definitions(-Wno-macro-redefined -Wno-deprecated-register)
     if (CMAKE_OSX_ARCHITECTURES)
         message(STATUS "CMake OSX architectures: ${CMAKE_OSX_ARCHITECTURES}")
     endif()
@@ -477,9 +477,8 @@ if (Qt5QuickWidgets_FOUND)
     list (APPEND ANDROID_EXTRA_LIBS $<TARGET_FILE:Qt5::QuickWidgets>)
 endif()
 
-if (NOT WIN32 AND NOT APPLE AND NOT ANDROID)
+if (NOT WIN32)
 
-    find_package(Qt5 ${MIN_QT_VERSION} REQUIRED X11Extras)
 
     find_package(Qt5DBus ${MIN_QT_VERSION})
     set(HAVE_DBUS ${Qt5DBus_FOUND})
@@ -497,9 +496,12 @@ if (NOT WIN32 AND NOT APPLE AND NOT ANDROID)
         TYPE OPTIONAL
         PURPOSE "Optionally used to provide crash reporting on Linux")
 
-    find_package(X11 REQUIRED COMPONENTS Xinput)
-    set(HAVE_X11 TRUE)
-    add_definitions(-DHAVE_X11)
+    if (NOT APPLE)
+        find_package(Qt5 ${MIN_QT_VERSION} REQUIRED X11Extras)
+        find_package(X11 REQUIRED COMPONENTS Xinput)
+        set(HAVE_X11 TRUE)
+        add_definitions(-DHAVE_X11)
+    endif()
 
 else()
     set(HAVE_DBUS FALSE)
diff --git a/krita/CMakeLists.txt b/krita/CMakeLists.txt
index 7e3d4bf..954a3c9 100644
--- a/krita/CMakeLists.txt
+++ b/krita/CMakeLists.txt
@@ -122,8 +122,8 @@ endif()
 
 if (APPLE)
     set(KRITA_VERSION_NUMBER_STRING "${KRITA_STABLE_VERSION_MAJOR}.${KRITA_STABLE_VERSION_MINOR}.${KRITA_VERSION_RELEASE}")
-    set_target_properties(krita PROPERTIES INSTALL_RPATH "@loader_path/../../../../lib;@loader_path/../lib;
-        @loader_path/../Frameworks;@executable_path/../../../../lib;@executable_path/../lib;@executable_path/../Frameworks")
+#     set_target_properties(krita PROPERTIES INSTALL_RPATH "@loader_path/../../../../lib;@loader_path/../lib;
+#         @loader_path/../Frameworks;@executable_path/../../../../lib;@executable_path/../lib;@executable_path/../Frameworks")
     set_target_properties(krita PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/Info.plist.template)
     set_target_properties(krita PROPERTIES MACOSX_BUNDLE_GUI_IDENTIFIER "org.krita")
     set_target_properties(krita PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME "Krita")
diff --git a/krita/main.cc b/krita/main.cc
index 3016772..4d90632 100644
--- a/krita/main.cc
+++ b/krita/main.cc
@@ -230,7 +230,11 @@ extern "C" MAIN_EXPORT int MAIN_FN(int argc, char **argv)
 {
     // The global initialization of the random generator
     qsrand(time(0));
+#if !defined(Q_OS_OSX) || defined(APPLE_STANDALONE_BUNDLE)
     bool runningInKDE = !qgetenv("KDE_FULL_SESSION").isEmpty();
+#else
+    bool runningInKDE = true;
+#endif
 
 #if defined HAVE_X11
     qputenv("QT_QPA_PLATFORM", "xcb");
@@ -385,8 +389,10 @@ extern "C" MAIN_EXPORT int MAIN_FN(int argc, char **argv)
             qputenv("GST_PLUGIN_SCANNER", appimageMountDir + QFile::encodeName("/usr/lib/gstreamer-1.0/gst-plugin-scanner"));
         }
     }
-#else
+#elif !defined(Q_OS_OSX) || defined(APPLE_STANDALONE_BUNDLE)
     qputenv("XDG_DATA_DIRS", QFile::encodeName(QDir(root + "share").absolutePath()));
+#else
+    qputenv("XDG_DATA_DIRS", QFile::encodeName(QStandardPaths::standardLocations(QStandardPaths::GenericDataLocation).join(QLatin1Char(':'))));
 #endif
 
     dbgKrita << "Setting XDG_DATA_DIRS" << qgetenv("XDG_DATA_DIRS");
diff --git a/libs/pigment/compositeops/KoVcMultiArchBuildSupport.h b/libs/pigment/compositeops/KoVcMultiArchBuildSupport.h
index 5976508..a61e93e 100644
--- a/libs/pigment/compositeops/KoVcMultiArchBuildSupport.h
+++ b/libs/pigment/compositeops/KoVcMultiArchBuildSupport.h
@@ -11,6 +11,8 @@
 
 #ifdef HAVE_VC
 
+#include <limits>
+
 #if defined(__clang__)
 
 #pragma GCC diagnostic ignored "-Wlocal-type-template-args"
diff --git a/libs/resources/KisResourceStorage.cpp b/libs/resources/KisResourceStorage.cpp
index 298b85c..684a320 100644
--- a/libs/resources/KisResourceStorage.cpp
+++ b/libs/resources/KisResourceStorage.cpp
@@ -101,7 +101,7 @@ KisResourceStorage::KisResourceStorage(const QString &location)
             d->storagePlugin.reset(KisStoragePluginRegistry::instance()->m_storageFactoryMap[StorageType::AdobeStyleLibrary]->create(location));
             d->storageType = StorageType::AdobeStyleLibrary;
             d->valid = d->storagePlugin->isValid();
-    } else if (d->location == "memory" || !QUuid::fromString(d->location).isNull() || (!d->location.isEmpty() && !fi.exists())) {
+    } else if (d->location == "memory" || !QUuid(d->location).isNull() || (!d->location.isEmpty() && !fi.exists())) {
         d->storagePlugin.reset(KisStoragePluginRegistry::instance()->m_storageFactoryMap[StorageType::Memory]->create(location));
         d->name = location;
         d->storageType = StorageType::Memory;
diff --git a/libs/resources/KoResourcePaths.cpp b/libs/resources/KoResourcePaths.cpp
index b555d9d..b6e3010 100644
--- a/libs/resources/KoResourcePaths.cpp
+++ b/libs/resources/KoResourcePaths.cpp
@@ -14,6 +14,7 @@
 #include <QFileInfo>
 #include <QDebug>
 #include <QCoreApplication>
+#include <QLibraryInfo>
 #include <QMutex>
 #include "kis_debug.h"
 #include "ksharedconfig.h"
@@ -77,7 +78,7 @@ static const Qt::CaseSensitivity cs = Qt::CaseSensitive;
 #endif
 
 QString getInstallationPrefix() {
-#ifdef Q_OS_MACOS
+#ifdef APPLE_STANDALONE_BUNDLE
     QString appPath = qApp->applicationDirPath();
 
     dbgResources << "1" << appPath;
@@ -106,7 +107,8 @@ QString getInstallationPrefix() {
     // any files other than libraries
     return QStandardPaths::writableLocation(QStandardPaths::AppDataLocation) + "/";
 #else
-    return qApp->applicationDirPath() + "/../";
+//     return qApp->applicationDirPath() + "/../";
+    return QLibraryInfo::location(QLibraryInfo::PrefixPath);
 #endif
 }
 
@@ -388,7 +390,7 @@ QStringList KoResourcePaths::findDirsInternal(const QString &type)
                 QStandardPaths::locateAll(d->mapTypeToQStandardPaths(type), alias + '/', QStandardPaths::LocateDirectory);
         appendResources(&dirs, aliasDirs, true);
 
-#ifdef Q_OS_MACOS
+#ifdef APPLE_STANDALONE_BUNDLE
         dbgResources << "MAC:" << getApplicationRoot();
         QStringList bundlePaths;
         bundlePaths << getApplicationRoot() + "/share/krita/" + alias;
diff --git a/libs/ui/dialogs/kis_dlg_layer_style.cpp b/libs/ui/dialogs/kis_dlg_layer_style.cpp
index 3efdff2..3ebfae1 100644
--- a/libs/ui/dialogs/kis_dlg_layer_style.cpp
+++ b/libs/ui/dialogs/kis_dlg_layer_style.cpp
@@ -728,8 +728,9 @@ void StylesSelector::addNewStyle(const QString &location, KisPSDLayerStyleSP sty
     ui.cmbStyleCollections->setCurrentText(location);
     loadStyles(ui.cmbStyleCollections->currentText());
     KIS_ASSERT(m_resourceModel->resourceForId(style->resourceId()));
+    const auto cRow = m_resourceModel->indexForResource(style).row();
     ui.listStyles->setCurrentIndex(m_locationsProxyModel->mapFromSource(
-        m_resourceModel->indexForResource(style).siblingAtColumn(ui.listStyles->modelColumn())));
+        m_resourceModel->indexForResource(style).sibling(cRow, ui.listStyles->modelColumn())));
 
     notifyExternalStyleChanged(style->name(), style->uuid());
 }
diff --git a/libs/ui/dialogs/kis_dlg_preferences.cc b/libs/ui/dialogs/kis_dlg_preferences.cc
index 07439c2..49ca321 100644
--- a/libs/ui/dialogs/kis_dlg_preferences.cc
+++ b/libs/ui/dialogs/kis_dlg_preferences.cc
@@ -322,7 +322,7 @@ GeneralTab::GeneralTab(QWidget *_parent, const char *_name)
 #endif
     m_chkNativeFileDialog->setChecked(!group.readEntry("DontUseNativeFileDialog", dontUseNative));
 
-    if (!qEnvironmentVariable("APPIMAGE").isEmpty()) {
+    if (qEnvironmentVariableIsSet("APPIMAGE") && !qEnvironmentVariableIsEmpty("APPIMAGE")) {
         // AppImages don't have access to platform plugins. BUG: 447805
         // Setting the checkbox to false is 
         m_chkNativeFileDialog->setChecked(false);
diff --git a/libs/ui/kisexiv2/kis_iptc_io.cpp b/libs/ui/kisexiv2/kis_iptc_io.cpp
index cc43918..1b845b1 100644
--- a/libs/ui/kisexiv2/kis_iptc_io.cpp
+++ b/libs/ui/kisexiv2/kis_iptc_io.cpp
@@ -8,6 +8,7 @@
 #include <kis_debug.h>
 
 #include <exiv2/iptc.hpp>
+#include <exiv2/error.hpp>
 
 #include "kis_exiv2.h"
 
diff --git a/libs/ui/kisexiv2/kis_xmp_io.cpp b/libs/ui/kisexiv2/kis_xmp_io.cpp
index af36fcd..f7adeaf 100644
--- a/libs/ui/kisexiv2/kis_xmp_io.cpp
+++ b/libs/ui/kisexiv2/kis_xmp_io.cpp
@@ -265,7 +265,11 @@ bool KisXMPIO::loadFrom(KisMetaData::Store* store, QIODevice* ioDevice) const
                 const Exiv2::XmpArrayValue* xav = dynamic_cast<const Exiv2::XmpArrayValue*>(value.get());
                 Q_ASSERT(xav);
                 QList<KisMetaData::Value> array;
+#if EXIV2_TEST_VERSION(0,28,0)
+                for (size_t i = 0; i < xav->count(); ++i)
+#else
                 for (int i = 0; i < xav->count(); ++i) {
+#endif
                     QString value = QString::fromStdString(xav->toString(i));
                     if (parser) {
                         array.push_back(parser->parse(value));
diff --git a/libs/ui/thememanager.cpp b/libs/ui/thememanager.cpp
index 067b476..0e9b30d 100644
--- a/libs/ui/thememanager.cpp
+++ b/libs/ui/thememanager.cpp
@@ -179,7 +179,7 @@ void ThemeManager::slotChangePalette()
     qApp->setProperty("KDE_COLOR_SCHEME_PATH", filename);
     qApp->setPalette(palette);
 
-#ifdef Q_OS_MACOS
+#ifdef APPLE_STANDALONE_BUNDLE
     if (theme == "Krita bright" || theme.isEmpty()) {
         qApp->setStyle("Macintosh");
         qApp->style()->polish(qApp);
diff --git a/libs/widgetutils/KoFileDialog.cpp b/libs/widgetutils/KoFileDialog.cpp
index 70438ba..747b889 100644
--- a/libs/widgetutils/KoFileDialog.cpp
+++ b/libs/widgetutils/KoFileDialog.cpp
@@ -162,7 +162,7 @@ void KoFileDialog::createFileDialog()
 #endif
 
     bool optionDontUseNative;
-    if (!qEnvironmentVariable("APPIMAGE").isEmpty()) {
+    if (qEnvironmentVariableIsSet("APPIMAGE") && !qEnvironmentVariableIsSet("APPIMAGE")) {
         // AppImages don't have access to platform plugins. BUG: 447805
         optionDontUseNative = false;
     } else {
diff --git a/plugins/extensions/resourcemanager/dlg_bundle_manager.cpp b/plugins/extensions/resourcemanager/dlg_bundle_manager.cpp
index 6174172..1d97031 100644
--- a/plugins/extensions/resourcemanager/dlg_bundle_manager.cpp
+++ b/plugins/extensions/resourcemanager/dlg_bundle_manager.cpp
@@ -17,7 +17,9 @@
 #include <QMessageBox>
 #include <QInputDialog>
 #include <QItemSelectionModel>
+#if QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
 #include <QStringLiteral>
+#endif
 
 
 #include <kconfiggroup.h>
diff --git a/plugins/impex/gif/CMakeLists.txt b/plugins/impex/gif/CMakeLists.txt
index bb7f582..180b514 100644
--- a/plugins/impex/gif/CMakeLists.txt
+++ b/plugins/impex/gif/CMakeLists.txt
@@ -1,3 +1,5 @@
+include_directories(${GIF_INCLUDE_DIR})
+
 add_subdirectory(tests)
 
 set(kritagifexport_SOURCES
diff --git a/plugins/impex/webp/dlg_webp_import.cpp b/plugins/impex/webp/dlg_webp_import.cpp
index c951e4c..9111549 100644
--- a/plugins/impex/webp/dlg_webp_import.cpp
+++ b/plugins/impex/webp/dlg_webp_import.cpp
@@ -22,7 +22,7 @@ KisDlgWebPImport::KisDlgWebPImport()
 {
     enableButtonApply(false);
 
-    setMainWidget(m_rawWidget.get());
+    setMainWidget(m_rawWidget.data());
 
     m_rawWidget->hasAnimation->setAttribute(Qt::WA_TransparentForMouseEvents);
     m_rawWidget->hasTransparency->setAttribute(Qt::WA_TransparentForMouseEvents);
