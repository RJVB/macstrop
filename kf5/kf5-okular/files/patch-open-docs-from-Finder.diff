diff --git a/shell/CMakeLists.txt b/shell/CMakeLists.txt
index 628f74be1..0c1929c2b 100644
--- a/shell/CMakeLists.txt
+++ b/shell/CMakeLists.txt
@@ -25,6 +25,22 @@ if(TARGET KF5::Activities)
 	target_link_libraries(okular KF5::Activities)
 endif()
 
+if (APPLE)
+    # own plist template
+    set_target_properties (okular PROPERTIES MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/MacOSXBundleInfo.plist.in)
+    # the MacOSX bundle display name property (CFBundleDisplayName) is not currently supported by cmake,
+    # so has to be set for all targets in this cmake file
+    set(MACOSX_BUNDLE_DISPLAY_NAME Okular5)
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_GUI_IDENTIFIER "org.kde.Okular")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_BUNDLE_NAME "Okular5")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_DISPLAY_NAME "Okular5")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_INFO_STRING "Okular, a universal document viewer")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_LONG_VERSION_STRING "Okular ${KDE_APPLICATIONS_VERSION}")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_SHORT_VERSION_STRING "${KDE_APPLICATIONS_VERSION_MAJOR}.${KDE_APPLICATIONS_VERSION_MINOR}")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_BUNDLE_VERSION "${KDE_APPLICATIONS_VERSION}")
+    set_target_properties(okular PROPERTIES MACOSX_BUNDLE_COPYRIGHT "2002-2016 The Okular Authors")
+endif (APPLE)
+
 install(TARGETS okular ${KDE_INSTALL_TARGETS_DEFAULT_ARGS})
 
 
diff --git a/shell/MacOSXBundleInfo.plist.in b/shell/MacOSXBundleInfo.plist.in
new file mode 100644
index 000000000..b0622c67b
--- /dev/null
+++ b/shell/MacOSXBundleInfo.plist.in
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+        <key>NSPrincipalClass</key>
+        <string>NSApplication</string>
+        <key>NSHighResolutionCapable</key>
+        <string>True</string>
+        <key>CFBundleDevelopmentRegion</key>
+        <string>English</string>
+        <key>CFBundleExecutable</key>
+        <string>${MACOSX_BUNDLE_EXECUTABLE_NAME}</string>
+        <key>CFBundleGetInfoString</key>
+        <string>${MACOSX_BUNDLE_INFO_STRING}</string>
+        <key>CFBundleIconFile</key>
+        <string>${MACOSX_BUNDLE_ICON_FILE}</string>
+        <key>CFBundleIdentifier</key>
+        <string>${MACOSX_BUNDLE_GUI_IDENTIFIER}</string>
+        <key>CFBundleInfoDictionaryVersion</key>
+        <string>6.0</string>
+        <key>CFBundleLongVersionString</key>
+        <string>${MACOSX_BUNDLE_LONG_VERSION_STRING}</string>
+        <key>CFBundleName</key>
+        <string>${MACOSX_BUNDLE_BUNDLE_NAME}</string>
+        <key>CFBundlePackageType</key>
+        <string>APPL</string>
+        <key>CFBundleShortVersionString</key>
+        <string>${MACOSX_BUNDLE_SHORT_VERSION_STRING}</string>
+        <key>CFBundleSignature</key>
+        <string>????</string>
+        <key>CFBundleVersion</key>
+        <string>${MACOSX_BUNDLE_BUNDLE_VERSION}</string>
+        <key>CSResourcesFileMapped</key>
+        <true/>
+        <key>LSRequiresCarbon</key>
+        <true/>
+        <key>NSHumanReadableCopyright</key>
+        <string>${MACOSX_BUNDLE_COPYRIGHT}</string>
+        <key>LSMultipleInstancesProhibited</key>
+        <true/>
+        <key>CFBundleDocumentTypes</key>
+        <array>
+            <dict>
+                <key>CFBundleTypeExtensions</key>
+                <array>
+                        <string>*</string>
+                </array>
+                <key>CFBundleTypeName</key>
+                <string>NSStringPboardType</string>
+                <key>CFBundleTypeRole</key>
+                <string>Viewer</string>
+            </dict>
+        </array>
+</dict>
+</plist>
diff --git a/shell/shell.cpp b/shell/shell.cpp
index c1db215fb..c290e34f2 100644
--- a/shell/shell.cpp
+++ b/shell/shell.cpp
@@ -55,6 +55,8 @@
 
 #include <kio_version.h>
 
+#include <QFileOpenEvent>
+
 // local includes
 #include "../interfaces/viewerinterface.h"
 #include "kdocumentviewer.h"
@@ -143,6 +145,20 @@ Shell::Shell(const QString &serializedOptions)
         }
 
         QDBusConnection::sessionBus().registerObject(QStringLiteral("/okularshell"), this, QDBusConnection::ExportScriptableSlots);
+#ifdef Q_OS_MACOS
+        m_fileOpenOptions = serializedOptions;
+        qApp->installEventFilter(this);
+        // try to handle all pending FileOpen requests right here and now, i.e. those
+        // that were created after the Finder launched us when the user double-clicked
+        // on one or more files to be opened with Okular.
+        m_initialFileOpenRequests = true;
+        QCoreApplication::sendPostedEvents(qApp, QEvent::FileOpen);
+        QCoreApplication::processEvents();
+        // The initial requests were processed. New QFileOpenEvents after this
+        // moment will be handled via the queue.
+        m_initialFileOpenRequests = false;
+        m_fileOpenTimer = 0;
+#endif
     } else {
         m_isValid = false;
         KMessageBox::error(this, i18n("Unable to find the Okular component."));
@@ -179,6 +195,51 @@ bool Shell::eventFilter(QObject *obj, QEvent *event)
             }
         }
     }
+
+    /**
+     * handle Mac OS X file open events (only exist on OS X)
+     */
+    switch (event->type()) {
+        case QEvent::FileOpen: {
+            QFileOpenEvent *fileOpenEvent = static_cast<QFileOpenEvent*>(event);
+            if (m_initialFileOpenRequests) {
+                openNewTab(fileOpenEvent->url(), m_fileOpenOptions);
+            } else {
+                if (m_fileOpenTimer) {
+                    killTimer(m_fileOpenTimer);
+                }
+                m_fileOpenQueue.push_back(fileOpenEvent->url());
+                m_fileOpenTimer = startTimer(100);
+            }
+            return true;
+            break;
+        }
+        case QEvent::Timer: {
+            if (static_cast<QTimerEvent*>(event)->timerId() == m_fileOpenTimer) {
+                killTimer(m_fileOpenTimer);
+                m_fileOpenTimer = 0;
+                if (!m_fileOpenQueue.isEmpty()) {
+                    const QUrl newWindow(m_fileOpenQueue.takeFirst());
+                    Shell* targetShell;
+                    KParts::ReadWritePart* const part = m_tabs[m_tabWidget->currentIndex()].part;
+                    if( dynamic_cast<Okular::ViewerInterface *>(part)->openNewFilesInTabs() ) {
+                        targetShell = this;
+                    } else {
+                        targetShell = new Shell(m_fileOpenOptions);
+                        targetShell->show();
+                    }
+                    targetShell->openUrl(newWindow, m_fileOpenOptions);
+                    while (!m_fileOpenQueue.isEmpty()) {
+                        const QUrl newTab(m_fileOpenQueue.takeFirst());
+                        targetShell->openNewTab(newTab, m_fileOpenOptions);
+                    }
+                }
+                return true;
+            }
+            break;
+        }
+    }
+
     return KParts::MainWindow::eventFilter(obj, event);
 }
 
diff --git a/shell/shell.h b/shell/shell.h
index 12986dc06..16ff3ad01 100644
--- a/shell/shell.h
+++ b/shell/shell.h
@@ -190,6 +190,10 @@ private:
     KActivities::ResourceInstance *m_activityResource;
 #endif
     bool m_isValid;
+    bool m_initialFileOpenRequests;
+    QString m_fileOpenOptions;
+    int m_fileOpenTimer;
+    QList<QUrl> m_fileOpenQueue;
 };
 
 #endif
