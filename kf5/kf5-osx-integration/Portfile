# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# Copyright (c) 2015, 2016 R.J.V. Bertin

PortSystem          1.0

variant qtonly conflicts kdeonly replace_cocoa kdedialogs description {build only the Qt plugins. Don't if you have Qt5 >= 5.10} {}
variant kdeonly conflicts qtonly description {build only the KDE platform theme plugin. Use this if you have Qt5 >= 5.10} {}

name                kf5-osx-integration
license             LGPL-3

if {[variant_isset qtonly]} {
    # even in this case we probably prefer to install qt5-kde
    # if no Qt5 port is installed yet.
    set qt5.prefer_kde  1
    PortGroup       qt5 1.0
    PortGroup       cmake 1.1
    proc kf5.git.setup {first {second ""} args} {
        github.setup ${first} ${second} {*}${args}
    }
} else {
    set kf5.dont_use_xz yes
    PortGroup       kf5 1.1
}

# include the github PG after the KF5 PG!
PortGroup           github 1.0

# in case of unexpected behaviour, set QT_DEBUG_PLUGINS=1
# cf. http://doc.qt.io/qt-5/deployment-plugins.html#debugging-plugins

description         OS X platform theme plugin
long_description    This port contains an OS X adaptation of KDE's platform theme plugin \
                    which brings the KDE theme extensions to Qt5/KF5 applications on Mac. \
                    This allows them to customise their interface (widget \
                    style, fonts, colours & icons) almost just like they can on Linux/KDE desktop. \
                    The plugin also provides click-and-hold support (opens the contextmenu for \
                    select Qt widgets) and optional emulation of a Menu key. \
                    The port also provides modified versions of Qt's Cocoa platform plugin and \
                    'native' Macintosh widget style, providing among others improved support for \
                    less-common font-weights and named menu sections.
maintainers         gmail.com:rjvbertin openmaintainer
homepage            https://cgit.kde.org/osx-integration.git/

subport ${name}-devel {}

if {[variant_isset replace_cocoa]} {
    long_description-append \n \
                    With the +replace_cocoa variant, the platform theme plugin will be called \"cocoa\" \
                    and will thus load automatically instead of the regular native platform theme. This \
                    has the effect of adding the KDE theme extensions to the native theme without having\
                    to take any action to load it. The drawback is this can be undone only by uninstalling \
                    or deactivating ${subport} (instead of setting KDE_SESSION_VERSION to a value < 4).
}
long_description-append \n\
                    Be sure to read the notes (`port notes ${subport}`)!

if {${subport} eq "${name}-devel"} {
    conflicts       ${name}
    kf5.git.setup   RJVB osx-integration 36fd238bc15f6339ebf7b359c941844aa7abd01a
    fetch.type      git
    git.url         https://github.com/RJVB/osx-integration
    # master branch has Qt plugins from Qt 5.8.0
    # git.branch      c8d5bdbd9a9bdf4d80a98cf8f29f3000616b3074
    # version         5.31.38
    # qt590 branch has plugins from Qt 5.9 (follows the qtbase/5.9 branch "at a distance")
    version         5.12.90.24
    # we've adopted the plasma-integration version tagging scheme since #aed2524934c3692ffccec0642f2e981ce00da491
    # this probably makes more sense than following KF5 framework versioning "at a distance"
    # which evolves on a completely independent and much faster clock.
    epoch           2
    worksrcdir      ${name}-5
    distname        ${name}-5
} else {
    kf5.git.setup   RJVB osx-integration 36fd238bc15f6339ebf7b359c941844aa7abd01a
    version         5.12.90.24
    conflicts       ${name}-devel
    checksums       rmd160  a970fc874042ba5fb9932566099c7fd5abe0ab0f \
                    sha256  a73531c1b6c1fc5c8a0eeb510ea5902a8e75f145360efd67e6b55b05085cd706
#                     size    646274
    worksrcdir      ${name}-5
    distname        ${name}-5
}

if {![variant_isset qtonly]} {
    kf5.depends_frameworks \
                    kconfig kconfigwidgets ki18n kiconthemes \
                    kio knotifications kwidgetsaddons
    kf5.depends_run_frameworks \
                    frameworkintegration
    variant crashreporter description {link with the Plausible CrashReporter (pointless in combination with port:kf5-plasma-runtime)} {}
    if {[variant_isset crashreporter]} {
        depends_lib-append \
                    path:Library/Frameworks/CrashReporter.framework/CrashReporter:plcrashreporter
        configure.args-append \
                    -DUSE_PLCRASHREPORTER=ON
    } else {
        configure.args-append \
                    -DUSE_PLCRASHREPORTER=OFF
    }
}
if {[variant_isset kdeonly]} {
    configure.args-append \
                    -DBUILD_QT_PLUGINS=OFF
} else {
    configure.args-append \
                    -DBUILD_QT_PLUGINS=ON
}

# taken from the qt5-kde Portfile
global OSX_MINOR
set OSX_MINOR ""
# hopefully the MACOSX_DEPLOYMENT_TARGET exists and is set by now.  if
# not, last resort (which is not desirable) is to use the os.version.
if {${macosx_deployment_target} ne ""} {
    set OSX_MINOR [lindex [split ${macosx_deployment_target} "."] 1]
} else {
    set OSX_MINOR [expr ${os.major} - 4]
}

platform darwin {
    if {${configure.sdkroot} eq ""} {
        if {${OSX_MINOR} eq "9"} {
            # use the 10.10 SDK on Mac OS X 10.9
            set OSX_MINOR "10"
        }
        # default: build for the current OS version, requesting the corresponding SDK explicitly
        # (except on 10.9)
        if {[catch {exec xcrun --show-sdk-path -sdk macosx10.${OSX_MINOR}} result]} {
            ui_debug "Couldn't find preferred SDK macosx10.${OSX_MINOR}: ${result}"
            # the preferred matching SDK isn't available; check if the default SDK is
            set SDK [exec xcrun -show-sdk-version]
            if {[catch {exec xcrun --show-sdk-path -sdk macosx${SDK}} result]} {
                ui_msg "Couldn't find the preferred nor a SDK macosx${SDK}: ${result}"
            } else {
                ui_debug "Using default SDK macosx${SDK}"
                configure.sdkroot "${result}"
            }
        } else {
            ui_debug "Using SDK macosx10.${OSX_MINOR} : ${result}"
            configure.sdkroot "${result}"
        }
    }
}

if {[variant_isset qtonly]} {
    configure.args-append \
                    -DBUILD_KDE_THEME_PLUGIN=OFF
}

configure.args-append \
                    -DDEFINE_ICONTHEME_SETTINGS=ON \
                    -DPREFER_NATIVE_DIALOGS=ON \
                    -DOVERRIDE_NATIVE_THEME=OFF \
                    -DEMULATE_MENU_KEY=OFF \
                    -DHAVE_INFINALITY=OFF \
                    -DAPPLE_FORCE_X11=OFF

variant kdedialogs conflicts qtonly description {prefer KDE over native dialogs} {
    configure.args-replace \
                    -DPREFER_NATIVE_DIALOGS=ON \
                    -DPREFER_NATIVE_DIALOGS=OFF
    configure.args-append \
                    -DNEVER_NATIVE_DIALOGS=ON
}

variant replace_cocoa conflicts qtonly \
    description "let the platform plugin replace the native platform theme (see `port info ${subport} +replace_cocoa`)" {
    configure.args-replace \
                    -DOVERRIDE_NATIVE_THEME=OFF \
                    -DOVERRIDE_NATIVE_THEME=ON
}

variant menukey \
    description "the platform plugin converts the right Command+Option key combination to a context Menu key" {
    configure.args-replace \
                    -DEMULATE_MENU_KEY=OFF \
                    -DEMULATE_MENU_KEY=ON
}

variant infinality \
    description "FreeType and FontConfig have been installed with the Infinality+Ultimate patches" {
    configure.args-replace \
                    -DHAVE_INFINALITY=OFF \
                    -DHAVE_INFINALITY=ON
}
if {[file exists ${prefix}/share/fonts/fontconfig-ultimate/infinality-settings.sh]} {
    default_variants-append \
                    +infinality
}

variant x11 conflicts qtonly \
    description "Add some X11 support to the Mac style plugin" {
    depends_lib-append \
                    path:${qt_frameworks_dir}/QtX11Extras.framework/QtX11Extras:qt5-kde-x11 \
                    port:xorg-libxcb
    configure.args-replace \
                    -DAPPLE_FORCE_X11=OFF \
                    -DAPPLE_FORCE_X11=ON
}

post-destroot {
    xinstall -m 755 -d ${destroot}${prefix}/share/doc/${subport}
    xinstall -m 644 ${worksrcpath}/README.md ${destroot}${prefix}/share/doc/${subport}/
}

if {![variant_isset qtonly]} {
    default_variants +menukey +replace_cocoa

    if {![variant_isset replace_cocoa]} {
        notes-append \
"In order to use your selected \
KDE theme automatically, you need to use port:qt5-kde and set KDE_SESSION_VERSION to a \
value >=4 (launchctl setenv KDE_SESSION_VERSION 5 and equivalent in your login script).\n\
What also should work (with any Qt5 version) is to set QT_QPA_PLATFORMTHEME=kde using the same techniques."
    }
    notes-append \
"\nMany KF5 ports install a wrapper script to invoke applications installed into ${kf5.applications_dir}
easily from in a terminal session. Those scripts can load a file \"~/.kf5.env\" to set up the environment\;
a sample is provided (${filespath}/sample.kf5.env).\n\
Controlling environment variables:\n\
QT_QPA_PLATFORMTHEME_VERBOSE=1 : enable verbose mode\n\
QT_QPA_PLATFORMTHEME_CONFIG_FILE=foo : read configuration from a file named foo (= not a full path!) instead of `kdeglobals` in the standard location (~/.config).\
A sample configuration file is provided (${filespath}/sample_native.kdeglobals, to be installed as ~/.config/kdeglobals)."
    if {![variant_isset kdedialogs]} {
        notes-append \
"Start applications with PREFER_KDE_DIALOGS=1 to make them use KDE dialogs."
    }
    if {[variant_isset crashreporter]} {
        notes-append \
"\nThe platform theme plugin will leverage the Plausible CrashReporter in a basic way.\
Please note that this facility will be overridden by DrKonqi if port:kf5-plasma-runtime is installed."
    }
}

livecheck.type      none
